// This file was auto-generated by Fern from our API Definition.

package accounting

import (
	json "encoding/json"
	fmt "fmt"
	strconv "strconv"
	time "time"
)

// # The Account Object
// ### Description
// An `Account` represents a category in a company’s ledger in which a financial transaction is recorded against. The aggregation of each `Account` object is often referred to as the **Chart of Accounts**.
//
// An `Account` can be classified into one of the following categories, determined through the `classification` field:
// * __Asset:__ Accounts Receivable and Bank Accounts
// * __Liability:__ Accounts Payable and Credit Card Accounts
// * __Equity:__ Treasury Accounts and Retained Earnings
// * __Revenue:__ Income and Other Income
// * __Expense:__ Cost of Goods Sold and Office Expenses
//
// ### Usage Example
// Fetch from the `LIST Accounts` endpoint and view a company's accounts.
type Account struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The account's name.
	Name *string `json:"name,omitempty"`
	// The account's description.
	Description *string `json:"description,omitempty"`
	// The account's broadest grouping.
	//
	// * `ASSET` - ASSET
	// * `EQUITY` - EQUITY
	// * `EXPENSE` - EXPENSE
	// * `LIABILITY` - LIABILITY
	// * `REVENUE` - REVENUE
	Classification *AccountClassification `json:"classification,omitempty"`
	// The account's type is a narrower and more specific grouping within the account's classification.
	Type *string `json:"type,omitempty"`
	// The account's status.
	//
	// * `ACTIVE` - ACTIVE
	// * `PENDING` - PENDING
	// * `INACTIVE` - INACTIVE
	Status *AccountStatus `json:"status,omitempty"`
	// The account's current balance.
	CurrentBalance *float64 `json:"current_balance,omitempty"`
	// The account's currency.
	//
	// * `XUA` - ADB Unit of Account
	// * `AFN` - Afghan Afghani
	// * `AFA` - Afghan Afghani (1927–2002)
	// * `ALL` - Albanian Lek
	// * `ALK` - Albanian Lek (1946–1965)
	// * `DZD` - Algerian Dinar
	// * `ADP` - Andorran Peseta
	// * `AOA` - Angolan Kwanza
	// * `AOK` - Angolan Kwanza (1977–1991)
	// * `AON` - Angolan New Kwanza (1990–2000)
	// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
	// * `ARA` - Argentine Austral
	// * `ARS` - Argentine Peso
	// * `ARM` - Argentine Peso (1881–1970)
	// * `ARP` - Argentine Peso (1983–1985)
	// * `ARL` - Argentine Peso Ley (1970–1983)
	// * `AMD` - Armenian Dram
	// * `AWG` - Aruban Florin
	// * `AUD` - Australian Dollar
	// * `ATS` - Austrian Schilling
	// * `AZN` - Azerbaijani Manat
	// * `AZM` - Azerbaijani Manat (1993–2006)
	// * `BSD` - Bahamian Dollar
	// * `BHD` - Bahraini Dinar
	// * `BDT` - Bangladeshi Taka
	// * `BBD` - Barbadian Dollar
	// * `BYN` - Belarusian Ruble
	// * `BYB` - Belarusian Ruble (1994–1999)
	// * `BYR` - Belarusian Ruble (2000–2016)
	// * `BEF` - Belgian Franc
	// * `BEC` - Belgian Franc (convertible)
	// * `BEL` - Belgian Franc (financial)
	// * `BZD` - Belize Dollar
	// * `BMD` - Bermudan Dollar
	// * `BTN` - Bhutanese Ngultrum
	// * `BOB` - Bolivian Boliviano
	// * `BOL` - Bolivian Boliviano (1863–1963)
	// * `BOV` - Bolivian Mvdol
	// * `BOP` - Bolivian Peso
	// * `BAM` - Bosnia-Herzegovina Convertible Mark
	// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
	// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
	// * `BWP` - Botswanan Pula
	// * `BRC` - Brazilian Cruzado (1986–1989)
	// * `BRZ` - Brazilian Cruzeiro (1942–1967)
	// * `BRE` - Brazilian Cruzeiro (1990–1993)
	// * `BRR` - Brazilian Cruzeiro (1993–1994)
	// * `BRN` - Brazilian New Cruzado (1989–1990)
	// * `BRB` - Brazilian New Cruzeiro (1967–1986)
	// * `BRL` - Brazilian Real
	// * `GBP` - British Pound
	// * `BND` - Brunei Dollar
	// * `BGL` - Bulgarian Hard Lev
	// * `BGN` - Bulgarian Lev
	// * `BGO` - Bulgarian Lev (1879–1952)
	// * `BGM` - Bulgarian Socialist Lev
	// * `BUK` - Burmese Kyat
	// * `BIF` - Burundian Franc
	// * `XPF` - CFP Franc
	// * `KHR` - Cambodian Riel
	// * `CAD` - Canadian Dollar
	// * `CVE` - Cape Verdean Escudo
	// * `KYD` - Cayman Islands Dollar
	// * `XAF` - Central African CFA Franc
	// * `CLE` - Chilean Escudo
	// * `CLP` - Chilean Peso
	// * `CLF` - Chilean Unit of Account (UF)
	// * `CNX` - Chinese People’s Bank Dollar
	// * `CNY` - Chinese Yuan
	// * `CNH` - Chinese Yuan (offshore)
	// * `COP` - Colombian Peso
	// * `COU` - Colombian Real Value Unit
	// * `KMF` - Comorian Franc
	// * `CDF` - Congolese Franc
	// * `CRC` - Costa Rican Colón
	// * `HRD` - Croatian Dinar
	// * `HRK` - Croatian Kuna
	// * `CUC` - Cuban Convertible Peso
	// * `CUP` - Cuban Peso
	// * `CYP` - Cypriot Pound
	// * `CZK` - Czech Koruna
	// * `CSK` - Czechoslovak Hard Koruna
	// * `DKK` - Danish Krone
	// * `DJF` - Djiboutian Franc
	// * `DOP` - Dominican Peso
	// * `NLG` - Dutch Guilder
	// * `XCD` - East Caribbean Dollar
	// * `DDM` - East German Mark
	// * `ECS` - Ecuadorian Sucre
	// * `ECV` - Ecuadorian Unit of Constant Value
	// * `EGP` - Egyptian Pound
	// * `GQE` - Equatorial Guinean Ekwele
	// * `ERN` - Eritrean Nakfa
	// * `EEK` - Estonian Kroon
	// * `ETB` - Ethiopian Birr
	// * `EUR` - Euro
	// * `XBA` - European Composite Unit
	// * `XEU` - European Currency Unit
	// * `XBB` - European Monetary Unit
	// * `XBC` - European Unit of Account (XBC)
	// * `XBD` - European Unit of Account (XBD)
	// * `FKP` - Falkland Islands Pound
	// * `FJD` - Fijian Dollar
	// * `FIM` - Finnish Markka
	// * `FRF` - French Franc
	// * `XFO` - French Gold Franc
	// * `XFU` - French UIC-Franc
	// * `GMD` - Gambian Dalasi
	// * `GEK` - Georgian Kupon Larit
	// * `GEL` - Georgian Lari
	// * `DEM` - German Mark
	// * `GHS` - Ghanaian Cedi
	// * `GHC` - Ghanaian Cedi (1979–2007)
	// * `GIP` - Gibraltar Pound
	// * `XAU` - Gold
	// * `GRD` - Greek Drachma
	// * `GTQ` - Guatemalan Quetzal
	// * `GWP` - Guinea-Bissau Peso
	// * `GNF` - Guinean Franc
	// * `GNS` - Guinean Syli
	// * `GYD` - Guyanaese Dollar
	// * `HTG` - Haitian Gourde
	// * `HNL` - Honduran Lempira
	// * `HKD` - Hong Kong Dollar
	// * `HUF` - Hungarian Forint
	// * `IMP` - IMP
	// * `ISK` - Icelandic Króna
	// * `ISJ` - Icelandic Króna (1918–1981)
	// * `INR` - Indian Rupee
	// * `IDR` - Indonesian Rupiah
	// * `IRR` - Iranian Rial
	// * `IQD` - Iraqi Dinar
	// * `IEP` - Irish Pound
	// * `ILS` - Israeli New Shekel
	// * `ILP` - Israeli Pound
	// * `ILR` - Israeli Shekel (1980–1985)
	// * `ITL` - Italian Lira
	// * `JMD` - Jamaican Dollar
	// * `JPY` - Japanese Yen
	// * `JOD` - Jordanian Dinar
	// * `KZT` - Kazakhstani Tenge
	// * `KES` - Kenyan Shilling
	// * `KWD` - Kuwaiti Dinar
	// * `KGS` - Kyrgystani Som
	// * `LAK` - Laotian Kip
	// * `LVL` - Latvian Lats
	// * `LVR` - Latvian Ruble
	// * `LBP` - Lebanese Pound
	// * `LSL` - Lesotho Loti
	// * `LRD` - Liberian Dollar
	// * `LYD` - Libyan Dinar
	// * `LTL` - Lithuanian Litas
	// * `LTT` - Lithuanian Talonas
	// * `LUL` - Luxembourg Financial Franc
	// * `LUC` - Luxembourgian Convertible Franc
	// * `LUF` - Luxembourgian Franc
	// * `MOP` - Macanese Pataca
	// * `MKD` - Macedonian Denar
	// * `MKN` - Macedonian Denar (1992–1993)
	// * `MGA` - Malagasy Ariary
	// * `MGF` - Malagasy Franc
	// * `MWK` - Malawian Kwacha
	// * `MYR` - Malaysian Ringgit
	// * `MVR` - Maldivian Rufiyaa
	// * `MVP` - Maldivian Rupee (1947–1981)
	// * `MLF` - Malian Franc
	// * `MTL` - Maltese Lira
	// * `MTP` - Maltese Pound
	// * `MRU` - Mauritanian Ouguiya
	// * `MRO` - Mauritanian Ouguiya (1973–2017)
	// * `MUR` - Mauritian Rupee
	// * `MXV` - Mexican Investment Unit
	// * `MXN` - Mexican Peso
	// * `MXP` - Mexican Silver Peso (1861–1992)
	// * `MDC` - Moldovan Cupon
	// * `MDL` - Moldovan Leu
	// * `MCF` - Monegasque Franc
	// * `MNT` - Mongolian Tugrik
	// * `MAD` - Moroccan Dirham
	// * `MAF` - Moroccan Franc
	// * `MZE` - Mozambican Escudo
	// * `MZN` - Mozambican Metical
	// * `MZM` - Mozambican Metical (1980–2006)
	// * `MMK` - Myanmar Kyat
	// * `NAD` - Namibian Dollar
	// * `NPR` - Nepalese Rupee
	// * `ANG` - Netherlands Antillean Guilder
	// * `TWD` - New Taiwan Dollar
	// * `NZD` - New Zealand Dollar
	// * `NIO` - Nicaraguan Córdoba
	// * `NIC` - Nicaraguan Córdoba (1988–1991)
	// * `NGN` - Nigerian Naira
	// * `KPW` - North Korean Won
	// * `NOK` - Norwegian Krone
	// * `OMR` - Omani Rial
	// * `PKR` - Pakistani Rupee
	// * `XPD` - Palladium
	// * `PAB` - Panamanian Balboa
	// * `PGK` - Papua New Guinean Kina
	// * `PYG` - Paraguayan Guarani
	// * `PEI` - Peruvian Inti
	// * `PEN` - Peruvian Sol
	// * `PES` - Peruvian Sol (1863–1965)
	// * `PHP` - Philippine Peso
	// * `XPT` - Platinum
	// * `PLN` - Polish Zloty
	// * `PLZ` - Polish Zloty (1950–1995)
	// * `PTE` - Portuguese Escudo
	// * `GWE` - Portuguese Guinea Escudo
	// * `QAR` - Qatari Rial
	// * `XRE` - RINET Funds
	// * `RHD` - Rhodesian Dollar
	// * `RON` - Romanian Leu
	// * `ROL` - Romanian Leu (1952–2006)
	// * `RUB` - Russian Ruble
	// * `RUR` - Russian Ruble (1991–1998)
	// * `RWF` - Rwandan Franc
	// * `SVC` - Salvadoran Colón
	// * `WST` - Samoan Tala
	// * `SAR` - Saudi Riyal
	// * `RSD` - Serbian Dinar
	// * `CSD` - Serbian Dinar (2002–2006)
	// * `SCR` - Seychellois Rupee
	// * `SLL` - Sierra Leonean Leone
	// * `XAG` - Silver
	// * `SGD` - Singapore Dollar
	// * `SKK` - Slovak Koruna
	// * `SIT` - Slovenian Tolar
	// * `SBD` - Solomon Islands Dollar
	// * `SOS` - Somali Shilling
	// * `ZAR` - South African Rand
	// * `ZAL` - South African Rand (financial)
	// * `KRH` - South Korean Hwan (1953–1962)
	// * `KRW` - South Korean Won
	// * `KRO` - South Korean Won (1945–1953)
	// * `SSP` - South Sudanese Pound
	// * `SUR` - Soviet Rouble
	// * `ESP` - Spanish Peseta
	// * `ESA` - Spanish Peseta (A account)
	// * `ESB` - Spanish Peseta (convertible account)
	// * `XDR` - Special Drawing Rights
	// * `LKR` - Sri Lankan Rupee
	// * `SHP` - St. Helena Pound
	// * `XSU` - Sucre
	// * `SDD` - Sudanese Dinar (1992–2007)
	// * `SDG` - Sudanese Pound
	// * `SDP` - Sudanese Pound (1957–1998)
	// * `SRD` - Surinamese Dollar
	// * `SRG` - Surinamese Guilder
	// * `SZL` - Swazi Lilangeni
	// * `SEK` - Swedish Krona
	// * `CHF` - Swiss Franc
	// * `SYP` - Syrian Pound
	// * `STN` - São Tomé & Príncipe Dobra
	// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
	// * `TVD` - TVD
	// * `TJR` - Tajikistani Ruble
	// * `TJS` - Tajikistani Somoni
	// * `TZS` - Tanzanian Shilling
	// * `XTS` - Testing Currency Code
	// * `THB` - Thai Baht
	// * `XXX` - The codes assigned for transactions where no currency is involved
	// * `TPE` - Timorese Escudo
	// * `TOP` - Tongan Paʻanga
	// * `TTD` - Trinidad & Tobago Dollar
	// * `TND` - Tunisian Dinar
	// * `TRY` - Turkish Lira
	// * `TRL` - Turkish Lira (1922–2005)
	// * `TMT` - Turkmenistani Manat
	// * `TMM` - Turkmenistani Manat (1993–2009)
	// * `USD` - US Dollar
	// * `USN` - US Dollar (Next day)
	// * `USS` - US Dollar (Same day)
	// * `UGX` - Ugandan Shilling
	// * `UGS` - Ugandan Shilling (1966–1987)
	// * `UAH` - Ukrainian Hryvnia
	// * `UAK` - Ukrainian Karbovanets
	// * `AED` - United Arab Emirates Dirham
	// * `UYW` - Uruguayan Nominal Wage Index Unit
	// * `UYU` - Uruguayan Peso
	// * `UYP` - Uruguayan Peso (1975–1993)
	// * `UYI` - Uruguayan Peso (Indexed Units)
	// * `UZS` - Uzbekistani Som
	// * `VUV` - Vanuatu Vatu
	// * `VES` - Venezuelan Bolívar
	// * `VEB` - Venezuelan Bolívar (1871–2008)
	// * `VEF` - Venezuelan Bolívar (2008–2018)
	// * `VND` - Vietnamese Dong
	// * `VNN` - Vietnamese Dong (1978–1985)
	// * `CHE` - WIR Euro
	// * `CHW` - WIR Franc
	// * `XOF` - West African CFA Franc
	// * `YDD` - Yemeni Dinar
	// * `YER` - Yemeni Rial
	// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
	// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
	// * `YUM` - Yugoslavian New Dinar (1994–2002)
	// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
	// * `ZWN` - ZWN
	// * `ZRN` - Zairean New Zaire (1993–1998)
	// * `ZRZ` - Zairean Zaire (1971–1993)
	// * `ZMW` - Zambian Kwacha
	// * `ZMK` - Zambian Kwacha (1968–2012)
	// * `ZWD` - Zimbabwean Dollar (1980–2008)
	// * `ZWR` - Zimbabwean Dollar (2008)
	// * `ZWL` - Zimbabwean Dollar (2009)
	Currency *AccountCurrency `json:"currency,omitempty"`
	// The account's number.
	AccountNumber *string `json:"account_number,omitempty"`
	// ID of the parent account.
	ParentAccount *string `json:"parent_account,omitempty"`
	// The company the account belongs to.
	Company *string `json:"company,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted *bool      `json:"remote_was_deleted,omitempty"`
	CreatedAt        *time.Time `json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt    *time.Time     `json:"modified_at,omitempty"`
	FieldMappings map[string]any `json:"field_mappings,omitempty"`
	RemoteData    []*RemoteData  `json:"remote_data,omitempty"`
}

// The account's broadest grouping.
//
// * `ASSET` - ASSET
// * `EQUITY` - EQUITY
// * `EXPENSE` - EXPENSE
// * `LIABILITY` - LIABILITY
// * `REVENUE` - REVENUE
type AccountClassification struct {
	typeName           string
	ClassificationEnum ClassificationEnum
	String             string
}

func NewAccountClassificationFromClassificationEnum(value ClassificationEnum) *AccountClassification {
	return &AccountClassification{typeName: "classificationEnum", ClassificationEnum: value}
}

func NewAccountClassificationFromString(value string) *AccountClassification {
	return &AccountClassification{typeName: "string", String: value}
}

func (a *AccountClassification) UnmarshalJSON(data []byte) error {
	var valueClassificationEnum ClassificationEnum
	if err := json.Unmarshal(data, &valueClassificationEnum); err == nil {
		a.typeName = "classificationEnum"
		a.ClassificationEnum = valueClassificationEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AccountClassification) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "classificationEnum":
		return json.Marshal(a.ClassificationEnum)
	case "string":
		return json.Marshal(a.String)
	}
}

type AccountClassificationVisitor interface {
	VisitClassificationEnum(ClassificationEnum) error
	VisitString(string) error
}

func (a *AccountClassification) Accept(visitor AccountClassificationVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "classificationEnum":
		return visitor.VisitClassificationEnum(a.ClassificationEnum)
	case "string":
		return visitor.VisitString(a.String)
	}
}

// The account's currency.
//
// * `XUA` - ADB Unit of Account
// * `AFN` - Afghan Afghani
// * `AFA` - Afghan Afghani (1927–2002)
// * `ALL` - Albanian Lek
// * `ALK` - Albanian Lek (1946–1965)
// * `DZD` - Algerian Dinar
// * `ADP` - Andorran Peseta
// * `AOA` - Angolan Kwanza
// * `AOK` - Angolan Kwanza (1977–1991)
// * `AON` - Angolan New Kwanza (1990–2000)
// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
// * `ARA` - Argentine Austral
// * `ARS` - Argentine Peso
// * `ARM` - Argentine Peso (1881–1970)
// * `ARP` - Argentine Peso (1983–1985)
// * `ARL` - Argentine Peso Ley (1970–1983)
// * `AMD` - Armenian Dram
// * `AWG` - Aruban Florin
// * `AUD` - Australian Dollar
// * `ATS` - Austrian Schilling
// * `AZN` - Azerbaijani Manat
// * `AZM` - Azerbaijani Manat (1993–2006)
// * `BSD` - Bahamian Dollar
// * `BHD` - Bahraini Dinar
// * `BDT` - Bangladeshi Taka
// * `BBD` - Barbadian Dollar
// * `BYN` - Belarusian Ruble
// * `BYB` - Belarusian Ruble (1994–1999)
// * `BYR` - Belarusian Ruble (2000–2016)
// * `BEF` - Belgian Franc
// * `BEC` - Belgian Franc (convertible)
// * `BEL` - Belgian Franc (financial)
// * `BZD` - Belize Dollar
// * `BMD` - Bermudan Dollar
// * `BTN` - Bhutanese Ngultrum
// * `BOB` - Bolivian Boliviano
// * `BOL` - Bolivian Boliviano (1863–1963)
// * `BOV` - Bolivian Mvdol
// * `BOP` - Bolivian Peso
// * `BAM` - Bosnia-Herzegovina Convertible Mark
// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
// * `BWP` - Botswanan Pula
// * `BRC` - Brazilian Cruzado (1986–1989)
// * `BRZ` - Brazilian Cruzeiro (1942–1967)
// * `BRE` - Brazilian Cruzeiro (1990–1993)
// * `BRR` - Brazilian Cruzeiro (1993–1994)
// * `BRN` - Brazilian New Cruzado (1989–1990)
// * `BRB` - Brazilian New Cruzeiro (1967–1986)
// * `BRL` - Brazilian Real
// * `GBP` - British Pound
// * `BND` - Brunei Dollar
// * `BGL` - Bulgarian Hard Lev
// * `BGN` - Bulgarian Lev
// * `BGO` - Bulgarian Lev (1879–1952)
// * `BGM` - Bulgarian Socialist Lev
// * `BUK` - Burmese Kyat
// * `BIF` - Burundian Franc
// * `XPF` - CFP Franc
// * `KHR` - Cambodian Riel
// * `CAD` - Canadian Dollar
// * `CVE` - Cape Verdean Escudo
// * `KYD` - Cayman Islands Dollar
// * `XAF` - Central African CFA Franc
// * `CLE` - Chilean Escudo
// * `CLP` - Chilean Peso
// * `CLF` - Chilean Unit of Account (UF)
// * `CNX` - Chinese People’s Bank Dollar
// * `CNY` - Chinese Yuan
// * `CNH` - Chinese Yuan (offshore)
// * `COP` - Colombian Peso
// * `COU` - Colombian Real Value Unit
// * `KMF` - Comorian Franc
// * `CDF` - Congolese Franc
// * `CRC` - Costa Rican Colón
// * `HRD` - Croatian Dinar
// * `HRK` - Croatian Kuna
// * `CUC` - Cuban Convertible Peso
// * `CUP` - Cuban Peso
// * `CYP` - Cypriot Pound
// * `CZK` - Czech Koruna
// * `CSK` - Czechoslovak Hard Koruna
// * `DKK` - Danish Krone
// * `DJF` - Djiboutian Franc
// * `DOP` - Dominican Peso
// * `NLG` - Dutch Guilder
// * `XCD` - East Caribbean Dollar
// * `DDM` - East German Mark
// * `ECS` - Ecuadorian Sucre
// * `ECV` - Ecuadorian Unit of Constant Value
// * `EGP` - Egyptian Pound
// * `GQE` - Equatorial Guinean Ekwele
// * `ERN` - Eritrean Nakfa
// * `EEK` - Estonian Kroon
// * `ETB` - Ethiopian Birr
// * `EUR` - Euro
// * `XBA` - European Composite Unit
// * `XEU` - European Currency Unit
// * `XBB` - European Monetary Unit
// * `XBC` - European Unit of Account (XBC)
// * `XBD` - European Unit of Account (XBD)
// * `FKP` - Falkland Islands Pound
// * `FJD` - Fijian Dollar
// * `FIM` - Finnish Markka
// * `FRF` - French Franc
// * `XFO` - French Gold Franc
// * `XFU` - French UIC-Franc
// * `GMD` - Gambian Dalasi
// * `GEK` - Georgian Kupon Larit
// * `GEL` - Georgian Lari
// * `DEM` - German Mark
// * `GHS` - Ghanaian Cedi
// * `GHC` - Ghanaian Cedi (1979–2007)
// * `GIP` - Gibraltar Pound
// * `XAU` - Gold
// * `GRD` - Greek Drachma
// * `GTQ` - Guatemalan Quetzal
// * `GWP` - Guinea-Bissau Peso
// * `GNF` - Guinean Franc
// * `GNS` - Guinean Syli
// * `GYD` - Guyanaese Dollar
// * `HTG` - Haitian Gourde
// * `HNL` - Honduran Lempira
// * `HKD` - Hong Kong Dollar
// * `HUF` - Hungarian Forint
// * `IMP` - IMP
// * `ISK` - Icelandic Króna
// * `ISJ` - Icelandic Króna (1918–1981)
// * `INR` - Indian Rupee
// * `IDR` - Indonesian Rupiah
// * `IRR` - Iranian Rial
// * `IQD` - Iraqi Dinar
// * `IEP` - Irish Pound
// * `ILS` - Israeli New Shekel
// * `ILP` - Israeli Pound
// * `ILR` - Israeli Shekel (1980–1985)
// * `ITL` - Italian Lira
// * `JMD` - Jamaican Dollar
// * `JPY` - Japanese Yen
// * `JOD` - Jordanian Dinar
// * `KZT` - Kazakhstani Tenge
// * `KES` - Kenyan Shilling
// * `KWD` - Kuwaiti Dinar
// * `KGS` - Kyrgystani Som
// * `LAK` - Laotian Kip
// * `LVL` - Latvian Lats
// * `LVR` - Latvian Ruble
// * `LBP` - Lebanese Pound
// * `LSL` - Lesotho Loti
// * `LRD` - Liberian Dollar
// * `LYD` - Libyan Dinar
// * `LTL` - Lithuanian Litas
// * `LTT` - Lithuanian Talonas
// * `LUL` - Luxembourg Financial Franc
// * `LUC` - Luxembourgian Convertible Franc
// * `LUF` - Luxembourgian Franc
// * `MOP` - Macanese Pataca
// * `MKD` - Macedonian Denar
// * `MKN` - Macedonian Denar (1992–1993)
// * `MGA` - Malagasy Ariary
// * `MGF` - Malagasy Franc
// * `MWK` - Malawian Kwacha
// * `MYR` - Malaysian Ringgit
// * `MVR` - Maldivian Rufiyaa
// * `MVP` - Maldivian Rupee (1947–1981)
// * `MLF` - Malian Franc
// * `MTL` - Maltese Lira
// * `MTP` - Maltese Pound
// * `MRU` - Mauritanian Ouguiya
// * `MRO` - Mauritanian Ouguiya (1973–2017)
// * `MUR` - Mauritian Rupee
// * `MXV` - Mexican Investment Unit
// * `MXN` - Mexican Peso
// * `MXP` - Mexican Silver Peso (1861–1992)
// * `MDC` - Moldovan Cupon
// * `MDL` - Moldovan Leu
// * `MCF` - Monegasque Franc
// * `MNT` - Mongolian Tugrik
// * `MAD` - Moroccan Dirham
// * `MAF` - Moroccan Franc
// * `MZE` - Mozambican Escudo
// * `MZN` - Mozambican Metical
// * `MZM` - Mozambican Metical (1980–2006)
// * `MMK` - Myanmar Kyat
// * `NAD` - Namibian Dollar
// * `NPR` - Nepalese Rupee
// * `ANG` - Netherlands Antillean Guilder
// * `TWD` - New Taiwan Dollar
// * `NZD` - New Zealand Dollar
// * `NIO` - Nicaraguan Córdoba
// * `NIC` - Nicaraguan Córdoba (1988–1991)
// * `NGN` - Nigerian Naira
// * `KPW` - North Korean Won
// * `NOK` - Norwegian Krone
// * `OMR` - Omani Rial
// * `PKR` - Pakistani Rupee
// * `XPD` - Palladium
// * `PAB` - Panamanian Balboa
// * `PGK` - Papua New Guinean Kina
// * `PYG` - Paraguayan Guarani
// * `PEI` - Peruvian Inti
// * `PEN` - Peruvian Sol
// * `PES` - Peruvian Sol (1863–1965)
// * `PHP` - Philippine Peso
// * `XPT` - Platinum
// * `PLN` - Polish Zloty
// * `PLZ` - Polish Zloty (1950–1995)
// * `PTE` - Portuguese Escudo
// * `GWE` - Portuguese Guinea Escudo
// * `QAR` - Qatari Rial
// * `XRE` - RINET Funds
// * `RHD` - Rhodesian Dollar
// * `RON` - Romanian Leu
// * `ROL` - Romanian Leu (1952–2006)
// * `RUB` - Russian Ruble
// * `RUR` - Russian Ruble (1991–1998)
// * `RWF` - Rwandan Franc
// * `SVC` - Salvadoran Colón
// * `WST` - Samoan Tala
// * `SAR` - Saudi Riyal
// * `RSD` - Serbian Dinar
// * `CSD` - Serbian Dinar (2002–2006)
// * `SCR` - Seychellois Rupee
// * `SLL` - Sierra Leonean Leone
// * `XAG` - Silver
// * `SGD` - Singapore Dollar
// * `SKK` - Slovak Koruna
// * `SIT` - Slovenian Tolar
// * `SBD` - Solomon Islands Dollar
// * `SOS` - Somali Shilling
// * `ZAR` - South African Rand
// * `ZAL` - South African Rand (financial)
// * `KRH` - South Korean Hwan (1953–1962)
// * `KRW` - South Korean Won
// * `KRO` - South Korean Won (1945–1953)
// * `SSP` - South Sudanese Pound
// * `SUR` - Soviet Rouble
// * `ESP` - Spanish Peseta
// * `ESA` - Spanish Peseta (A account)
// * `ESB` - Spanish Peseta (convertible account)
// * `XDR` - Special Drawing Rights
// * `LKR` - Sri Lankan Rupee
// * `SHP` - St. Helena Pound
// * `XSU` - Sucre
// * `SDD` - Sudanese Dinar (1992–2007)
// * `SDG` - Sudanese Pound
// * `SDP` - Sudanese Pound (1957–1998)
// * `SRD` - Surinamese Dollar
// * `SRG` - Surinamese Guilder
// * `SZL` - Swazi Lilangeni
// * `SEK` - Swedish Krona
// * `CHF` - Swiss Franc
// * `SYP` - Syrian Pound
// * `STN` - São Tomé & Príncipe Dobra
// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
// * `TVD` - TVD
// * `TJR` - Tajikistani Ruble
// * `TJS` - Tajikistani Somoni
// * `TZS` - Tanzanian Shilling
// * `XTS` - Testing Currency Code
// * `THB` - Thai Baht
// * `XXX` - The codes assigned for transactions where no currency is involved
// * `TPE` - Timorese Escudo
// * `TOP` - Tongan Paʻanga
// * `TTD` - Trinidad & Tobago Dollar
// * `TND` - Tunisian Dinar
// * `TRY` - Turkish Lira
// * `TRL` - Turkish Lira (1922–2005)
// * `TMT` - Turkmenistani Manat
// * `TMM` - Turkmenistani Manat (1993–2009)
// * `USD` - US Dollar
// * `USN` - US Dollar (Next day)
// * `USS` - US Dollar (Same day)
// * `UGX` - Ugandan Shilling
// * `UGS` - Ugandan Shilling (1966–1987)
// * `UAH` - Ukrainian Hryvnia
// * `UAK` - Ukrainian Karbovanets
// * `AED` - United Arab Emirates Dirham
// * `UYW` - Uruguayan Nominal Wage Index Unit
// * `UYU` - Uruguayan Peso
// * `UYP` - Uruguayan Peso (1975–1993)
// * `UYI` - Uruguayan Peso (Indexed Units)
// * `UZS` - Uzbekistani Som
// * `VUV` - Vanuatu Vatu
// * `VES` - Venezuelan Bolívar
// * `VEB` - Venezuelan Bolívar (1871–2008)
// * `VEF` - Venezuelan Bolívar (2008–2018)
// * `VND` - Vietnamese Dong
// * `VNN` - Vietnamese Dong (1978–1985)
// * `CHE` - WIR Euro
// * `CHW` - WIR Franc
// * `XOF` - West African CFA Franc
// * `YDD` - Yemeni Dinar
// * `YER` - Yemeni Rial
// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
// * `YUM` - Yugoslavian New Dinar (1994–2002)
// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
// * `ZWN` - ZWN
// * `ZRN` - Zairean New Zaire (1993–1998)
// * `ZRZ` - Zairean Zaire (1971–1993)
// * `ZMW` - Zambian Kwacha
// * `ZMK` - Zambian Kwacha (1968–2012)
// * `ZWD` - Zimbabwean Dollar (1980–2008)
// * `ZWR` - Zimbabwean Dollar (2008)
// * `ZWL` - Zimbabwean Dollar (2009)
type AccountCurrency struct {
	typeName     string
	CurrencyEnum CurrencyEnum
	String       string
}

func NewAccountCurrencyFromCurrencyEnum(value CurrencyEnum) *AccountCurrency {
	return &AccountCurrency{typeName: "currencyEnum", CurrencyEnum: value}
}

func NewAccountCurrencyFromString(value string) *AccountCurrency {
	return &AccountCurrency{typeName: "string", String: value}
}

func (a *AccountCurrency) UnmarshalJSON(data []byte) error {
	var valueCurrencyEnum CurrencyEnum
	if err := json.Unmarshal(data, &valueCurrencyEnum); err == nil {
		a.typeName = "currencyEnum"
		a.CurrencyEnum = valueCurrencyEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AccountCurrency) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "currencyEnum":
		return json.Marshal(a.CurrencyEnum)
	case "string":
		return json.Marshal(a.String)
	}
}

type AccountCurrencyVisitor interface {
	VisitCurrencyEnum(CurrencyEnum) error
	VisitString(string) error
}

func (a *AccountCurrency) Accept(visitor AccountCurrencyVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "currencyEnum":
		return visitor.VisitCurrencyEnum(a.CurrencyEnum)
	case "string":
		return visitor.VisitString(a.String)
	}
}

type AccountDetails struct {
	Id                      *string       `json:"id,omitempty"`
	Integration             *string       `json:"integration,omitempty"`
	IntegrationSlug         *string       `json:"integration_slug,omitempty"`
	Category                *CategoryEnum `json:"category,omitempty"`
	EndUserOriginId         *string       `json:"end_user_origin_id,omitempty"`
	EndUserOrganizationName *string       `json:"end_user_organization_name,omitempty"`
	EndUserEmailAddress     *string       `json:"end_user_email_address,omitempty"`
	Status                  *string       `json:"status,omitempty"`
	WebhookListenerUrl      *string       `json:"webhook_listener_url,omitempty"`
	// Whether a Production Linked Account's credentials match another existing Production Linked Account. This field is `null` for Test Linked Accounts, incomplete Production Linked Accounts, and ignored duplicate Production Linked Account sets.
	IsDuplicate *bool   `json:"is_duplicate,omitempty"`
	AccountType *string `json:"account_type,omitempty"`
}

// # The LinkedAccount Object
// ### Description
// The `LinkedAccount` object is used to represent an end user's link with a specific integration.
//
// ### Usage Example
// View a list of your organization's `LinkedAccount` objects.
type AccountDetailsAndActions struct {
	Id                      string                             `json:"id"`
	Category                *CategoryEnum                      `json:"category,omitempty"`
	Status                  AccountDetailsAndActionsStatusEnum `json:"status,omitempty"`
	StatusDetail            *string                            `json:"status_detail,omitempty"`
	EndUserOriginId         *string                            `json:"end_user_origin_id,omitempty"`
	EndUserOrganizationName string                             `json:"end_user_organization_name"`
	EndUserEmailAddress     string                             `json:"end_user_email_address"`
	WebhookListenerUrl      string                             `json:"webhook_listener_url"`
	// Whether a Production Linked Account's credentials match another existing Production Linked Account. This field is `null` for Test Linked Accounts, incomplete Production Linked Accounts, and ignored duplicate Production Linked Account sets.
	IsDuplicate *bool                                `json:"is_duplicate,omitempty"`
	Integration *AccountDetailsAndActionsIntegration `json:"integration,omitempty"`
	AccountType string                               `json:"account_type"`
}

type AccountDetailsAndActionsIntegration struct {
	Name                     string            `json:"name"`
	Categories               []CategoriesEnum  `json:"categories,omitempty"`
	Image                    *string           `json:"image,omitempty"`
	SquareImage              *string           `json:"square_image,omitempty"`
	Color                    string            `json:"color"`
	Slug                     string            `json:"slug"`
	PassthroughAvailable     bool              `json:"passthrough_available"`
	AvailableModelOperations []*ModelOperation `json:"available_model_operations,omitempty"`
}

// * `COMPLETE` - COMPLETE
// * `INCOMPLETE` - INCOMPLETE
// * `RELINK_NEEDED` - RELINK_NEEDED
type AccountDetailsAndActionsStatusEnum uint

const (
	AccountDetailsAndActionsStatusEnumComplete AccountDetailsAndActionsStatusEnum = iota + 1
	AccountDetailsAndActionsStatusEnumIncomplete
	AccountDetailsAndActionsStatusEnumRelinkNeeded
)

func (a AccountDetailsAndActionsStatusEnum) String() string {
	switch a {
	default:
		return strconv.Itoa(int(a))
	case AccountDetailsAndActionsStatusEnumComplete:
		return "COMPLETE"
	case AccountDetailsAndActionsStatusEnumIncomplete:
		return "INCOMPLETE"
	case AccountDetailsAndActionsStatusEnumRelinkNeeded:
		return "RELINK_NEEDED"
	}
}

func (a AccountDetailsAndActionsStatusEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", a.String())), nil
}

func (a *AccountDetailsAndActionsStatusEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "COMPLETE":
		value := AccountDetailsAndActionsStatusEnumComplete
		*a = value
	case "INCOMPLETE":
		value := AccountDetailsAndActionsStatusEnumIncomplete
		*a = value
	case "RELINK_NEEDED":
		value := AccountDetailsAndActionsStatusEnumRelinkNeeded
		*a = value
	}
	return nil
}

type AccountIntegration struct {
	// Company name.
	Name string `json:"name"`
	// Category or categories this integration belongs to. Multiple categories should be comma separated, i.e. [ats, hris].
	Categories []CategoriesEnum `json:"categories,omitempty"`
	// Company logo in rectangular shape. <b>Upload an image with a clear background.</b>
	Image *string `json:"image,omitempty"`
	// Company logo in square shape. <b>Upload an image with a white background.</b>
	SquareImage *string `json:"square_image,omitempty"`
	// The color of this integration used for buttons and text throughout the app and landing pages. <b>Choose a darker, saturated color.</b>
	Color *string `json:"color,omitempty"`
	Slug  *string `json:"slug,omitempty"`
	// If checked, this integration will not appear in the linking flow, and will appear elsewhere with a Beta tag.
	IsInBeta *bool `json:"is_in_beta,omitempty"`
	// Mapping of API endpoints to documentation urls for support. Example: {'GET': [['/common-model-scopes', 'https://docs.merge.dev/accounting/common-model-scopes/#common_model_scopes_retrieve'],['/common-model-actions', 'https://docs.merge.dev/accounting/common-model-actions/#common_model_actions_retrieve']], 'POST': []}
	ApiEndpointsToDocumentationUrls map[string]any `json:"api_endpoints_to_documentation_urls,omitempty"`
	// Setup guide URL for third party webhook creation. Exposed in Merge Docs.
	WebhookSetupGuideUrl *string `json:"webhook_setup_guide_url,omitempty"`
}

// # The Account Object
// ### Description
// An `Account` represents a category in a company’s ledger in which a financial transaction is recorded against. The aggregation of each `Account` object is often referred to as the **Chart of Accounts**.
//
// An `Account` can be classified into one of the following categories, determined through the `classification` field:
// * __Asset:__ Accounts Receivable and Bank Accounts
// * __Liability:__ Accounts Payable and Credit Card Accounts
// * __Equity:__ Treasury Accounts and Retained Earnings
// * __Revenue:__ Income and Other Income
// * __Expense:__ Cost of Goods Sold and Office Expenses
//
// ### Usage Example
// Fetch from the `LIST Accounts` endpoint and view a company's accounts.
type AccountRequest struct {
	// The account's name.
	Name *string `json:"name,omitempty"`
	// The account's description.
	Description *string `json:"description,omitempty"`
	// The account's broadest grouping.
	//
	// * `ASSET` - ASSET
	// * `EQUITY` - EQUITY
	// * `EXPENSE` - EXPENSE
	// * `LIABILITY` - LIABILITY
	// * `REVENUE` - REVENUE
	Classification *AccountRequestClassification `json:"classification,omitempty"`
	// The account's type is a narrower and more specific grouping within the account's classification.
	Type *string `json:"type,omitempty"`
	// The account's status.
	//
	// * `ACTIVE` - ACTIVE
	// * `PENDING` - PENDING
	// * `INACTIVE` - INACTIVE
	Status *AccountRequestStatus `json:"status,omitempty"`
	// The account's current balance.
	CurrentBalance *float64 `json:"current_balance,omitempty"`
	// The account's currency.
	//
	// * `XUA` - ADB Unit of Account
	// * `AFN` - Afghan Afghani
	// * `AFA` - Afghan Afghani (1927–2002)
	// * `ALL` - Albanian Lek
	// * `ALK` - Albanian Lek (1946–1965)
	// * `DZD` - Algerian Dinar
	// * `ADP` - Andorran Peseta
	// * `AOA` - Angolan Kwanza
	// * `AOK` - Angolan Kwanza (1977–1991)
	// * `AON` - Angolan New Kwanza (1990–2000)
	// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
	// * `ARA` - Argentine Austral
	// * `ARS` - Argentine Peso
	// * `ARM` - Argentine Peso (1881–1970)
	// * `ARP` - Argentine Peso (1983–1985)
	// * `ARL` - Argentine Peso Ley (1970–1983)
	// * `AMD` - Armenian Dram
	// * `AWG` - Aruban Florin
	// * `AUD` - Australian Dollar
	// * `ATS` - Austrian Schilling
	// * `AZN` - Azerbaijani Manat
	// * `AZM` - Azerbaijani Manat (1993–2006)
	// * `BSD` - Bahamian Dollar
	// * `BHD` - Bahraini Dinar
	// * `BDT` - Bangladeshi Taka
	// * `BBD` - Barbadian Dollar
	// * `BYN` - Belarusian Ruble
	// * `BYB` - Belarusian Ruble (1994–1999)
	// * `BYR` - Belarusian Ruble (2000–2016)
	// * `BEF` - Belgian Franc
	// * `BEC` - Belgian Franc (convertible)
	// * `BEL` - Belgian Franc (financial)
	// * `BZD` - Belize Dollar
	// * `BMD` - Bermudan Dollar
	// * `BTN` - Bhutanese Ngultrum
	// * `BOB` - Bolivian Boliviano
	// * `BOL` - Bolivian Boliviano (1863–1963)
	// * `BOV` - Bolivian Mvdol
	// * `BOP` - Bolivian Peso
	// * `BAM` - Bosnia-Herzegovina Convertible Mark
	// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
	// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
	// * `BWP` - Botswanan Pula
	// * `BRC` - Brazilian Cruzado (1986–1989)
	// * `BRZ` - Brazilian Cruzeiro (1942–1967)
	// * `BRE` - Brazilian Cruzeiro (1990–1993)
	// * `BRR` - Brazilian Cruzeiro (1993–1994)
	// * `BRN` - Brazilian New Cruzado (1989–1990)
	// * `BRB` - Brazilian New Cruzeiro (1967–1986)
	// * `BRL` - Brazilian Real
	// * `GBP` - British Pound
	// * `BND` - Brunei Dollar
	// * `BGL` - Bulgarian Hard Lev
	// * `BGN` - Bulgarian Lev
	// * `BGO` - Bulgarian Lev (1879–1952)
	// * `BGM` - Bulgarian Socialist Lev
	// * `BUK` - Burmese Kyat
	// * `BIF` - Burundian Franc
	// * `XPF` - CFP Franc
	// * `KHR` - Cambodian Riel
	// * `CAD` - Canadian Dollar
	// * `CVE` - Cape Verdean Escudo
	// * `KYD` - Cayman Islands Dollar
	// * `XAF` - Central African CFA Franc
	// * `CLE` - Chilean Escudo
	// * `CLP` - Chilean Peso
	// * `CLF` - Chilean Unit of Account (UF)
	// * `CNX` - Chinese People’s Bank Dollar
	// * `CNY` - Chinese Yuan
	// * `CNH` - Chinese Yuan (offshore)
	// * `COP` - Colombian Peso
	// * `COU` - Colombian Real Value Unit
	// * `KMF` - Comorian Franc
	// * `CDF` - Congolese Franc
	// * `CRC` - Costa Rican Colón
	// * `HRD` - Croatian Dinar
	// * `HRK` - Croatian Kuna
	// * `CUC` - Cuban Convertible Peso
	// * `CUP` - Cuban Peso
	// * `CYP` - Cypriot Pound
	// * `CZK` - Czech Koruna
	// * `CSK` - Czechoslovak Hard Koruna
	// * `DKK` - Danish Krone
	// * `DJF` - Djiboutian Franc
	// * `DOP` - Dominican Peso
	// * `NLG` - Dutch Guilder
	// * `XCD` - East Caribbean Dollar
	// * `DDM` - East German Mark
	// * `ECS` - Ecuadorian Sucre
	// * `ECV` - Ecuadorian Unit of Constant Value
	// * `EGP` - Egyptian Pound
	// * `GQE` - Equatorial Guinean Ekwele
	// * `ERN` - Eritrean Nakfa
	// * `EEK` - Estonian Kroon
	// * `ETB` - Ethiopian Birr
	// * `EUR` - Euro
	// * `XBA` - European Composite Unit
	// * `XEU` - European Currency Unit
	// * `XBB` - European Monetary Unit
	// * `XBC` - European Unit of Account (XBC)
	// * `XBD` - European Unit of Account (XBD)
	// * `FKP` - Falkland Islands Pound
	// * `FJD` - Fijian Dollar
	// * `FIM` - Finnish Markka
	// * `FRF` - French Franc
	// * `XFO` - French Gold Franc
	// * `XFU` - French UIC-Franc
	// * `GMD` - Gambian Dalasi
	// * `GEK` - Georgian Kupon Larit
	// * `GEL` - Georgian Lari
	// * `DEM` - German Mark
	// * `GHS` - Ghanaian Cedi
	// * `GHC` - Ghanaian Cedi (1979–2007)
	// * `GIP` - Gibraltar Pound
	// * `XAU` - Gold
	// * `GRD` - Greek Drachma
	// * `GTQ` - Guatemalan Quetzal
	// * `GWP` - Guinea-Bissau Peso
	// * `GNF` - Guinean Franc
	// * `GNS` - Guinean Syli
	// * `GYD` - Guyanaese Dollar
	// * `HTG` - Haitian Gourde
	// * `HNL` - Honduran Lempira
	// * `HKD` - Hong Kong Dollar
	// * `HUF` - Hungarian Forint
	// * `IMP` - IMP
	// * `ISK` - Icelandic Króna
	// * `ISJ` - Icelandic Króna (1918–1981)
	// * `INR` - Indian Rupee
	// * `IDR` - Indonesian Rupiah
	// * `IRR` - Iranian Rial
	// * `IQD` - Iraqi Dinar
	// * `IEP` - Irish Pound
	// * `ILS` - Israeli New Shekel
	// * `ILP` - Israeli Pound
	// * `ILR` - Israeli Shekel (1980–1985)
	// * `ITL` - Italian Lira
	// * `JMD` - Jamaican Dollar
	// * `JPY` - Japanese Yen
	// * `JOD` - Jordanian Dinar
	// * `KZT` - Kazakhstani Tenge
	// * `KES` - Kenyan Shilling
	// * `KWD` - Kuwaiti Dinar
	// * `KGS` - Kyrgystani Som
	// * `LAK` - Laotian Kip
	// * `LVL` - Latvian Lats
	// * `LVR` - Latvian Ruble
	// * `LBP` - Lebanese Pound
	// * `LSL` - Lesotho Loti
	// * `LRD` - Liberian Dollar
	// * `LYD` - Libyan Dinar
	// * `LTL` - Lithuanian Litas
	// * `LTT` - Lithuanian Talonas
	// * `LUL` - Luxembourg Financial Franc
	// * `LUC` - Luxembourgian Convertible Franc
	// * `LUF` - Luxembourgian Franc
	// * `MOP` - Macanese Pataca
	// * `MKD` - Macedonian Denar
	// * `MKN` - Macedonian Denar (1992–1993)
	// * `MGA` - Malagasy Ariary
	// * `MGF` - Malagasy Franc
	// * `MWK` - Malawian Kwacha
	// * `MYR` - Malaysian Ringgit
	// * `MVR` - Maldivian Rufiyaa
	// * `MVP` - Maldivian Rupee (1947–1981)
	// * `MLF` - Malian Franc
	// * `MTL` - Maltese Lira
	// * `MTP` - Maltese Pound
	// * `MRU` - Mauritanian Ouguiya
	// * `MRO` - Mauritanian Ouguiya (1973–2017)
	// * `MUR` - Mauritian Rupee
	// * `MXV` - Mexican Investment Unit
	// * `MXN` - Mexican Peso
	// * `MXP` - Mexican Silver Peso (1861–1992)
	// * `MDC` - Moldovan Cupon
	// * `MDL` - Moldovan Leu
	// * `MCF` - Monegasque Franc
	// * `MNT` - Mongolian Tugrik
	// * `MAD` - Moroccan Dirham
	// * `MAF` - Moroccan Franc
	// * `MZE` - Mozambican Escudo
	// * `MZN` - Mozambican Metical
	// * `MZM` - Mozambican Metical (1980–2006)
	// * `MMK` - Myanmar Kyat
	// * `NAD` - Namibian Dollar
	// * `NPR` - Nepalese Rupee
	// * `ANG` - Netherlands Antillean Guilder
	// * `TWD` - New Taiwan Dollar
	// * `NZD` - New Zealand Dollar
	// * `NIO` - Nicaraguan Córdoba
	// * `NIC` - Nicaraguan Córdoba (1988–1991)
	// * `NGN` - Nigerian Naira
	// * `KPW` - North Korean Won
	// * `NOK` - Norwegian Krone
	// * `OMR` - Omani Rial
	// * `PKR` - Pakistani Rupee
	// * `XPD` - Palladium
	// * `PAB` - Panamanian Balboa
	// * `PGK` - Papua New Guinean Kina
	// * `PYG` - Paraguayan Guarani
	// * `PEI` - Peruvian Inti
	// * `PEN` - Peruvian Sol
	// * `PES` - Peruvian Sol (1863–1965)
	// * `PHP` - Philippine Peso
	// * `XPT` - Platinum
	// * `PLN` - Polish Zloty
	// * `PLZ` - Polish Zloty (1950–1995)
	// * `PTE` - Portuguese Escudo
	// * `GWE` - Portuguese Guinea Escudo
	// * `QAR` - Qatari Rial
	// * `XRE` - RINET Funds
	// * `RHD` - Rhodesian Dollar
	// * `RON` - Romanian Leu
	// * `ROL` - Romanian Leu (1952–2006)
	// * `RUB` - Russian Ruble
	// * `RUR` - Russian Ruble (1991–1998)
	// * `RWF` - Rwandan Franc
	// * `SVC` - Salvadoran Colón
	// * `WST` - Samoan Tala
	// * `SAR` - Saudi Riyal
	// * `RSD` - Serbian Dinar
	// * `CSD` - Serbian Dinar (2002–2006)
	// * `SCR` - Seychellois Rupee
	// * `SLL` - Sierra Leonean Leone
	// * `XAG` - Silver
	// * `SGD` - Singapore Dollar
	// * `SKK` - Slovak Koruna
	// * `SIT` - Slovenian Tolar
	// * `SBD` - Solomon Islands Dollar
	// * `SOS` - Somali Shilling
	// * `ZAR` - South African Rand
	// * `ZAL` - South African Rand (financial)
	// * `KRH` - South Korean Hwan (1953–1962)
	// * `KRW` - South Korean Won
	// * `KRO` - South Korean Won (1945–1953)
	// * `SSP` - South Sudanese Pound
	// * `SUR` - Soviet Rouble
	// * `ESP` - Spanish Peseta
	// * `ESA` - Spanish Peseta (A account)
	// * `ESB` - Spanish Peseta (convertible account)
	// * `XDR` - Special Drawing Rights
	// * `LKR` - Sri Lankan Rupee
	// * `SHP` - St. Helena Pound
	// * `XSU` - Sucre
	// * `SDD` - Sudanese Dinar (1992–2007)
	// * `SDG` - Sudanese Pound
	// * `SDP` - Sudanese Pound (1957–1998)
	// * `SRD` - Surinamese Dollar
	// * `SRG` - Surinamese Guilder
	// * `SZL` - Swazi Lilangeni
	// * `SEK` - Swedish Krona
	// * `CHF` - Swiss Franc
	// * `SYP` - Syrian Pound
	// * `STN` - São Tomé & Príncipe Dobra
	// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
	// * `TVD` - TVD
	// * `TJR` - Tajikistani Ruble
	// * `TJS` - Tajikistani Somoni
	// * `TZS` - Tanzanian Shilling
	// * `XTS` - Testing Currency Code
	// * `THB` - Thai Baht
	// * `XXX` - The codes assigned for transactions where no currency is involved
	// * `TPE` - Timorese Escudo
	// * `TOP` - Tongan Paʻanga
	// * `TTD` - Trinidad & Tobago Dollar
	// * `TND` - Tunisian Dinar
	// * `TRY` - Turkish Lira
	// * `TRL` - Turkish Lira (1922–2005)
	// * `TMT` - Turkmenistani Manat
	// * `TMM` - Turkmenistani Manat (1993–2009)
	// * `USD` - US Dollar
	// * `USN` - US Dollar (Next day)
	// * `USS` - US Dollar (Same day)
	// * `UGX` - Ugandan Shilling
	// * `UGS` - Ugandan Shilling (1966–1987)
	// * `UAH` - Ukrainian Hryvnia
	// * `UAK` - Ukrainian Karbovanets
	// * `AED` - United Arab Emirates Dirham
	// * `UYW` - Uruguayan Nominal Wage Index Unit
	// * `UYU` - Uruguayan Peso
	// * `UYP` - Uruguayan Peso (1975–1993)
	// * `UYI` - Uruguayan Peso (Indexed Units)
	// * `UZS` - Uzbekistani Som
	// * `VUV` - Vanuatu Vatu
	// * `VES` - Venezuelan Bolívar
	// * `VEB` - Venezuelan Bolívar (1871–2008)
	// * `VEF` - Venezuelan Bolívar (2008–2018)
	// * `VND` - Vietnamese Dong
	// * `VNN` - Vietnamese Dong (1978–1985)
	// * `CHE` - WIR Euro
	// * `CHW` - WIR Franc
	// * `XOF` - West African CFA Franc
	// * `YDD` - Yemeni Dinar
	// * `YER` - Yemeni Rial
	// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
	// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
	// * `YUM` - Yugoslavian New Dinar (1994–2002)
	// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
	// * `ZWN` - ZWN
	// * `ZRN` - Zairean New Zaire (1993–1998)
	// * `ZRZ` - Zairean Zaire (1971–1993)
	// * `ZMW` - Zambian Kwacha
	// * `ZMK` - Zambian Kwacha (1968–2012)
	// * `ZWD` - Zimbabwean Dollar (1980–2008)
	// * `ZWR` - Zimbabwean Dollar (2008)
	// * `ZWL` - Zimbabwean Dollar (2009)
	Currency *AccountRequestCurrency `json:"currency,omitempty"`
	// The account's number.
	AccountNumber *string `json:"account_number,omitempty"`
	// ID of the parent account.
	ParentAccount *string `json:"parent_account,omitempty"`
	// The company the account belongs to.
	Company             *string        `json:"company,omitempty"`
	IntegrationParams   map[string]any `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]any `json:"linked_account_params,omitempty"`
}

// The account's broadest grouping.
//
// * `ASSET` - ASSET
// * `EQUITY` - EQUITY
// * `EXPENSE` - EXPENSE
// * `LIABILITY` - LIABILITY
// * `REVENUE` - REVENUE
type AccountRequestClassification struct {
	typeName           string
	ClassificationEnum ClassificationEnum
	String             string
}

func NewAccountRequestClassificationFromClassificationEnum(value ClassificationEnum) *AccountRequestClassification {
	return &AccountRequestClassification{typeName: "classificationEnum", ClassificationEnum: value}
}

func NewAccountRequestClassificationFromString(value string) *AccountRequestClassification {
	return &AccountRequestClassification{typeName: "string", String: value}
}

func (a *AccountRequestClassification) UnmarshalJSON(data []byte) error {
	var valueClassificationEnum ClassificationEnum
	if err := json.Unmarshal(data, &valueClassificationEnum); err == nil {
		a.typeName = "classificationEnum"
		a.ClassificationEnum = valueClassificationEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AccountRequestClassification) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "classificationEnum":
		return json.Marshal(a.ClassificationEnum)
	case "string":
		return json.Marshal(a.String)
	}
}

type AccountRequestClassificationVisitor interface {
	VisitClassificationEnum(ClassificationEnum) error
	VisitString(string) error
}

func (a *AccountRequestClassification) Accept(visitor AccountRequestClassificationVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "classificationEnum":
		return visitor.VisitClassificationEnum(a.ClassificationEnum)
	case "string":
		return visitor.VisitString(a.String)
	}
}

// The account's currency.
//
// * `XUA` - ADB Unit of Account
// * `AFN` - Afghan Afghani
// * `AFA` - Afghan Afghani (1927–2002)
// * `ALL` - Albanian Lek
// * `ALK` - Albanian Lek (1946–1965)
// * `DZD` - Algerian Dinar
// * `ADP` - Andorran Peseta
// * `AOA` - Angolan Kwanza
// * `AOK` - Angolan Kwanza (1977–1991)
// * `AON` - Angolan New Kwanza (1990–2000)
// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
// * `ARA` - Argentine Austral
// * `ARS` - Argentine Peso
// * `ARM` - Argentine Peso (1881–1970)
// * `ARP` - Argentine Peso (1983–1985)
// * `ARL` - Argentine Peso Ley (1970–1983)
// * `AMD` - Armenian Dram
// * `AWG` - Aruban Florin
// * `AUD` - Australian Dollar
// * `ATS` - Austrian Schilling
// * `AZN` - Azerbaijani Manat
// * `AZM` - Azerbaijani Manat (1993–2006)
// * `BSD` - Bahamian Dollar
// * `BHD` - Bahraini Dinar
// * `BDT` - Bangladeshi Taka
// * `BBD` - Barbadian Dollar
// * `BYN` - Belarusian Ruble
// * `BYB` - Belarusian Ruble (1994–1999)
// * `BYR` - Belarusian Ruble (2000–2016)
// * `BEF` - Belgian Franc
// * `BEC` - Belgian Franc (convertible)
// * `BEL` - Belgian Franc (financial)
// * `BZD` - Belize Dollar
// * `BMD` - Bermudan Dollar
// * `BTN` - Bhutanese Ngultrum
// * `BOB` - Bolivian Boliviano
// * `BOL` - Bolivian Boliviano (1863–1963)
// * `BOV` - Bolivian Mvdol
// * `BOP` - Bolivian Peso
// * `BAM` - Bosnia-Herzegovina Convertible Mark
// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
// * `BWP` - Botswanan Pula
// * `BRC` - Brazilian Cruzado (1986–1989)
// * `BRZ` - Brazilian Cruzeiro (1942–1967)
// * `BRE` - Brazilian Cruzeiro (1990–1993)
// * `BRR` - Brazilian Cruzeiro (1993–1994)
// * `BRN` - Brazilian New Cruzado (1989–1990)
// * `BRB` - Brazilian New Cruzeiro (1967–1986)
// * `BRL` - Brazilian Real
// * `GBP` - British Pound
// * `BND` - Brunei Dollar
// * `BGL` - Bulgarian Hard Lev
// * `BGN` - Bulgarian Lev
// * `BGO` - Bulgarian Lev (1879–1952)
// * `BGM` - Bulgarian Socialist Lev
// * `BUK` - Burmese Kyat
// * `BIF` - Burundian Franc
// * `XPF` - CFP Franc
// * `KHR` - Cambodian Riel
// * `CAD` - Canadian Dollar
// * `CVE` - Cape Verdean Escudo
// * `KYD` - Cayman Islands Dollar
// * `XAF` - Central African CFA Franc
// * `CLE` - Chilean Escudo
// * `CLP` - Chilean Peso
// * `CLF` - Chilean Unit of Account (UF)
// * `CNX` - Chinese People’s Bank Dollar
// * `CNY` - Chinese Yuan
// * `CNH` - Chinese Yuan (offshore)
// * `COP` - Colombian Peso
// * `COU` - Colombian Real Value Unit
// * `KMF` - Comorian Franc
// * `CDF` - Congolese Franc
// * `CRC` - Costa Rican Colón
// * `HRD` - Croatian Dinar
// * `HRK` - Croatian Kuna
// * `CUC` - Cuban Convertible Peso
// * `CUP` - Cuban Peso
// * `CYP` - Cypriot Pound
// * `CZK` - Czech Koruna
// * `CSK` - Czechoslovak Hard Koruna
// * `DKK` - Danish Krone
// * `DJF` - Djiboutian Franc
// * `DOP` - Dominican Peso
// * `NLG` - Dutch Guilder
// * `XCD` - East Caribbean Dollar
// * `DDM` - East German Mark
// * `ECS` - Ecuadorian Sucre
// * `ECV` - Ecuadorian Unit of Constant Value
// * `EGP` - Egyptian Pound
// * `GQE` - Equatorial Guinean Ekwele
// * `ERN` - Eritrean Nakfa
// * `EEK` - Estonian Kroon
// * `ETB` - Ethiopian Birr
// * `EUR` - Euro
// * `XBA` - European Composite Unit
// * `XEU` - European Currency Unit
// * `XBB` - European Monetary Unit
// * `XBC` - European Unit of Account (XBC)
// * `XBD` - European Unit of Account (XBD)
// * `FKP` - Falkland Islands Pound
// * `FJD` - Fijian Dollar
// * `FIM` - Finnish Markka
// * `FRF` - French Franc
// * `XFO` - French Gold Franc
// * `XFU` - French UIC-Franc
// * `GMD` - Gambian Dalasi
// * `GEK` - Georgian Kupon Larit
// * `GEL` - Georgian Lari
// * `DEM` - German Mark
// * `GHS` - Ghanaian Cedi
// * `GHC` - Ghanaian Cedi (1979–2007)
// * `GIP` - Gibraltar Pound
// * `XAU` - Gold
// * `GRD` - Greek Drachma
// * `GTQ` - Guatemalan Quetzal
// * `GWP` - Guinea-Bissau Peso
// * `GNF` - Guinean Franc
// * `GNS` - Guinean Syli
// * `GYD` - Guyanaese Dollar
// * `HTG` - Haitian Gourde
// * `HNL` - Honduran Lempira
// * `HKD` - Hong Kong Dollar
// * `HUF` - Hungarian Forint
// * `IMP` - IMP
// * `ISK` - Icelandic Króna
// * `ISJ` - Icelandic Króna (1918–1981)
// * `INR` - Indian Rupee
// * `IDR` - Indonesian Rupiah
// * `IRR` - Iranian Rial
// * `IQD` - Iraqi Dinar
// * `IEP` - Irish Pound
// * `ILS` - Israeli New Shekel
// * `ILP` - Israeli Pound
// * `ILR` - Israeli Shekel (1980–1985)
// * `ITL` - Italian Lira
// * `JMD` - Jamaican Dollar
// * `JPY` - Japanese Yen
// * `JOD` - Jordanian Dinar
// * `KZT` - Kazakhstani Tenge
// * `KES` - Kenyan Shilling
// * `KWD` - Kuwaiti Dinar
// * `KGS` - Kyrgystani Som
// * `LAK` - Laotian Kip
// * `LVL` - Latvian Lats
// * `LVR` - Latvian Ruble
// * `LBP` - Lebanese Pound
// * `LSL` - Lesotho Loti
// * `LRD` - Liberian Dollar
// * `LYD` - Libyan Dinar
// * `LTL` - Lithuanian Litas
// * `LTT` - Lithuanian Talonas
// * `LUL` - Luxembourg Financial Franc
// * `LUC` - Luxembourgian Convertible Franc
// * `LUF` - Luxembourgian Franc
// * `MOP` - Macanese Pataca
// * `MKD` - Macedonian Denar
// * `MKN` - Macedonian Denar (1992–1993)
// * `MGA` - Malagasy Ariary
// * `MGF` - Malagasy Franc
// * `MWK` - Malawian Kwacha
// * `MYR` - Malaysian Ringgit
// * `MVR` - Maldivian Rufiyaa
// * `MVP` - Maldivian Rupee (1947–1981)
// * `MLF` - Malian Franc
// * `MTL` - Maltese Lira
// * `MTP` - Maltese Pound
// * `MRU` - Mauritanian Ouguiya
// * `MRO` - Mauritanian Ouguiya (1973–2017)
// * `MUR` - Mauritian Rupee
// * `MXV` - Mexican Investment Unit
// * `MXN` - Mexican Peso
// * `MXP` - Mexican Silver Peso (1861–1992)
// * `MDC` - Moldovan Cupon
// * `MDL` - Moldovan Leu
// * `MCF` - Monegasque Franc
// * `MNT` - Mongolian Tugrik
// * `MAD` - Moroccan Dirham
// * `MAF` - Moroccan Franc
// * `MZE` - Mozambican Escudo
// * `MZN` - Mozambican Metical
// * `MZM` - Mozambican Metical (1980–2006)
// * `MMK` - Myanmar Kyat
// * `NAD` - Namibian Dollar
// * `NPR` - Nepalese Rupee
// * `ANG` - Netherlands Antillean Guilder
// * `TWD` - New Taiwan Dollar
// * `NZD` - New Zealand Dollar
// * `NIO` - Nicaraguan Córdoba
// * `NIC` - Nicaraguan Córdoba (1988–1991)
// * `NGN` - Nigerian Naira
// * `KPW` - North Korean Won
// * `NOK` - Norwegian Krone
// * `OMR` - Omani Rial
// * `PKR` - Pakistani Rupee
// * `XPD` - Palladium
// * `PAB` - Panamanian Balboa
// * `PGK` - Papua New Guinean Kina
// * `PYG` - Paraguayan Guarani
// * `PEI` - Peruvian Inti
// * `PEN` - Peruvian Sol
// * `PES` - Peruvian Sol (1863–1965)
// * `PHP` - Philippine Peso
// * `XPT` - Platinum
// * `PLN` - Polish Zloty
// * `PLZ` - Polish Zloty (1950–1995)
// * `PTE` - Portuguese Escudo
// * `GWE` - Portuguese Guinea Escudo
// * `QAR` - Qatari Rial
// * `XRE` - RINET Funds
// * `RHD` - Rhodesian Dollar
// * `RON` - Romanian Leu
// * `ROL` - Romanian Leu (1952–2006)
// * `RUB` - Russian Ruble
// * `RUR` - Russian Ruble (1991–1998)
// * `RWF` - Rwandan Franc
// * `SVC` - Salvadoran Colón
// * `WST` - Samoan Tala
// * `SAR` - Saudi Riyal
// * `RSD` - Serbian Dinar
// * `CSD` - Serbian Dinar (2002–2006)
// * `SCR` - Seychellois Rupee
// * `SLL` - Sierra Leonean Leone
// * `XAG` - Silver
// * `SGD` - Singapore Dollar
// * `SKK` - Slovak Koruna
// * `SIT` - Slovenian Tolar
// * `SBD` - Solomon Islands Dollar
// * `SOS` - Somali Shilling
// * `ZAR` - South African Rand
// * `ZAL` - South African Rand (financial)
// * `KRH` - South Korean Hwan (1953–1962)
// * `KRW` - South Korean Won
// * `KRO` - South Korean Won (1945–1953)
// * `SSP` - South Sudanese Pound
// * `SUR` - Soviet Rouble
// * `ESP` - Spanish Peseta
// * `ESA` - Spanish Peseta (A account)
// * `ESB` - Spanish Peseta (convertible account)
// * `XDR` - Special Drawing Rights
// * `LKR` - Sri Lankan Rupee
// * `SHP` - St. Helena Pound
// * `XSU` - Sucre
// * `SDD` - Sudanese Dinar (1992–2007)
// * `SDG` - Sudanese Pound
// * `SDP` - Sudanese Pound (1957–1998)
// * `SRD` - Surinamese Dollar
// * `SRG` - Surinamese Guilder
// * `SZL` - Swazi Lilangeni
// * `SEK` - Swedish Krona
// * `CHF` - Swiss Franc
// * `SYP` - Syrian Pound
// * `STN` - São Tomé & Príncipe Dobra
// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
// * `TVD` - TVD
// * `TJR` - Tajikistani Ruble
// * `TJS` - Tajikistani Somoni
// * `TZS` - Tanzanian Shilling
// * `XTS` - Testing Currency Code
// * `THB` - Thai Baht
// * `XXX` - The codes assigned for transactions where no currency is involved
// * `TPE` - Timorese Escudo
// * `TOP` - Tongan Paʻanga
// * `TTD` - Trinidad & Tobago Dollar
// * `TND` - Tunisian Dinar
// * `TRY` - Turkish Lira
// * `TRL` - Turkish Lira (1922–2005)
// * `TMT` - Turkmenistani Manat
// * `TMM` - Turkmenistani Manat (1993–2009)
// * `USD` - US Dollar
// * `USN` - US Dollar (Next day)
// * `USS` - US Dollar (Same day)
// * `UGX` - Ugandan Shilling
// * `UGS` - Ugandan Shilling (1966–1987)
// * `UAH` - Ukrainian Hryvnia
// * `UAK` - Ukrainian Karbovanets
// * `AED` - United Arab Emirates Dirham
// * `UYW` - Uruguayan Nominal Wage Index Unit
// * `UYU` - Uruguayan Peso
// * `UYP` - Uruguayan Peso (1975–1993)
// * `UYI` - Uruguayan Peso (Indexed Units)
// * `UZS` - Uzbekistani Som
// * `VUV` - Vanuatu Vatu
// * `VES` - Venezuelan Bolívar
// * `VEB` - Venezuelan Bolívar (1871–2008)
// * `VEF` - Venezuelan Bolívar (2008–2018)
// * `VND` - Vietnamese Dong
// * `VNN` - Vietnamese Dong (1978–1985)
// * `CHE` - WIR Euro
// * `CHW` - WIR Franc
// * `XOF` - West African CFA Franc
// * `YDD` - Yemeni Dinar
// * `YER` - Yemeni Rial
// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
// * `YUM` - Yugoslavian New Dinar (1994–2002)
// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
// * `ZWN` - ZWN
// * `ZRN` - Zairean New Zaire (1993–1998)
// * `ZRZ` - Zairean Zaire (1971–1993)
// * `ZMW` - Zambian Kwacha
// * `ZMK` - Zambian Kwacha (1968–2012)
// * `ZWD` - Zimbabwean Dollar (1980–2008)
// * `ZWR` - Zimbabwean Dollar (2008)
// * `ZWL` - Zimbabwean Dollar (2009)
type AccountRequestCurrency struct {
	typeName     string
	CurrencyEnum CurrencyEnum
	String       string
}

func NewAccountRequestCurrencyFromCurrencyEnum(value CurrencyEnum) *AccountRequestCurrency {
	return &AccountRequestCurrency{typeName: "currencyEnum", CurrencyEnum: value}
}

func NewAccountRequestCurrencyFromString(value string) *AccountRequestCurrency {
	return &AccountRequestCurrency{typeName: "string", String: value}
}

func (a *AccountRequestCurrency) UnmarshalJSON(data []byte) error {
	var valueCurrencyEnum CurrencyEnum
	if err := json.Unmarshal(data, &valueCurrencyEnum); err == nil {
		a.typeName = "currencyEnum"
		a.CurrencyEnum = valueCurrencyEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AccountRequestCurrency) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "currencyEnum":
		return json.Marshal(a.CurrencyEnum)
	case "string":
		return json.Marshal(a.String)
	}
}

type AccountRequestCurrencyVisitor interface {
	VisitCurrencyEnum(CurrencyEnum) error
	VisitString(string) error
}

func (a *AccountRequestCurrency) Accept(visitor AccountRequestCurrencyVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "currencyEnum":
		return visitor.VisitCurrencyEnum(a.CurrencyEnum)
	case "string":
		return visitor.VisitString(a.String)
	}
}

// The account's status.
//
// * `ACTIVE` - ACTIVE
// * `PENDING` - PENDING
// * `INACTIVE` - INACTIVE
type AccountRequestStatus struct {
	typeName          string
	AccountStatusEnum AccountStatusEnum
	String            string
}

func NewAccountRequestStatusFromAccountStatusEnum(value AccountStatusEnum) *AccountRequestStatus {
	return &AccountRequestStatus{typeName: "accountStatusEnum", AccountStatusEnum: value}
}

func NewAccountRequestStatusFromString(value string) *AccountRequestStatus {
	return &AccountRequestStatus{typeName: "string", String: value}
}

func (a *AccountRequestStatus) UnmarshalJSON(data []byte) error {
	var valueAccountStatusEnum AccountStatusEnum
	if err := json.Unmarshal(data, &valueAccountStatusEnum); err == nil {
		a.typeName = "accountStatusEnum"
		a.AccountStatusEnum = valueAccountStatusEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AccountRequestStatus) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "accountStatusEnum":
		return json.Marshal(a.AccountStatusEnum)
	case "string":
		return json.Marshal(a.String)
	}
}

type AccountRequestStatusVisitor interface {
	VisitAccountStatusEnum(AccountStatusEnum) error
	VisitString(string) error
}

func (a *AccountRequestStatus) Accept(visitor AccountRequestStatusVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "accountStatusEnum":
		return visitor.VisitAccountStatusEnum(a.AccountStatusEnum)
	case "string":
		return visitor.VisitString(a.String)
	}
}

type AccountResponse struct {
	Model    *Account                    `json:"model,omitempty"`
	Warnings []*WarningValidationProblem `json:"warnings,omitempty"`
	Errors   []*ErrorValidationProblem   `json:"errors,omitempty"`
	Logs     []*DebugModeLog             `json:"logs,omitempty"`
}

// The account's status.
//
// * `ACTIVE` - ACTIVE
// * `PENDING` - PENDING
// * `INACTIVE` - INACTIVE
type AccountStatus struct {
	typeName          string
	AccountStatusEnum AccountStatusEnum
	String            string
}

func NewAccountStatusFromAccountStatusEnum(value AccountStatusEnum) *AccountStatus {
	return &AccountStatus{typeName: "accountStatusEnum", AccountStatusEnum: value}
}

func NewAccountStatusFromString(value string) *AccountStatus {
	return &AccountStatus{typeName: "string", String: value}
}

func (a *AccountStatus) UnmarshalJSON(data []byte) error {
	var valueAccountStatusEnum AccountStatusEnum
	if err := json.Unmarshal(data, &valueAccountStatusEnum); err == nil {
		a.typeName = "accountStatusEnum"
		a.AccountStatusEnum = valueAccountStatusEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AccountStatus) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "accountStatusEnum":
		return json.Marshal(a.AccountStatusEnum)
	case "string":
		return json.Marshal(a.String)
	}
}

type AccountStatusVisitor interface {
	VisitAccountStatusEnum(AccountStatusEnum) error
	VisitString(string) error
}

func (a *AccountStatus) Accept(visitor AccountStatusVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "accountStatusEnum":
		return visitor.VisitAccountStatusEnum(a.AccountStatusEnum)
	case "string":
		return visitor.VisitString(a.String)
	}
}

// * `ACTIVE` - ACTIVE
// * `PENDING` - PENDING
// * `INACTIVE` - INACTIVE
type AccountStatusEnum uint

const (
	AccountStatusEnumActive AccountStatusEnum = iota + 1
	AccountStatusEnumPending
	AccountStatusEnumInactive
)

func (a AccountStatusEnum) String() string {
	switch a {
	default:
		return strconv.Itoa(int(a))
	case AccountStatusEnumActive:
		return "ACTIVE"
	case AccountStatusEnumPending:
		return "PENDING"
	case AccountStatusEnumInactive:
		return "INACTIVE"
	}
}

func (a AccountStatusEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", a.String())), nil
}

func (a *AccountStatusEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "ACTIVE":
		value := AccountStatusEnumActive
		*a = value
	case "PENDING":
		value := AccountStatusEnumPending
		*a = value
	case "INACTIVE":
		value := AccountStatusEnumInactive
		*a = value
	}
	return nil
}

type AccountToken struct {
	AccountToken string              `json:"account_token"`
	Integration  *AccountIntegration `json:"integration,omitempty"`
}

// # The Accounting Attachment Object
// ### Description
// The `AccountingAttachment` object is used to represent a company's attachments.
//
// ### Usage Example
// Fetch from the `LIST AccountingAttachments` endpoint and view a company's attachments.
type AccountingAttachment struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The attachment's name.
	FileName *string `json:"file_name,omitempty"`
	// The attachment's url.
	FileUrl *string `json:"file_url,omitempty"`
	// The company the accounting attachment belongs to.
	Company *string `json:"company,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted *bool      `json:"remote_was_deleted,omitempty"`
	CreatedAt        *time.Time `json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt    *time.Time     `json:"modified_at,omitempty"`
	FieldMappings map[string]any `json:"field_mappings,omitempty"`
	RemoteData    []*RemoteData  `json:"remote_data,omitempty"`
}

// # The Accounting Attachment Object
// ### Description
// The `AccountingAttachment` object is used to represent a company's attachments.
//
// ### Usage Example
// Fetch from the `LIST AccountingAttachments` endpoint and view a company's attachments.
type AccountingAttachmentRequest struct {
	// The attachment's name.
	FileName *string `json:"file_name,omitempty"`
	// The attachment's url.
	FileUrl *string `json:"file_url,omitempty"`
	// The company the accounting attachment belongs to.
	Company             *string        `json:"company,omitempty"`
	IntegrationParams   map[string]any `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]any `json:"linked_account_params,omitempty"`
}

type AccountingAttachmentResponse struct {
	Model    *AccountingAttachment       `json:"model,omitempty"`
	Warnings []*WarningValidationProblem `json:"warnings,omitempty"`
	Errors   []*ErrorValidationProblem   `json:"errors,omitempty"`
	Logs     []*DebugModeLog             `json:"logs,omitempty"`
}

// # The AccountingPeriod Object
// ### Description
// The `AccountingPeriod` object is used to define a period of time in which events occurred.
//
// ### Usage Example
// Common models like `Invoice` and `Transaction` will have `AccountingPeriod` objects which will denote when they occurred.
type AccountingPeriod struct {
	// Beginning date of the period
	StartDate *time.Time `json:"start_date,omitempty"`
	// End date of the period
	EndDate *time.Time              `json:"end_date,omitempty"`
	Status  *AccountingPeriodStatus `json:"status,omitempty"`
	// Name of the accounting period.
	Name      *string    `json:"name,omitempty"`
	Id        *string    `json:"id,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
}

type AccountingPeriodStatus struct {
	typeName                   string
	AccountingPeriodStatusEnum AccountingPeriodStatusEnum
	String                     string
}

func NewAccountingPeriodStatusFromAccountingPeriodStatusEnum(value AccountingPeriodStatusEnum) *AccountingPeriodStatus {
	return &AccountingPeriodStatus{typeName: "accountingPeriodStatusEnum", AccountingPeriodStatusEnum: value}
}

func NewAccountingPeriodStatusFromString(value string) *AccountingPeriodStatus {
	return &AccountingPeriodStatus{typeName: "string", String: value}
}

func (a *AccountingPeriodStatus) UnmarshalJSON(data []byte) error {
	var valueAccountingPeriodStatusEnum AccountingPeriodStatusEnum
	if err := json.Unmarshal(data, &valueAccountingPeriodStatusEnum); err == nil {
		a.typeName = "accountingPeriodStatusEnum"
		a.AccountingPeriodStatusEnum = valueAccountingPeriodStatusEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AccountingPeriodStatus) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "accountingPeriodStatusEnum":
		return json.Marshal(a.AccountingPeriodStatusEnum)
	case "string":
		return json.Marshal(a.String)
	}
}

type AccountingPeriodStatusVisitor interface {
	VisitAccountingPeriodStatusEnum(AccountingPeriodStatusEnum) error
	VisitString(string) error
}

func (a *AccountingPeriodStatus) Accept(visitor AccountingPeriodStatusVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "accountingPeriodStatusEnum":
		return visitor.VisitAccountingPeriodStatusEnum(a.AccountingPeriodStatusEnum)
	case "string":
		return visitor.VisitString(a.String)
	}
}

// * `ACTIVE` - ACTIVE
// * `INACTIVE` - INACTIVE
type AccountingPeriodStatusEnum uint

const (
	AccountingPeriodStatusEnumActive AccountingPeriodStatusEnum = iota + 1
	AccountingPeriodStatusEnumInactive
)

func (a AccountingPeriodStatusEnum) String() string {
	switch a {
	default:
		return strconv.Itoa(int(a))
	case AccountingPeriodStatusEnumActive:
		return "ACTIVE"
	case AccountingPeriodStatusEnumInactive:
		return "INACTIVE"
	}
}

func (a AccountingPeriodStatusEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", a.String())), nil
}

func (a *AccountingPeriodStatusEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "ACTIVE":
		value := AccountingPeriodStatusEnumActive
		*a = value
	case "INACTIVE":
		value := AccountingPeriodStatusEnumInactive
		*a = value
	}
	return nil
}

// # The AccountingPhoneNumber Object
// ### Description
// The `AccountingPhoneNumber` object is used to represent a contact's or company's phone number.
//
// ### Usage Example
// Fetch from the `GET CompanyInfo` endpoint and view the company's phone numbers.
type AccountingPhoneNumber struct {
	// The phone number.
	Number *string `json:"number,omitempty"`
	// The phone number's type.
	Type      *string    `json:"type,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
}

// # The AccountingPhoneNumber Object
// ### Description
// The `AccountingPhoneNumber` object is used to represent a contact's or company's phone number.
//
// ### Usage Example
// Fetch from the `GET CompanyInfo` endpoint and view the company's phone numbers.
type AccountingPhoneNumberRequest struct {
	// The phone number.
	Number *string `json:"number,omitempty"`
	// The phone number's type.
	Type                *string        `json:"type,omitempty"`
	IntegrationParams   map[string]any `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]any `json:"linked_account_params,omitempty"`
}

type AccountsListRequestRemoteFields uint

const (
	AccountsListRequestRemoteFieldsClassification AccountsListRequestRemoteFields = iota + 1
	AccountsListRequestRemoteFieldsClassificationStatus
	AccountsListRequestRemoteFieldsStatus
)

func (a AccountsListRequestRemoteFields) String() string {
	switch a {
	default:
		return strconv.Itoa(int(a))
	case AccountsListRequestRemoteFieldsClassification:
		return "classification"
	case AccountsListRequestRemoteFieldsClassificationStatus:
		return "classification,status"
	case AccountsListRequestRemoteFieldsStatus:
		return "status"
	}
}

func (a AccountsListRequestRemoteFields) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", a.String())), nil
}

func (a *AccountsListRequestRemoteFields) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "classification":
		value := AccountsListRequestRemoteFieldsClassification
		*a = value
	case "classification,status":
		value := AccountsListRequestRemoteFieldsClassificationStatus
		*a = value
	case "status":
		value := AccountsListRequestRemoteFieldsStatus
		*a = value
	}
	return nil
}

type AccountsListRequestShowEnumOrigins uint

const (
	AccountsListRequestShowEnumOriginsClassification AccountsListRequestShowEnumOrigins = iota + 1
	AccountsListRequestShowEnumOriginsClassificationStatus
	AccountsListRequestShowEnumOriginsStatus
)

func (a AccountsListRequestShowEnumOrigins) String() string {
	switch a {
	default:
		return strconv.Itoa(int(a))
	case AccountsListRequestShowEnumOriginsClassification:
		return "classification"
	case AccountsListRequestShowEnumOriginsClassificationStatus:
		return "classification,status"
	case AccountsListRequestShowEnumOriginsStatus:
		return "status"
	}
}

func (a AccountsListRequestShowEnumOrigins) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", a.String())), nil
}

func (a *AccountsListRequestShowEnumOrigins) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "classification":
		value := AccountsListRequestShowEnumOriginsClassification
		*a = value
	case "classification,status":
		value := AccountsListRequestShowEnumOriginsClassificationStatus
		*a = value
	case "status":
		value := AccountsListRequestShowEnumOriginsStatus
		*a = value
	}
	return nil
}

type AccountsRetrieveRequestRemoteFields uint

const (
	AccountsRetrieveRequestRemoteFieldsClassification AccountsRetrieveRequestRemoteFields = iota + 1
	AccountsRetrieveRequestRemoteFieldsClassificationStatus
	AccountsRetrieveRequestRemoteFieldsStatus
)

func (a AccountsRetrieveRequestRemoteFields) String() string {
	switch a {
	default:
		return strconv.Itoa(int(a))
	case AccountsRetrieveRequestRemoteFieldsClassification:
		return "classification"
	case AccountsRetrieveRequestRemoteFieldsClassificationStatus:
		return "classification,status"
	case AccountsRetrieveRequestRemoteFieldsStatus:
		return "status"
	}
}

func (a AccountsRetrieveRequestRemoteFields) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", a.String())), nil
}

func (a *AccountsRetrieveRequestRemoteFields) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "classification":
		value := AccountsRetrieveRequestRemoteFieldsClassification
		*a = value
	case "classification,status":
		value := AccountsRetrieveRequestRemoteFieldsClassificationStatus
		*a = value
	case "status":
		value := AccountsRetrieveRequestRemoteFieldsStatus
		*a = value
	}
	return nil
}

type AccountsRetrieveRequestShowEnumOrigins uint

const (
	AccountsRetrieveRequestShowEnumOriginsClassification AccountsRetrieveRequestShowEnumOrigins = iota + 1
	AccountsRetrieveRequestShowEnumOriginsClassificationStatus
	AccountsRetrieveRequestShowEnumOriginsStatus
)

func (a AccountsRetrieveRequestShowEnumOrigins) String() string {
	switch a {
	default:
		return strconv.Itoa(int(a))
	case AccountsRetrieveRequestShowEnumOriginsClassification:
		return "classification"
	case AccountsRetrieveRequestShowEnumOriginsClassificationStatus:
		return "classification,status"
	case AccountsRetrieveRequestShowEnumOriginsStatus:
		return "status"
	}
}

func (a AccountsRetrieveRequestShowEnumOrigins) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", a.String())), nil
}

func (a *AccountsRetrieveRequestShowEnumOrigins) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "classification":
		value := AccountsRetrieveRequestShowEnumOriginsClassification
		*a = value
	case "classification,status":
		value := AccountsRetrieveRequestShowEnumOriginsClassificationStatus
		*a = value
	case "status":
		value := AccountsRetrieveRequestShowEnumOriginsStatus
		*a = value
	}
	return nil
}

// # The Address Object
// ### Description
// The `Address` object is used to represent a contact's or company's address.
//
// ### Usage Example
// Fetch from the `GET CompanyInfo` endpoint and view the company's addresses.
type Address struct {
	// The address type.
	//
	// * `BILLING` - BILLING
	// * `SHIPPING` - SHIPPING
	Type *AddressType `json:"type,omitempty"`
	// Line 1 of the address's street.
	Street1 *string `json:"street_1,omitempty"`
	// Line 2 of the address's street.
	Street2 *string `json:"street_2,omitempty"`
	// The address's city.
	City  *string `json:"city,omitempty"`
	State *any    `json:"state,omitempty"`
	// The address's state or region.
	CountrySubdivision *string `json:"country_subdivision,omitempty"`
	// The address's country.
	//
	// * `AF` - Afghanistan
	// * `AX` - Åland Islands
	// * `AL` - Albania
	// * `DZ` - Algeria
	// * `AS` - American Samoa
	// * `AD` - Andorra
	// * `AO` - Angola
	// * `AI` - Anguilla
	// * `AQ` - Antarctica
	// * `AG` - Antigua and Barbuda
	// * `AR` - Argentina
	// * `AM` - Armenia
	// * `AW` - Aruba
	// * `AU` - Australia
	// * `AT` - Austria
	// * `AZ` - Azerbaijan
	// * `BS` - Bahamas
	// * `BH` - Bahrain
	// * `BD` - Bangladesh
	// * `BB` - Barbados
	// * `BY` - Belarus
	// * `BE` - Belgium
	// * `BZ` - Belize
	// * `BJ` - Benin
	// * `BM` - Bermuda
	// * `BT` - Bhutan
	// * `BO` - Bolivia
	// * `BQ` - Bonaire, Sint Eustatius and Saba
	// * `BA` - Bosnia and Herzegovina
	// * `BW` - Botswana
	// * `BV` - Bouvet Island
	// * `BR` - Brazil
	// * `IO` - British Indian Ocean Territory
	// * `BN` - Brunei
	// * `BG` - Bulgaria
	// * `BF` - Burkina Faso
	// * `BI` - Burundi
	// * `CV` - Cabo Verde
	// * `KH` - Cambodia
	// * `CM` - Cameroon
	// * `CA` - Canada
	// * `KY` - Cayman Islands
	// * `CF` - Central African Republic
	// * `TD` - Chad
	// * `CL` - Chile
	// * `CN` - China
	// * `CX` - Christmas Island
	// * `CC` - Cocos (Keeling) Islands
	// * `CO` - Colombia
	// * `KM` - Comoros
	// * `CG` - Congo
	// * `CD` - Congo (the Democratic Republic of the)
	// * `CK` - Cook Islands
	// * `CR` - Costa Rica
	// * `CI` - Côte d'Ivoire
	// * `HR` - Croatia
	// * `CU` - Cuba
	// * `CW` - Curaçao
	// * `CY` - Cyprus
	// * `CZ` - Czechia
	// * `DK` - Denmark
	// * `DJ` - Djibouti
	// * `DM` - Dominica
	// * `DO` - Dominican Republic
	// * `EC` - Ecuador
	// * `EG` - Egypt
	// * `SV` - El Salvador
	// * `GQ` - Equatorial Guinea
	// * `ER` - Eritrea
	// * `EE` - Estonia
	// * `SZ` - Eswatini
	// * `ET` - Ethiopia
	// * `FK` - Falkland Islands (Malvinas)
	// * `FO` - Faroe Islands
	// * `FJ` - Fiji
	// * `FI` - Finland
	// * `FR` - France
	// * `GF` - French Guiana
	// * `PF` - French Polynesia
	// * `TF` - French Southern Territories
	// * `GA` - Gabon
	// * `GM` - Gambia
	// * `GE` - Georgia
	// * `DE` - Germany
	// * `GH` - Ghana
	// * `GI` - Gibraltar
	// * `GR` - Greece
	// * `GL` - Greenland
	// * `GD` - Grenada
	// * `GP` - Guadeloupe
	// * `GU` - Guam
	// * `GT` - Guatemala
	// * `GG` - Guernsey
	// * `GN` - Guinea
	// * `GW` - Guinea-Bissau
	// * `GY` - Guyana
	// * `HT` - Haiti
	// * `HM` - Heard Island and McDonald Islands
	// * `VA` - Holy See
	// * `HN` - Honduras
	// * `HK` - Hong Kong
	// * `HU` - Hungary
	// * `IS` - Iceland
	// * `IN` - India
	// * `ID` - Indonesia
	// * `IR` - Iran
	// * `IQ` - Iraq
	// * `IE` - Ireland
	// * `IM` - Isle of Man
	// * `IL` - Israel
	// * `IT` - Italy
	// * `JM` - Jamaica
	// * `JP` - Japan
	// * `JE` - Jersey
	// * `JO` - Jordan
	// * `KZ` - Kazakhstan
	// * `KE` - Kenya
	// * `KI` - Kiribati
	// * `KW` - Kuwait
	// * `KG` - Kyrgyzstan
	// * `LA` - Laos
	// * `LV` - Latvia
	// * `LB` - Lebanon
	// * `LS` - Lesotho
	// * `LR` - Liberia
	// * `LY` - Libya
	// * `LI` - Liechtenstein
	// * `LT` - Lithuania
	// * `LU` - Luxembourg
	// * `MO` - Macao
	// * `MG` - Madagascar
	// * `MW` - Malawi
	// * `MY` - Malaysia
	// * `MV` - Maldives
	// * `ML` - Mali
	// * `MT` - Malta
	// * `MH` - Marshall Islands
	// * `MQ` - Martinique
	// * `MR` - Mauritania
	// * `MU` - Mauritius
	// * `YT` - Mayotte
	// * `MX` - Mexico
	// * `FM` - Micronesia (Federated States of)
	// * `MD` - Moldova
	// * `MC` - Monaco
	// * `MN` - Mongolia
	// * `ME` - Montenegro
	// * `MS` - Montserrat
	// * `MA` - Morocco
	// * `MZ` - Mozambique
	// * `MM` - Myanmar
	// * `NA` - Namibia
	// * `NR` - Nauru
	// * `NP` - Nepal
	// * `NL` - Netherlands
	// * `NC` - New Caledonia
	// * `NZ` - New Zealand
	// * `NI` - Nicaragua
	// * `NE` - Niger
	// * `NG` - Nigeria
	// * `NU` - Niue
	// * `NF` - Norfolk Island
	// * `KP` - North Korea
	// * `MK` - North Macedonia
	// * `MP` - Northern Mariana Islands
	// * `NO` - Norway
	// * `OM` - Oman
	// * `PK` - Pakistan
	// * `PW` - Palau
	// * `PS` - Palestine, State of
	// * `PA` - Panama
	// * `PG` - Papua New Guinea
	// * `PY` - Paraguay
	// * `PE` - Peru
	// * `PH` - Philippines
	// * `PN` - Pitcairn
	// * `PL` - Poland
	// * `PT` - Portugal
	// * `PR` - Puerto Rico
	// * `QA` - Qatar
	// * `RE` - Réunion
	// * `RO` - Romania
	// * `RU` - Russia
	// * `RW` - Rwanda
	// * `BL` - Saint Barthélemy
	// * `SH` - Saint Helena, Ascension and Tristan da Cunha
	// * `KN` - Saint Kitts and Nevis
	// * `LC` - Saint Lucia
	// * `MF` - Saint Martin (French part)
	// * `PM` - Saint Pierre and Miquelon
	// * `VC` - Saint Vincent and the Grenadines
	// * `WS` - Samoa
	// * `SM` - San Marino
	// * `ST` - Sao Tome and Principe
	// * `SA` - Saudi Arabia
	// * `SN` - Senegal
	// * `RS` - Serbia
	// * `SC` - Seychelles
	// * `SL` - Sierra Leone
	// * `SG` - Singapore
	// * `SX` - Sint Maarten (Dutch part)
	// * `SK` - Slovakia
	// * `SI` - Slovenia
	// * `SB` - Solomon Islands
	// * `SO` - Somalia
	// * `ZA` - South Africa
	// * `GS` - South Georgia and the South Sandwich Islands
	// * `KR` - South Korea
	// * `SS` - South Sudan
	// * `ES` - Spain
	// * `LK` - Sri Lanka
	// * `SD` - Sudan
	// * `SR` - Suriname
	// * `SJ` - Svalbard and Jan Mayen
	// * `SE` - Sweden
	// * `CH` - Switzerland
	// * `SY` - Syria
	// * `TW` - Taiwan
	// * `TJ` - Tajikistan
	// * `TZ` - Tanzania
	// * `TH` - Thailand
	// * `TL` - Timor-Leste
	// * `TG` - Togo
	// * `TK` - Tokelau
	// * `TO` - Tonga
	// * `TT` - Trinidad and Tobago
	// * `TN` - Tunisia
	// * `TR` - Turkey
	// * `TM` - Turkmenistan
	// * `TC` - Turks and Caicos Islands
	// * `TV` - Tuvalu
	// * `UG` - Uganda
	// * `UA` - Ukraine
	// * `AE` - United Arab Emirates
	// * `GB` - United Kingdom
	// * `UM` - United States Minor Outlying Islands
	// * `US` - United States of America
	// * `UY` - Uruguay
	// * `UZ` - Uzbekistan
	// * `VU` - Vanuatu
	// * `VE` - Venezuela
	// * `VN` - Vietnam
	// * `VG` - Virgin Islands (British)
	// * `VI` - Virgin Islands (U.S.)
	// * `WF` - Wallis and Futuna
	// * `EH` - Western Sahara
	// * `YE` - Yemen
	// * `ZM` - Zambia
	// * `ZW` - Zimbabwe
	Country *AddressCountry `json:"country,omitempty"`
	// The address's zip code.
	ZipCode   *string    `json:"zip_code,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
}

// The address's country.
//
// * `AF` - Afghanistan
// * `AX` - Åland Islands
// * `AL` - Albania
// * `DZ` - Algeria
// * `AS` - American Samoa
// * `AD` - Andorra
// * `AO` - Angola
// * `AI` - Anguilla
// * `AQ` - Antarctica
// * `AG` - Antigua and Barbuda
// * `AR` - Argentina
// * `AM` - Armenia
// * `AW` - Aruba
// * `AU` - Australia
// * `AT` - Austria
// * `AZ` - Azerbaijan
// * `BS` - Bahamas
// * `BH` - Bahrain
// * `BD` - Bangladesh
// * `BB` - Barbados
// * `BY` - Belarus
// * `BE` - Belgium
// * `BZ` - Belize
// * `BJ` - Benin
// * `BM` - Bermuda
// * `BT` - Bhutan
// * `BO` - Bolivia
// * `BQ` - Bonaire, Sint Eustatius and Saba
// * `BA` - Bosnia and Herzegovina
// * `BW` - Botswana
// * `BV` - Bouvet Island
// * `BR` - Brazil
// * `IO` - British Indian Ocean Territory
// * `BN` - Brunei
// * `BG` - Bulgaria
// * `BF` - Burkina Faso
// * `BI` - Burundi
// * `CV` - Cabo Verde
// * `KH` - Cambodia
// * `CM` - Cameroon
// * `CA` - Canada
// * `KY` - Cayman Islands
// * `CF` - Central African Republic
// * `TD` - Chad
// * `CL` - Chile
// * `CN` - China
// * `CX` - Christmas Island
// * `CC` - Cocos (Keeling) Islands
// * `CO` - Colombia
// * `KM` - Comoros
// * `CG` - Congo
// * `CD` - Congo (the Democratic Republic of the)
// * `CK` - Cook Islands
// * `CR` - Costa Rica
// * `CI` - Côte d'Ivoire
// * `HR` - Croatia
// * `CU` - Cuba
// * `CW` - Curaçao
// * `CY` - Cyprus
// * `CZ` - Czechia
// * `DK` - Denmark
// * `DJ` - Djibouti
// * `DM` - Dominica
// * `DO` - Dominican Republic
// * `EC` - Ecuador
// * `EG` - Egypt
// * `SV` - El Salvador
// * `GQ` - Equatorial Guinea
// * `ER` - Eritrea
// * `EE` - Estonia
// * `SZ` - Eswatini
// * `ET` - Ethiopia
// * `FK` - Falkland Islands (Malvinas)
// * `FO` - Faroe Islands
// * `FJ` - Fiji
// * `FI` - Finland
// * `FR` - France
// * `GF` - French Guiana
// * `PF` - French Polynesia
// * `TF` - French Southern Territories
// * `GA` - Gabon
// * `GM` - Gambia
// * `GE` - Georgia
// * `DE` - Germany
// * `GH` - Ghana
// * `GI` - Gibraltar
// * `GR` - Greece
// * `GL` - Greenland
// * `GD` - Grenada
// * `GP` - Guadeloupe
// * `GU` - Guam
// * `GT` - Guatemala
// * `GG` - Guernsey
// * `GN` - Guinea
// * `GW` - Guinea-Bissau
// * `GY` - Guyana
// * `HT` - Haiti
// * `HM` - Heard Island and McDonald Islands
// * `VA` - Holy See
// * `HN` - Honduras
// * `HK` - Hong Kong
// * `HU` - Hungary
// * `IS` - Iceland
// * `IN` - India
// * `ID` - Indonesia
// * `IR` - Iran
// * `IQ` - Iraq
// * `IE` - Ireland
// * `IM` - Isle of Man
// * `IL` - Israel
// * `IT` - Italy
// * `JM` - Jamaica
// * `JP` - Japan
// * `JE` - Jersey
// * `JO` - Jordan
// * `KZ` - Kazakhstan
// * `KE` - Kenya
// * `KI` - Kiribati
// * `KW` - Kuwait
// * `KG` - Kyrgyzstan
// * `LA` - Laos
// * `LV` - Latvia
// * `LB` - Lebanon
// * `LS` - Lesotho
// * `LR` - Liberia
// * `LY` - Libya
// * `LI` - Liechtenstein
// * `LT` - Lithuania
// * `LU` - Luxembourg
// * `MO` - Macao
// * `MG` - Madagascar
// * `MW` - Malawi
// * `MY` - Malaysia
// * `MV` - Maldives
// * `ML` - Mali
// * `MT` - Malta
// * `MH` - Marshall Islands
// * `MQ` - Martinique
// * `MR` - Mauritania
// * `MU` - Mauritius
// * `YT` - Mayotte
// * `MX` - Mexico
// * `FM` - Micronesia (Federated States of)
// * `MD` - Moldova
// * `MC` - Monaco
// * `MN` - Mongolia
// * `ME` - Montenegro
// * `MS` - Montserrat
// * `MA` - Morocco
// * `MZ` - Mozambique
// * `MM` - Myanmar
// * `NA` - Namibia
// * `NR` - Nauru
// * `NP` - Nepal
// * `NL` - Netherlands
// * `NC` - New Caledonia
// * `NZ` - New Zealand
// * `NI` - Nicaragua
// * `NE` - Niger
// * `NG` - Nigeria
// * `NU` - Niue
// * `NF` - Norfolk Island
// * `KP` - North Korea
// * `MK` - North Macedonia
// * `MP` - Northern Mariana Islands
// * `NO` - Norway
// * `OM` - Oman
// * `PK` - Pakistan
// * `PW` - Palau
// * `PS` - Palestine, State of
// * `PA` - Panama
// * `PG` - Papua New Guinea
// * `PY` - Paraguay
// * `PE` - Peru
// * `PH` - Philippines
// * `PN` - Pitcairn
// * `PL` - Poland
// * `PT` - Portugal
// * `PR` - Puerto Rico
// * `QA` - Qatar
// * `RE` - Réunion
// * `RO` - Romania
// * `RU` - Russia
// * `RW` - Rwanda
// * `BL` - Saint Barthélemy
// * `SH` - Saint Helena, Ascension and Tristan da Cunha
// * `KN` - Saint Kitts and Nevis
// * `LC` - Saint Lucia
// * `MF` - Saint Martin (French part)
// * `PM` - Saint Pierre and Miquelon
// * `VC` - Saint Vincent and the Grenadines
// * `WS` - Samoa
// * `SM` - San Marino
// * `ST` - Sao Tome and Principe
// * `SA` - Saudi Arabia
// * `SN` - Senegal
// * `RS` - Serbia
// * `SC` - Seychelles
// * `SL` - Sierra Leone
// * `SG` - Singapore
// * `SX` - Sint Maarten (Dutch part)
// * `SK` - Slovakia
// * `SI` - Slovenia
// * `SB` - Solomon Islands
// * `SO` - Somalia
// * `ZA` - South Africa
// * `GS` - South Georgia and the South Sandwich Islands
// * `KR` - South Korea
// * `SS` - South Sudan
// * `ES` - Spain
// * `LK` - Sri Lanka
// * `SD` - Sudan
// * `SR` - Suriname
// * `SJ` - Svalbard and Jan Mayen
// * `SE` - Sweden
// * `CH` - Switzerland
// * `SY` - Syria
// * `TW` - Taiwan
// * `TJ` - Tajikistan
// * `TZ` - Tanzania
// * `TH` - Thailand
// * `TL` - Timor-Leste
// * `TG` - Togo
// * `TK` - Tokelau
// * `TO` - Tonga
// * `TT` - Trinidad and Tobago
// * `TN` - Tunisia
// * `TR` - Turkey
// * `TM` - Turkmenistan
// * `TC` - Turks and Caicos Islands
// * `TV` - Tuvalu
// * `UG` - Uganda
// * `UA` - Ukraine
// * `AE` - United Arab Emirates
// * `GB` - United Kingdom
// * `UM` - United States Minor Outlying Islands
// * `US` - United States of America
// * `UY` - Uruguay
// * `UZ` - Uzbekistan
// * `VU` - Vanuatu
// * `VE` - Venezuela
// * `VN` - Vietnam
// * `VG` - Virgin Islands (British)
// * `VI` - Virgin Islands (U.S.)
// * `WF` - Wallis and Futuna
// * `EH` - Western Sahara
// * `YE` - Yemen
// * `ZM` - Zambia
// * `ZW` - Zimbabwe
type AddressCountry struct {
	typeName    string
	CountryEnum CountryEnum
	String      string
}

func NewAddressCountryFromCountryEnum(value CountryEnum) *AddressCountry {
	return &AddressCountry{typeName: "countryEnum", CountryEnum: value}
}

func NewAddressCountryFromString(value string) *AddressCountry {
	return &AddressCountry{typeName: "string", String: value}
}

func (a *AddressCountry) UnmarshalJSON(data []byte) error {
	var valueCountryEnum CountryEnum
	if err := json.Unmarshal(data, &valueCountryEnum); err == nil {
		a.typeName = "countryEnum"
		a.CountryEnum = valueCountryEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AddressCountry) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "countryEnum":
		return json.Marshal(a.CountryEnum)
	case "string":
		return json.Marshal(a.String)
	}
}

type AddressCountryVisitor interface {
	VisitCountryEnum(CountryEnum) error
	VisitString(string) error
}

func (a *AddressCountry) Accept(visitor AddressCountryVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "countryEnum":
		return visitor.VisitCountryEnum(a.CountryEnum)
	case "string":
		return visitor.VisitString(a.String)
	}
}

// # The Address Object
// ### Description
// The `Address` object is used to represent a contact's or company's address.
//
// ### Usage Example
// Fetch from the `GET CompanyInfo` endpoint and view the company's addresses.
type AddressRequest struct {
	// The address type.
	//
	// * `BILLING` - BILLING
	// * `SHIPPING` - SHIPPING
	Type *AddressRequestType `json:"type,omitempty"`
	// Line 1 of the address's street.
	Street1 *string `json:"street_1,omitempty"`
	// Line 2 of the address's street.
	Street2 *string `json:"street_2,omitempty"`
	// The address's city.
	City *string `json:"city,omitempty"`
	// The address's state or region.
	CountrySubdivision *string `json:"country_subdivision,omitempty"`
	// The address's country.
	//
	// * `AF` - Afghanistan
	// * `AX` - Åland Islands
	// * `AL` - Albania
	// * `DZ` - Algeria
	// * `AS` - American Samoa
	// * `AD` - Andorra
	// * `AO` - Angola
	// * `AI` - Anguilla
	// * `AQ` - Antarctica
	// * `AG` - Antigua and Barbuda
	// * `AR` - Argentina
	// * `AM` - Armenia
	// * `AW` - Aruba
	// * `AU` - Australia
	// * `AT` - Austria
	// * `AZ` - Azerbaijan
	// * `BS` - Bahamas
	// * `BH` - Bahrain
	// * `BD` - Bangladesh
	// * `BB` - Barbados
	// * `BY` - Belarus
	// * `BE` - Belgium
	// * `BZ` - Belize
	// * `BJ` - Benin
	// * `BM` - Bermuda
	// * `BT` - Bhutan
	// * `BO` - Bolivia
	// * `BQ` - Bonaire, Sint Eustatius and Saba
	// * `BA` - Bosnia and Herzegovina
	// * `BW` - Botswana
	// * `BV` - Bouvet Island
	// * `BR` - Brazil
	// * `IO` - British Indian Ocean Territory
	// * `BN` - Brunei
	// * `BG` - Bulgaria
	// * `BF` - Burkina Faso
	// * `BI` - Burundi
	// * `CV` - Cabo Verde
	// * `KH` - Cambodia
	// * `CM` - Cameroon
	// * `CA` - Canada
	// * `KY` - Cayman Islands
	// * `CF` - Central African Republic
	// * `TD` - Chad
	// * `CL` - Chile
	// * `CN` - China
	// * `CX` - Christmas Island
	// * `CC` - Cocos (Keeling) Islands
	// * `CO` - Colombia
	// * `KM` - Comoros
	// * `CG` - Congo
	// * `CD` - Congo (the Democratic Republic of the)
	// * `CK` - Cook Islands
	// * `CR` - Costa Rica
	// * `CI` - Côte d'Ivoire
	// * `HR` - Croatia
	// * `CU` - Cuba
	// * `CW` - Curaçao
	// * `CY` - Cyprus
	// * `CZ` - Czechia
	// * `DK` - Denmark
	// * `DJ` - Djibouti
	// * `DM` - Dominica
	// * `DO` - Dominican Republic
	// * `EC` - Ecuador
	// * `EG` - Egypt
	// * `SV` - El Salvador
	// * `GQ` - Equatorial Guinea
	// * `ER` - Eritrea
	// * `EE` - Estonia
	// * `SZ` - Eswatini
	// * `ET` - Ethiopia
	// * `FK` - Falkland Islands (Malvinas)
	// * `FO` - Faroe Islands
	// * `FJ` - Fiji
	// * `FI` - Finland
	// * `FR` - France
	// * `GF` - French Guiana
	// * `PF` - French Polynesia
	// * `TF` - French Southern Territories
	// * `GA` - Gabon
	// * `GM` - Gambia
	// * `GE` - Georgia
	// * `DE` - Germany
	// * `GH` - Ghana
	// * `GI` - Gibraltar
	// * `GR` - Greece
	// * `GL` - Greenland
	// * `GD` - Grenada
	// * `GP` - Guadeloupe
	// * `GU` - Guam
	// * `GT` - Guatemala
	// * `GG` - Guernsey
	// * `GN` - Guinea
	// * `GW` - Guinea-Bissau
	// * `GY` - Guyana
	// * `HT` - Haiti
	// * `HM` - Heard Island and McDonald Islands
	// * `VA` - Holy See
	// * `HN` - Honduras
	// * `HK` - Hong Kong
	// * `HU` - Hungary
	// * `IS` - Iceland
	// * `IN` - India
	// * `ID` - Indonesia
	// * `IR` - Iran
	// * `IQ` - Iraq
	// * `IE` - Ireland
	// * `IM` - Isle of Man
	// * `IL` - Israel
	// * `IT` - Italy
	// * `JM` - Jamaica
	// * `JP` - Japan
	// * `JE` - Jersey
	// * `JO` - Jordan
	// * `KZ` - Kazakhstan
	// * `KE` - Kenya
	// * `KI` - Kiribati
	// * `KW` - Kuwait
	// * `KG` - Kyrgyzstan
	// * `LA` - Laos
	// * `LV` - Latvia
	// * `LB` - Lebanon
	// * `LS` - Lesotho
	// * `LR` - Liberia
	// * `LY` - Libya
	// * `LI` - Liechtenstein
	// * `LT` - Lithuania
	// * `LU` - Luxembourg
	// * `MO` - Macao
	// * `MG` - Madagascar
	// * `MW` - Malawi
	// * `MY` - Malaysia
	// * `MV` - Maldives
	// * `ML` - Mali
	// * `MT` - Malta
	// * `MH` - Marshall Islands
	// * `MQ` - Martinique
	// * `MR` - Mauritania
	// * `MU` - Mauritius
	// * `YT` - Mayotte
	// * `MX` - Mexico
	// * `FM` - Micronesia (Federated States of)
	// * `MD` - Moldova
	// * `MC` - Monaco
	// * `MN` - Mongolia
	// * `ME` - Montenegro
	// * `MS` - Montserrat
	// * `MA` - Morocco
	// * `MZ` - Mozambique
	// * `MM` - Myanmar
	// * `NA` - Namibia
	// * `NR` - Nauru
	// * `NP` - Nepal
	// * `NL` - Netherlands
	// * `NC` - New Caledonia
	// * `NZ` - New Zealand
	// * `NI` - Nicaragua
	// * `NE` - Niger
	// * `NG` - Nigeria
	// * `NU` - Niue
	// * `NF` - Norfolk Island
	// * `KP` - North Korea
	// * `MK` - North Macedonia
	// * `MP` - Northern Mariana Islands
	// * `NO` - Norway
	// * `OM` - Oman
	// * `PK` - Pakistan
	// * `PW` - Palau
	// * `PS` - Palestine, State of
	// * `PA` - Panama
	// * `PG` - Papua New Guinea
	// * `PY` - Paraguay
	// * `PE` - Peru
	// * `PH` - Philippines
	// * `PN` - Pitcairn
	// * `PL` - Poland
	// * `PT` - Portugal
	// * `PR` - Puerto Rico
	// * `QA` - Qatar
	// * `RE` - Réunion
	// * `RO` - Romania
	// * `RU` - Russia
	// * `RW` - Rwanda
	// * `BL` - Saint Barthélemy
	// * `SH` - Saint Helena, Ascension and Tristan da Cunha
	// * `KN` - Saint Kitts and Nevis
	// * `LC` - Saint Lucia
	// * `MF` - Saint Martin (French part)
	// * `PM` - Saint Pierre and Miquelon
	// * `VC` - Saint Vincent and the Grenadines
	// * `WS` - Samoa
	// * `SM` - San Marino
	// * `ST` - Sao Tome and Principe
	// * `SA` - Saudi Arabia
	// * `SN` - Senegal
	// * `RS` - Serbia
	// * `SC` - Seychelles
	// * `SL` - Sierra Leone
	// * `SG` - Singapore
	// * `SX` - Sint Maarten (Dutch part)
	// * `SK` - Slovakia
	// * `SI` - Slovenia
	// * `SB` - Solomon Islands
	// * `SO` - Somalia
	// * `ZA` - South Africa
	// * `GS` - South Georgia and the South Sandwich Islands
	// * `KR` - South Korea
	// * `SS` - South Sudan
	// * `ES` - Spain
	// * `LK` - Sri Lanka
	// * `SD` - Sudan
	// * `SR` - Suriname
	// * `SJ` - Svalbard and Jan Mayen
	// * `SE` - Sweden
	// * `CH` - Switzerland
	// * `SY` - Syria
	// * `TW` - Taiwan
	// * `TJ` - Tajikistan
	// * `TZ` - Tanzania
	// * `TH` - Thailand
	// * `TL` - Timor-Leste
	// * `TG` - Togo
	// * `TK` - Tokelau
	// * `TO` - Tonga
	// * `TT` - Trinidad and Tobago
	// * `TN` - Tunisia
	// * `TR` - Turkey
	// * `TM` - Turkmenistan
	// * `TC` - Turks and Caicos Islands
	// * `TV` - Tuvalu
	// * `UG` - Uganda
	// * `UA` - Ukraine
	// * `AE` - United Arab Emirates
	// * `GB` - United Kingdom
	// * `UM` - United States Minor Outlying Islands
	// * `US` - United States of America
	// * `UY` - Uruguay
	// * `UZ` - Uzbekistan
	// * `VU` - Vanuatu
	// * `VE` - Venezuela
	// * `VN` - Vietnam
	// * `VG` - Virgin Islands (British)
	// * `VI` - Virgin Islands (U.S.)
	// * `WF` - Wallis and Futuna
	// * `EH` - Western Sahara
	// * `YE` - Yemen
	// * `ZM` - Zambia
	// * `ZW` - Zimbabwe
	Country *AddressRequestCountry `json:"country,omitempty"`
	// The address's zip code.
	ZipCode             *string        `json:"zip_code,omitempty"`
	IntegrationParams   map[string]any `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]any `json:"linked_account_params,omitempty"`
}

// The address's country.
//
// * `AF` - Afghanistan
// * `AX` - Åland Islands
// * `AL` - Albania
// * `DZ` - Algeria
// * `AS` - American Samoa
// * `AD` - Andorra
// * `AO` - Angola
// * `AI` - Anguilla
// * `AQ` - Antarctica
// * `AG` - Antigua and Barbuda
// * `AR` - Argentina
// * `AM` - Armenia
// * `AW` - Aruba
// * `AU` - Australia
// * `AT` - Austria
// * `AZ` - Azerbaijan
// * `BS` - Bahamas
// * `BH` - Bahrain
// * `BD` - Bangladesh
// * `BB` - Barbados
// * `BY` - Belarus
// * `BE` - Belgium
// * `BZ` - Belize
// * `BJ` - Benin
// * `BM` - Bermuda
// * `BT` - Bhutan
// * `BO` - Bolivia
// * `BQ` - Bonaire, Sint Eustatius and Saba
// * `BA` - Bosnia and Herzegovina
// * `BW` - Botswana
// * `BV` - Bouvet Island
// * `BR` - Brazil
// * `IO` - British Indian Ocean Territory
// * `BN` - Brunei
// * `BG` - Bulgaria
// * `BF` - Burkina Faso
// * `BI` - Burundi
// * `CV` - Cabo Verde
// * `KH` - Cambodia
// * `CM` - Cameroon
// * `CA` - Canada
// * `KY` - Cayman Islands
// * `CF` - Central African Republic
// * `TD` - Chad
// * `CL` - Chile
// * `CN` - China
// * `CX` - Christmas Island
// * `CC` - Cocos (Keeling) Islands
// * `CO` - Colombia
// * `KM` - Comoros
// * `CG` - Congo
// * `CD` - Congo (the Democratic Republic of the)
// * `CK` - Cook Islands
// * `CR` - Costa Rica
// * `CI` - Côte d'Ivoire
// * `HR` - Croatia
// * `CU` - Cuba
// * `CW` - Curaçao
// * `CY` - Cyprus
// * `CZ` - Czechia
// * `DK` - Denmark
// * `DJ` - Djibouti
// * `DM` - Dominica
// * `DO` - Dominican Republic
// * `EC` - Ecuador
// * `EG` - Egypt
// * `SV` - El Salvador
// * `GQ` - Equatorial Guinea
// * `ER` - Eritrea
// * `EE` - Estonia
// * `SZ` - Eswatini
// * `ET` - Ethiopia
// * `FK` - Falkland Islands (Malvinas)
// * `FO` - Faroe Islands
// * `FJ` - Fiji
// * `FI` - Finland
// * `FR` - France
// * `GF` - French Guiana
// * `PF` - French Polynesia
// * `TF` - French Southern Territories
// * `GA` - Gabon
// * `GM` - Gambia
// * `GE` - Georgia
// * `DE` - Germany
// * `GH` - Ghana
// * `GI` - Gibraltar
// * `GR` - Greece
// * `GL` - Greenland
// * `GD` - Grenada
// * `GP` - Guadeloupe
// * `GU` - Guam
// * `GT` - Guatemala
// * `GG` - Guernsey
// * `GN` - Guinea
// * `GW` - Guinea-Bissau
// * `GY` - Guyana
// * `HT` - Haiti
// * `HM` - Heard Island and McDonald Islands
// * `VA` - Holy See
// * `HN` - Honduras
// * `HK` - Hong Kong
// * `HU` - Hungary
// * `IS` - Iceland
// * `IN` - India
// * `ID` - Indonesia
// * `IR` - Iran
// * `IQ` - Iraq
// * `IE` - Ireland
// * `IM` - Isle of Man
// * `IL` - Israel
// * `IT` - Italy
// * `JM` - Jamaica
// * `JP` - Japan
// * `JE` - Jersey
// * `JO` - Jordan
// * `KZ` - Kazakhstan
// * `KE` - Kenya
// * `KI` - Kiribati
// * `KW` - Kuwait
// * `KG` - Kyrgyzstan
// * `LA` - Laos
// * `LV` - Latvia
// * `LB` - Lebanon
// * `LS` - Lesotho
// * `LR` - Liberia
// * `LY` - Libya
// * `LI` - Liechtenstein
// * `LT` - Lithuania
// * `LU` - Luxembourg
// * `MO` - Macao
// * `MG` - Madagascar
// * `MW` - Malawi
// * `MY` - Malaysia
// * `MV` - Maldives
// * `ML` - Mali
// * `MT` - Malta
// * `MH` - Marshall Islands
// * `MQ` - Martinique
// * `MR` - Mauritania
// * `MU` - Mauritius
// * `YT` - Mayotte
// * `MX` - Mexico
// * `FM` - Micronesia (Federated States of)
// * `MD` - Moldova
// * `MC` - Monaco
// * `MN` - Mongolia
// * `ME` - Montenegro
// * `MS` - Montserrat
// * `MA` - Morocco
// * `MZ` - Mozambique
// * `MM` - Myanmar
// * `NA` - Namibia
// * `NR` - Nauru
// * `NP` - Nepal
// * `NL` - Netherlands
// * `NC` - New Caledonia
// * `NZ` - New Zealand
// * `NI` - Nicaragua
// * `NE` - Niger
// * `NG` - Nigeria
// * `NU` - Niue
// * `NF` - Norfolk Island
// * `KP` - North Korea
// * `MK` - North Macedonia
// * `MP` - Northern Mariana Islands
// * `NO` - Norway
// * `OM` - Oman
// * `PK` - Pakistan
// * `PW` - Palau
// * `PS` - Palestine, State of
// * `PA` - Panama
// * `PG` - Papua New Guinea
// * `PY` - Paraguay
// * `PE` - Peru
// * `PH` - Philippines
// * `PN` - Pitcairn
// * `PL` - Poland
// * `PT` - Portugal
// * `PR` - Puerto Rico
// * `QA` - Qatar
// * `RE` - Réunion
// * `RO` - Romania
// * `RU` - Russia
// * `RW` - Rwanda
// * `BL` - Saint Barthélemy
// * `SH` - Saint Helena, Ascension and Tristan da Cunha
// * `KN` - Saint Kitts and Nevis
// * `LC` - Saint Lucia
// * `MF` - Saint Martin (French part)
// * `PM` - Saint Pierre and Miquelon
// * `VC` - Saint Vincent and the Grenadines
// * `WS` - Samoa
// * `SM` - San Marino
// * `ST` - Sao Tome and Principe
// * `SA` - Saudi Arabia
// * `SN` - Senegal
// * `RS` - Serbia
// * `SC` - Seychelles
// * `SL` - Sierra Leone
// * `SG` - Singapore
// * `SX` - Sint Maarten (Dutch part)
// * `SK` - Slovakia
// * `SI` - Slovenia
// * `SB` - Solomon Islands
// * `SO` - Somalia
// * `ZA` - South Africa
// * `GS` - South Georgia and the South Sandwich Islands
// * `KR` - South Korea
// * `SS` - South Sudan
// * `ES` - Spain
// * `LK` - Sri Lanka
// * `SD` - Sudan
// * `SR` - Suriname
// * `SJ` - Svalbard and Jan Mayen
// * `SE` - Sweden
// * `CH` - Switzerland
// * `SY` - Syria
// * `TW` - Taiwan
// * `TJ` - Tajikistan
// * `TZ` - Tanzania
// * `TH` - Thailand
// * `TL` - Timor-Leste
// * `TG` - Togo
// * `TK` - Tokelau
// * `TO` - Tonga
// * `TT` - Trinidad and Tobago
// * `TN` - Tunisia
// * `TR` - Turkey
// * `TM` - Turkmenistan
// * `TC` - Turks and Caicos Islands
// * `TV` - Tuvalu
// * `UG` - Uganda
// * `UA` - Ukraine
// * `AE` - United Arab Emirates
// * `GB` - United Kingdom
// * `UM` - United States Minor Outlying Islands
// * `US` - United States of America
// * `UY` - Uruguay
// * `UZ` - Uzbekistan
// * `VU` - Vanuatu
// * `VE` - Venezuela
// * `VN` - Vietnam
// * `VG` - Virgin Islands (British)
// * `VI` - Virgin Islands (U.S.)
// * `WF` - Wallis and Futuna
// * `EH` - Western Sahara
// * `YE` - Yemen
// * `ZM` - Zambia
// * `ZW` - Zimbabwe
type AddressRequestCountry struct {
	typeName    string
	CountryEnum CountryEnum
	String      string
}

func NewAddressRequestCountryFromCountryEnum(value CountryEnum) *AddressRequestCountry {
	return &AddressRequestCountry{typeName: "countryEnum", CountryEnum: value}
}

func NewAddressRequestCountryFromString(value string) *AddressRequestCountry {
	return &AddressRequestCountry{typeName: "string", String: value}
}

func (a *AddressRequestCountry) UnmarshalJSON(data []byte) error {
	var valueCountryEnum CountryEnum
	if err := json.Unmarshal(data, &valueCountryEnum); err == nil {
		a.typeName = "countryEnum"
		a.CountryEnum = valueCountryEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AddressRequestCountry) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "countryEnum":
		return json.Marshal(a.CountryEnum)
	case "string":
		return json.Marshal(a.String)
	}
}

type AddressRequestCountryVisitor interface {
	VisitCountryEnum(CountryEnum) error
	VisitString(string) error
}

func (a *AddressRequestCountry) Accept(visitor AddressRequestCountryVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "countryEnum":
		return visitor.VisitCountryEnum(a.CountryEnum)
	case "string":
		return visitor.VisitString(a.String)
	}
}

// The address type.
//
// * `BILLING` - BILLING
// * `SHIPPING` - SHIPPING
type AddressRequestType struct {
	typeName        string
	AddressTypeEnum AddressTypeEnum
	String          string
}

func NewAddressRequestTypeFromAddressTypeEnum(value AddressTypeEnum) *AddressRequestType {
	return &AddressRequestType{typeName: "addressTypeEnum", AddressTypeEnum: value}
}

func NewAddressRequestTypeFromString(value string) *AddressRequestType {
	return &AddressRequestType{typeName: "string", String: value}
}

func (a *AddressRequestType) UnmarshalJSON(data []byte) error {
	var valueAddressTypeEnum AddressTypeEnum
	if err := json.Unmarshal(data, &valueAddressTypeEnum); err == nil {
		a.typeName = "addressTypeEnum"
		a.AddressTypeEnum = valueAddressTypeEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AddressRequestType) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "addressTypeEnum":
		return json.Marshal(a.AddressTypeEnum)
	case "string":
		return json.Marshal(a.String)
	}
}

type AddressRequestTypeVisitor interface {
	VisitAddressTypeEnum(AddressTypeEnum) error
	VisitString(string) error
}

func (a *AddressRequestType) Accept(visitor AddressRequestTypeVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "addressTypeEnum":
		return visitor.VisitAddressTypeEnum(a.AddressTypeEnum)
	case "string":
		return visitor.VisitString(a.String)
	}
}

// The address type.
//
// * `BILLING` - BILLING
// * `SHIPPING` - SHIPPING
type AddressType struct {
	typeName        string
	AddressTypeEnum AddressTypeEnum
	String          string
}

func NewAddressTypeFromAddressTypeEnum(value AddressTypeEnum) *AddressType {
	return &AddressType{typeName: "addressTypeEnum", AddressTypeEnum: value}
}

func NewAddressTypeFromString(value string) *AddressType {
	return &AddressType{typeName: "string", String: value}
}

func (a *AddressType) UnmarshalJSON(data []byte) error {
	var valueAddressTypeEnum AddressTypeEnum
	if err := json.Unmarshal(data, &valueAddressTypeEnum); err == nil {
		a.typeName = "addressTypeEnum"
		a.AddressTypeEnum = valueAddressTypeEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AddressType) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "addressTypeEnum":
		return json.Marshal(a.AddressTypeEnum)
	case "string":
		return json.Marshal(a.String)
	}
}

type AddressTypeVisitor interface {
	VisitAddressTypeEnum(AddressTypeEnum) error
	VisitString(string) error
}

func (a *AddressType) Accept(visitor AddressTypeVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "addressTypeEnum":
		return visitor.VisitAddressTypeEnum(a.AddressTypeEnum)
	case "string":
		return visitor.VisitString(a.String)
	}
}

// * `BILLING` - BILLING
// * `SHIPPING` - SHIPPING
type AddressTypeEnum uint

const (
	AddressTypeEnumBilling AddressTypeEnum = iota + 1
	AddressTypeEnumShipping
)

func (a AddressTypeEnum) String() string {
	switch a {
	default:
		return strconv.Itoa(int(a))
	case AddressTypeEnumBilling:
		return "BILLING"
	case AddressTypeEnumShipping:
		return "SHIPPING"
	}
}

func (a AddressTypeEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", a.String())), nil
}

func (a *AddressTypeEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "BILLING":
		value := AddressTypeEnumBilling
		*a = value
	case "SHIPPING":
		value := AddressTypeEnumShipping
		*a = value
	}
	return nil
}

type AsyncPassthroughReciept struct {
	AsyncPassthroughReceiptId string `json:"async_passthrough_receipt_id"`
}

type AuditLogEvent struct {
	Id *string `json:"id,omitempty"`
	// The User's full name at the time of this Event occurring.
	UserName *string `json:"user_name,omitempty"`
	// The User's email at the time of this Event occurring.
	UserEmail *string `json:"user_email,omitempty"`
	// Designates the role of the user (or SYSTEM/API if action not taken by a user) at the time of this Event occurring.
	//
	// * `ADMIN` - ADMIN
	// * `DEVELOPER` - DEVELOPER
	// * `MEMBER` - MEMBER
	// * `API` - API
	// * `SYSTEM` - SYSTEM
	// * `MERGE_TEAM` - MERGE_TEAM
	Role      *AuditLogEventRole `json:"role,omitempty"`
	IpAddress string             `json:"ip_address"`
	// Designates the type of event that occurred.
	//
	// * `CREATED_REMOTE_PRODUCTION_API_KEY` - CREATED_REMOTE_PRODUCTION_API_KEY
	// * `DELETED_REMOTE_PRODUCTION_API_KEY` - DELETED_REMOTE_PRODUCTION_API_KEY
	// * `CREATED_TEST_API_KEY` - CREATED_TEST_API_KEY
	// * `DELETED_TEST_API_KEY` - DELETED_TEST_API_KEY
	// * `REGENERATED_PRODUCTION_API_KEY` - REGENERATED_PRODUCTION_API_KEY
	// * `INVITED_USER` - INVITED_USER
	// * `TWO_FACTOR_AUTH_ENABLED` - TWO_FACTOR_AUTH_ENABLED
	// * `TWO_FACTOR_AUTH_DISABLED` - TWO_FACTOR_AUTH_DISABLED
	// * `DELETED_LINKED_ACCOUNT` - DELETED_LINKED_ACCOUNT
	// * `CREATED_DESTINATION` - CREATED_DESTINATION
	// * `DELETED_DESTINATION` - DELETED_DESTINATION
	// * `CHANGED_SCOPES` - CHANGED_SCOPES
	// * `CHANGED_PERSONAL_INFORMATION` - CHANGED_PERSONAL_INFORMATION
	// * `CHANGED_ORGANIZATION_SETTINGS` - CHANGED_ORGANIZATION_SETTINGS
	// * `ENABLED_INTEGRATION` - ENABLED_INTEGRATION
	// * `DISABLED_INTEGRATION` - DISABLED_INTEGRATION
	// * `ENABLED_CATEGORY` - ENABLED_CATEGORY
	// * `DISABLED_CATEGORY` - DISABLED_CATEGORY
	// * `CHANGED_PASSWORD` - CHANGED_PASSWORD
	// * `RESET_PASSWORD` - RESET_PASSWORD
	// * `ENABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION` - ENABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION
	// * `ENABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT` - ENABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT
	// * `DISABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION` - DISABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION
	// * `DISABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT` - DISABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT
	// * `CREATED_INTEGRATION_WIDE_FIELD_MAPPING` - CREATED_INTEGRATION_WIDE_FIELD_MAPPING
	// * `CREATED_LINKED_ACCOUNT_FIELD_MAPPING` - CREATED_LINKED_ACCOUNT_FIELD_MAPPING
	// * `CHANGED_INTEGRATION_WIDE_FIELD_MAPPING` - CHANGED_INTEGRATION_WIDE_FIELD_MAPPING
	// * `CHANGED_LINKED_ACCOUNT_FIELD_MAPPING` - CHANGED_LINKED_ACCOUNT_FIELD_MAPPING
	// * `DELETED_INTEGRATION_WIDE_FIELD_MAPPING` - DELETED_INTEGRATION_WIDE_FIELD_MAPPING
	// * `DELETED_LINKED_ACCOUNT_FIELD_MAPPING` - DELETED_LINKED_ACCOUNT_FIELD_MAPPING
	EventType        *AuditLogEventEventType `json:"event_type,omitempty"`
	EventDescription string                  `json:"event_description"`
	CreatedAt        *time.Time              `json:"created_at,omitempty"`
}

// Designates the type of event that occurred.
//
// * `CREATED_REMOTE_PRODUCTION_API_KEY` - CREATED_REMOTE_PRODUCTION_API_KEY
// * `DELETED_REMOTE_PRODUCTION_API_KEY` - DELETED_REMOTE_PRODUCTION_API_KEY
// * `CREATED_TEST_API_KEY` - CREATED_TEST_API_KEY
// * `DELETED_TEST_API_KEY` - DELETED_TEST_API_KEY
// * `REGENERATED_PRODUCTION_API_KEY` - REGENERATED_PRODUCTION_API_KEY
// * `INVITED_USER` - INVITED_USER
// * `TWO_FACTOR_AUTH_ENABLED` - TWO_FACTOR_AUTH_ENABLED
// * `TWO_FACTOR_AUTH_DISABLED` - TWO_FACTOR_AUTH_DISABLED
// * `DELETED_LINKED_ACCOUNT` - DELETED_LINKED_ACCOUNT
// * `CREATED_DESTINATION` - CREATED_DESTINATION
// * `DELETED_DESTINATION` - DELETED_DESTINATION
// * `CHANGED_SCOPES` - CHANGED_SCOPES
// * `CHANGED_PERSONAL_INFORMATION` - CHANGED_PERSONAL_INFORMATION
// * `CHANGED_ORGANIZATION_SETTINGS` - CHANGED_ORGANIZATION_SETTINGS
// * `ENABLED_INTEGRATION` - ENABLED_INTEGRATION
// * `DISABLED_INTEGRATION` - DISABLED_INTEGRATION
// * `ENABLED_CATEGORY` - ENABLED_CATEGORY
// * `DISABLED_CATEGORY` - DISABLED_CATEGORY
// * `CHANGED_PASSWORD` - CHANGED_PASSWORD
// * `RESET_PASSWORD` - RESET_PASSWORD
// * `ENABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION` - ENABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION
// * `ENABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT` - ENABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT
// * `DISABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION` - DISABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION
// * `DISABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT` - DISABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT
// * `CREATED_INTEGRATION_WIDE_FIELD_MAPPING` - CREATED_INTEGRATION_WIDE_FIELD_MAPPING
// * `CREATED_LINKED_ACCOUNT_FIELD_MAPPING` - CREATED_LINKED_ACCOUNT_FIELD_MAPPING
// * `CHANGED_INTEGRATION_WIDE_FIELD_MAPPING` - CHANGED_INTEGRATION_WIDE_FIELD_MAPPING
// * `CHANGED_LINKED_ACCOUNT_FIELD_MAPPING` - CHANGED_LINKED_ACCOUNT_FIELD_MAPPING
// * `DELETED_INTEGRATION_WIDE_FIELD_MAPPING` - DELETED_INTEGRATION_WIDE_FIELD_MAPPING
// * `DELETED_LINKED_ACCOUNT_FIELD_MAPPING` - DELETED_LINKED_ACCOUNT_FIELD_MAPPING
type AuditLogEventEventType struct {
	typeName      string
	EventTypeEnum EventTypeEnum
	String        string
}

func NewAuditLogEventEventTypeFromEventTypeEnum(value EventTypeEnum) *AuditLogEventEventType {
	return &AuditLogEventEventType{typeName: "eventTypeEnum", EventTypeEnum: value}
}

func NewAuditLogEventEventTypeFromString(value string) *AuditLogEventEventType {
	return &AuditLogEventEventType{typeName: "string", String: value}
}

func (a *AuditLogEventEventType) UnmarshalJSON(data []byte) error {
	var valueEventTypeEnum EventTypeEnum
	if err := json.Unmarshal(data, &valueEventTypeEnum); err == nil {
		a.typeName = "eventTypeEnum"
		a.EventTypeEnum = valueEventTypeEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AuditLogEventEventType) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "eventTypeEnum":
		return json.Marshal(a.EventTypeEnum)
	case "string":
		return json.Marshal(a.String)
	}
}

type AuditLogEventEventTypeVisitor interface {
	VisitEventTypeEnum(EventTypeEnum) error
	VisitString(string) error
}

func (a *AuditLogEventEventType) Accept(visitor AuditLogEventEventTypeVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "eventTypeEnum":
		return visitor.VisitEventTypeEnum(a.EventTypeEnum)
	case "string":
		return visitor.VisitString(a.String)
	}
}

// Designates the role of the user (or SYSTEM/API if action not taken by a user) at the time of this Event occurring.
//
// * `ADMIN` - ADMIN
// * `DEVELOPER` - DEVELOPER
// * `MEMBER` - MEMBER
// * `API` - API
// * `SYSTEM` - SYSTEM
// * `MERGE_TEAM` - MERGE_TEAM
type AuditLogEventRole struct {
	typeName string
	RoleEnum RoleEnum
	String   string
}

func NewAuditLogEventRoleFromRoleEnum(value RoleEnum) *AuditLogEventRole {
	return &AuditLogEventRole{typeName: "roleEnum", RoleEnum: value}
}

func NewAuditLogEventRoleFromString(value string) *AuditLogEventRole {
	return &AuditLogEventRole{typeName: "string", String: value}
}

func (a *AuditLogEventRole) UnmarshalJSON(data []byte) error {
	var valueRoleEnum RoleEnum
	if err := json.Unmarshal(data, &valueRoleEnum); err == nil {
		a.typeName = "roleEnum"
		a.RoleEnum = valueRoleEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AuditLogEventRole) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "roleEnum":
		return json.Marshal(a.RoleEnum)
	case "string":
		return json.Marshal(a.String)
	}
}

type AuditLogEventRoleVisitor interface {
	VisitRoleEnum(RoleEnum) error
	VisitString(string) error
}

func (a *AuditLogEventRole) Accept(visitor AuditLogEventRoleVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "roleEnum":
		return visitor.VisitRoleEnum(a.RoleEnum)
	case "string":
		return visitor.VisitString(a.String)
	}
}

// # The AvailableActions Object
// ### Description
// The `Activity` object is used to see all available model/operation combinations for an integration.
//
// ### Usage Example
// Fetch all the actions available for the `Zenefits` integration.
type AvailableActions struct {
	Integration              *AccountIntegration `json:"integration,omitempty"`
	PassthroughAvailable     bool                `json:"passthrough_available"`
	AvailableModelOperations []*ModelOperation   `json:"available_model_operations,omitempty"`
}

// # The BalanceSheet Object
// ### Description
// The `BalanceSheet` object shows a company’s assets, liabilities, and equity. Assets should be equal to liability and equity combined. This shows the company’s financial health at a specific point in time.
//
// ### Usage Example
// Fetch from the `LIST BalanceSheets` endpoint and view a company's balance sheets.
type BalanceSheet struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The balance sheet's name.
	Name *string `json:"name,omitempty"`
	// The balance sheet's currency.
	//
	// * `XUA` - ADB Unit of Account
	// * `AFN` - Afghan Afghani
	// * `AFA` - Afghan Afghani (1927–2002)
	// * `ALL` - Albanian Lek
	// * `ALK` - Albanian Lek (1946–1965)
	// * `DZD` - Algerian Dinar
	// * `ADP` - Andorran Peseta
	// * `AOA` - Angolan Kwanza
	// * `AOK` - Angolan Kwanza (1977–1991)
	// * `AON` - Angolan New Kwanza (1990–2000)
	// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
	// * `ARA` - Argentine Austral
	// * `ARS` - Argentine Peso
	// * `ARM` - Argentine Peso (1881–1970)
	// * `ARP` - Argentine Peso (1983–1985)
	// * `ARL` - Argentine Peso Ley (1970–1983)
	// * `AMD` - Armenian Dram
	// * `AWG` - Aruban Florin
	// * `AUD` - Australian Dollar
	// * `ATS` - Austrian Schilling
	// * `AZN` - Azerbaijani Manat
	// * `AZM` - Azerbaijani Manat (1993–2006)
	// * `BSD` - Bahamian Dollar
	// * `BHD` - Bahraini Dinar
	// * `BDT` - Bangladeshi Taka
	// * `BBD` - Barbadian Dollar
	// * `BYN` - Belarusian Ruble
	// * `BYB` - Belarusian Ruble (1994–1999)
	// * `BYR` - Belarusian Ruble (2000–2016)
	// * `BEF` - Belgian Franc
	// * `BEC` - Belgian Franc (convertible)
	// * `BEL` - Belgian Franc (financial)
	// * `BZD` - Belize Dollar
	// * `BMD` - Bermudan Dollar
	// * `BTN` - Bhutanese Ngultrum
	// * `BOB` - Bolivian Boliviano
	// * `BOL` - Bolivian Boliviano (1863–1963)
	// * `BOV` - Bolivian Mvdol
	// * `BOP` - Bolivian Peso
	// * `BAM` - Bosnia-Herzegovina Convertible Mark
	// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
	// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
	// * `BWP` - Botswanan Pula
	// * `BRC` - Brazilian Cruzado (1986–1989)
	// * `BRZ` - Brazilian Cruzeiro (1942–1967)
	// * `BRE` - Brazilian Cruzeiro (1990–1993)
	// * `BRR` - Brazilian Cruzeiro (1993–1994)
	// * `BRN` - Brazilian New Cruzado (1989–1990)
	// * `BRB` - Brazilian New Cruzeiro (1967–1986)
	// * `BRL` - Brazilian Real
	// * `GBP` - British Pound
	// * `BND` - Brunei Dollar
	// * `BGL` - Bulgarian Hard Lev
	// * `BGN` - Bulgarian Lev
	// * `BGO` - Bulgarian Lev (1879–1952)
	// * `BGM` - Bulgarian Socialist Lev
	// * `BUK` - Burmese Kyat
	// * `BIF` - Burundian Franc
	// * `XPF` - CFP Franc
	// * `KHR` - Cambodian Riel
	// * `CAD` - Canadian Dollar
	// * `CVE` - Cape Verdean Escudo
	// * `KYD` - Cayman Islands Dollar
	// * `XAF` - Central African CFA Franc
	// * `CLE` - Chilean Escudo
	// * `CLP` - Chilean Peso
	// * `CLF` - Chilean Unit of Account (UF)
	// * `CNX` - Chinese People’s Bank Dollar
	// * `CNY` - Chinese Yuan
	// * `CNH` - Chinese Yuan (offshore)
	// * `COP` - Colombian Peso
	// * `COU` - Colombian Real Value Unit
	// * `KMF` - Comorian Franc
	// * `CDF` - Congolese Franc
	// * `CRC` - Costa Rican Colón
	// * `HRD` - Croatian Dinar
	// * `HRK` - Croatian Kuna
	// * `CUC` - Cuban Convertible Peso
	// * `CUP` - Cuban Peso
	// * `CYP` - Cypriot Pound
	// * `CZK` - Czech Koruna
	// * `CSK` - Czechoslovak Hard Koruna
	// * `DKK` - Danish Krone
	// * `DJF` - Djiboutian Franc
	// * `DOP` - Dominican Peso
	// * `NLG` - Dutch Guilder
	// * `XCD` - East Caribbean Dollar
	// * `DDM` - East German Mark
	// * `ECS` - Ecuadorian Sucre
	// * `ECV` - Ecuadorian Unit of Constant Value
	// * `EGP` - Egyptian Pound
	// * `GQE` - Equatorial Guinean Ekwele
	// * `ERN` - Eritrean Nakfa
	// * `EEK` - Estonian Kroon
	// * `ETB` - Ethiopian Birr
	// * `EUR` - Euro
	// * `XBA` - European Composite Unit
	// * `XEU` - European Currency Unit
	// * `XBB` - European Monetary Unit
	// * `XBC` - European Unit of Account (XBC)
	// * `XBD` - European Unit of Account (XBD)
	// * `FKP` - Falkland Islands Pound
	// * `FJD` - Fijian Dollar
	// * `FIM` - Finnish Markka
	// * `FRF` - French Franc
	// * `XFO` - French Gold Franc
	// * `XFU` - French UIC-Franc
	// * `GMD` - Gambian Dalasi
	// * `GEK` - Georgian Kupon Larit
	// * `GEL` - Georgian Lari
	// * `DEM` - German Mark
	// * `GHS` - Ghanaian Cedi
	// * `GHC` - Ghanaian Cedi (1979–2007)
	// * `GIP` - Gibraltar Pound
	// * `XAU` - Gold
	// * `GRD` - Greek Drachma
	// * `GTQ` - Guatemalan Quetzal
	// * `GWP` - Guinea-Bissau Peso
	// * `GNF` - Guinean Franc
	// * `GNS` - Guinean Syli
	// * `GYD` - Guyanaese Dollar
	// * `HTG` - Haitian Gourde
	// * `HNL` - Honduran Lempira
	// * `HKD` - Hong Kong Dollar
	// * `HUF` - Hungarian Forint
	// * `IMP` - IMP
	// * `ISK` - Icelandic Króna
	// * `ISJ` - Icelandic Króna (1918–1981)
	// * `INR` - Indian Rupee
	// * `IDR` - Indonesian Rupiah
	// * `IRR` - Iranian Rial
	// * `IQD` - Iraqi Dinar
	// * `IEP` - Irish Pound
	// * `ILS` - Israeli New Shekel
	// * `ILP` - Israeli Pound
	// * `ILR` - Israeli Shekel (1980–1985)
	// * `ITL` - Italian Lira
	// * `JMD` - Jamaican Dollar
	// * `JPY` - Japanese Yen
	// * `JOD` - Jordanian Dinar
	// * `KZT` - Kazakhstani Tenge
	// * `KES` - Kenyan Shilling
	// * `KWD` - Kuwaiti Dinar
	// * `KGS` - Kyrgystani Som
	// * `LAK` - Laotian Kip
	// * `LVL` - Latvian Lats
	// * `LVR` - Latvian Ruble
	// * `LBP` - Lebanese Pound
	// * `LSL` - Lesotho Loti
	// * `LRD` - Liberian Dollar
	// * `LYD` - Libyan Dinar
	// * `LTL` - Lithuanian Litas
	// * `LTT` - Lithuanian Talonas
	// * `LUL` - Luxembourg Financial Franc
	// * `LUC` - Luxembourgian Convertible Franc
	// * `LUF` - Luxembourgian Franc
	// * `MOP` - Macanese Pataca
	// * `MKD` - Macedonian Denar
	// * `MKN` - Macedonian Denar (1992–1993)
	// * `MGA` - Malagasy Ariary
	// * `MGF` - Malagasy Franc
	// * `MWK` - Malawian Kwacha
	// * `MYR` - Malaysian Ringgit
	// * `MVR` - Maldivian Rufiyaa
	// * `MVP` - Maldivian Rupee (1947–1981)
	// * `MLF` - Malian Franc
	// * `MTL` - Maltese Lira
	// * `MTP` - Maltese Pound
	// * `MRU` - Mauritanian Ouguiya
	// * `MRO` - Mauritanian Ouguiya (1973–2017)
	// * `MUR` - Mauritian Rupee
	// * `MXV` - Mexican Investment Unit
	// * `MXN` - Mexican Peso
	// * `MXP` - Mexican Silver Peso (1861–1992)
	// * `MDC` - Moldovan Cupon
	// * `MDL` - Moldovan Leu
	// * `MCF` - Monegasque Franc
	// * `MNT` - Mongolian Tugrik
	// * `MAD` - Moroccan Dirham
	// * `MAF` - Moroccan Franc
	// * `MZE` - Mozambican Escudo
	// * `MZN` - Mozambican Metical
	// * `MZM` - Mozambican Metical (1980–2006)
	// * `MMK` - Myanmar Kyat
	// * `NAD` - Namibian Dollar
	// * `NPR` - Nepalese Rupee
	// * `ANG` - Netherlands Antillean Guilder
	// * `TWD` - New Taiwan Dollar
	// * `NZD` - New Zealand Dollar
	// * `NIO` - Nicaraguan Córdoba
	// * `NIC` - Nicaraguan Córdoba (1988–1991)
	// * `NGN` - Nigerian Naira
	// * `KPW` - North Korean Won
	// * `NOK` - Norwegian Krone
	// * `OMR` - Omani Rial
	// * `PKR` - Pakistani Rupee
	// * `XPD` - Palladium
	// * `PAB` - Panamanian Balboa
	// * `PGK` - Papua New Guinean Kina
	// * `PYG` - Paraguayan Guarani
	// * `PEI` - Peruvian Inti
	// * `PEN` - Peruvian Sol
	// * `PES` - Peruvian Sol (1863–1965)
	// * `PHP` - Philippine Peso
	// * `XPT` - Platinum
	// * `PLN` - Polish Zloty
	// * `PLZ` - Polish Zloty (1950–1995)
	// * `PTE` - Portuguese Escudo
	// * `GWE` - Portuguese Guinea Escudo
	// * `QAR` - Qatari Rial
	// * `XRE` - RINET Funds
	// * `RHD` - Rhodesian Dollar
	// * `RON` - Romanian Leu
	// * `ROL` - Romanian Leu (1952–2006)
	// * `RUB` - Russian Ruble
	// * `RUR` - Russian Ruble (1991–1998)
	// * `RWF` - Rwandan Franc
	// * `SVC` - Salvadoran Colón
	// * `WST` - Samoan Tala
	// * `SAR` - Saudi Riyal
	// * `RSD` - Serbian Dinar
	// * `CSD` - Serbian Dinar (2002–2006)
	// * `SCR` - Seychellois Rupee
	// * `SLL` - Sierra Leonean Leone
	// * `XAG` - Silver
	// * `SGD` - Singapore Dollar
	// * `SKK` - Slovak Koruna
	// * `SIT` - Slovenian Tolar
	// * `SBD` - Solomon Islands Dollar
	// * `SOS` - Somali Shilling
	// * `ZAR` - South African Rand
	// * `ZAL` - South African Rand (financial)
	// * `KRH` - South Korean Hwan (1953–1962)
	// * `KRW` - South Korean Won
	// * `KRO` - South Korean Won (1945–1953)
	// * `SSP` - South Sudanese Pound
	// * `SUR` - Soviet Rouble
	// * `ESP` - Spanish Peseta
	// * `ESA` - Spanish Peseta (A account)
	// * `ESB` - Spanish Peseta (convertible account)
	// * `XDR` - Special Drawing Rights
	// * `LKR` - Sri Lankan Rupee
	// * `SHP` - St. Helena Pound
	// * `XSU` - Sucre
	// * `SDD` - Sudanese Dinar (1992–2007)
	// * `SDG` - Sudanese Pound
	// * `SDP` - Sudanese Pound (1957–1998)
	// * `SRD` - Surinamese Dollar
	// * `SRG` - Surinamese Guilder
	// * `SZL` - Swazi Lilangeni
	// * `SEK` - Swedish Krona
	// * `CHF` - Swiss Franc
	// * `SYP` - Syrian Pound
	// * `STN` - São Tomé & Príncipe Dobra
	// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
	// * `TVD` - TVD
	// * `TJR` - Tajikistani Ruble
	// * `TJS` - Tajikistani Somoni
	// * `TZS` - Tanzanian Shilling
	// * `XTS` - Testing Currency Code
	// * `THB` - Thai Baht
	// * `XXX` - The codes assigned for transactions where no currency is involved
	// * `TPE` - Timorese Escudo
	// * `TOP` - Tongan Paʻanga
	// * `TTD` - Trinidad & Tobago Dollar
	// * `TND` - Tunisian Dinar
	// * `TRY` - Turkish Lira
	// * `TRL` - Turkish Lira (1922–2005)
	// * `TMT` - Turkmenistani Manat
	// * `TMM` - Turkmenistani Manat (1993–2009)
	// * `USD` - US Dollar
	// * `USN` - US Dollar (Next day)
	// * `USS` - US Dollar (Same day)
	// * `UGX` - Ugandan Shilling
	// * `UGS` - Ugandan Shilling (1966–1987)
	// * `UAH` - Ukrainian Hryvnia
	// * `UAK` - Ukrainian Karbovanets
	// * `AED` - United Arab Emirates Dirham
	// * `UYW` - Uruguayan Nominal Wage Index Unit
	// * `UYU` - Uruguayan Peso
	// * `UYP` - Uruguayan Peso (1975–1993)
	// * `UYI` - Uruguayan Peso (Indexed Units)
	// * `UZS` - Uzbekistani Som
	// * `VUV` - Vanuatu Vatu
	// * `VES` - Venezuelan Bolívar
	// * `VEB` - Venezuelan Bolívar (1871–2008)
	// * `VEF` - Venezuelan Bolívar (2008–2018)
	// * `VND` - Vietnamese Dong
	// * `VNN` - Vietnamese Dong (1978–1985)
	// * `CHE` - WIR Euro
	// * `CHW` - WIR Franc
	// * `XOF` - West African CFA Franc
	// * `YDD` - Yemeni Dinar
	// * `YER` - Yemeni Rial
	// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
	// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
	// * `YUM` - Yugoslavian New Dinar (1994–2002)
	// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
	// * `ZWN` - ZWN
	// * `ZRN` - Zairean New Zaire (1993–1998)
	// * `ZRZ` - Zairean Zaire (1971–1993)
	// * `ZMW` - Zambian Kwacha
	// * `ZMK` - Zambian Kwacha (1968–2012)
	// * `ZWD` - Zimbabwean Dollar (1980–2008)
	// * `ZWR` - Zimbabwean Dollar (2008)
	// * `ZWL` - Zimbabwean Dollar (2009)
	Currency *BalanceSheetCurrency `json:"currency,omitempty"`
	// `Company` object for the given `BalanceSheet` object.
	Company *BalanceSheetCompany `json:"company,omitempty"`
	// The balance sheet's date. The balance sheet data will reflect the company's financial position this point in time.
	Date *time.Time `json:"date,omitempty"`
	// The balance sheet's net assets.
	NetAssets   *float64      `json:"net_assets,omitempty"`
	Assets      []*ReportItem `json:"assets,omitempty"`
	Liabilities []*ReportItem `json:"liabilities,omitempty"`
	Equity      []*ReportItem `json:"equity,omitempty"`
	// The time that balance sheet was generated by the accounting system.
	RemoteGeneratedAt *time.Time `json:"remote_generated_at,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted *bool      `json:"remote_was_deleted,omitempty"`
	CreatedAt        *time.Time `json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt    *time.Time     `json:"modified_at,omitempty"`
	FieldMappings map[string]any `json:"field_mappings,omitempty"`
	RemoteData    []*RemoteData  `json:"remote_data,omitempty"`
}

// `Company` object for the given `BalanceSheet` object.
type BalanceSheetCompany struct {
	typeName    string
	String      string
	CompanyInfo *CompanyInfo
}

func NewBalanceSheetCompanyFromString(value string) *BalanceSheetCompany {
	return &BalanceSheetCompany{typeName: "string", String: value}
}

func NewBalanceSheetCompanyFromCompanyInfo(value *CompanyInfo) *BalanceSheetCompany {
	return &BalanceSheetCompany{typeName: "companyInfo", CompanyInfo: value}
}

func (b *BalanceSheetCompany) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		b.typeName = "string"
		b.String = valueString
		return nil
	}
	valueCompanyInfo := new(CompanyInfo)
	if err := json.Unmarshal(data, &valueCompanyInfo); err == nil {
		b.typeName = "companyInfo"
		b.CompanyInfo = valueCompanyInfo
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, b)
}

func (b BalanceSheetCompany) MarshalJSON() ([]byte, error) {
	switch b.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", b.typeName, b)
	case "string":
		return json.Marshal(b.String)
	case "companyInfo":
		return json.Marshal(b.CompanyInfo)
	}
}

type BalanceSheetCompanyVisitor interface {
	VisitString(string) error
	VisitCompanyInfo(*CompanyInfo) error
}

func (b *BalanceSheetCompany) Accept(visitor BalanceSheetCompanyVisitor) error {
	switch b.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", b.typeName, b)
	case "string":
		return visitor.VisitString(b.String)
	case "companyInfo":
		return visitor.VisitCompanyInfo(b.CompanyInfo)
	}
}

// The balance sheet's currency.
//
// * `XUA` - ADB Unit of Account
// * `AFN` - Afghan Afghani
// * `AFA` - Afghan Afghani (1927–2002)
// * `ALL` - Albanian Lek
// * `ALK` - Albanian Lek (1946–1965)
// * `DZD` - Algerian Dinar
// * `ADP` - Andorran Peseta
// * `AOA` - Angolan Kwanza
// * `AOK` - Angolan Kwanza (1977–1991)
// * `AON` - Angolan New Kwanza (1990–2000)
// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
// * `ARA` - Argentine Austral
// * `ARS` - Argentine Peso
// * `ARM` - Argentine Peso (1881–1970)
// * `ARP` - Argentine Peso (1983–1985)
// * `ARL` - Argentine Peso Ley (1970–1983)
// * `AMD` - Armenian Dram
// * `AWG` - Aruban Florin
// * `AUD` - Australian Dollar
// * `ATS` - Austrian Schilling
// * `AZN` - Azerbaijani Manat
// * `AZM` - Azerbaijani Manat (1993–2006)
// * `BSD` - Bahamian Dollar
// * `BHD` - Bahraini Dinar
// * `BDT` - Bangladeshi Taka
// * `BBD` - Barbadian Dollar
// * `BYN` - Belarusian Ruble
// * `BYB` - Belarusian Ruble (1994–1999)
// * `BYR` - Belarusian Ruble (2000–2016)
// * `BEF` - Belgian Franc
// * `BEC` - Belgian Franc (convertible)
// * `BEL` - Belgian Franc (financial)
// * `BZD` - Belize Dollar
// * `BMD` - Bermudan Dollar
// * `BTN` - Bhutanese Ngultrum
// * `BOB` - Bolivian Boliviano
// * `BOL` - Bolivian Boliviano (1863–1963)
// * `BOV` - Bolivian Mvdol
// * `BOP` - Bolivian Peso
// * `BAM` - Bosnia-Herzegovina Convertible Mark
// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
// * `BWP` - Botswanan Pula
// * `BRC` - Brazilian Cruzado (1986–1989)
// * `BRZ` - Brazilian Cruzeiro (1942–1967)
// * `BRE` - Brazilian Cruzeiro (1990–1993)
// * `BRR` - Brazilian Cruzeiro (1993–1994)
// * `BRN` - Brazilian New Cruzado (1989–1990)
// * `BRB` - Brazilian New Cruzeiro (1967–1986)
// * `BRL` - Brazilian Real
// * `GBP` - British Pound
// * `BND` - Brunei Dollar
// * `BGL` - Bulgarian Hard Lev
// * `BGN` - Bulgarian Lev
// * `BGO` - Bulgarian Lev (1879–1952)
// * `BGM` - Bulgarian Socialist Lev
// * `BUK` - Burmese Kyat
// * `BIF` - Burundian Franc
// * `XPF` - CFP Franc
// * `KHR` - Cambodian Riel
// * `CAD` - Canadian Dollar
// * `CVE` - Cape Verdean Escudo
// * `KYD` - Cayman Islands Dollar
// * `XAF` - Central African CFA Franc
// * `CLE` - Chilean Escudo
// * `CLP` - Chilean Peso
// * `CLF` - Chilean Unit of Account (UF)
// * `CNX` - Chinese People’s Bank Dollar
// * `CNY` - Chinese Yuan
// * `CNH` - Chinese Yuan (offshore)
// * `COP` - Colombian Peso
// * `COU` - Colombian Real Value Unit
// * `KMF` - Comorian Franc
// * `CDF` - Congolese Franc
// * `CRC` - Costa Rican Colón
// * `HRD` - Croatian Dinar
// * `HRK` - Croatian Kuna
// * `CUC` - Cuban Convertible Peso
// * `CUP` - Cuban Peso
// * `CYP` - Cypriot Pound
// * `CZK` - Czech Koruna
// * `CSK` - Czechoslovak Hard Koruna
// * `DKK` - Danish Krone
// * `DJF` - Djiboutian Franc
// * `DOP` - Dominican Peso
// * `NLG` - Dutch Guilder
// * `XCD` - East Caribbean Dollar
// * `DDM` - East German Mark
// * `ECS` - Ecuadorian Sucre
// * `ECV` - Ecuadorian Unit of Constant Value
// * `EGP` - Egyptian Pound
// * `GQE` - Equatorial Guinean Ekwele
// * `ERN` - Eritrean Nakfa
// * `EEK` - Estonian Kroon
// * `ETB` - Ethiopian Birr
// * `EUR` - Euro
// * `XBA` - European Composite Unit
// * `XEU` - European Currency Unit
// * `XBB` - European Monetary Unit
// * `XBC` - European Unit of Account (XBC)
// * `XBD` - European Unit of Account (XBD)
// * `FKP` - Falkland Islands Pound
// * `FJD` - Fijian Dollar
// * `FIM` - Finnish Markka
// * `FRF` - French Franc
// * `XFO` - French Gold Franc
// * `XFU` - French UIC-Franc
// * `GMD` - Gambian Dalasi
// * `GEK` - Georgian Kupon Larit
// * `GEL` - Georgian Lari
// * `DEM` - German Mark
// * `GHS` - Ghanaian Cedi
// * `GHC` - Ghanaian Cedi (1979–2007)
// * `GIP` - Gibraltar Pound
// * `XAU` - Gold
// * `GRD` - Greek Drachma
// * `GTQ` - Guatemalan Quetzal
// * `GWP` - Guinea-Bissau Peso
// * `GNF` - Guinean Franc
// * `GNS` - Guinean Syli
// * `GYD` - Guyanaese Dollar
// * `HTG` - Haitian Gourde
// * `HNL` - Honduran Lempira
// * `HKD` - Hong Kong Dollar
// * `HUF` - Hungarian Forint
// * `IMP` - IMP
// * `ISK` - Icelandic Króna
// * `ISJ` - Icelandic Króna (1918–1981)
// * `INR` - Indian Rupee
// * `IDR` - Indonesian Rupiah
// * `IRR` - Iranian Rial
// * `IQD` - Iraqi Dinar
// * `IEP` - Irish Pound
// * `ILS` - Israeli New Shekel
// * `ILP` - Israeli Pound
// * `ILR` - Israeli Shekel (1980–1985)
// * `ITL` - Italian Lira
// * `JMD` - Jamaican Dollar
// * `JPY` - Japanese Yen
// * `JOD` - Jordanian Dinar
// * `KZT` - Kazakhstani Tenge
// * `KES` - Kenyan Shilling
// * `KWD` - Kuwaiti Dinar
// * `KGS` - Kyrgystani Som
// * `LAK` - Laotian Kip
// * `LVL` - Latvian Lats
// * `LVR` - Latvian Ruble
// * `LBP` - Lebanese Pound
// * `LSL` - Lesotho Loti
// * `LRD` - Liberian Dollar
// * `LYD` - Libyan Dinar
// * `LTL` - Lithuanian Litas
// * `LTT` - Lithuanian Talonas
// * `LUL` - Luxembourg Financial Franc
// * `LUC` - Luxembourgian Convertible Franc
// * `LUF` - Luxembourgian Franc
// * `MOP` - Macanese Pataca
// * `MKD` - Macedonian Denar
// * `MKN` - Macedonian Denar (1992–1993)
// * `MGA` - Malagasy Ariary
// * `MGF` - Malagasy Franc
// * `MWK` - Malawian Kwacha
// * `MYR` - Malaysian Ringgit
// * `MVR` - Maldivian Rufiyaa
// * `MVP` - Maldivian Rupee (1947–1981)
// * `MLF` - Malian Franc
// * `MTL` - Maltese Lira
// * `MTP` - Maltese Pound
// * `MRU` - Mauritanian Ouguiya
// * `MRO` - Mauritanian Ouguiya (1973–2017)
// * `MUR` - Mauritian Rupee
// * `MXV` - Mexican Investment Unit
// * `MXN` - Mexican Peso
// * `MXP` - Mexican Silver Peso (1861–1992)
// * `MDC` - Moldovan Cupon
// * `MDL` - Moldovan Leu
// * `MCF` - Monegasque Franc
// * `MNT` - Mongolian Tugrik
// * `MAD` - Moroccan Dirham
// * `MAF` - Moroccan Franc
// * `MZE` - Mozambican Escudo
// * `MZN` - Mozambican Metical
// * `MZM` - Mozambican Metical (1980–2006)
// * `MMK` - Myanmar Kyat
// * `NAD` - Namibian Dollar
// * `NPR` - Nepalese Rupee
// * `ANG` - Netherlands Antillean Guilder
// * `TWD` - New Taiwan Dollar
// * `NZD` - New Zealand Dollar
// * `NIO` - Nicaraguan Córdoba
// * `NIC` - Nicaraguan Córdoba (1988–1991)
// * `NGN` - Nigerian Naira
// * `KPW` - North Korean Won
// * `NOK` - Norwegian Krone
// * `OMR` - Omani Rial
// * `PKR` - Pakistani Rupee
// * `XPD` - Palladium
// * `PAB` - Panamanian Balboa
// * `PGK` - Papua New Guinean Kina
// * `PYG` - Paraguayan Guarani
// * `PEI` - Peruvian Inti
// * `PEN` - Peruvian Sol
// * `PES` - Peruvian Sol (1863–1965)
// * `PHP` - Philippine Peso
// * `XPT` - Platinum
// * `PLN` - Polish Zloty
// * `PLZ` - Polish Zloty (1950–1995)
// * `PTE` - Portuguese Escudo
// * `GWE` - Portuguese Guinea Escudo
// * `QAR` - Qatari Rial
// * `XRE` - RINET Funds
// * `RHD` - Rhodesian Dollar
// * `RON` - Romanian Leu
// * `ROL` - Romanian Leu (1952–2006)
// * `RUB` - Russian Ruble
// * `RUR` - Russian Ruble (1991–1998)
// * `RWF` - Rwandan Franc
// * `SVC` - Salvadoran Colón
// * `WST` - Samoan Tala
// * `SAR` - Saudi Riyal
// * `RSD` - Serbian Dinar
// * `CSD` - Serbian Dinar (2002–2006)
// * `SCR` - Seychellois Rupee
// * `SLL` - Sierra Leonean Leone
// * `XAG` - Silver
// * `SGD` - Singapore Dollar
// * `SKK` - Slovak Koruna
// * `SIT` - Slovenian Tolar
// * `SBD` - Solomon Islands Dollar
// * `SOS` - Somali Shilling
// * `ZAR` - South African Rand
// * `ZAL` - South African Rand (financial)
// * `KRH` - South Korean Hwan (1953–1962)
// * `KRW` - South Korean Won
// * `KRO` - South Korean Won (1945–1953)
// * `SSP` - South Sudanese Pound
// * `SUR` - Soviet Rouble
// * `ESP` - Spanish Peseta
// * `ESA` - Spanish Peseta (A account)
// * `ESB` - Spanish Peseta (convertible account)
// * `XDR` - Special Drawing Rights
// * `LKR` - Sri Lankan Rupee
// * `SHP` - St. Helena Pound
// * `XSU` - Sucre
// * `SDD` - Sudanese Dinar (1992–2007)
// * `SDG` - Sudanese Pound
// * `SDP` - Sudanese Pound (1957–1998)
// * `SRD` - Surinamese Dollar
// * `SRG` - Surinamese Guilder
// * `SZL` - Swazi Lilangeni
// * `SEK` - Swedish Krona
// * `CHF` - Swiss Franc
// * `SYP` - Syrian Pound
// * `STN` - São Tomé & Príncipe Dobra
// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
// * `TVD` - TVD
// * `TJR` - Tajikistani Ruble
// * `TJS` - Tajikistani Somoni
// * `TZS` - Tanzanian Shilling
// * `XTS` - Testing Currency Code
// * `THB` - Thai Baht
// * `XXX` - The codes assigned for transactions where no currency is involved
// * `TPE` - Timorese Escudo
// * `TOP` - Tongan Paʻanga
// * `TTD` - Trinidad & Tobago Dollar
// * `TND` - Tunisian Dinar
// * `TRY` - Turkish Lira
// * `TRL` - Turkish Lira (1922–2005)
// * `TMT` - Turkmenistani Manat
// * `TMM` - Turkmenistani Manat (1993–2009)
// * `USD` - US Dollar
// * `USN` - US Dollar (Next day)
// * `USS` - US Dollar (Same day)
// * `UGX` - Ugandan Shilling
// * `UGS` - Ugandan Shilling (1966–1987)
// * `UAH` - Ukrainian Hryvnia
// * `UAK` - Ukrainian Karbovanets
// * `AED` - United Arab Emirates Dirham
// * `UYW` - Uruguayan Nominal Wage Index Unit
// * `UYU` - Uruguayan Peso
// * `UYP` - Uruguayan Peso (1975–1993)
// * `UYI` - Uruguayan Peso (Indexed Units)
// * `UZS` - Uzbekistani Som
// * `VUV` - Vanuatu Vatu
// * `VES` - Venezuelan Bolívar
// * `VEB` - Venezuelan Bolívar (1871–2008)
// * `VEF` - Venezuelan Bolívar (2008–2018)
// * `VND` - Vietnamese Dong
// * `VNN` - Vietnamese Dong (1978–1985)
// * `CHE` - WIR Euro
// * `CHW` - WIR Franc
// * `XOF` - West African CFA Franc
// * `YDD` - Yemeni Dinar
// * `YER` - Yemeni Rial
// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
// * `YUM` - Yugoslavian New Dinar (1994–2002)
// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
// * `ZWN` - ZWN
// * `ZRN` - Zairean New Zaire (1993–1998)
// * `ZRZ` - Zairean Zaire (1971–1993)
// * `ZMW` - Zambian Kwacha
// * `ZMK` - Zambian Kwacha (1968–2012)
// * `ZWD` - Zimbabwean Dollar (1980–2008)
// * `ZWR` - Zimbabwean Dollar (2008)
// * `ZWL` - Zimbabwean Dollar (2009)
type BalanceSheetCurrency struct {
	typeName     string
	CurrencyEnum CurrencyEnum
	String       string
}

func NewBalanceSheetCurrencyFromCurrencyEnum(value CurrencyEnum) *BalanceSheetCurrency {
	return &BalanceSheetCurrency{typeName: "currencyEnum", CurrencyEnum: value}
}

func NewBalanceSheetCurrencyFromString(value string) *BalanceSheetCurrency {
	return &BalanceSheetCurrency{typeName: "string", String: value}
}

func (b *BalanceSheetCurrency) UnmarshalJSON(data []byte) error {
	var valueCurrencyEnum CurrencyEnum
	if err := json.Unmarshal(data, &valueCurrencyEnum); err == nil {
		b.typeName = "currencyEnum"
		b.CurrencyEnum = valueCurrencyEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		b.typeName = "string"
		b.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, b)
}

func (b BalanceSheetCurrency) MarshalJSON() ([]byte, error) {
	switch b.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", b.typeName, b)
	case "currencyEnum":
		return json.Marshal(b.CurrencyEnum)
	case "string":
		return json.Marshal(b.String)
	}
}

type BalanceSheetCurrencyVisitor interface {
	VisitCurrencyEnum(CurrencyEnum) error
	VisitString(string) error
}

func (b *BalanceSheetCurrency) Accept(visitor BalanceSheetCurrencyVisitor) error {
	switch b.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", b.typeName, b)
	case "currencyEnum":
		return visitor.VisitCurrencyEnum(b.CurrencyEnum)
	case "string":
		return visitor.VisitString(b.String)
	}
}

// # The CashFlowStatement Object
// ### Description
// The `CashFlowStatement` object shows operating activities, investing activities, and financing activities over a period of time (month, quarter, or year).
//
// ### Usage Example
// Fetch from the `LIST CashFlowStatements` endpoint and view a company's cash flow statements.
type CashFlowStatement struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The cash flow statement's name.
	Name *string `json:"name,omitempty"`
	// The cash flow statement's currency.
	//
	// * `XUA` - ADB Unit of Account
	// * `AFN` - Afghan Afghani
	// * `AFA` - Afghan Afghani (1927–2002)
	// * `ALL` - Albanian Lek
	// * `ALK` - Albanian Lek (1946–1965)
	// * `DZD` - Algerian Dinar
	// * `ADP` - Andorran Peseta
	// * `AOA` - Angolan Kwanza
	// * `AOK` - Angolan Kwanza (1977–1991)
	// * `AON` - Angolan New Kwanza (1990–2000)
	// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
	// * `ARA` - Argentine Austral
	// * `ARS` - Argentine Peso
	// * `ARM` - Argentine Peso (1881–1970)
	// * `ARP` - Argentine Peso (1983–1985)
	// * `ARL` - Argentine Peso Ley (1970–1983)
	// * `AMD` - Armenian Dram
	// * `AWG` - Aruban Florin
	// * `AUD` - Australian Dollar
	// * `ATS` - Austrian Schilling
	// * `AZN` - Azerbaijani Manat
	// * `AZM` - Azerbaijani Manat (1993–2006)
	// * `BSD` - Bahamian Dollar
	// * `BHD` - Bahraini Dinar
	// * `BDT` - Bangladeshi Taka
	// * `BBD` - Barbadian Dollar
	// * `BYN` - Belarusian Ruble
	// * `BYB` - Belarusian Ruble (1994–1999)
	// * `BYR` - Belarusian Ruble (2000–2016)
	// * `BEF` - Belgian Franc
	// * `BEC` - Belgian Franc (convertible)
	// * `BEL` - Belgian Franc (financial)
	// * `BZD` - Belize Dollar
	// * `BMD` - Bermudan Dollar
	// * `BTN` - Bhutanese Ngultrum
	// * `BOB` - Bolivian Boliviano
	// * `BOL` - Bolivian Boliviano (1863–1963)
	// * `BOV` - Bolivian Mvdol
	// * `BOP` - Bolivian Peso
	// * `BAM` - Bosnia-Herzegovina Convertible Mark
	// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
	// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
	// * `BWP` - Botswanan Pula
	// * `BRC` - Brazilian Cruzado (1986–1989)
	// * `BRZ` - Brazilian Cruzeiro (1942–1967)
	// * `BRE` - Brazilian Cruzeiro (1990–1993)
	// * `BRR` - Brazilian Cruzeiro (1993–1994)
	// * `BRN` - Brazilian New Cruzado (1989–1990)
	// * `BRB` - Brazilian New Cruzeiro (1967–1986)
	// * `BRL` - Brazilian Real
	// * `GBP` - British Pound
	// * `BND` - Brunei Dollar
	// * `BGL` - Bulgarian Hard Lev
	// * `BGN` - Bulgarian Lev
	// * `BGO` - Bulgarian Lev (1879–1952)
	// * `BGM` - Bulgarian Socialist Lev
	// * `BUK` - Burmese Kyat
	// * `BIF` - Burundian Franc
	// * `XPF` - CFP Franc
	// * `KHR` - Cambodian Riel
	// * `CAD` - Canadian Dollar
	// * `CVE` - Cape Verdean Escudo
	// * `KYD` - Cayman Islands Dollar
	// * `XAF` - Central African CFA Franc
	// * `CLE` - Chilean Escudo
	// * `CLP` - Chilean Peso
	// * `CLF` - Chilean Unit of Account (UF)
	// * `CNX` - Chinese People’s Bank Dollar
	// * `CNY` - Chinese Yuan
	// * `CNH` - Chinese Yuan (offshore)
	// * `COP` - Colombian Peso
	// * `COU` - Colombian Real Value Unit
	// * `KMF` - Comorian Franc
	// * `CDF` - Congolese Franc
	// * `CRC` - Costa Rican Colón
	// * `HRD` - Croatian Dinar
	// * `HRK` - Croatian Kuna
	// * `CUC` - Cuban Convertible Peso
	// * `CUP` - Cuban Peso
	// * `CYP` - Cypriot Pound
	// * `CZK` - Czech Koruna
	// * `CSK` - Czechoslovak Hard Koruna
	// * `DKK` - Danish Krone
	// * `DJF` - Djiboutian Franc
	// * `DOP` - Dominican Peso
	// * `NLG` - Dutch Guilder
	// * `XCD` - East Caribbean Dollar
	// * `DDM` - East German Mark
	// * `ECS` - Ecuadorian Sucre
	// * `ECV` - Ecuadorian Unit of Constant Value
	// * `EGP` - Egyptian Pound
	// * `GQE` - Equatorial Guinean Ekwele
	// * `ERN` - Eritrean Nakfa
	// * `EEK` - Estonian Kroon
	// * `ETB` - Ethiopian Birr
	// * `EUR` - Euro
	// * `XBA` - European Composite Unit
	// * `XEU` - European Currency Unit
	// * `XBB` - European Monetary Unit
	// * `XBC` - European Unit of Account (XBC)
	// * `XBD` - European Unit of Account (XBD)
	// * `FKP` - Falkland Islands Pound
	// * `FJD` - Fijian Dollar
	// * `FIM` - Finnish Markka
	// * `FRF` - French Franc
	// * `XFO` - French Gold Franc
	// * `XFU` - French UIC-Franc
	// * `GMD` - Gambian Dalasi
	// * `GEK` - Georgian Kupon Larit
	// * `GEL` - Georgian Lari
	// * `DEM` - German Mark
	// * `GHS` - Ghanaian Cedi
	// * `GHC` - Ghanaian Cedi (1979–2007)
	// * `GIP` - Gibraltar Pound
	// * `XAU` - Gold
	// * `GRD` - Greek Drachma
	// * `GTQ` - Guatemalan Quetzal
	// * `GWP` - Guinea-Bissau Peso
	// * `GNF` - Guinean Franc
	// * `GNS` - Guinean Syli
	// * `GYD` - Guyanaese Dollar
	// * `HTG` - Haitian Gourde
	// * `HNL` - Honduran Lempira
	// * `HKD` - Hong Kong Dollar
	// * `HUF` - Hungarian Forint
	// * `IMP` - IMP
	// * `ISK` - Icelandic Króna
	// * `ISJ` - Icelandic Króna (1918–1981)
	// * `INR` - Indian Rupee
	// * `IDR` - Indonesian Rupiah
	// * `IRR` - Iranian Rial
	// * `IQD` - Iraqi Dinar
	// * `IEP` - Irish Pound
	// * `ILS` - Israeli New Shekel
	// * `ILP` - Israeli Pound
	// * `ILR` - Israeli Shekel (1980–1985)
	// * `ITL` - Italian Lira
	// * `JMD` - Jamaican Dollar
	// * `JPY` - Japanese Yen
	// * `JOD` - Jordanian Dinar
	// * `KZT` - Kazakhstani Tenge
	// * `KES` - Kenyan Shilling
	// * `KWD` - Kuwaiti Dinar
	// * `KGS` - Kyrgystani Som
	// * `LAK` - Laotian Kip
	// * `LVL` - Latvian Lats
	// * `LVR` - Latvian Ruble
	// * `LBP` - Lebanese Pound
	// * `LSL` - Lesotho Loti
	// * `LRD` - Liberian Dollar
	// * `LYD` - Libyan Dinar
	// * `LTL` - Lithuanian Litas
	// * `LTT` - Lithuanian Talonas
	// * `LUL` - Luxembourg Financial Franc
	// * `LUC` - Luxembourgian Convertible Franc
	// * `LUF` - Luxembourgian Franc
	// * `MOP` - Macanese Pataca
	// * `MKD` - Macedonian Denar
	// * `MKN` - Macedonian Denar (1992–1993)
	// * `MGA` - Malagasy Ariary
	// * `MGF` - Malagasy Franc
	// * `MWK` - Malawian Kwacha
	// * `MYR` - Malaysian Ringgit
	// * `MVR` - Maldivian Rufiyaa
	// * `MVP` - Maldivian Rupee (1947–1981)
	// * `MLF` - Malian Franc
	// * `MTL` - Maltese Lira
	// * `MTP` - Maltese Pound
	// * `MRU` - Mauritanian Ouguiya
	// * `MRO` - Mauritanian Ouguiya (1973–2017)
	// * `MUR` - Mauritian Rupee
	// * `MXV` - Mexican Investment Unit
	// * `MXN` - Mexican Peso
	// * `MXP` - Mexican Silver Peso (1861–1992)
	// * `MDC` - Moldovan Cupon
	// * `MDL` - Moldovan Leu
	// * `MCF` - Monegasque Franc
	// * `MNT` - Mongolian Tugrik
	// * `MAD` - Moroccan Dirham
	// * `MAF` - Moroccan Franc
	// * `MZE` - Mozambican Escudo
	// * `MZN` - Mozambican Metical
	// * `MZM` - Mozambican Metical (1980–2006)
	// * `MMK` - Myanmar Kyat
	// * `NAD` - Namibian Dollar
	// * `NPR` - Nepalese Rupee
	// * `ANG` - Netherlands Antillean Guilder
	// * `TWD` - New Taiwan Dollar
	// * `NZD` - New Zealand Dollar
	// * `NIO` - Nicaraguan Córdoba
	// * `NIC` - Nicaraguan Córdoba (1988–1991)
	// * `NGN` - Nigerian Naira
	// * `KPW` - North Korean Won
	// * `NOK` - Norwegian Krone
	// * `OMR` - Omani Rial
	// * `PKR` - Pakistani Rupee
	// * `XPD` - Palladium
	// * `PAB` - Panamanian Balboa
	// * `PGK` - Papua New Guinean Kina
	// * `PYG` - Paraguayan Guarani
	// * `PEI` - Peruvian Inti
	// * `PEN` - Peruvian Sol
	// * `PES` - Peruvian Sol (1863–1965)
	// * `PHP` - Philippine Peso
	// * `XPT` - Platinum
	// * `PLN` - Polish Zloty
	// * `PLZ` - Polish Zloty (1950–1995)
	// * `PTE` - Portuguese Escudo
	// * `GWE` - Portuguese Guinea Escudo
	// * `QAR` - Qatari Rial
	// * `XRE` - RINET Funds
	// * `RHD` - Rhodesian Dollar
	// * `RON` - Romanian Leu
	// * `ROL` - Romanian Leu (1952–2006)
	// * `RUB` - Russian Ruble
	// * `RUR` - Russian Ruble (1991–1998)
	// * `RWF` - Rwandan Franc
	// * `SVC` - Salvadoran Colón
	// * `WST` - Samoan Tala
	// * `SAR` - Saudi Riyal
	// * `RSD` - Serbian Dinar
	// * `CSD` - Serbian Dinar (2002–2006)
	// * `SCR` - Seychellois Rupee
	// * `SLL` - Sierra Leonean Leone
	// * `XAG` - Silver
	// * `SGD` - Singapore Dollar
	// * `SKK` - Slovak Koruna
	// * `SIT` - Slovenian Tolar
	// * `SBD` - Solomon Islands Dollar
	// * `SOS` - Somali Shilling
	// * `ZAR` - South African Rand
	// * `ZAL` - South African Rand (financial)
	// * `KRH` - South Korean Hwan (1953–1962)
	// * `KRW` - South Korean Won
	// * `KRO` - South Korean Won (1945–1953)
	// * `SSP` - South Sudanese Pound
	// * `SUR` - Soviet Rouble
	// * `ESP` - Spanish Peseta
	// * `ESA` - Spanish Peseta (A account)
	// * `ESB` - Spanish Peseta (convertible account)
	// * `XDR` - Special Drawing Rights
	// * `LKR` - Sri Lankan Rupee
	// * `SHP` - St. Helena Pound
	// * `XSU` - Sucre
	// * `SDD` - Sudanese Dinar (1992–2007)
	// * `SDG` - Sudanese Pound
	// * `SDP` - Sudanese Pound (1957–1998)
	// * `SRD` - Surinamese Dollar
	// * `SRG` - Surinamese Guilder
	// * `SZL` - Swazi Lilangeni
	// * `SEK` - Swedish Krona
	// * `CHF` - Swiss Franc
	// * `SYP` - Syrian Pound
	// * `STN` - São Tomé & Príncipe Dobra
	// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
	// * `TVD` - TVD
	// * `TJR` - Tajikistani Ruble
	// * `TJS` - Tajikistani Somoni
	// * `TZS` - Tanzanian Shilling
	// * `XTS` - Testing Currency Code
	// * `THB` - Thai Baht
	// * `XXX` - The codes assigned for transactions where no currency is involved
	// * `TPE` - Timorese Escudo
	// * `TOP` - Tongan Paʻanga
	// * `TTD` - Trinidad & Tobago Dollar
	// * `TND` - Tunisian Dinar
	// * `TRY` - Turkish Lira
	// * `TRL` - Turkish Lira (1922–2005)
	// * `TMT` - Turkmenistani Manat
	// * `TMM` - Turkmenistani Manat (1993–2009)
	// * `USD` - US Dollar
	// * `USN` - US Dollar (Next day)
	// * `USS` - US Dollar (Same day)
	// * `UGX` - Ugandan Shilling
	// * `UGS` - Ugandan Shilling (1966–1987)
	// * `UAH` - Ukrainian Hryvnia
	// * `UAK` - Ukrainian Karbovanets
	// * `AED` - United Arab Emirates Dirham
	// * `UYW` - Uruguayan Nominal Wage Index Unit
	// * `UYU` - Uruguayan Peso
	// * `UYP` - Uruguayan Peso (1975–1993)
	// * `UYI` - Uruguayan Peso (Indexed Units)
	// * `UZS` - Uzbekistani Som
	// * `VUV` - Vanuatu Vatu
	// * `VES` - Venezuelan Bolívar
	// * `VEB` - Venezuelan Bolívar (1871–2008)
	// * `VEF` - Venezuelan Bolívar (2008–2018)
	// * `VND` - Vietnamese Dong
	// * `VNN` - Vietnamese Dong (1978–1985)
	// * `CHE` - WIR Euro
	// * `CHW` - WIR Franc
	// * `XOF` - West African CFA Franc
	// * `YDD` - Yemeni Dinar
	// * `YER` - Yemeni Rial
	// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
	// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
	// * `YUM` - Yugoslavian New Dinar (1994–2002)
	// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
	// * `ZWN` - ZWN
	// * `ZRN` - Zairean New Zaire (1993–1998)
	// * `ZRZ` - Zairean Zaire (1971–1993)
	// * `ZMW` - Zambian Kwacha
	// * `ZMK` - Zambian Kwacha (1968–2012)
	// * `ZWD` - Zimbabwean Dollar (1980–2008)
	// * `ZWR` - Zimbabwean Dollar (2008)
	// * `ZWL` - Zimbabwean Dollar (2009)
	Currency *CashFlowStatementCurrency `json:"currency,omitempty"`
	// The company the cash flow statement belongs to.
	Company *CashFlowStatementCompany `json:"company,omitempty"`
	// The cash flow statement's start period.
	StartPeriod *time.Time `json:"start_period,omitempty"`
	// The cash flow statement's end period.
	EndPeriod *time.Time `json:"end_period,omitempty"`
	// Cash and cash equivalents at the beginning of the cash flow statement's period.
	CashAtBeginningOfPeriod *float64 `json:"cash_at_beginning_of_period,omitempty"`
	// Cash and cash equivalents at the beginning of the cash flow statement's period.
	CashAtEndOfPeriod   *float64      `json:"cash_at_end_of_period,omitempty"`
	OperatingActivities []*ReportItem `json:"operating_activities,omitempty"`
	InvestingActivities []*ReportItem `json:"investing_activities,omitempty"`
	FinancingActivities []*ReportItem `json:"financing_activities,omitempty"`
	// The time that cash flow statement was generated by the accounting system.
	RemoteGeneratedAt *time.Time `json:"remote_generated_at,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted *bool      `json:"remote_was_deleted,omitempty"`
	CreatedAt        *time.Time `json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt    *time.Time     `json:"modified_at,omitempty"`
	FieldMappings map[string]any `json:"field_mappings,omitempty"`
	RemoteData    []*RemoteData  `json:"remote_data,omitempty"`
}

// The company the cash flow statement belongs to.
type CashFlowStatementCompany struct {
	typeName    string
	String      string
	CompanyInfo *CompanyInfo
}

func NewCashFlowStatementCompanyFromString(value string) *CashFlowStatementCompany {
	return &CashFlowStatementCompany{typeName: "string", String: value}
}

func NewCashFlowStatementCompanyFromCompanyInfo(value *CompanyInfo) *CashFlowStatementCompany {
	return &CashFlowStatementCompany{typeName: "companyInfo", CompanyInfo: value}
}

func (c *CashFlowStatementCompany) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	valueCompanyInfo := new(CompanyInfo)
	if err := json.Unmarshal(data, &valueCompanyInfo); err == nil {
		c.typeName = "companyInfo"
		c.CompanyInfo = valueCompanyInfo
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CashFlowStatementCompany) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "companyInfo":
		return json.Marshal(c.CompanyInfo)
	}
}

type CashFlowStatementCompanyVisitor interface {
	VisitString(string) error
	VisitCompanyInfo(*CompanyInfo) error
}

func (c *CashFlowStatementCompany) Accept(visitor CashFlowStatementCompanyVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return visitor.VisitString(c.String)
	case "companyInfo":
		return visitor.VisitCompanyInfo(c.CompanyInfo)
	}
}

// The cash flow statement's currency.
//
// * `XUA` - ADB Unit of Account
// * `AFN` - Afghan Afghani
// * `AFA` - Afghan Afghani (1927–2002)
// * `ALL` - Albanian Lek
// * `ALK` - Albanian Lek (1946–1965)
// * `DZD` - Algerian Dinar
// * `ADP` - Andorran Peseta
// * `AOA` - Angolan Kwanza
// * `AOK` - Angolan Kwanza (1977–1991)
// * `AON` - Angolan New Kwanza (1990–2000)
// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
// * `ARA` - Argentine Austral
// * `ARS` - Argentine Peso
// * `ARM` - Argentine Peso (1881–1970)
// * `ARP` - Argentine Peso (1983–1985)
// * `ARL` - Argentine Peso Ley (1970–1983)
// * `AMD` - Armenian Dram
// * `AWG` - Aruban Florin
// * `AUD` - Australian Dollar
// * `ATS` - Austrian Schilling
// * `AZN` - Azerbaijani Manat
// * `AZM` - Azerbaijani Manat (1993–2006)
// * `BSD` - Bahamian Dollar
// * `BHD` - Bahraini Dinar
// * `BDT` - Bangladeshi Taka
// * `BBD` - Barbadian Dollar
// * `BYN` - Belarusian Ruble
// * `BYB` - Belarusian Ruble (1994–1999)
// * `BYR` - Belarusian Ruble (2000–2016)
// * `BEF` - Belgian Franc
// * `BEC` - Belgian Franc (convertible)
// * `BEL` - Belgian Franc (financial)
// * `BZD` - Belize Dollar
// * `BMD` - Bermudan Dollar
// * `BTN` - Bhutanese Ngultrum
// * `BOB` - Bolivian Boliviano
// * `BOL` - Bolivian Boliviano (1863–1963)
// * `BOV` - Bolivian Mvdol
// * `BOP` - Bolivian Peso
// * `BAM` - Bosnia-Herzegovina Convertible Mark
// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
// * `BWP` - Botswanan Pula
// * `BRC` - Brazilian Cruzado (1986–1989)
// * `BRZ` - Brazilian Cruzeiro (1942–1967)
// * `BRE` - Brazilian Cruzeiro (1990–1993)
// * `BRR` - Brazilian Cruzeiro (1993–1994)
// * `BRN` - Brazilian New Cruzado (1989–1990)
// * `BRB` - Brazilian New Cruzeiro (1967–1986)
// * `BRL` - Brazilian Real
// * `GBP` - British Pound
// * `BND` - Brunei Dollar
// * `BGL` - Bulgarian Hard Lev
// * `BGN` - Bulgarian Lev
// * `BGO` - Bulgarian Lev (1879–1952)
// * `BGM` - Bulgarian Socialist Lev
// * `BUK` - Burmese Kyat
// * `BIF` - Burundian Franc
// * `XPF` - CFP Franc
// * `KHR` - Cambodian Riel
// * `CAD` - Canadian Dollar
// * `CVE` - Cape Verdean Escudo
// * `KYD` - Cayman Islands Dollar
// * `XAF` - Central African CFA Franc
// * `CLE` - Chilean Escudo
// * `CLP` - Chilean Peso
// * `CLF` - Chilean Unit of Account (UF)
// * `CNX` - Chinese People’s Bank Dollar
// * `CNY` - Chinese Yuan
// * `CNH` - Chinese Yuan (offshore)
// * `COP` - Colombian Peso
// * `COU` - Colombian Real Value Unit
// * `KMF` - Comorian Franc
// * `CDF` - Congolese Franc
// * `CRC` - Costa Rican Colón
// * `HRD` - Croatian Dinar
// * `HRK` - Croatian Kuna
// * `CUC` - Cuban Convertible Peso
// * `CUP` - Cuban Peso
// * `CYP` - Cypriot Pound
// * `CZK` - Czech Koruna
// * `CSK` - Czechoslovak Hard Koruna
// * `DKK` - Danish Krone
// * `DJF` - Djiboutian Franc
// * `DOP` - Dominican Peso
// * `NLG` - Dutch Guilder
// * `XCD` - East Caribbean Dollar
// * `DDM` - East German Mark
// * `ECS` - Ecuadorian Sucre
// * `ECV` - Ecuadorian Unit of Constant Value
// * `EGP` - Egyptian Pound
// * `GQE` - Equatorial Guinean Ekwele
// * `ERN` - Eritrean Nakfa
// * `EEK` - Estonian Kroon
// * `ETB` - Ethiopian Birr
// * `EUR` - Euro
// * `XBA` - European Composite Unit
// * `XEU` - European Currency Unit
// * `XBB` - European Monetary Unit
// * `XBC` - European Unit of Account (XBC)
// * `XBD` - European Unit of Account (XBD)
// * `FKP` - Falkland Islands Pound
// * `FJD` - Fijian Dollar
// * `FIM` - Finnish Markka
// * `FRF` - French Franc
// * `XFO` - French Gold Franc
// * `XFU` - French UIC-Franc
// * `GMD` - Gambian Dalasi
// * `GEK` - Georgian Kupon Larit
// * `GEL` - Georgian Lari
// * `DEM` - German Mark
// * `GHS` - Ghanaian Cedi
// * `GHC` - Ghanaian Cedi (1979–2007)
// * `GIP` - Gibraltar Pound
// * `XAU` - Gold
// * `GRD` - Greek Drachma
// * `GTQ` - Guatemalan Quetzal
// * `GWP` - Guinea-Bissau Peso
// * `GNF` - Guinean Franc
// * `GNS` - Guinean Syli
// * `GYD` - Guyanaese Dollar
// * `HTG` - Haitian Gourde
// * `HNL` - Honduran Lempira
// * `HKD` - Hong Kong Dollar
// * `HUF` - Hungarian Forint
// * `IMP` - IMP
// * `ISK` - Icelandic Króna
// * `ISJ` - Icelandic Króna (1918–1981)
// * `INR` - Indian Rupee
// * `IDR` - Indonesian Rupiah
// * `IRR` - Iranian Rial
// * `IQD` - Iraqi Dinar
// * `IEP` - Irish Pound
// * `ILS` - Israeli New Shekel
// * `ILP` - Israeli Pound
// * `ILR` - Israeli Shekel (1980–1985)
// * `ITL` - Italian Lira
// * `JMD` - Jamaican Dollar
// * `JPY` - Japanese Yen
// * `JOD` - Jordanian Dinar
// * `KZT` - Kazakhstani Tenge
// * `KES` - Kenyan Shilling
// * `KWD` - Kuwaiti Dinar
// * `KGS` - Kyrgystani Som
// * `LAK` - Laotian Kip
// * `LVL` - Latvian Lats
// * `LVR` - Latvian Ruble
// * `LBP` - Lebanese Pound
// * `LSL` - Lesotho Loti
// * `LRD` - Liberian Dollar
// * `LYD` - Libyan Dinar
// * `LTL` - Lithuanian Litas
// * `LTT` - Lithuanian Talonas
// * `LUL` - Luxembourg Financial Franc
// * `LUC` - Luxembourgian Convertible Franc
// * `LUF` - Luxembourgian Franc
// * `MOP` - Macanese Pataca
// * `MKD` - Macedonian Denar
// * `MKN` - Macedonian Denar (1992–1993)
// * `MGA` - Malagasy Ariary
// * `MGF` - Malagasy Franc
// * `MWK` - Malawian Kwacha
// * `MYR` - Malaysian Ringgit
// * `MVR` - Maldivian Rufiyaa
// * `MVP` - Maldivian Rupee (1947–1981)
// * `MLF` - Malian Franc
// * `MTL` - Maltese Lira
// * `MTP` - Maltese Pound
// * `MRU` - Mauritanian Ouguiya
// * `MRO` - Mauritanian Ouguiya (1973–2017)
// * `MUR` - Mauritian Rupee
// * `MXV` - Mexican Investment Unit
// * `MXN` - Mexican Peso
// * `MXP` - Mexican Silver Peso (1861–1992)
// * `MDC` - Moldovan Cupon
// * `MDL` - Moldovan Leu
// * `MCF` - Monegasque Franc
// * `MNT` - Mongolian Tugrik
// * `MAD` - Moroccan Dirham
// * `MAF` - Moroccan Franc
// * `MZE` - Mozambican Escudo
// * `MZN` - Mozambican Metical
// * `MZM` - Mozambican Metical (1980–2006)
// * `MMK` - Myanmar Kyat
// * `NAD` - Namibian Dollar
// * `NPR` - Nepalese Rupee
// * `ANG` - Netherlands Antillean Guilder
// * `TWD` - New Taiwan Dollar
// * `NZD` - New Zealand Dollar
// * `NIO` - Nicaraguan Córdoba
// * `NIC` - Nicaraguan Córdoba (1988–1991)
// * `NGN` - Nigerian Naira
// * `KPW` - North Korean Won
// * `NOK` - Norwegian Krone
// * `OMR` - Omani Rial
// * `PKR` - Pakistani Rupee
// * `XPD` - Palladium
// * `PAB` - Panamanian Balboa
// * `PGK` - Papua New Guinean Kina
// * `PYG` - Paraguayan Guarani
// * `PEI` - Peruvian Inti
// * `PEN` - Peruvian Sol
// * `PES` - Peruvian Sol (1863–1965)
// * `PHP` - Philippine Peso
// * `XPT` - Platinum
// * `PLN` - Polish Zloty
// * `PLZ` - Polish Zloty (1950–1995)
// * `PTE` - Portuguese Escudo
// * `GWE` - Portuguese Guinea Escudo
// * `QAR` - Qatari Rial
// * `XRE` - RINET Funds
// * `RHD` - Rhodesian Dollar
// * `RON` - Romanian Leu
// * `ROL` - Romanian Leu (1952–2006)
// * `RUB` - Russian Ruble
// * `RUR` - Russian Ruble (1991–1998)
// * `RWF` - Rwandan Franc
// * `SVC` - Salvadoran Colón
// * `WST` - Samoan Tala
// * `SAR` - Saudi Riyal
// * `RSD` - Serbian Dinar
// * `CSD` - Serbian Dinar (2002–2006)
// * `SCR` - Seychellois Rupee
// * `SLL` - Sierra Leonean Leone
// * `XAG` - Silver
// * `SGD` - Singapore Dollar
// * `SKK` - Slovak Koruna
// * `SIT` - Slovenian Tolar
// * `SBD` - Solomon Islands Dollar
// * `SOS` - Somali Shilling
// * `ZAR` - South African Rand
// * `ZAL` - South African Rand (financial)
// * `KRH` - South Korean Hwan (1953–1962)
// * `KRW` - South Korean Won
// * `KRO` - South Korean Won (1945–1953)
// * `SSP` - South Sudanese Pound
// * `SUR` - Soviet Rouble
// * `ESP` - Spanish Peseta
// * `ESA` - Spanish Peseta (A account)
// * `ESB` - Spanish Peseta (convertible account)
// * `XDR` - Special Drawing Rights
// * `LKR` - Sri Lankan Rupee
// * `SHP` - St. Helena Pound
// * `XSU` - Sucre
// * `SDD` - Sudanese Dinar (1992–2007)
// * `SDG` - Sudanese Pound
// * `SDP` - Sudanese Pound (1957–1998)
// * `SRD` - Surinamese Dollar
// * `SRG` - Surinamese Guilder
// * `SZL` - Swazi Lilangeni
// * `SEK` - Swedish Krona
// * `CHF` - Swiss Franc
// * `SYP` - Syrian Pound
// * `STN` - São Tomé & Príncipe Dobra
// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
// * `TVD` - TVD
// * `TJR` - Tajikistani Ruble
// * `TJS` - Tajikistani Somoni
// * `TZS` - Tanzanian Shilling
// * `XTS` - Testing Currency Code
// * `THB` - Thai Baht
// * `XXX` - The codes assigned for transactions where no currency is involved
// * `TPE` - Timorese Escudo
// * `TOP` - Tongan Paʻanga
// * `TTD` - Trinidad & Tobago Dollar
// * `TND` - Tunisian Dinar
// * `TRY` - Turkish Lira
// * `TRL` - Turkish Lira (1922–2005)
// * `TMT` - Turkmenistani Manat
// * `TMM` - Turkmenistani Manat (1993–2009)
// * `USD` - US Dollar
// * `USN` - US Dollar (Next day)
// * `USS` - US Dollar (Same day)
// * `UGX` - Ugandan Shilling
// * `UGS` - Ugandan Shilling (1966–1987)
// * `UAH` - Ukrainian Hryvnia
// * `UAK` - Ukrainian Karbovanets
// * `AED` - United Arab Emirates Dirham
// * `UYW` - Uruguayan Nominal Wage Index Unit
// * `UYU` - Uruguayan Peso
// * `UYP` - Uruguayan Peso (1975–1993)
// * `UYI` - Uruguayan Peso (Indexed Units)
// * `UZS` - Uzbekistani Som
// * `VUV` - Vanuatu Vatu
// * `VES` - Venezuelan Bolívar
// * `VEB` - Venezuelan Bolívar (1871–2008)
// * `VEF` - Venezuelan Bolívar (2008–2018)
// * `VND` - Vietnamese Dong
// * `VNN` - Vietnamese Dong (1978–1985)
// * `CHE` - WIR Euro
// * `CHW` - WIR Franc
// * `XOF` - West African CFA Franc
// * `YDD` - Yemeni Dinar
// * `YER` - Yemeni Rial
// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
// * `YUM` - Yugoslavian New Dinar (1994–2002)
// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
// * `ZWN` - ZWN
// * `ZRN` - Zairean New Zaire (1993–1998)
// * `ZRZ` - Zairean Zaire (1971–1993)
// * `ZMW` - Zambian Kwacha
// * `ZMK` - Zambian Kwacha (1968–2012)
// * `ZWD` - Zimbabwean Dollar (1980–2008)
// * `ZWR` - Zimbabwean Dollar (2008)
// * `ZWL` - Zimbabwean Dollar (2009)
type CashFlowStatementCurrency struct {
	typeName     string
	CurrencyEnum CurrencyEnum
	String       string
}

func NewCashFlowStatementCurrencyFromCurrencyEnum(value CurrencyEnum) *CashFlowStatementCurrency {
	return &CashFlowStatementCurrency{typeName: "currencyEnum", CurrencyEnum: value}
}

func NewCashFlowStatementCurrencyFromString(value string) *CashFlowStatementCurrency {
	return &CashFlowStatementCurrency{typeName: "string", String: value}
}

func (c *CashFlowStatementCurrency) UnmarshalJSON(data []byte) error {
	var valueCurrencyEnum CurrencyEnum
	if err := json.Unmarshal(data, &valueCurrencyEnum); err == nil {
		c.typeName = "currencyEnum"
		c.CurrencyEnum = valueCurrencyEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CashFlowStatementCurrency) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "currencyEnum":
		return json.Marshal(c.CurrencyEnum)
	case "string":
		return json.Marshal(c.String)
	}
}

type CashFlowStatementCurrencyVisitor interface {
	VisitCurrencyEnum(CurrencyEnum) error
	VisitString(string) error
}

func (c *CashFlowStatementCurrency) Accept(visitor CashFlowStatementCurrencyVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "currencyEnum":
		return visitor.VisitCurrencyEnum(c.CurrencyEnum)
	case "string":
		return visitor.VisitString(c.String)
	}
}

// * `hris` - hris
// * `ats` - ats
// * `accounting` - accounting
// * `ticketing` - ticketing
// * `crm` - crm
// * `mktg` - mktg
// * `filestorage` - filestorage
type CategoriesEnum uint

const (
	CategoriesEnumHris CategoriesEnum = iota + 1
	CategoriesEnumAts
	CategoriesEnumAccounting
	CategoriesEnumTicketing
	CategoriesEnumCrm
	CategoriesEnumMktg
	CategoriesEnumFilestorage
)

func (c CategoriesEnum) String() string {
	switch c {
	default:
		return strconv.Itoa(int(c))
	case CategoriesEnumHris:
		return "hris"
	case CategoriesEnumAts:
		return "ats"
	case CategoriesEnumAccounting:
		return "accounting"
	case CategoriesEnumTicketing:
		return "ticketing"
	case CategoriesEnumCrm:
		return "crm"
	case CategoriesEnumMktg:
		return "mktg"
	case CategoriesEnumFilestorage:
		return "filestorage"
	}
}

func (c CategoriesEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", c.String())), nil
}

func (c *CategoriesEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "hris":
		value := CategoriesEnumHris
		*c = value
	case "ats":
		value := CategoriesEnumAts
		*c = value
	case "accounting":
		value := CategoriesEnumAccounting
		*c = value
	case "ticketing":
		value := CategoriesEnumTicketing
		*c = value
	case "crm":
		value := CategoriesEnumCrm
		*c = value
	case "mktg":
		value := CategoriesEnumMktg
		*c = value
	case "filestorage":
		value := CategoriesEnumFilestorage
		*c = value
	}
	return nil
}

// * `hris` - hris
// * `ats` - ats
// * `accounting` - accounting
// * `ticketing` - ticketing
// * `crm` - crm
// * `mktg` - mktg
// * `filestorage` - filestorage
type CategoryEnum uint

const (
	CategoryEnumHris CategoryEnum = iota + 1
	CategoryEnumAts
	CategoryEnumAccounting
	CategoryEnumTicketing
	CategoryEnumCrm
	CategoryEnumMktg
	CategoryEnumFilestorage
)

func (c CategoryEnum) String() string {
	switch c {
	default:
		return strconv.Itoa(int(c))
	case CategoryEnumHris:
		return "hris"
	case CategoryEnumAts:
		return "ats"
	case CategoryEnumAccounting:
		return "accounting"
	case CategoryEnumTicketing:
		return "ticketing"
	case CategoryEnumCrm:
		return "crm"
	case CategoryEnumMktg:
		return "mktg"
	case CategoryEnumFilestorage:
		return "filestorage"
	}
}

func (c CategoryEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", c.String())), nil
}

func (c *CategoryEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "hris":
		value := CategoryEnumHris
		*c = value
	case "ats":
		value := CategoryEnumAts
		*c = value
	case "accounting":
		value := CategoryEnumAccounting
		*c = value
	case "ticketing":
		value := CategoryEnumTicketing
		*c = value
	case "crm":
		value := CategoryEnumCrm
		*c = value
	case "mktg":
		value := CategoryEnumMktg
		*c = value
	case "filestorage":
		value := CategoryEnumFilestorage
		*c = value
	}
	return nil
}

// * `CLASS` - CLASS
// * `DEPARTMENT` - DEPARTMENT
type CategoryTypeEnum uint

const (
	CategoryTypeEnumClass CategoryTypeEnum = iota + 1
	CategoryTypeEnumDepartment
)

func (c CategoryTypeEnum) String() string {
	switch c {
	default:
		return strconv.Itoa(int(c))
	case CategoryTypeEnumClass:
		return "CLASS"
	case CategoryTypeEnumDepartment:
		return "DEPARTMENT"
	}
}

func (c CategoryTypeEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", c.String())), nil
}

func (c *CategoryTypeEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "CLASS":
		value := CategoryTypeEnumClass
		*c = value
	case "DEPARTMENT":
		value := CategoryTypeEnumDepartment
		*c = value
	}
	return nil
}

// * `ASSET` - ASSET
// * `EQUITY` - EQUITY
// * `EXPENSE` - EXPENSE
// * `LIABILITY` - LIABILITY
// * `REVENUE` - REVENUE
type ClassificationEnum uint

const (
	ClassificationEnumAsset ClassificationEnum = iota + 1
	ClassificationEnumEquity
	ClassificationEnumExpense
	ClassificationEnumLiability
	ClassificationEnumRevenue
)

func (c ClassificationEnum) String() string {
	switch c {
	default:
		return strconv.Itoa(int(c))
	case ClassificationEnumAsset:
		return "ASSET"
	case ClassificationEnumEquity:
		return "EQUITY"
	case ClassificationEnumExpense:
		return "EXPENSE"
	case ClassificationEnumLiability:
		return "LIABILITY"
	case ClassificationEnumRevenue:
		return "REVENUE"
	}
}

func (c ClassificationEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", c.String())), nil
}

func (c *ClassificationEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "ASSET":
		value := ClassificationEnumAsset
		*c = value
	case "EQUITY":
		value := ClassificationEnumEquity
		*c = value
	case "EXPENSE":
		value := ClassificationEnumExpense
		*c = value
	case "LIABILITY":
		value := ClassificationEnumLiability
		*c = value
	case "REVENUE":
		value := ClassificationEnumRevenue
		*c = value
	}
	return nil
}

type CommonModelScopesBodyRequest struct {
	ModelId        string               `json:"model_id"`
	EnabledActions []EnabledActionsEnum `json:"enabled_actions,omitempty"`
	DisabledFields []string             `json:"disabled_fields,omitempty"`
}

// # The CompanyInfo Object
// ### Description
// The `CompanyInfo` object contains information about the company of the linked account. If the company has multiple entities (also known as subsidiaries), each entity may show up as a single `CompanyInfo` record.
//
// ### Usage Example
// Fetch from the `GET CompanyInfo` endpoint and view a company's information.
type CompanyInfo struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The company's name.
	Name *string `json:"name,omitempty"`
	// The company's legal name.
	LegalName *string `json:"legal_name,omitempty"`
	// The company's tax number.
	TaxNumber *string `json:"tax_number,omitempty"`
	// The company's fiscal year end month.
	FiscalYearEndMonth *int `json:"fiscal_year_end_month,omitempty"`
	// The company's fiscal year end day.
	FiscalYearEndDay *int `json:"fiscal_year_end_day,omitempty"`
	// The currency set in the company's accounting platform.
	//
	// * `XUA` - ADB Unit of Account
	// * `AFN` - Afghan Afghani
	// * `AFA` - Afghan Afghani (1927–2002)
	// * `ALL` - Albanian Lek
	// * `ALK` - Albanian Lek (1946–1965)
	// * `DZD` - Algerian Dinar
	// * `ADP` - Andorran Peseta
	// * `AOA` - Angolan Kwanza
	// * `AOK` - Angolan Kwanza (1977–1991)
	// * `AON` - Angolan New Kwanza (1990–2000)
	// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
	// * `ARA` - Argentine Austral
	// * `ARS` - Argentine Peso
	// * `ARM` - Argentine Peso (1881–1970)
	// * `ARP` - Argentine Peso (1983–1985)
	// * `ARL` - Argentine Peso Ley (1970–1983)
	// * `AMD` - Armenian Dram
	// * `AWG` - Aruban Florin
	// * `AUD` - Australian Dollar
	// * `ATS` - Austrian Schilling
	// * `AZN` - Azerbaijani Manat
	// * `AZM` - Azerbaijani Manat (1993–2006)
	// * `BSD` - Bahamian Dollar
	// * `BHD` - Bahraini Dinar
	// * `BDT` - Bangladeshi Taka
	// * `BBD` - Barbadian Dollar
	// * `BYN` - Belarusian Ruble
	// * `BYB` - Belarusian Ruble (1994–1999)
	// * `BYR` - Belarusian Ruble (2000–2016)
	// * `BEF` - Belgian Franc
	// * `BEC` - Belgian Franc (convertible)
	// * `BEL` - Belgian Franc (financial)
	// * `BZD` - Belize Dollar
	// * `BMD` - Bermudan Dollar
	// * `BTN` - Bhutanese Ngultrum
	// * `BOB` - Bolivian Boliviano
	// * `BOL` - Bolivian Boliviano (1863–1963)
	// * `BOV` - Bolivian Mvdol
	// * `BOP` - Bolivian Peso
	// * `BAM` - Bosnia-Herzegovina Convertible Mark
	// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
	// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
	// * `BWP` - Botswanan Pula
	// * `BRC` - Brazilian Cruzado (1986–1989)
	// * `BRZ` - Brazilian Cruzeiro (1942–1967)
	// * `BRE` - Brazilian Cruzeiro (1990–1993)
	// * `BRR` - Brazilian Cruzeiro (1993–1994)
	// * `BRN` - Brazilian New Cruzado (1989–1990)
	// * `BRB` - Brazilian New Cruzeiro (1967–1986)
	// * `BRL` - Brazilian Real
	// * `GBP` - British Pound
	// * `BND` - Brunei Dollar
	// * `BGL` - Bulgarian Hard Lev
	// * `BGN` - Bulgarian Lev
	// * `BGO` - Bulgarian Lev (1879–1952)
	// * `BGM` - Bulgarian Socialist Lev
	// * `BUK` - Burmese Kyat
	// * `BIF` - Burundian Franc
	// * `XPF` - CFP Franc
	// * `KHR` - Cambodian Riel
	// * `CAD` - Canadian Dollar
	// * `CVE` - Cape Verdean Escudo
	// * `KYD` - Cayman Islands Dollar
	// * `XAF` - Central African CFA Franc
	// * `CLE` - Chilean Escudo
	// * `CLP` - Chilean Peso
	// * `CLF` - Chilean Unit of Account (UF)
	// * `CNX` - Chinese People’s Bank Dollar
	// * `CNY` - Chinese Yuan
	// * `CNH` - Chinese Yuan (offshore)
	// * `COP` - Colombian Peso
	// * `COU` - Colombian Real Value Unit
	// * `KMF` - Comorian Franc
	// * `CDF` - Congolese Franc
	// * `CRC` - Costa Rican Colón
	// * `HRD` - Croatian Dinar
	// * `HRK` - Croatian Kuna
	// * `CUC` - Cuban Convertible Peso
	// * `CUP` - Cuban Peso
	// * `CYP` - Cypriot Pound
	// * `CZK` - Czech Koruna
	// * `CSK` - Czechoslovak Hard Koruna
	// * `DKK` - Danish Krone
	// * `DJF` - Djiboutian Franc
	// * `DOP` - Dominican Peso
	// * `NLG` - Dutch Guilder
	// * `XCD` - East Caribbean Dollar
	// * `DDM` - East German Mark
	// * `ECS` - Ecuadorian Sucre
	// * `ECV` - Ecuadorian Unit of Constant Value
	// * `EGP` - Egyptian Pound
	// * `GQE` - Equatorial Guinean Ekwele
	// * `ERN` - Eritrean Nakfa
	// * `EEK` - Estonian Kroon
	// * `ETB` - Ethiopian Birr
	// * `EUR` - Euro
	// * `XBA` - European Composite Unit
	// * `XEU` - European Currency Unit
	// * `XBB` - European Monetary Unit
	// * `XBC` - European Unit of Account (XBC)
	// * `XBD` - European Unit of Account (XBD)
	// * `FKP` - Falkland Islands Pound
	// * `FJD` - Fijian Dollar
	// * `FIM` - Finnish Markka
	// * `FRF` - French Franc
	// * `XFO` - French Gold Franc
	// * `XFU` - French UIC-Franc
	// * `GMD` - Gambian Dalasi
	// * `GEK` - Georgian Kupon Larit
	// * `GEL` - Georgian Lari
	// * `DEM` - German Mark
	// * `GHS` - Ghanaian Cedi
	// * `GHC` - Ghanaian Cedi (1979–2007)
	// * `GIP` - Gibraltar Pound
	// * `XAU` - Gold
	// * `GRD` - Greek Drachma
	// * `GTQ` - Guatemalan Quetzal
	// * `GWP` - Guinea-Bissau Peso
	// * `GNF` - Guinean Franc
	// * `GNS` - Guinean Syli
	// * `GYD` - Guyanaese Dollar
	// * `HTG` - Haitian Gourde
	// * `HNL` - Honduran Lempira
	// * `HKD` - Hong Kong Dollar
	// * `HUF` - Hungarian Forint
	// * `IMP` - IMP
	// * `ISK` - Icelandic Króna
	// * `ISJ` - Icelandic Króna (1918–1981)
	// * `INR` - Indian Rupee
	// * `IDR` - Indonesian Rupiah
	// * `IRR` - Iranian Rial
	// * `IQD` - Iraqi Dinar
	// * `IEP` - Irish Pound
	// * `ILS` - Israeli New Shekel
	// * `ILP` - Israeli Pound
	// * `ILR` - Israeli Shekel (1980–1985)
	// * `ITL` - Italian Lira
	// * `JMD` - Jamaican Dollar
	// * `JPY` - Japanese Yen
	// * `JOD` - Jordanian Dinar
	// * `KZT` - Kazakhstani Tenge
	// * `KES` - Kenyan Shilling
	// * `KWD` - Kuwaiti Dinar
	// * `KGS` - Kyrgystani Som
	// * `LAK` - Laotian Kip
	// * `LVL` - Latvian Lats
	// * `LVR` - Latvian Ruble
	// * `LBP` - Lebanese Pound
	// * `LSL` - Lesotho Loti
	// * `LRD` - Liberian Dollar
	// * `LYD` - Libyan Dinar
	// * `LTL` - Lithuanian Litas
	// * `LTT` - Lithuanian Talonas
	// * `LUL` - Luxembourg Financial Franc
	// * `LUC` - Luxembourgian Convertible Franc
	// * `LUF` - Luxembourgian Franc
	// * `MOP` - Macanese Pataca
	// * `MKD` - Macedonian Denar
	// * `MKN` - Macedonian Denar (1992–1993)
	// * `MGA` - Malagasy Ariary
	// * `MGF` - Malagasy Franc
	// * `MWK` - Malawian Kwacha
	// * `MYR` - Malaysian Ringgit
	// * `MVR` - Maldivian Rufiyaa
	// * `MVP` - Maldivian Rupee (1947–1981)
	// * `MLF` - Malian Franc
	// * `MTL` - Maltese Lira
	// * `MTP` - Maltese Pound
	// * `MRU` - Mauritanian Ouguiya
	// * `MRO` - Mauritanian Ouguiya (1973–2017)
	// * `MUR` - Mauritian Rupee
	// * `MXV` - Mexican Investment Unit
	// * `MXN` - Mexican Peso
	// * `MXP` - Mexican Silver Peso (1861–1992)
	// * `MDC` - Moldovan Cupon
	// * `MDL` - Moldovan Leu
	// * `MCF` - Monegasque Franc
	// * `MNT` - Mongolian Tugrik
	// * `MAD` - Moroccan Dirham
	// * `MAF` - Moroccan Franc
	// * `MZE` - Mozambican Escudo
	// * `MZN` - Mozambican Metical
	// * `MZM` - Mozambican Metical (1980–2006)
	// * `MMK` - Myanmar Kyat
	// * `NAD` - Namibian Dollar
	// * `NPR` - Nepalese Rupee
	// * `ANG` - Netherlands Antillean Guilder
	// * `TWD` - New Taiwan Dollar
	// * `NZD` - New Zealand Dollar
	// * `NIO` - Nicaraguan Córdoba
	// * `NIC` - Nicaraguan Córdoba (1988–1991)
	// * `NGN` - Nigerian Naira
	// * `KPW` - North Korean Won
	// * `NOK` - Norwegian Krone
	// * `OMR` - Omani Rial
	// * `PKR` - Pakistani Rupee
	// * `XPD` - Palladium
	// * `PAB` - Panamanian Balboa
	// * `PGK` - Papua New Guinean Kina
	// * `PYG` - Paraguayan Guarani
	// * `PEI` - Peruvian Inti
	// * `PEN` - Peruvian Sol
	// * `PES` - Peruvian Sol (1863–1965)
	// * `PHP` - Philippine Peso
	// * `XPT` - Platinum
	// * `PLN` - Polish Zloty
	// * `PLZ` - Polish Zloty (1950–1995)
	// * `PTE` - Portuguese Escudo
	// * `GWE` - Portuguese Guinea Escudo
	// * `QAR` - Qatari Rial
	// * `XRE` - RINET Funds
	// * `RHD` - Rhodesian Dollar
	// * `RON` - Romanian Leu
	// * `ROL` - Romanian Leu (1952–2006)
	// * `RUB` - Russian Ruble
	// * `RUR` - Russian Ruble (1991–1998)
	// * `RWF` - Rwandan Franc
	// * `SVC` - Salvadoran Colón
	// * `WST` - Samoan Tala
	// * `SAR` - Saudi Riyal
	// * `RSD` - Serbian Dinar
	// * `CSD` - Serbian Dinar (2002–2006)
	// * `SCR` - Seychellois Rupee
	// * `SLL` - Sierra Leonean Leone
	// * `XAG` - Silver
	// * `SGD` - Singapore Dollar
	// * `SKK` - Slovak Koruna
	// * `SIT` - Slovenian Tolar
	// * `SBD` - Solomon Islands Dollar
	// * `SOS` - Somali Shilling
	// * `ZAR` - South African Rand
	// * `ZAL` - South African Rand (financial)
	// * `KRH` - South Korean Hwan (1953–1962)
	// * `KRW` - South Korean Won
	// * `KRO` - South Korean Won (1945–1953)
	// * `SSP` - South Sudanese Pound
	// * `SUR` - Soviet Rouble
	// * `ESP` - Spanish Peseta
	// * `ESA` - Spanish Peseta (A account)
	// * `ESB` - Spanish Peseta (convertible account)
	// * `XDR` - Special Drawing Rights
	// * `LKR` - Sri Lankan Rupee
	// * `SHP` - St. Helena Pound
	// * `XSU` - Sucre
	// * `SDD` - Sudanese Dinar (1992–2007)
	// * `SDG` - Sudanese Pound
	// * `SDP` - Sudanese Pound (1957–1998)
	// * `SRD` - Surinamese Dollar
	// * `SRG` - Surinamese Guilder
	// * `SZL` - Swazi Lilangeni
	// * `SEK` - Swedish Krona
	// * `CHF` - Swiss Franc
	// * `SYP` - Syrian Pound
	// * `STN` - São Tomé & Príncipe Dobra
	// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
	// * `TVD` - TVD
	// * `TJR` - Tajikistani Ruble
	// * `TJS` - Tajikistani Somoni
	// * `TZS` - Tanzanian Shilling
	// * `XTS` - Testing Currency Code
	// * `THB` - Thai Baht
	// * `XXX` - The codes assigned for transactions where no currency is involved
	// * `TPE` - Timorese Escudo
	// * `TOP` - Tongan Paʻanga
	// * `TTD` - Trinidad & Tobago Dollar
	// * `TND` - Tunisian Dinar
	// * `TRY` - Turkish Lira
	// * `TRL` - Turkish Lira (1922–2005)
	// * `TMT` - Turkmenistani Manat
	// * `TMM` - Turkmenistani Manat (1993–2009)
	// * `USD` - US Dollar
	// * `USN` - US Dollar (Next day)
	// * `USS` - US Dollar (Same day)
	// * `UGX` - Ugandan Shilling
	// * `UGS` - Ugandan Shilling (1966–1987)
	// * `UAH` - Ukrainian Hryvnia
	// * `UAK` - Ukrainian Karbovanets
	// * `AED` - United Arab Emirates Dirham
	// * `UYW` - Uruguayan Nominal Wage Index Unit
	// * `UYU` - Uruguayan Peso
	// * `UYP` - Uruguayan Peso (1975–1993)
	// * `UYI` - Uruguayan Peso (Indexed Units)
	// * `UZS` - Uzbekistani Som
	// * `VUV` - Vanuatu Vatu
	// * `VES` - Venezuelan Bolívar
	// * `VEB` - Venezuelan Bolívar (1871–2008)
	// * `VEF` - Venezuelan Bolívar (2008–2018)
	// * `VND` - Vietnamese Dong
	// * `VNN` - Vietnamese Dong (1978–1985)
	// * `CHE` - WIR Euro
	// * `CHW` - WIR Franc
	// * `XOF` - West African CFA Franc
	// * `YDD` - Yemeni Dinar
	// * `YER` - Yemeni Rial
	// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
	// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
	// * `YUM` - Yugoslavian New Dinar (1994–2002)
	// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
	// * `ZWN` - ZWN
	// * `ZRN` - Zairean New Zaire (1993–1998)
	// * `ZRZ` - Zairean Zaire (1971–1993)
	// * `ZMW` - Zambian Kwacha
	// * `ZMK` - Zambian Kwacha (1968–2012)
	// * `ZWD` - Zimbabwean Dollar (1980–2008)
	// * `ZWR` - Zimbabwean Dollar (2008)
	// * `ZWL` - Zimbabwean Dollar (2009)
	Currency *CompanyInfoCurrency `json:"currency,omitempty"`
	// When the third party's company was created.
	RemoteCreatedAt *time.Time `json:"remote_created_at,omitempty"`
	// The company's urls.
	Urls         []*string                `json:"urls,omitempty"`
	Addresses    []*Address               `json:"addresses,omitempty"`
	PhoneNumbers []*AccountingPhoneNumber `json:"phone_numbers,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted *bool      `json:"remote_was_deleted,omitempty"`
	CreatedAt        *time.Time `json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt    *time.Time     `json:"modified_at,omitempty"`
	FieldMappings map[string]any `json:"field_mappings,omitempty"`
	RemoteData    []*RemoteData  `json:"remote_data,omitempty"`
}

// The currency set in the company's accounting platform.
//
// * `XUA` - ADB Unit of Account
// * `AFN` - Afghan Afghani
// * `AFA` - Afghan Afghani (1927–2002)
// * `ALL` - Albanian Lek
// * `ALK` - Albanian Lek (1946–1965)
// * `DZD` - Algerian Dinar
// * `ADP` - Andorran Peseta
// * `AOA` - Angolan Kwanza
// * `AOK` - Angolan Kwanza (1977–1991)
// * `AON` - Angolan New Kwanza (1990–2000)
// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
// * `ARA` - Argentine Austral
// * `ARS` - Argentine Peso
// * `ARM` - Argentine Peso (1881–1970)
// * `ARP` - Argentine Peso (1983–1985)
// * `ARL` - Argentine Peso Ley (1970–1983)
// * `AMD` - Armenian Dram
// * `AWG` - Aruban Florin
// * `AUD` - Australian Dollar
// * `ATS` - Austrian Schilling
// * `AZN` - Azerbaijani Manat
// * `AZM` - Azerbaijani Manat (1993–2006)
// * `BSD` - Bahamian Dollar
// * `BHD` - Bahraini Dinar
// * `BDT` - Bangladeshi Taka
// * `BBD` - Barbadian Dollar
// * `BYN` - Belarusian Ruble
// * `BYB` - Belarusian Ruble (1994–1999)
// * `BYR` - Belarusian Ruble (2000–2016)
// * `BEF` - Belgian Franc
// * `BEC` - Belgian Franc (convertible)
// * `BEL` - Belgian Franc (financial)
// * `BZD` - Belize Dollar
// * `BMD` - Bermudan Dollar
// * `BTN` - Bhutanese Ngultrum
// * `BOB` - Bolivian Boliviano
// * `BOL` - Bolivian Boliviano (1863–1963)
// * `BOV` - Bolivian Mvdol
// * `BOP` - Bolivian Peso
// * `BAM` - Bosnia-Herzegovina Convertible Mark
// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
// * `BWP` - Botswanan Pula
// * `BRC` - Brazilian Cruzado (1986–1989)
// * `BRZ` - Brazilian Cruzeiro (1942–1967)
// * `BRE` - Brazilian Cruzeiro (1990–1993)
// * `BRR` - Brazilian Cruzeiro (1993–1994)
// * `BRN` - Brazilian New Cruzado (1989–1990)
// * `BRB` - Brazilian New Cruzeiro (1967–1986)
// * `BRL` - Brazilian Real
// * `GBP` - British Pound
// * `BND` - Brunei Dollar
// * `BGL` - Bulgarian Hard Lev
// * `BGN` - Bulgarian Lev
// * `BGO` - Bulgarian Lev (1879–1952)
// * `BGM` - Bulgarian Socialist Lev
// * `BUK` - Burmese Kyat
// * `BIF` - Burundian Franc
// * `XPF` - CFP Franc
// * `KHR` - Cambodian Riel
// * `CAD` - Canadian Dollar
// * `CVE` - Cape Verdean Escudo
// * `KYD` - Cayman Islands Dollar
// * `XAF` - Central African CFA Franc
// * `CLE` - Chilean Escudo
// * `CLP` - Chilean Peso
// * `CLF` - Chilean Unit of Account (UF)
// * `CNX` - Chinese People’s Bank Dollar
// * `CNY` - Chinese Yuan
// * `CNH` - Chinese Yuan (offshore)
// * `COP` - Colombian Peso
// * `COU` - Colombian Real Value Unit
// * `KMF` - Comorian Franc
// * `CDF` - Congolese Franc
// * `CRC` - Costa Rican Colón
// * `HRD` - Croatian Dinar
// * `HRK` - Croatian Kuna
// * `CUC` - Cuban Convertible Peso
// * `CUP` - Cuban Peso
// * `CYP` - Cypriot Pound
// * `CZK` - Czech Koruna
// * `CSK` - Czechoslovak Hard Koruna
// * `DKK` - Danish Krone
// * `DJF` - Djiboutian Franc
// * `DOP` - Dominican Peso
// * `NLG` - Dutch Guilder
// * `XCD` - East Caribbean Dollar
// * `DDM` - East German Mark
// * `ECS` - Ecuadorian Sucre
// * `ECV` - Ecuadorian Unit of Constant Value
// * `EGP` - Egyptian Pound
// * `GQE` - Equatorial Guinean Ekwele
// * `ERN` - Eritrean Nakfa
// * `EEK` - Estonian Kroon
// * `ETB` - Ethiopian Birr
// * `EUR` - Euro
// * `XBA` - European Composite Unit
// * `XEU` - European Currency Unit
// * `XBB` - European Monetary Unit
// * `XBC` - European Unit of Account (XBC)
// * `XBD` - European Unit of Account (XBD)
// * `FKP` - Falkland Islands Pound
// * `FJD` - Fijian Dollar
// * `FIM` - Finnish Markka
// * `FRF` - French Franc
// * `XFO` - French Gold Franc
// * `XFU` - French UIC-Franc
// * `GMD` - Gambian Dalasi
// * `GEK` - Georgian Kupon Larit
// * `GEL` - Georgian Lari
// * `DEM` - German Mark
// * `GHS` - Ghanaian Cedi
// * `GHC` - Ghanaian Cedi (1979–2007)
// * `GIP` - Gibraltar Pound
// * `XAU` - Gold
// * `GRD` - Greek Drachma
// * `GTQ` - Guatemalan Quetzal
// * `GWP` - Guinea-Bissau Peso
// * `GNF` - Guinean Franc
// * `GNS` - Guinean Syli
// * `GYD` - Guyanaese Dollar
// * `HTG` - Haitian Gourde
// * `HNL` - Honduran Lempira
// * `HKD` - Hong Kong Dollar
// * `HUF` - Hungarian Forint
// * `IMP` - IMP
// * `ISK` - Icelandic Króna
// * `ISJ` - Icelandic Króna (1918–1981)
// * `INR` - Indian Rupee
// * `IDR` - Indonesian Rupiah
// * `IRR` - Iranian Rial
// * `IQD` - Iraqi Dinar
// * `IEP` - Irish Pound
// * `ILS` - Israeli New Shekel
// * `ILP` - Israeli Pound
// * `ILR` - Israeli Shekel (1980–1985)
// * `ITL` - Italian Lira
// * `JMD` - Jamaican Dollar
// * `JPY` - Japanese Yen
// * `JOD` - Jordanian Dinar
// * `KZT` - Kazakhstani Tenge
// * `KES` - Kenyan Shilling
// * `KWD` - Kuwaiti Dinar
// * `KGS` - Kyrgystani Som
// * `LAK` - Laotian Kip
// * `LVL` - Latvian Lats
// * `LVR` - Latvian Ruble
// * `LBP` - Lebanese Pound
// * `LSL` - Lesotho Loti
// * `LRD` - Liberian Dollar
// * `LYD` - Libyan Dinar
// * `LTL` - Lithuanian Litas
// * `LTT` - Lithuanian Talonas
// * `LUL` - Luxembourg Financial Franc
// * `LUC` - Luxembourgian Convertible Franc
// * `LUF` - Luxembourgian Franc
// * `MOP` - Macanese Pataca
// * `MKD` - Macedonian Denar
// * `MKN` - Macedonian Denar (1992–1993)
// * `MGA` - Malagasy Ariary
// * `MGF` - Malagasy Franc
// * `MWK` - Malawian Kwacha
// * `MYR` - Malaysian Ringgit
// * `MVR` - Maldivian Rufiyaa
// * `MVP` - Maldivian Rupee (1947–1981)
// * `MLF` - Malian Franc
// * `MTL` - Maltese Lira
// * `MTP` - Maltese Pound
// * `MRU` - Mauritanian Ouguiya
// * `MRO` - Mauritanian Ouguiya (1973–2017)
// * `MUR` - Mauritian Rupee
// * `MXV` - Mexican Investment Unit
// * `MXN` - Mexican Peso
// * `MXP` - Mexican Silver Peso (1861–1992)
// * `MDC` - Moldovan Cupon
// * `MDL` - Moldovan Leu
// * `MCF` - Monegasque Franc
// * `MNT` - Mongolian Tugrik
// * `MAD` - Moroccan Dirham
// * `MAF` - Moroccan Franc
// * `MZE` - Mozambican Escudo
// * `MZN` - Mozambican Metical
// * `MZM` - Mozambican Metical (1980–2006)
// * `MMK` - Myanmar Kyat
// * `NAD` - Namibian Dollar
// * `NPR` - Nepalese Rupee
// * `ANG` - Netherlands Antillean Guilder
// * `TWD` - New Taiwan Dollar
// * `NZD` - New Zealand Dollar
// * `NIO` - Nicaraguan Córdoba
// * `NIC` - Nicaraguan Córdoba (1988–1991)
// * `NGN` - Nigerian Naira
// * `KPW` - North Korean Won
// * `NOK` - Norwegian Krone
// * `OMR` - Omani Rial
// * `PKR` - Pakistani Rupee
// * `XPD` - Palladium
// * `PAB` - Panamanian Balboa
// * `PGK` - Papua New Guinean Kina
// * `PYG` - Paraguayan Guarani
// * `PEI` - Peruvian Inti
// * `PEN` - Peruvian Sol
// * `PES` - Peruvian Sol (1863–1965)
// * `PHP` - Philippine Peso
// * `XPT` - Platinum
// * `PLN` - Polish Zloty
// * `PLZ` - Polish Zloty (1950–1995)
// * `PTE` - Portuguese Escudo
// * `GWE` - Portuguese Guinea Escudo
// * `QAR` - Qatari Rial
// * `XRE` - RINET Funds
// * `RHD` - Rhodesian Dollar
// * `RON` - Romanian Leu
// * `ROL` - Romanian Leu (1952–2006)
// * `RUB` - Russian Ruble
// * `RUR` - Russian Ruble (1991–1998)
// * `RWF` - Rwandan Franc
// * `SVC` - Salvadoran Colón
// * `WST` - Samoan Tala
// * `SAR` - Saudi Riyal
// * `RSD` - Serbian Dinar
// * `CSD` - Serbian Dinar (2002–2006)
// * `SCR` - Seychellois Rupee
// * `SLL` - Sierra Leonean Leone
// * `XAG` - Silver
// * `SGD` - Singapore Dollar
// * `SKK` - Slovak Koruna
// * `SIT` - Slovenian Tolar
// * `SBD` - Solomon Islands Dollar
// * `SOS` - Somali Shilling
// * `ZAR` - South African Rand
// * `ZAL` - South African Rand (financial)
// * `KRH` - South Korean Hwan (1953–1962)
// * `KRW` - South Korean Won
// * `KRO` - South Korean Won (1945–1953)
// * `SSP` - South Sudanese Pound
// * `SUR` - Soviet Rouble
// * `ESP` - Spanish Peseta
// * `ESA` - Spanish Peseta (A account)
// * `ESB` - Spanish Peseta (convertible account)
// * `XDR` - Special Drawing Rights
// * `LKR` - Sri Lankan Rupee
// * `SHP` - St. Helena Pound
// * `XSU` - Sucre
// * `SDD` - Sudanese Dinar (1992–2007)
// * `SDG` - Sudanese Pound
// * `SDP` - Sudanese Pound (1957–1998)
// * `SRD` - Surinamese Dollar
// * `SRG` - Surinamese Guilder
// * `SZL` - Swazi Lilangeni
// * `SEK` - Swedish Krona
// * `CHF` - Swiss Franc
// * `SYP` - Syrian Pound
// * `STN` - São Tomé & Príncipe Dobra
// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
// * `TVD` - TVD
// * `TJR` - Tajikistani Ruble
// * `TJS` - Tajikistani Somoni
// * `TZS` - Tanzanian Shilling
// * `XTS` - Testing Currency Code
// * `THB` - Thai Baht
// * `XXX` - The codes assigned for transactions where no currency is involved
// * `TPE` - Timorese Escudo
// * `TOP` - Tongan Paʻanga
// * `TTD` - Trinidad & Tobago Dollar
// * `TND` - Tunisian Dinar
// * `TRY` - Turkish Lira
// * `TRL` - Turkish Lira (1922–2005)
// * `TMT` - Turkmenistani Manat
// * `TMM` - Turkmenistani Manat (1993–2009)
// * `USD` - US Dollar
// * `USN` - US Dollar (Next day)
// * `USS` - US Dollar (Same day)
// * `UGX` - Ugandan Shilling
// * `UGS` - Ugandan Shilling (1966–1987)
// * `UAH` - Ukrainian Hryvnia
// * `UAK` - Ukrainian Karbovanets
// * `AED` - United Arab Emirates Dirham
// * `UYW` - Uruguayan Nominal Wage Index Unit
// * `UYU` - Uruguayan Peso
// * `UYP` - Uruguayan Peso (1975–1993)
// * `UYI` - Uruguayan Peso (Indexed Units)
// * `UZS` - Uzbekistani Som
// * `VUV` - Vanuatu Vatu
// * `VES` - Venezuelan Bolívar
// * `VEB` - Venezuelan Bolívar (1871–2008)
// * `VEF` - Venezuelan Bolívar (2008–2018)
// * `VND` - Vietnamese Dong
// * `VNN` - Vietnamese Dong (1978–1985)
// * `CHE` - WIR Euro
// * `CHW` - WIR Franc
// * `XOF` - West African CFA Franc
// * `YDD` - Yemeni Dinar
// * `YER` - Yemeni Rial
// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
// * `YUM` - Yugoslavian New Dinar (1994–2002)
// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
// * `ZWN` - ZWN
// * `ZRN` - Zairean New Zaire (1993–1998)
// * `ZRZ` - Zairean Zaire (1971–1993)
// * `ZMW` - Zambian Kwacha
// * `ZMK` - Zambian Kwacha (1968–2012)
// * `ZWD` - Zimbabwean Dollar (1980–2008)
// * `ZWR` - Zimbabwean Dollar (2008)
// * `ZWL` - Zimbabwean Dollar (2009)
type CompanyInfoCurrency struct {
	typeName     string
	CurrencyEnum CurrencyEnum
	String       string
}

func NewCompanyInfoCurrencyFromCurrencyEnum(value CurrencyEnum) *CompanyInfoCurrency {
	return &CompanyInfoCurrency{typeName: "currencyEnum", CurrencyEnum: value}
}

func NewCompanyInfoCurrencyFromString(value string) *CompanyInfoCurrency {
	return &CompanyInfoCurrency{typeName: "string", String: value}
}

func (c *CompanyInfoCurrency) UnmarshalJSON(data []byte) error {
	var valueCurrencyEnum CurrencyEnum
	if err := json.Unmarshal(data, &valueCurrencyEnum); err == nil {
		c.typeName = "currencyEnum"
		c.CurrencyEnum = valueCurrencyEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CompanyInfoCurrency) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "currencyEnum":
		return json.Marshal(c.CurrencyEnum)
	case "string":
		return json.Marshal(c.String)
	}
}

type CompanyInfoCurrencyVisitor interface {
	VisitCurrencyEnum(CurrencyEnum) error
	VisitString(string) error
}

func (c *CompanyInfoCurrency) Accept(visitor CompanyInfoCurrencyVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "currencyEnum":
		return visitor.VisitCurrencyEnum(c.CurrencyEnum)
	case "string":
		return visitor.VisitString(c.String)
	}
}

type CompanyInfoListRequestExpand uint

const (
	CompanyInfoListRequestExpandAddresses CompanyInfoListRequestExpand = iota + 1
	CompanyInfoListRequestExpandAddressesPhoneNumbers
	CompanyInfoListRequestExpandPhoneNumbers
)

func (c CompanyInfoListRequestExpand) String() string {
	switch c {
	default:
		return strconv.Itoa(int(c))
	case CompanyInfoListRequestExpandAddresses:
		return "addresses"
	case CompanyInfoListRequestExpandAddressesPhoneNumbers:
		return "addresses,phone_numbers"
	case CompanyInfoListRequestExpandPhoneNumbers:
		return "phone_numbers"
	}
}

func (c CompanyInfoListRequestExpand) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", c.String())), nil
}

func (c *CompanyInfoListRequestExpand) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "addresses":
		value := CompanyInfoListRequestExpandAddresses
		*c = value
	case "addresses,phone_numbers":
		value := CompanyInfoListRequestExpandAddressesPhoneNumbers
		*c = value
	case "phone_numbers":
		value := CompanyInfoListRequestExpandPhoneNumbers
		*c = value
	}
	return nil
}

type CompanyInfoRetrieveRequestExpand uint

const (
	CompanyInfoRetrieveRequestExpandAddresses CompanyInfoRetrieveRequestExpand = iota + 1
	CompanyInfoRetrieveRequestExpandAddressesPhoneNumbers
	CompanyInfoRetrieveRequestExpandPhoneNumbers
)

func (c CompanyInfoRetrieveRequestExpand) String() string {
	switch c {
	default:
		return strconv.Itoa(int(c))
	case CompanyInfoRetrieveRequestExpandAddresses:
		return "addresses"
	case CompanyInfoRetrieveRequestExpandAddressesPhoneNumbers:
		return "addresses,phone_numbers"
	case CompanyInfoRetrieveRequestExpandPhoneNumbers:
		return "phone_numbers"
	}
}

func (c CompanyInfoRetrieveRequestExpand) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", c.String())), nil
}

func (c *CompanyInfoRetrieveRequestExpand) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "addresses":
		value := CompanyInfoRetrieveRequestExpandAddresses
		*c = value
	case "addresses,phone_numbers":
		value := CompanyInfoRetrieveRequestExpandAddressesPhoneNumbers
		*c = value
	case "phone_numbers":
		value := CompanyInfoRetrieveRequestExpandPhoneNumbers
		*c = value
	}
	return nil
}

type ConditionSchema struct {
	// The ID of the condition schema. This ID is used when updating selective syncs for a linked account.
	Id string `json:"id"`
	// The common model for which a condition schema is defined.
	CommonModel *string `json:"common_model,omitempty"`
	// User-facing *native condition* name. e.g. "Skip Manager".
	NativeName *string `json:"native_name,omitempty"`
	// The name of the field on the common model that this condition corresponds to, if they conceptually match. e.g. "location_type".
	FieldName *string `json:"field_name,omitempty"`
	// Whether this condition can only be applied once. If false, the condition can be AND'd together multiple times.
	IsUnique *bool `json:"is_unique,omitempty"`
	// The type of value(s) that can be set for this condition.
	//
	// * `BOOLEAN` - BOOLEAN
	// * `DATE` - DATE
	// * `DATE_TIME` - DATE_TIME
	// * `INTEGER` - INTEGER
	// * `FLOAT` - FLOAT
	// * `STRING` - STRING
	// * `LIST_OF_STRINGS` - LIST_OF_STRINGS
	ConditionType *ConditionSchemaConditionType `json:"condition_type,omitempty"`
	// The schemas for the operators that can be used on a condition.
	Operators []*OperatorSchema `json:"operators,omitempty"`
}

// The type of value(s) that can be set for this condition.
//
// * `BOOLEAN` - BOOLEAN
// * `DATE` - DATE
// * `DATE_TIME` - DATE_TIME
// * `INTEGER` - INTEGER
// * `FLOAT` - FLOAT
// * `STRING` - STRING
// * `LIST_OF_STRINGS` - LIST_OF_STRINGS
type ConditionSchemaConditionType struct {
	typeName          string
	ConditionTypeEnum ConditionTypeEnum
	String            string
}

func NewConditionSchemaConditionTypeFromConditionTypeEnum(value ConditionTypeEnum) *ConditionSchemaConditionType {
	return &ConditionSchemaConditionType{typeName: "conditionTypeEnum", ConditionTypeEnum: value}
}

func NewConditionSchemaConditionTypeFromString(value string) *ConditionSchemaConditionType {
	return &ConditionSchemaConditionType{typeName: "string", String: value}
}

func (c *ConditionSchemaConditionType) UnmarshalJSON(data []byte) error {
	var valueConditionTypeEnum ConditionTypeEnum
	if err := json.Unmarshal(data, &valueConditionTypeEnum); err == nil {
		c.typeName = "conditionTypeEnum"
		c.ConditionTypeEnum = valueConditionTypeEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c ConditionSchemaConditionType) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "conditionTypeEnum":
		return json.Marshal(c.ConditionTypeEnum)
	case "string":
		return json.Marshal(c.String)
	}
}

type ConditionSchemaConditionTypeVisitor interface {
	VisitConditionTypeEnum(ConditionTypeEnum) error
	VisitString(string) error
}

func (c *ConditionSchemaConditionType) Accept(visitor ConditionSchemaConditionTypeVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "conditionTypeEnum":
		return visitor.VisitConditionTypeEnum(c.ConditionTypeEnum)
	case "string":
		return visitor.VisitString(c.String)
	}
}

// * `BOOLEAN` - BOOLEAN
// * `DATE` - DATE
// * `DATE_TIME` - DATE_TIME
// * `INTEGER` - INTEGER
// * `FLOAT` - FLOAT
// * `STRING` - STRING
// * `LIST_OF_STRINGS` - LIST_OF_STRINGS
type ConditionTypeEnum uint

const (
	ConditionTypeEnumBoolean ConditionTypeEnum = iota + 1
	ConditionTypeEnumDate
	ConditionTypeEnumDateTime
	ConditionTypeEnumInteger
	ConditionTypeEnumFloat
	ConditionTypeEnumString
	ConditionTypeEnumListOfStrings
)

func (c ConditionTypeEnum) String() string {
	switch c {
	default:
		return strconv.Itoa(int(c))
	case ConditionTypeEnumBoolean:
		return "BOOLEAN"
	case ConditionTypeEnumDate:
		return "DATE"
	case ConditionTypeEnumDateTime:
		return "DATE_TIME"
	case ConditionTypeEnumInteger:
		return "INTEGER"
	case ConditionTypeEnumFloat:
		return "FLOAT"
	case ConditionTypeEnumString:
		return "STRING"
	case ConditionTypeEnumListOfStrings:
		return "LIST_OF_STRINGS"
	}
}

func (c ConditionTypeEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", c.String())), nil
}

func (c *ConditionTypeEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "BOOLEAN":
		value := ConditionTypeEnumBoolean
		*c = value
	case "DATE":
		value := ConditionTypeEnumDate
		*c = value
	case "DATE_TIME":
		value := ConditionTypeEnumDateTime
		*c = value
	case "INTEGER":
		value := ConditionTypeEnumInteger
		*c = value
	case "FLOAT":
		value := ConditionTypeEnumFloat
		*c = value
	case "STRING":
		value := ConditionTypeEnumString
		*c = value
	case "LIST_OF_STRINGS":
		value := ConditionTypeEnumListOfStrings
		*c = value
	}
	return nil
}

// # The Contact Object
// ### Description
// A `Contact` is an individual or business entity to which products and services are sold to or purchased from. The `Contact` model contains both Customers, in which products and services are sold to, and Vendors (or Suppliers), in which products and services are purchased from.
// * A `Contact` is a Vendor/Supplier if the `is_supplier` property is true.
// * A `Contact` is a customer if the `is_customer` property is true.
//
// ### Usage Example
// Fetch from the `LIST Contacts` endpoint and view a company's contacts.
type Contact struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The contact's name.
	Name *string `json:"name,omitempty"`
	// Whether the contact is a supplier.
	IsSupplier *bool `json:"is_supplier,omitempty"`
	// Whether the contact is a customer.
	IsCustomer *bool `json:"is_customer,omitempty"`
	// The contact's email address.
	EmailAddress *string `json:"email_address,omitempty"`
	// The contact's tax number.
	TaxNumber *string `json:"tax_number,omitempty"`
	// The contact's status
	//
	// * `ACTIVE` - ACTIVE
	// * `ARCHIVED` - ARCHIVED
	Status *ContactStatus `json:"status,omitempty"`
	// The currency the contact's transactions are in.
	Currency *string `json:"currency,omitempty"`
	// When the third party's contact was updated.
	RemoteUpdatedAt *time.Time `json:"remote_updated_at,omitempty"`
	// The company the contact belongs to.
	Company *string `json:"company,omitempty"`
	// `Address` object IDs for the given `Contacts` object.
	Addresses []*ContactAddressesItem `json:"addresses,omitempty"`
	// `AccountingPhoneNumber` object for the given `Contacts` object.
	PhoneNumbers []*AccountingPhoneNumber `json:"phone_numbers,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted *bool      `json:"remote_was_deleted,omitempty"`
	CreatedAt        *time.Time `json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt    *time.Time     `json:"modified_at,omitempty"`
	FieldMappings map[string]any `json:"field_mappings,omitempty"`
	RemoteData    []*RemoteData  `json:"remote_data,omitempty"`
}

type ContactAddressesItem struct {
	typeName string
	String   string
	Address  *Address
}

func NewContactAddressesItemFromString(value string) *ContactAddressesItem {
	return &ContactAddressesItem{typeName: "string", String: value}
}

func NewContactAddressesItemFromAddress(value *Address) *ContactAddressesItem {
	return &ContactAddressesItem{typeName: "address", Address: value}
}

func (c *ContactAddressesItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	valueAddress := new(Address)
	if err := json.Unmarshal(data, &valueAddress); err == nil {
		c.typeName = "address"
		c.Address = valueAddress
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c ContactAddressesItem) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "address":
		return json.Marshal(c.Address)
	}
}

type ContactAddressesItemVisitor interface {
	VisitString(string) error
	VisitAddress(*Address) error
}

func (c *ContactAddressesItem) Accept(visitor ContactAddressesItemVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return visitor.VisitString(c.String)
	case "address":
		return visitor.VisitAddress(c.Address)
	}
}

// # The Contact Object
// ### Description
// A `Contact` is an individual or business entity to which products and services are sold to or purchased from. The `Contact` model contains both Customers, in which products and services are sold to, and Vendors (or Suppliers), in which products and services are purchased from.
// * A `Contact` is a Vendor/Supplier if the `is_supplier` property is true.
// * A `Contact` is a customer if the `is_customer` property is true.
//
// ### Usage Example
// Fetch from the `LIST Contacts` endpoint and view a company's contacts.
type ContactRequest struct {
	// The contact's name.
	Name *string `json:"name,omitempty"`
	// Whether the contact is a supplier.
	IsSupplier *bool `json:"is_supplier,omitempty"`
	// Whether the contact is a customer.
	IsCustomer *bool `json:"is_customer,omitempty"`
	// The contact's email address.
	EmailAddress *string `json:"email_address,omitempty"`
	// The contact's tax number.
	TaxNumber *string `json:"tax_number,omitempty"`
	// The contact's status
	//
	// * `ACTIVE` - ACTIVE
	// * `ARCHIVED` - ARCHIVED
	Status *ContactRequestStatus `json:"status,omitempty"`
	// The currency the contact's transactions are in.
	Currency *string `json:"currency,omitempty"`
	// The company the contact belongs to.
	Company *string `json:"company,omitempty"`
	// `Address` object IDs for the given `Contacts` object.
	Addresses []*ContactRequestAddressesItem `json:"addresses,omitempty"`
	// `AccountingPhoneNumber` object for the given `Contacts` object.
	PhoneNumbers        []*AccountingPhoneNumberRequest `json:"phone_numbers,omitempty"`
	IntegrationParams   map[string]any                  `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]any                  `json:"linked_account_params,omitempty"`
}

type ContactRequestAddressesItem struct {
	typeName string
	String   string
	Address  *Address
}

func NewContactRequestAddressesItemFromString(value string) *ContactRequestAddressesItem {
	return &ContactRequestAddressesItem{typeName: "string", String: value}
}

func NewContactRequestAddressesItemFromAddress(value *Address) *ContactRequestAddressesItem {
	return &ContactRequestAddressesItem{typeName: "address", Address: value}
}

func (c *ContactRequestAddressesItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	valueAddress := new(Address)
	if err := json.Unmarshal(data, &valueAddress); err == nil {
		c.typeName = "address"
		c.Address = valueAddress
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c ContactRequestAddressesItem) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "address":
		return json.Marshal(c.Address)
	}
}

type ContactRequestAddressesItemVisitor interface {
	VisitString(string) error
	VisitAddress(*Address) error
}

func (c *ContactRequestAddressesItem) Accept(visitor ContactRequestAddressesItemVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return visitor.VisitString(c.String)
	case "address":
		return visitor.VisitAddress(c.Address)
	}
}

// The contact's status
//
// * `ACTIVE` - ACTIVE
// * `ARCHIVED` - ARCHIVED
type ContactRequestStatus struct {
	typeName      string
	Status7D1Enum Status7D1Enum
	String        string
}

func NewContactRequestStatusFromStatus7D1Enum(value Status7D1Enum) *ContactRequestStatus {
	return &ContactRequestStatus{typeName: "status7D1Enum", Status7D1Enum: value}
}

func NewContactRequestStatusFromString(value string) *ContactRequestStatus {
	return &ContactRequestStatus{typeName: "string", String: value}
}

func (c *ContactRequestStatus) UnmarshalJSON(data []byte) error {
	var valueStatus7D1Enum Status7D1Enum
	if err := json.Unmarshal(data, &valueStatus7D1Enum); err == nil {
		c.typeName = "status7D1Enum"
		c.Status7D1Enum = valueStatus7D1Enum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c ContactRequestStatus) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "status7D1Enum":
		return json.Marshal(c.Status7D1Enum)
	case "string":
		return json.Marshal(c.String)
	}
}

type ContactRequestStatusVisitor interface {
	VisitStatus7D1Enum(Status7D1Enum) error
	VisitString(string) error
}

func (c *ContactRequestStatus) Accept(visitor ContactRequestStatusVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "status7D1Enum":
		return visitor.VisitStatus7D1Enum(c.Status7D1Enum)
	case "string":
		return visitor.VisitString(c.String)
	}
}

type ContactResponse struct {
	Model    *Contact                    `json:"model,omitempty"`
	Warnings []*WarningValidationProblem `json:"warnings,omitempty"`
	Errors   []*ErrorValidationProblem   `json:"errors,omitempty"`
	Logs     []*DebugModeLog             `json:"logs,omitempty"`
}

// The contact's status
//
// * `ACTIVE` - ACTIVE
// * `ARCHIVED` - ARCHIVED
type ContactStatus struct {
	typeName      string
	Status7D1Enum Status7D1Enum
	String        string
}

func NewContactStatusFromStatus7D1Enum(value Status7D1Enum) *ContactStatus {
	return &ContactStatus{typeName: "status7D1Enum", Status7D1Enum: value}
}

func NewContactStatusFromString(value string) *ContactStatus {
	return &ContactStatus{typeName: "string", String: value}
}

func (c *ContactStatus) UnmarshalJSON(data []byte) error {
	var valueStatus7D1Enum Status7D1Enum
	if err := json.Unmarshal(data, &valueStatus7D1Enum); err == nil {
		c.typeName = "status7D1Enum"
		c.Status7D1Enum = valueStatus7D1Enum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c ContactStatus) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "status7D1Enum":
		return json.Marshal(c.Status7D1Enum)
	case "string":
		return json.Marshal(c.String)
	}
}

type ContactStatusVisitor interface {
	VisitStatus7D1Enum(Status7D1Enum) error
	VisitString(string) error
}

func (c *ContactStatus) Accept(visitor ContactStatusVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "status7D1Enum":
		return visitor.VisitStatus7D1Enum(c.Status7D1Enum)
	case "string":
		return visitor.VisitString(c.String)
	}
}

type ContactsListRequestExpand uint

const (
	ContactsListRequestExpandAddresses ContactsListRequestExpand = iota + 1
	ContactsListRequestExpandAddressesCompany
	ContactsListRequestExpandAddressesPhoneNumbers
	ContactsListRequestExpandAddressesPhoneNumbersCompany
	ContactsListRequestExpandCompany
	ContactsListRequestExpandPhoneNumbers
	ContactsListRequestExpandPhoneNumbersCompany
)

func (c ContactsListRequestExpand) String() string {
	switch c {
	default:
		return strconv.Itoa(int(c))
	case ContactsListRequestExpandAddresses:
		return "addresses"
	case ContactsListRequestExpandAddressesCompany:
		return "addresses,company"
	case ContactsListRequestExpandAddressesPhoneNumbers:
		return "addresses,phone_numbers"
	case ContactsListRequestExpandAddressesPhoneNumbersCompany:
		return "addresses,phone_numbers,company"
	case ContactsListRequestExpandCompany:
		return "company"
	case ContactsListRequestExpandPhoneNumbers:
		return "phone_numbers"
	case ContactsListRequestExpandPhoneNumbersCompany:
		return "phone_numbers,company"
	}
}

func (c ContactsListRequestExpand) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", c.String())), nil
}

func (c *ContactsListRequestExpand) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "addresses":
		value := ContactsListRequestExpandAddresses
		*c = value
	case "addresses,company":
		value := ContactsListRequestExpandAddressesCompany
		*c = value
	case "addresses,phone_numbers":
		value := ContactsListRequestExpandAddressesPhoneNumbers
		*c = value
	case "addresses,phone_numbers,company":
		value := ContactsListRequestExpandAddressesPhoneNumbersCompany
		*c = value
	case "company":
		value := ContactsListRequestExpandCompany
		*c = value
	case "phone_numbers":
		value := ContactsListRequestExpandPhoneNumbers
		*c = value
	case "phone_numbers,company":
		value := ContactsListRequestExpandPhoneNumbersCompany
		*c = value
	}
	return nil
}

type ContactsRetrieveRequestExpand uint

const (
	ContactsRetrieveRequestExpandAddresses ContactsRetrieveRequestExpand = iota + 1
	ContactsRetrieveRequestExpandAddressesCompany
	ContactsRetrieveRequestExpandAddressesPhoneNumbers
	ContactsRetrieveRequestExpandAddressesPhoneNumbersCompany
	ContactsRetrieveRequestExpandCompany
	ContactsRetrieveRequestExpandPhoneNumbers
	ContactsRetrieveRequestExpandPhoneNumbersCompany
)

func (c ContactsRetrieveRequestExpand) String() string {
	switch c {
	default:
		return strconv.Itoa(int(c))
	case ContactsRetrieveRequestExpandAddresses:
		return "addresses"
	case ContactsRetrieveRequestExpandAddressesCompany:
		return "addresses,company"
	case ContactsRetrieveRequestExpandAddressesPhoneNumbers:
		return "addresses,phone_numbers"
	case ContactsRetrieveRequestExpandAddressesPhoneNumbersCompany:
		return "addresses,phone_numbers,company"
	case ContactsRetrieveRequestExpandCompany:
		return "company"
	case ContactsRetrieveRequestExpandPhoneNumbers:
		return "phone_numbers"
	case ContactsRetrieveRequestExpandPhoneNumbersCompany:
		return "phone_numbers,company"
	}
}

func (c ContactsRetrieveRequestExpand) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", c.String())), nil
}

func (c *ContactsRetrieveRequestExpand) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "addresses":
		value := ContactsRetrieveRequestExpandAddresses
		*c = value
	case "addresses,company":
		value := ContactsRetrieveRequestExpandAddressesCompany
		*c = value
	case "addresses,phone_numbers":
		value := ContactsRetrieveRequestExpandAddressesPhoneNumbers
		*c = value
	case "addresses,phone_numbers,company":
		value := ContactsRetrieveRequestExpandAddressesPhoneNumbersCompany
		*c = value
	case "company":
		value := ContactsRetrieveRequestExpandCompany
		*c = value
	case "phone_numbers":
		value := ContactsRetrieveRequestExpandPhoneNumbers
		*c = value
	case "phone_numbers,company":
		value := ContactsRetrieveRequestExpandPhoneNumbersCompany
		*c = value
	}
	return nil
}

// * `AF` - Afghanistan
// * `AX` - Åland Islands
// * `AL` - Albania
// * `DZ` - Algeria
// * `AS` - American Samoa
// * `AD` - Andorra
// * `AO` - Angola
// * `AI` - Anguilla
// * `AQ` - Antarctica
// * `AG` - Antigua and Barbuda
// * `AR` - Argentina
// * `AM` - Armenia
// * `AW` - Aruba
// * `AU` - Australia
// * `AT` - Austria
// * `AZ` - Azerbaijan
// * `BS` - Bahamas
// * `BH` - Bahrain
// * `BD` - Bangladesh
// * `BB` - Barbados
// * `BY` - Belarus
// * `BE` - Belgium
// * `BZ` - Belize
// * `BJ` - Benin
// * `BM` - Bermuda
// * `BT` - Bhutan
// * `BO` - Bolivia
// * `BQ` - Bonaire, Sint Eustatius and Saba
// * `BA` - Bosnia and Herzegovina
// * `BW` - Botswana
// * `BV` - Bouvet Island
// * `BR` - Brazil
// * `IO` - British Indian Ocean Territory
// * `BN` - Brunei
// * `BG` - Bulgaria
// * `BF` - Burkina Faso
// * `BI` - Burundi
// * `CV` - Cabo Verde
// * `KH` - Cambodia
// * `CM` - Cameroon
// * `CA` - Canada
// * `KY` - Cayman Islands
// * `CF` - Central African Republic
// * `TD` - Chad
// * `CL` - Chile
// * `CN` - China
// * `CX` - Christmas Island
// * `CC` - Cocos (Keeling) Islands
// * `CO` - Colombia
// * `KM` - Comoros
// * `CG` - Congo
// * `CD` - Congo (the Democratic Republic of the)
// * `CK` - Cook Islands
// * `CR` - Costa Rica
// * `CI` - Côte d'Ivoire
// * `HR` - Croatia
// * `CU` - Cuba
// * `CW` - Curaçao
// * `CY` - Cyprus
// * `CZ` - Czechia
// * `DK` - Denmark
// * `DJ` - Djibouti
// * `DM` - Dominica
// * `DO` - Dominican Republic
// * `EC` - Ecuador
// * `EG` - Egypt
// * `SV` - El Salvador
// * `GQ` - Equatorial Guinea
// * `ER` - Eritrea
// * `EE` - Estonia
// * `SZ` - Eswatini
// * `ET` - Ethiopia
// * `FK` - Falkland Islands (Malvinas)
// * `FO` - Faroe Islands
// * `FJ` - Fiji
// * `FI` - Finland
// * `FR` - France
// * `GF` - French Guiana
// * `PF` - French Polynesia
// * `TF` - French Southern Territories
// * `GA` - Gabon
// * `GM` - Gambia
// * `GE` - Georgia
// * `DE` - Germany
// * `GH` - Ghana
// * `GI` - Gibraltar
// * `GR` - Greece
// * `GL` - Greenland
// * `GD` - Grenada
// * `GP` - Guadeloupe
// * `GU` - Guam
// * `GT` - Guatemala
// * `GG` - Guernsey
// * `GN` - Guinea
// * `GW` - Guinea-Bissau
// * `GY` - Guyana
// * `HT` - Haiti
// * `HM` - Heard Island and McDonald Islands
// * `VA` - Holy See
// * `HN` - Honduras
// * `HK` - Hong Kong
// * `HU` - Hungary
// * `IS` - Iceland
// * `IN` - India
// * `ID` - Indonesia
// * `IR` - Iran
// * `IQ` - Iraq
// * `IE` - Ireland
// * `IM` - Isle of Man
// * `IL` - Israel
// * `IT` - Italy
// * `JM` - Jamaica
// * `JP` - Japan
// * `JE` - Jersey
// * `JO` - Jordan
// * `KZ` - Kazakhstan
// * `KE` - Kenya
// * `KI` - Kiribati
// * `KW` - Kuwait
// * `KG` - Kyrgyzstan
// * `LA` - Laos
// * `LV` - Latvia
// * `LB` - Lebanon
// * `LS` - Lesotho
// * `LR` - Liberia
// * `LY` - Libya
// * `LI` - Liechtenstein
// * `LT` - Lithuania
// * `LU` - Luxembourg
// * `MO` - Macao
// * `MG` - Madagascar
// * `MW` - Malawi
// * `MY` - Malaysia
// * `MV` - Maldives
// * `ML` - Mali
// * `MT` - Malta
// * `MH` - Marshall Islands
// * `MQ` - Martinique
// * `MR` - Mauritania
// * `MU` - Mauritius
// * `YT` - Mayotte
// * `MX` - Mexico
// * `FM` - Micronesia (Federated States of)
// * `MD` - Moldova
// * `MC` - Monaco
// * `MN` - Mongolia
// * `ME` - Montenegro
// * `MS` - Montserrat
// * `MA` - Morocco
// * `MZ` - Mozambique
// * `MM` - Myanmar
// * `NA` - Namibia
// * `NR` - Nauru
// * `NP` - Nepal
// * `NL` - Netherlands
// * `NC` - New Caledonia
// * `NZ` - New Zealand
// * `NI` - Nicaragua
// * `NE` - Niger
// * `NG` - Nigeria
// * `NU` - Niue
// * `NF` - Norfolk Island
// * `KP` - North Korea
// * `MK` - North Macedonia
// * `MP` - Northern Mariana Islands
// * `NO` - Norway
// * `OM` - Oman
// * `PK` - Pakistan
// * `PW` - Palau
// * `PS` - Palestine, State of
// * `PA` - Panama
// * `PG` - Papua New Guinea
// * `PY` - Paraguay
// * `PE` - Peru
// * `PH` - Philippines
// * `PN` - Pitcairn
// * `PL` - Poland
// * `PT` - Portugal
// * `PR` - Puerto Rico
// * `QA` - Qatar
// * `RE` - Réunion
// * `RO` - Romania
// * `RU` - Russia
// * `RW` - Rwanda
// * `BL` - Saint Barthélemy
// * `SH` - Saint Helena, Ascension and Tristan da Cunha
// * `KN` - Saint Kitts and Nevis
// * `LC` - Saint Lucia
// * `MF` - Saint Martin (French part)
// * `PM` - Saint Pierre and Miquelon
// * `VC` - Saint Vincent and the Grenadines
// * `WS` - Samoa
// * `SM` - San Marino
// * `ST` - Sao Tome and Principe
// * `SA` - Saudi Arabia
// * `SN` - Senegal
// * `RS` - Serbia
// * `SC` - Seychelles
// * `SL` - Sierra Leone
// * `SG` - Singapore
// * `SX` - Sint Maarten (Dutch part)
// * `SK` - Slovakia
// * `SI` - Slovenia
// * `SB` - Solomon Islands
// * `SO` - Somalia
// * `ZA` - South Africa
// * `GS` - South Georgia and the South Sandwich Islands
// * `KR` - South Korea
// * `SS` - South Sudan
// * `ES` - Spain
// * `LK` - Sri Lanka
// * `SD` - Sudan
// * `SR` - Suriname
// * `SJ` - Svalbard and Jan Mayen
// * `SE` - Sweden
// * `CH` - Switzerland
// * `SY` - Syria
// * `TW` - Taiwan
// * `TJ` - Tajikistan
// * `TZ` - Tanzania
// * `TH` - Thailand
// * `TL` - Timor-Leste
// * `TG` - Togo
// * `TK` - Tokelau
// * `TO` - Tonga
// * `TT` - Trinidad and Tobago
// * `TN` - Tunisia
// * `TR` - Turkey
// * `TM` - Turkmenistan
// * `TC` - Turks and Caicos Islands
// * `TV` - Tuvalu
// * `UG` - Uganda
// * `UA` - Ukraine
// * `AE` - United Arab Emirates
// * `GB` - United Kingdom
// * `UM` - United States Minor Outlying Islands
// * `US` - United States of America
// * `UY` - Uruguay
// * `UZ` - Uzbekistan
// * `VU` - Vanuatu
// * `VE` - Venezuela
// * `VN` - Vietnam
// * `VG` - Virgin Islands (British)
// * `VI` - Virgin Islands (U.S.)
// * `WF` - Wallis and Futuna
// * `EH` - Western Sahara
// * `YE` - Yemen
// * `ZM` - Zambia
// * `ZW` - Zimbabwe
type CountryEnum uint

const (
	CountryEnumAf CountryEnum = iota + 1
	CountryEnumAx
	CountryEnumAl
	CountryEnumDz
	CountryEnumAs
	CountryEnumAd
	CountryEnumAo
	CountryEnumAi
	CountryEnumAq
	CountryEnumAg
	CountryEnumAr
	CountryEnumAm
	CountryEnumAw
	CountryEnumAu
	CountryEnumAt
	CountryEnumAz
	CountryEnumBs
	CountryEnumBh
	CountryEnumBd
	CountryEnumBb
	CountryEnumBy
	CountryEnumBe
	CountryEnumBz
	CountryEnumBj
	CountryEnumBm
	CountryEnumBt
	CountryEnumBo
	CountryEnumBq
	CountryEnumBa
	CountryEnumBw
	CountryEnumBv
	CountryEnumBr
	CountryEnumIo
	CountryEnumBn
	CountryEnumBg
	CountryEnumBf
	CountryEnumBi
	CountryEnumCv
	CountryEnumKh
	CountryEnumCm
	CountryEnumCa
	CountryEnumKy
	CountryEnumCf
	CountryEnumTd
	CountryEnumCl
	CountryEnumCn
	CountryEnumCx
	CountryEnumCc
	CountryEnumCo
	CountryEnumKm
	CountryEnumCg
	CountryEnumCd
	CountryEnumCk
	CountryEnumCr
	CountryEnumCi
	CountryEnumHr
	CountryEnumCu
	CountryEnumCw
	CountryEnumCy
	CountryEnumCz
	CountryEnumDk
	CountryEnumDj
	CountryEnumDm
	CountryEnumDo
	CountryEnumEc
	CountryEnumEg
	CountryEnumSv
	CountryEnumGq
	CountryEnumEr
	CountryEnumEe
	CountryEnumSz
	CountryEnumEt
	CountryEnumFk
	CountryEnumFo
	CountryEnumFj
	CountryEnumFi
	CountryEnumFr
	CountryEnumGf
	CountryEnumPf
	CountryEnumTf
	CountryEnumGa
	CountryEnumGm
	CountryEnumGe
	CountryEnumDe
	CountryEnumGh
	CountryEnumGi
	CountryEnumGr
	CountryEnumGl
	CountryEnumGd
	CountryEnumGp
	CountryEnumGu
	CountryEnumGt
	CountryEnumGg
	CountryEnumGn
	CountryEnumGw
	CountryEnumGy
	CountryEnumHt
	CountryEnumHm
	CountryEnumVa
	CountryEnumHn
	CountryEnumHk
	CountryEnumHu
	CountryEnumIs
	CountryEnumIn
	CountryEnumId
	CountryEnumIr
	CountryEnumIq
	CountryEnumIe
	CountryEnumIm
	CountryEnumIl
	CountryEnumIt
	CountryEnumJm
	CountryEnumJp
	CountryEnumJe
	CountryEnumJo
	CountryEnumKz
	CountryEnumKe
	CountryEnumKi
	CountryEnumKw
	CountryEnumKg
	CountryEnumLa
	CountryEnumLv
	CountryEnumLb
	CountryEnumLs
	CountryEnumLr
	CountryEnumLy
	CountryEnumLi
	CountryEnumLt
	CountryEnumLu
	CountryEnumMo
	CountryEnumMg
	CountryEnumMw
	CountryEnumMy
	CountryEnumMv
	CountryEnumMl
	CountryEnumMt
	CountryEnumMh
	CountryEnumMq
	CountryEnumMr
	CountryEnumMu
	CountryEnumYt
	CountryEnumMx
	CountryEnumFm
	CountryEnumMd
	CountryEnumMc
	CountryEnumMn
	CountryEnumMe
	CountryEnumMs
	CountryEnumMa
	CountryEnumMz
	CountryEnumMm
	CountryEnumNa
	CountryEnumNr
	CountryEnumNp
	CountryEnumNl
	CountryEnumNc
	CountryEnumNz
	CountryEnumNi
	CountryEnumNe
	CountryEnumNg
	CountryEnumNu
	CountryEnumNf
	CountryEnumKp
	CountryEnumMk
	CountryEnumMp
	CountryEnumNo
	CountryEnumOm
	CountryEnumPk
	CountryEnumPw
	CountryEnumPs
	CountryEnumPa
	CountryEnumPg
	CountryEnumPy
	CountryEnumPe
	CountryEnumPh
	CountryEnumPn
	CountryEnumPl
	CountryEnumPt
	CountryEnumPr
	CountryEnumQa
	CountryEnumRe
	CountryEnumRo
	CountryEnumRu
	CountryEnumRw
	CountryEnumBl
	CountryEnumSh
	CountryEnumKn
	CountryEnumLc
	CountryEnumMf
	CountryEnumPm
	CountryEnumVc
	CountryEnumWs
	CountryEnumSm
	CountryEnumSt
	CountryEnumSa
	CountryEnumSn
	CountryEnumRs
	CountryEnumSc
	CountryEnumSl
	CountryEnumSg
	CountryEnumSx
	CountryEnumSk
	CountryEnumSi
	CountryEnumSb
	CountryEnumSo
	CountryEnumZa
	CountryEnumGs
	CountryEnumKr
	CountryEnumSs
	CountryEnumEs
	CountryEnumLk
	CountryEnumSd
	CountryEnumSr
	CountryEnumSj
	CountryEnumSe
	CountryEnumCh
	CountryEnumSy
	CountryEnumTw
	CountryEnumTj
	CountryEnumTz
	CountryEnumTh
	CountryEnumTl
	CountryEnumTg
	CountryEnumTk
	CountryEnumTo
	CountryEnumTt
	CountryEnumTn
	CountryEnumTr
	CountryEnumTm
	CountryEnumTc
	CountryEnumTv
	CountryEnumUg
	CountryEnumUa
	CountryEnumAe
	CountryEnumGb
	CountryEnumUm
	CountryEnumUs
	CountryEnumUy
	CountryEnumUz
	CountryEnumVu
	CountryEnumVe
	CountryEnumVn
	CountryEnumVg
	CountryEnumVi
	CountryEnumWf
	CountryEnumEh
	CountryEnumYe
	CountryEnumZm
	CountryEnumZw
)

func (c CountryEnum) String() string {
	switch c {
	default:
		return strconv.Itoa(int(c))
	case CountryEnumAf:
		return "AF"
	case CountryEnumAx:
		return "AX"
	case CountryEnumAl:
		return "AL"
	case CountryEnumDz:
		return "DZ"
	case CountryEnumAs:
		return "AS"
	case CountryEnumAd:
		return "AD"
	case CountryEnumAo:
		return "AO"
	case CountryEnumAi:
		return "AI"
	case CountryEnumAq:
		return "AQ"
	case CountryEnumAg:
		return "AG"
	case CountryEnumAr:
		return "AR"
	case CountryEnumAm:
		return "AM"
	case CountryEnumAw:
		return "AW"
	case CountryEnumAu:
		return "AU"
	case CountryEnumAt:
		return "AT"
	case CountryEnumAz:
		return "AZ"
	case CountryEnumBs:
		return "BS"
	case CountryEnumBh:
		return "BH"
	case CountryEnumBd:
		return "BD"
	case CountryEnumBb:
		return "BB"
	case CountryEnumBy:
		return "BY"
	case CountryEnumBe:
		return "BE"
	case CountryEnumBz:
		return "BZ"
	case CountryEnumBj:
		return "BJ"
	case CountryEnumBm:
		return "BM"
	case CountryEnumBt:
		return "BT"
	case CountryEnumBo:
		return "BO"
	case CountryEnumBq:
		return "BQ"
	case CountryEnumBa:
		return "BA"
	case CountryEnumBw:
		return "BW"
	case CountryEnumBv:
		return "BV"
	case CountryEnumBr:
		return "BR"
	case CountryEnumIo:
		return "IO"
	case CountryEnumBn:
		return "BN"
	case CountryEnumBg:
		return "BG"
	case CountryEnumBf:
		return "BF"
	case CountryEnumBi:
		return "BI"
	case CountryEnumCv:
		return "CV"
	case CountryEnumKh:
		return "KH"
	case CountryEnumCm:
		return "CM"
	case CountryEnumCa:
		return "CA"
	case CountryEnumKy:
		return "KY"
	case CountryEnumCf:
		return "CF"
	case CountryEnumTd:
		return "TD"
	case CountryEnumCl:
		return "CL"
	case CountryEnumCn:
		return "CN"
	case CountryEnumCx:
		return "CX"
	case CountryEnumCc:
		return "CC"
	case CountryEnumCo:
		return "CO"
	case CountryEnumKm:
		return "KM"
	case CountryEnumCg:
		return "CG"
	case CountryEnumCd:
		return "CD"
	case CountryEnumCk:
		return "CK"
	case CountryEnumCr:
		return "CR"
	case CountryEnumCi:
		return "CI"
	case CountryEnumHr:
		return "HR"
	case CountryEnumCu:
		return "CU"
	case CountryEnumCw:
		return "CW"
	case CountryEnumCy:
		return "CY"
	case CountryEnumCz:
		return "CZ"
	case CountryEnumDk:
		return "DK"
	case CountryEnumDj:
		return "DJ"
	case CountryEnumDm:
		return "DM"
	case CountryEnumDo:
		return "DO"
	case CountryEnumEc:
		return "EC"
	case CountryEnumEg:
		return "EG"
	case CountryEnumSv:
		return "SV"
	case CountryEnumGq:
		return "GQ"
	case CountryEnumEr:
		return "ER"
	case CountryEnumEe:
		return "EE"
	case CountryEnumSz:
		return "SZ"
	case CountryEnumEt:
		return "ET"
	case CountryEnumFk:
		return "FK"
	case CountryEnumFo:
		return "FO"
	case CountryEnumFj:
		return "FJ"
	case CountryEnumFi:
		return "FI"
	case CountryEnumFr:
		return "FR"
	case CountryEnumGf:
		return "GF"
	case CountryEnumPf:
		return "PF"
	case CountryEnumTf:
		return "TF"
	case CountryEnumGa:
		return "GA"
	case CountryEnumGm:
		return "GM"
	case CountryEnumGe:
		return "GE"
	case CountryEnumDe:
		return "DE"
	case CountryEnumGh:
		return "GH"
	case CountryEnumGi:
		return "GI"
	case CountryEnumGr:
		return "GR"
	case CountryEnumGl:
		return "GL"
	case CountryEnumGd:
		return "GD"
	case CountryEnumGp:
		return "GP"
	case CountryEnumGu:
		return "GU"
	case CountryEnumGt:
		return "GT"
	case CountryEnumGg:
		return "GG"
	case CountryEnumGn:
		return "GN"
	case CountryEnumGw:
		return "GW"
	case CountryEnumGy:
		return "GY"
	case CountryEnumHt:
		return "HT"
	case CountryEnumHm:
		return "HM"
	case CountryEnumVa:
		return "VA"
	case CountryEnumHn:
		return "HN"
	case CountryEnumHk:
		return "HK"
	case CountryEnumHu:
		return "HU"
	case CountryEnumIs:
		return "IS"
	case CountryEnumIn:
		return "IN"
	case CountryEnumId:
		return "ID"
	case CountryEnumIr:
		return "IR"
	case CountryEnumIq:
		return "IQ"
	case CountryEnumIe:
		return "IE"
	case CountryEnumIm:
		return "IM"
	case CountryEnumIl:
		return "IL"
	case CountryEnumIt:
		return "IT"
	case CountryEnumJm:
		return "JM"
	case CountryEnumJp:
		return "JP"
	case CountryEnumJe:
		return "JE"
	case CountryEnumJo:
		return "JO"
	case CountryEnumKz:
		return "KZ"
	case CountryEnumKe:
		return "KE"
	case CountryEnumKi:
		return "KI"
	case CountryEnumKw:
		return "KW"
	case CountryEnumKg:
		return "KG"
	case CountryEnumLa:
		return "LA"
	case CountryEnumLv:
		return "LV"
	case CountryEnumLb:
		return "LB"
	case CountryEnumLs:
		return "LS"
	case CountryEnumLr:
		return "LR"
	case CountryEnumLy:
		return "LY"
	case CountryEnumLi:
		return "LI"
	case CountryEnumLt:
		return "LT"
	case CountryEnumLu:
		return "LU"
	case CountryEnumMo:
		return "MO"
	case CountryEnumMg:
		return "MG"
	case CountryEnumMw:
		return "MW"
	case CountryEnumMy:
		return "MY"
	case CountryEnumMv:
		return "MV"
	case CountryEnumMl:
		return "ML"
	case CountryEnumMt:
		return "MT"
	case CountryEnumMh:
		return "MH"
	case CountryEnumMq:
		return "MQ"
	case CountryEnumMr:
		return "MR"
	case CountryEnumMu:
		return "MU"
	case CountryEnumYt:
		return "YT"
	case CountryEnumMx:
		return "MX"
	case CountryEnumFm:
		return "FM"
	case CountryEnumMd:
		return "MD"
	case CountryEnumMc:
		return "MC"
	case CountryEnumMn:
		return "MN"
	case CountryEnumMe:
		return "ME"
	case CountryEnumMs:
		return "MS"
	case CountryEnumMa:
		return "MA"
	case CountryEnumMz:
		return "MZ"
	case CountryEnumMm:
		return "MM"
	case CountryEnumNa:
		return "NA"
	case CountryEnumNr:
		return "NR"
	case CountryEnumNp:
		return "NP"
	case CountryEnumNl:
		return "NL"
	case CountryEnumNc:
		return "NC"
	case CountryEnumNz:
		return "NZ"
	case CountryEnumNi:
		return "NI"
	case CountryEnumNe:
		return "NE"
	case CountryEnumNg:
		return "NG"
	case CountryEnumNu:
		return "NU"
	case CountryEnumNf:
		return "NF"
	case CountryEnumKp:
		return "KP"
	case CountryEnumMk:
		return "MK"
	case CountryEnumMp:
		return "MP"
	case CountryEnumNo:
		return "NO"
	case CountryEnumOm:
		return "OM"
	case CountryEnumPk:
		return "PK"
	case CountryEnumPw:
		return "PW"
	case CountryEnumPs:
		return "PS"
	case CountryEnumPa:
		return "PA"
	case CountryEnumPg:
		return "PG"
	case CountryEnumPy:
		return "PY"
	case CountryEnumPe:
		return "PE"
	case CountryEnumPh:
		return "PH"
	case CountryEnumPn:
		return "PN"
	case CountryEnumPl:
		return "PL"
	case CountryEnumPt:
		return "PT"
	case CountryEnumPr:
		return "PR"
	case CountryEnumQa:
		return "QA"
	case CountryEnumRe:
		return "RE"
	case CountryEnumRo:
		return "RO"
	case CountryEnumRu:
		return "RU"
	case CountryEnumRw:
		return "RW"
	case CountryEnumBl:
		return "BL"
	case CountryEnumSh:
		return "SH"
	case CountryEnumKn:
		return "KN"
	case CountryEnumLc:
		return "LC"
	case CountryEnumMf:
		return "MF"
	case CountryEnumPm:
		return "PM"
	case CountryEnumVc:
		return "VC"
	case CountryEnumWs:
		return "WS"
	case CountryEnumSm:
		return "SM"
	case CountryEnumSt:
		return "ST"
	case CountryEnumSa:
		return "SA"
	case CountryEnumSn:
		return "SN"
	case CountryEnumRs:
		return "RS"
	case CountryEnumSc:
		return "SC"
	case CountryEnumSl:
		return "SL"
	case CountryEnumSg:
		return "SG"
	case CountryEnumSx:
		return "SX"
	case CountryEnumSk:
		return "SK"
	case CountryEnumSi:
		return "SI"
	case CountryEnumSb:
		return "SB"
	case CountryEnumSo:
		return "SO"
	case CountryEnumZa:
		return "ZA"
	case CountryEnumGs:
		return "GS"
	case CountryEnumKr:
		return "KR"
	case CountryEnumSs:
		return "SS"
	case CountryEnumEs:
		return "ES"
	case CountryEnumLk:
		return "LK"
	case CountryEnumSd:
		return "SD"
	case CountryEnumSr:
		return "SR"
	case CountryEnumSj:
		return "SJ"
	case CountryEnumSe:
		return "SE"
	case CountryEnumCh:
		return "CH"
	case CountryEnumSy:
		return "SY"
	case CountryEnumTw:
		return "TW"
	case CountryEnumTj:
		return "TJ"
	case CountryEnumTz:
		return "TZ"
	case CountryEnumTh:
		return "TH"
	case CountryEnumTl:
		return "TL"
	case CountryEnumTg:
		return "TG"
	case CountryEnumTk:
		return "TK"
	case CountryEnumTo:
		return "TO"
	case CountryEnumTt:
		return "TT"
	case CountryEnumTn:
		return "TN"
	case CountryEnumTr:
		return "TR"
	case CountryEnumTm:
		return "TM"
	case CountryEnumTc:
		return "TC"
	case CountryEnumTv:
		return "TV"
	case CountryEnumUg:
		return "UG"
	case CountryEnumUa:
		return "UA"
	case CountryEnumAe:
		return "AE"
	case CountryEnumGb:
		return "GB"
	case CountryEnumUm:
		return "UM"
	case CountryEnumUs:
		return "US"
	case CountryEnumUy:
		return "UY"
	case CountryEnumUz:
		return "UZ"
	case CountryEnumVu:
		return "VU"
	case CountryEnumVe:
		return "VE"
	case CountryEnumVn:
		return "VN"
	case CountryEnumVg:
		return "VG"
	case CountryEnumVi:
		return "VI"
	case CountryEnumWf:
		return "WF"
	case CountryEnumEh:
		return "EH"
	case CountryEnumYe:
		return "YE"
	case CountryEnumZm:
		return "ZM"
	case CountryEnumZw:
		return "ZW"
	}
}

func (c CountryEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", c.String())), nil
}

func (c *CountryEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "AF":
		value := CountryEnumAf
		*c = value
	case "AX":
		value := CountryEnumAx
		*c = value
	case "AL":
		value := CountryEnumAl
		*c = value
	case "DZ":
		value := CountryEnumDz
		*c = value
	case "AS":
		value := CountryEnumAs
		*c = value
	case "AD":
		value := CountryEnumAd
		*c = value
	case "AO":
		value := CountryEnumAo
		*c = value
	case "AI":
		value := CountryEnumAi
		*c = value
	case "AQ":
		value := CountryEnumAq
		*c = value
	case "AG":
		value := CountryEnumAg
		*c = value
	case "AR":
		value := CountryEnumAr
		*c = value
	case "AM":
		value := CountryEnumAm
		*c = value
	case "AW":
		value := CountryEnumAw
		*c = value
	case "AU":
		value := CountryEnumAu
		*c = value
	case "AT":
		value := CountryEnumAt
		*c = value
	case "AZ":
		value := CountryEnumAz
		*c = value
	case "BS":
		value := CountryEnumBs
		*c = value
	case "BH":
		value := CountryEnumBh
		*c = value
	case "BD":
		value := CountryEnumBd
		*c = value
	case "BB":
		value := CountryEnumBb
		*c = value
	case "BY":
		value := CountryEnumBy
		*c = value
	case "BE":
		value := CountryEnumBe
		*c = value
	case "BZ":
		value := CountryEnumBz
		*c = value
	case "BJ":
		value := CountryEnumBj
		*c = value
	case "BM":
		value := CountryEnumBm
		*c = value
	case "BT":
		value := CountryEnumBt
		*c = value
	case "BO":
		value := CountryEnumBo
		*c = value
	case "BQ":
		value := CountryEnumBq
		*c = value
	case "BA":
		value := CountryEnumBa
		*c = value
	case "BW":
		value := CountryEnumBw
		*c = value
	case "BV":
		value := CountryEnumBv
		*c = value
	case "BR":
		value := CountryEnumBr
		*c = value
	case "IO":
		value := CountryEnumIo
		*c = value
	case "BN":
		value := CountryEnumBn
		*c = value
	case "BG":
		value := CountryEnumBg
		*c = value
	case "BF":
		value := CountryEnumBf
		*c = value
	case "BI":
		value := CountryEnumBi
		*c = value
	case "CV":
		value := CountryEnumCv
		*c = value
	case "KH":
		value := CountryEnumKh
		*c = value
	case "CM":
		value := CountryEnumCm
		*c = value
	case "CA":
		value := CountryEnumCa
		*c = value
	case "KY":
		value := CountryEnumKy
		*c = value
	case "CF":
		value := CountryEnumCf
		*c = value
	case "TD":
		value := CountryEnumTd
		*c = value
	case "CL":
		value := CountryEnumCl
		*c = value
	case "CN":
		value := CountryEnumCn
		*c = value
	case "CX":
		value := CountryEnumCx
		*c = value
	case "CC":
		value := CountryEnumCc
		*c = value
	case "CO":
		value := CountryEnumCo
		*c = value
	case "KM":
		value := CountryEnumKm
		*c = value
	case "CG":
		value := CountryEnumCg
		*c = value
	case "CD":
		value := CountryEnumCd
		*c = value
	case "CK":
		value := CountryEnumCk
		*c = value
	case "CR":
		value := CountryEnumCr
		*c = value
	case "CI":
		value := CountryEnumCi
		*c = value
	case "HR":
		value := CountryEnumHr
		*c = value
	case "CU":
		value := CountryEnumCu
		*c = value
	case "CW":
		value := CountryEnumCw
		*c = value
	case "CY":
		value := CountryEnumCy
		*c = value
	case "CZ":
		value := CountryEnumCz
		*c = value
	case "DK":
		value := CountryEnumDk
		*c = value
	case "DJ":
		value := CountryEnumDj
		*c = value
	case "DM":
		value := CountryEnumDm
		*c = value
	case "DO":
		value := CountryEnumDo
		*c = value
	case "EC":
		value := CountryEnumEc
		*c = value
	case "EG":
		value := CountryEnumEg
		*c = value
	case "SV":
		value := CountryEnumSv
		*c = value
	case "GQ":
		value := CountryEnumGq
		*c = value
	case "ER":
		value := CountryEnumEr
		*c = value
	case "EE":
		value := CountryEnumEe
		*c = value
	case "SZ":
		value := CountryEnumSz
		*c = value
	case "ET":
		value := CountryEnumEt
		*c = value
	case "FK":
		value := CountryEnumFk
		*c = value
	case "FO":
		value := CountryEnumFo
		*c = value
	case "FJ":
		value := CountryEnumFj
		*c = value
	case "FI":
		value := CountryEnumFi
		*c = value
	case "FR":
		value := CountryEnumFr
		*c = value
	case "GF":
		value := CountryEnumGf
		*c = value
	case "PF":
		value := CountryEnumPf
		*c = value
	case "TF":
		value := CountryEnumTf
		*c = value
	case "GA":
		value := CountryEnumGa
		*c = value
	case "GM":
		value := CountryEnumGm
		*c = value
	case "GE":
		value := CountryEnumGe
		*c = value
	case "DE":
		value := CountryEnumDe
		*c = value
	case "GH":
		value := CountryEnumGh
		*c = value
	case "GI":
		value := CountryEnumGi
		*c = value
	case "GR":
		value := CountryEnumGr
		*c = value
	case "GL":
		value := CountryEnumGl
		*c = value
	case "GD":
		value := CountryEnumGd
		*c = value
	case "GP":
		value := CountryEnumGp
		*c = value
	case "GU":
		value := CountryEnumGu
		*c = value
	case "GT":
		value := CountryEnumGt
		*c = value
	case "GG":
		value := CountryEnumGg
		*c = value
	case "GN":
		value := CountryEnumGn
		*c = value
	case "GW":
		value := CountryEnumGw
		*c = value
	case "GY":
		value := CountryEnumGy
		*c = value
	case "HT":
		value := CountryEnumHt
		*c = value
	case "HM":
		value := CountryEnumHm
		*c = value
	case "VA":
		value := CountryEnumVa
		*c = value
	case "HN":
		value := CountryEnumHn
		*c = value
	case "HK":
		value := CountryEnumHk
		*c = value
	case "HU":
		value := CountryEnumHu
		*c = value
	case "IS":
		value := CountryEnumIs
		*c = value
	case "IN":
		value := CountryEnumIn
		*c = value
	case "ID":
		value := CountryEnumId
		*c = value
	case "IR":
		value := CountryEnumIr
		*c = value
	case "IQ":
		value := CountryEnumIq
		*c = value
	case "IE":
		value := CountryEnumIe
		*c = value
	case "IM":
		value := CountryEnumIm
		*c = value
	case "IL":
		value := CountryEnumIl
		*c = value
	case "IT":
		value := CountryEnumIt
		*c = value
	case "JM":
		value := CountryEnumJm
		*c = value
	case "JP":
		value := CountryEnumJp
		*c = value
	case "JE":
		value := CountryEnumJe
		*c = value
	case "JO":
		value := CountryEnumJo
		*c = value
	case "KZ":
		value := CountryEnumKz
		*c = value
	case "KE":
		value := CountryEnumKe
		*c = value
	case "KI":
		value := CountryEnumKi
		*c = value
	case "KW":
		value := CountryEnumKw
		*c = value
	case "KG":
		value := CountryEnumKg
		*c = value
	case "LA":
		value := CountryEnumLa
		*c = value
	case "LV":
		value := CountryEnumLv
		*c = value
	case "LB":
		value := CountryEnumLb
		*c = value
	case "LS":
		value := CountryEnumLs
		*c = value
	case "LR":
		value := CountryEnumLr
		*c = value
	case "LY":
		value := CountryEnumLy
		*c = value
	case "LI":
		value := CountryEnumLi
		*c = value
	case "LT":
		value := CountryEnumLt
		*c = value
	case "LU":
		value := CountryEnumLu
		*c = value
	case "MO":
		value := CountryEnumMo
		*c = value
	case "MG":
		value := CountryEnumMg
		*c = value
	case "MW":
		value := CountryEnumMw
		*c = value
	case "MY":
		value := CountryEnumMy
		*c = value
	case "MV":
		value := CountryEnumMv
		*c = value
	case "ML":
		value := CountryEnumMl
		*c = value
	case "MT":
		value := CountryEnumMt
		*c = value
	case "MH":
		value := CountryEnumMh
		*c = value
	case "MQ":
		value := CountryEnumMq
		*c = value
	case "MR":
		value := CountryEnumMr
		*c = value
	case "MU":
		value := CountryEnumMu
		*c = value
	case "YT":
		value := CountryEnumYt
		*c = value
	case "MX":
		value := CountryEnumMx
		*c = value
	case "FM":
		value := CountryEnumFm
		*c = value
	case "MD":
		value := CountryEnumMd
		*c = value
	case "MC":
		value := CountryEnumMc
		*c = value
	case "MN":
		value := CountryEnumMn
		*c = value
	case "ME":
		value := CountryEnumMe
		*c = value
	case "MS":
		value := CountryEnumMs
		*c = value
	case "MA":
		value := CountryEnumMa
		*c = value
	case "MZ":
		value := CountryEnumMz
		*c = value
	case "MM":
		value := CountryEnumMm
		*c = value
	case "NA":
		value := CountryEnumNa
		*c = value
	case "NR":
		value := CountryEnumNr
		*c = value
	case "NP":
		value := CountryEnumNp
		*c = value
	case "NL":
		value := CountryEnumNl
		*c = value
	case "NC":
		value := CountryEnumNc
		*c = value
	case "NZ":
		value := CountryEnumNz
		*c = value
	case "NI":
		value := CountryEnumNi
		*c = value
	case "NE":
		value := CountryEnumNe
		*c = value
	case "NG":
		value := CountryEnumNg
		*c = value
	case "NU":
		value := CountryEnumNu
		*c = value
	case "NF":
		value := CountryEnumNf
		*c = value
	case "KP":
		value := CountryEnumKp
		*c = value
	case "MK":
		value := CountryEnumMk
		*c = value
	case "MP":
		value := CountryEnumMp
		*c = value
	case "NO":
		value := CountryEnumNo
		*c = value
	case "OM":
		value := CountryEnumOm
		*c = value
	case "PK":
		value := CountryEnumPk
		*c = value
	case "PW":
		value := CountryEnumPw
		*c = value
	case "PS":
		value := CountryEnumPs
		*c = value
	case "PA":
		value := CountryEnumPa
		*c = value
	case "PG":
		value := CountryEnumPg
		*c = value
	case "PY":
		value := CountryEnumPy
		*c = value
	case "PE":
		value := CountryEnumPe
		*c = value
	case "PH":
		value := CountryEnumPh
		*c = value
	case "PN":
		value := CountryEnumPn
		*c = value
	case "PL":
		value := CountryEnumPl
		*c = value
	case "PT":
		value := CountryEnumPt
		*c = value
	case "PR":
		value := CountryEnumPr
		*c = value
	case "QA":
		value := CountryEnumQa
		*c = value
	case "RE":
		value := CountryEnumRe
		*c = value
	case "RO":
		value := CountryEnumRo
		*c = value
	case "RU":
		value := CountryEnumRu
		*c = value
	case "RW":
		value := CountryEnumRw
		*c = value
	case "BL":
		value := CountryEnumBl
		*c = value
	case "SH":
		value := CountryEnumSh
		*c = value
	case "KN":
		value := CountryEnumKn
		*c = value
	case "LC":
		value := CountryEnumLc
		*c = value
	case "MF":
		value := CountryEnumMf
		*c = value
	case "PM":
		value := CountryEnumPm
		*c = value
	case "VC":
		value := CountryEnumVc
		*c = value
	case "WS":
		value := CountryEnumWs
		*c = value
	case "SM":
		value := CountryEnumSm
		*c = value
	case "ST":
		value := CountryEnumSt
		*c = value
	case "SA":
		value := CountryEnumSa
		*c = value
	case "SN":
		value := CountryEnumSn
		*c = value
	case "RS":
		value := CountryEnumRs
		*c = value
	case "SC":
		value := CountryEnumSc
		*c = value
	case "SL":
		value := CountryEnumSl
		*c = value
	case "SG":
		value := CountryEnumSg
		*c = value
	case "SX":
		value := CountryEnumSx
		*c = value
	case "SK":
		value := CountryEnumSk
		*c = value
	case "SI":
		value := CountryEnumSi
		*c = value
	case "SB":
		value := CountryEnumSb
		*c = value
	case "SO":
		value := CountryEnumSo
		*c = value
	case "ZA":
		value := CountryEnumZa
		*c = value
	case "GS":
		value := CountryEnumGs
		*c = value
	case "KR":
		value := CountryEnumKr
		*c = value
	case "SS":
		value := CountryEnumSs
		*c = value
	case "ES":
		value := CountryEnumEs
		*c = value
	case "LK":
		value := CountryEnumLk
		*c = value
	case "SD":
		value := CountryEnumSd
		*c = value
	case "SR":
		value := CountryEnumSr
		*c = value
	case "SJ":
		value := CountryEnumSj
		*c = value
	case "SE":
		value := CountryEnumSe
		*c = value
	case "CH":
		value := CountryEnumCh
		*c = value
	case "SY":
		value := CountryEnumSy
		*c = value
	case "TW":
		value := CountryEnumTw
		*c = value
	case "TJ":
		value := CountryEnumTj
		*c = value
	case "TZ":
		value := CountryEnumTz
		*c = value
	case "TH":
		value := CountryEnumTh
		*c = value
	case "TL":
		value := CountryEnumTl
		*c = value
	case "TG":
		value := CountryEnumTg
		*c = value
	case "TK":
		value := CountryEnumTk
		*c = value
	case "TO":
		value := CountryEnumTo
		*c = value
	case "TT":
		value := CountryEnumTt
		*c = value
	case "TN":
		value := CountryEnumTn
		*c = value
	case "TR":
		value := CountryEnumTr
		*c = value
	case "TM":
		value := CountryEnumTm
		*c = value
	case "TC":
		value := CountryEnumTc
		*c = value
	case "TV":
		value := CountryEnumTv
		*c = value
	case "UG":
		value := CountryEnumUg
		*c = value
	case "UA":
		value := CountryEnumUa
		*c = value
	case "AE":
		value := CountryEnumAe
		*c = value
	case "GB":
		value := CountryEnumGb
		*c = value
	case "UM":
		value := CountryEnumUm
		*c = value
	case "US":
		value := CountryEnumUs
		*c = value
	case "UY":
		value := CountryEnumUy
		*c = value
	case "UZ":
		value := CountryEnumUz
		*c = value
	case "VU":
		value := CountryEnumVu
		*c = value
	case "VE":
		value := CountryEnumVe
		*c = value
	case "VN":
		value := CountryEnumVn
		*c = value
	case "VG":
		value := CountryEnumVg
		*c = value
	case "VI":
		value := CountryEnumVi
		*c = value
	case "WF":
		value := CountryEnumWf
		*c = value
	case "EH":
		value := CountryEnumEh
		*c = value
	case "YE":
		value := CountryEnumYe
		*c = value
	case "ZM":
		value := CountryEnumZm
		*c = value
	case "ZW":
		value := CountryEnumZw
		*c = value
	}
	return nil
}

// # The CreditNote Object
// ### Description
// A `CreditNote` is transaction issued to a customer, indicating a reduction or cancellation of the amount owed by the customer. It is most generally used as an adjustment note used to rectify errors, returns, or overpayments related to a sales transaction. A `CreditNote` can be applied to *Accounts Receivable* Invoices to decrease the overall amount of the Invoice.
//
// ### Usage Example
// Fetch from the `LIST CreditNotes` endpoint and view a company's credit notes.
type CreditNote struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The credit note's transaction date.
	TransactionDate *time.Time `json:"transaction_date,omitempty"`
	// The credit note's status.
	//
	// * `SUBMITTED` - SUBMITTED
	// * `AUTHORIZED` - AUTHORIZED
	// * `PAID` - PAID
	Status *CreditNoteStatus `json:"status,omitempty"`
	// The credit note's number.
	Number *string `json:"number,omitempty"`
	// The credit note's contact.
	Contact *CreditNoteContact `json:"contact,omitempty"`
	// The company the credit note belongs to.
	Company *CreditNoteCompany `json:"company,omitempty"`
	// The credit note's exchange rate.
	ExchangeRate *string `json:"exchange_rate,omitempty"`
	// The credit note's total amount.
	TotalAmount *float64 `json:"total_amount,omitempty"`
	// The amount of value remaining in the credit note that the customer can use.
	RemainingCredit    *float64                            `json:"remaining_credit,omitempty"`
	LineItems          []*CreditNoteLineItem               `json:"line_items,omitempty"`
	TrackingCategories []*CreditNoteTrackingCategoriesItem `json:"tracking_categories,omitempty"`
	// The credit note's currency.
	//
	// * `XUA` - ADB Unit of Account
	// * `AFN` - Afghan Afghani
	// * `AFA` - Afghan Afghani (1927–2002)
	// * `ALL` - Albanian Lek
	// * `ALK` - Albanian Lek (1946–1965)
	// * `DZD` - Algerian Dinar
	// * `ADP` - Andorran Peseta
	// * `AOA` - Angolan Kwanza
	// * `AOK` - Angolan Kwanza (1977–1991)
	// * `AON` - Angolan New Kwanza (1990–2000)
	// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
	// * `ARA` - Argentine Austral
	// * `ARS` - Argentine Peso
	// * `ARM` - Argentine Peso (1881–1970)
	// * `ARP` - Argentine Peso (1983–1985)
	// * `ARL` - Argentine Peso Ley (1970–1983)
	// * `AMD` - Armenian Dram
	// * `AWG` - Aruban Florin
	// * `AUD` - Australian Dollar
	// * `ATS` - Austrian Schilling
	// * `AZN` - Azerbaijani Manat
	// * `AZM` - Azerbaijani Manat (1993–2006)
	// * `BSD` - Bahamian Dollar
	// * `BHD` - Bahraini Dinar
	// * `BDT` - Bangladeshi Taka
	// * `BBD` - Barbadian Dollar
	// * `BYN` - Belarusian Ruble
	// * `BYB` - Belarusian Ruble (1994–1999)
	// * `BYR` - Belarusian Ruble (2000–2016)
	// * `BEF` - Belgian Franc
	// * `BEC` - Belgian Franc (convertible)
	// * `BEL` - Belgian Franc (financial)
	// * `BZD` - Belize Dollar
	// * `BMD` - Bermudan Dollar
	// * `BTN` - Bhutanese Ngultrum
	// * `BOB` - Bolivian Boliviano
	// * `BOL` - Bolivian Boliviano (1863–1963)
	// * `BOV` - Bolivian Mvdol
	// * `BOP` - Bolivian Peso
	// * `BAM` - Bosnia-Herzegovina Convertible Mark
	// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
	// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
	// * `BWP` - Botswanan Pula
	// * `BRC` - Brazilian Cruzado (1986–1989)
	// * `BRZ` - Brazilian Cruzeiro (1942–1967)
	// * `BRE` - Brazilian Cruzeiro (1990–1993)
	// * `BRR` - Brazilian Cruzeiro (1993–1994)
	// * `BRN` - Brazilian New Cruzado (1989–1990)
	// * `BRB` - Brazilian New Cruzeiro (1967–1986)
	// * `BRL` - Brazilian Real
	// * `GBP` - British Pound
	// * `BND` - Brunei Dollar
	// * `BGL` - Bulgarian Hard Lev
	// * `BGN` - Bulgarian Lev
	// * `BGO` - Bulgarian Lev (1879–1952)
	// * `BGM` - Bulgarian Socialist Lev
	// * `BUK` - Burmese Kyat
	// * `BIF` - Burundian Franc
	// * `XPF` - CFP Franc
	// * `KHR` - Cambodian Riel
	// * `CAD` - Canadian Dollar
	// * `CVE` - Cape Verdean Escudo
	// * `KYD` - Cayman Islands Dollar
	// * `XAF` - Central African CFA Franc
	// * `CLE` - Chilean Escudo
	// * `CLP` - Chilean Peso
	// * `CLF` - Chilean Unit of Account (UF)
	// * `CNX` - Chinese People’s Bank Dollar
	// * `CNY` - Chinese Yuan
	// * `CNH` - Chinese Yuan (offshore)
	// * `COP` - Colombian Peso
	// * `COU` - Colombian Real Value Unit
	// * `KMF` - Comorian Franc
	// * `CDF` - Congolese Franc
	// * `CRC` - Costa Rican Colón
	// * `HRD` - Croatian Dinar
	// * `HRK` - Croatian Kuna
	// * `CUC` - Cuban Convertible Peso
	// * `CUP` - Cuban Peso
	// * `CYP` - Cypriot Pound
	// * `CZK` - Czech Koruna
	// * `CSK` - Czechoslovak Hard Koruna
	// * `DKK` - Danish Krone
	// * `DJF` - Djiboutian Franc
	// * `DOP` - Dominican Peso
	// * `NLG` - Dutch Guilder
	// * `XCD` - East Caribbean Dollar
	// * `DDM` - East German Mark
	// * `ECS` - Ecuadorian Sucre
	// * `ECV` - Ecuadorian Unit of Constant Value
	// * `EGP` - Egyptian Pound
	// * `GQE` - Equatorial Guinean Ekwele
	// * `ERN` - Eritrean Nakfa
	// * `EEK` - Estonian Kroon
	// * `ETB` - Ethiopian Birr
	// * `EUR` - Euro
	// * `XBA` - European Composite Unit
	// * `XEU` - European Currency Unit
	// * `XBB` - European Monetary Unit
	// * `XBC` - European Unit of Account (XBC)
	// * `XBD` - European Unit of Account (XBD)
	// * `FKP` - Falkland Islands Pound
	// * `FJD` - Fijian Dollar
	// * `FIM` - Finnish Markka
	// * `FRF` - French Franc
	// * `XFO` - French Gold Franc
	// * `XFU` - French UIC-Franc
	// * `GMD` - Gambian Dalasi
	// * `GEK` - Georgian Kupon Larit
	// * `GEL` - Georgian Lari
	// * `DEM` - German Mark
	// * `GHS` - Ghanaian Cedi
	// * `GHC` - Ghanaian Cedi (1979–2007)
	// * `GIP` - Gibraltar Pound
	// * `XAU` - Gold
	// * `GRD` - Greek Drachma
	// * `GTQ` - Guatemalan Quetzal
	// * `GWP` - Guinea-Bissau Peso
	// * `GNF` - Guinean Franc
	// * `GNS` - Guinean Syli
	// * `GYD` - Guyanaese Dollar
	// * `HTG` - Haitian Gourde
	// * `HNL` - Honduran Lempira
	// * `HKD` - Hong Kong Dollar
	// * `HUF` - Hungarian Forint
	// * `IMP` - IMP
	// * `ISK` - Icelandic Króna
	// * `ISJ` - Icelandic Króna (1918–1981)
	// * `INR` - Indian Rupee
	// * `IDR` - Indonesian Rupiah
	// * `IRR` - Iranian Rial
	// * `IQD` - Iraqi Dinar
	// * `IEP` - Irish Pound
	// * `ILS` - Israeli New Shekel
	// * `ILP` - Israeli Pound
	// * `ILR` - Israeli Shekel (1980–1985)
	// * `ITL` - Italian Lira
	// * `JMD` - Jamaican Dollar
	// * `JPY` - Japanese Yen
	// * `JOD` - Jordanian Dinar
	// * `KZT` - Kazakhstani Tenge
	// * `KES` - Kenyan Shilling
	// * `KWD` - Kuwaiti Dinar
	// * `KGS` - Kyrgystani Som
	// * `LAK` - Laotian Kip
	// * `LVL` - Latvian Lats
	// * `LVR` - Latvian Ruble
	// * `LBP` - Lebanese Pound
	// * `LSL` - Lesotho Loti
	// * `LRD` - Liberian Dollar
	// * `LYD` - Libyan Dinar
	// * `LTL` - Lithuanian Litas
	// * `LTT` - Lithuanian Talonas
	// * `LUL` - Luxembourg Financial Franc
	// * `LUC` - Luxembourgian Convertible Franc
	// * `LUF` - Luxembourgian Franc
	// * `MOP` - Macanese Pataca
	// * `MKD` - Macedonian Denar
	// * `MKN` - Macedonian Denar (1992–1993)
	// * `MGA` - Malagasy Ariary
	// * `MGF` - Malagasy Franc
	// * `MWK` - Malawian Kwacha
	// * `MYR` - Malaysian Ringgit
	// * `MVR` - Maldivian Rufiyaa
	// * `MVP` - Maldivian Rupee (1947–1981)
	// * `MLF` - Malian Franc
	// * `MTL` - Maltese Lira
	// * `MTP` - Maltese Pound
	// * `MRU` - Mauritanian Ouguiya
	// * `MRO` - Mauritanian Ouguiya (1973–2017)
	// * `MUR` - Mauritian Rupee
	// * `MXV` - Mexican Investment Unit
	// * `MXN` - Mexican Peso
	// * `MXP` - Mexican Silver Peso (1861–1992)
	// * `MDC` - Moldovan Cupon
	// * `MDL` - Moldovan Leu
	// * `MCF` - Monegasque Franc
	// * `MNT` - Mongolian Tugrik
	// * `MAD` - Moroccan Dirham
	// * `MAF` - Moroccan Franc
	// * `MZE` - Mozambican Escudo
	// * `MZN` - Mozambican Metical
	// * `MZM` - Mozambican Metical (1980–2006)
	// * `MMK` - Myanmar Kyat
	// * `NAD` - Namibian Dollar
	// * `NPR` - Nepalese Rupee
	// * `ANG` - Netherlands Antillean Guilder
	// * `TWD` - New Taiwan Dollar
	// * `NZD` - New Zealand Dollar
	// * `NIO` - Nicaraguan Córdoba
	// * `NIC` - Nicaraguan Córdoba (1988–1991)
	// * `NGN` - Nigerian Naira
	// * `KPW` - North Korean Won
	// * `NOK` - Norwegian Krone
	// * `OMR` - Omani Rial
	// * `PKR` - Pakistani Rupee
	// * `XPD` - Palladium
	// * `PAB` - Panamanian Balboa
	// * `PGK` - Papua New Guinean Kina
	// * `PYG` - Paraguayan Guarani
	// * `PEI` - Peruvian Inti
	// * `PEN` - Peruvian Sol
	// * `PES` - Peruvian Sol (1863–1965)
	// * `PHP` - Philippine Peso
	// * `XPT` - Platinum
	// * `PLN` - Polish Zloty
	// * `PLZ` - Polish Zloty (1950–1995)
	// * `PTE` - Portuguese Escudo
	// * `GWE` - Portuguese Guinea Escudo
	// * `QAR` - Qatari Rial
	// * `XRE` - RINET Funds
	// * `RHD` - Rhodesian Dollar
	// * `RON` - Romanian Leu
	// * `ROL` - Romanian Leu (1952–2006)
	// * `RUB` - Russian Ruble
	// * `RUR` - Russian Ruble (1991–1998)
	// * `RWF` - Rwandan Franc
	// * `SVC` - Salvadoran Colón
	// * `WST` - Samoan Tala
	// * `SAR` - Saudi Riyal
	// * `RSD` - Serbian Dinar
	// * `CSD` - Serbian Dinar (2002–2006)
	// * `SCR` - Seychellois Rupee
	// * `SLL` - Sierra Leonean Leone
	// * `XAG` - Silver
	// * `SGD` - Singapore Dollar
	// * `SKK` - Slovak Koruna
	// * `SIT` - Slovenian Tolar
	// * `SBD` - Solomon Islands Dollar
	// * `SOS` - Somali Shilling
	// * `ZAR` - South African Rand
	// * `ZAL` - South African Rand (financial)
	// * `KRH` - South Korean Hwan (1953–1962)
	// * `KRW` - South Korean Won
	// * `KRO` - South Korean Won (1945–1953)
	// * `SSP` - South Sudanese Pound
	// * `SUR` - Soviet Rouble
	// * `ESP` - Spanish Peseta
	// * `ESA` - Spanish Peseta (A account)
	// * `ESB` - Spanish Peseta (convertible account)
	// * `XDR` - Special Drawing Rights
	// * `LKR` - Sri Lankan Rupee
	// * `SHP` - St. Helena Pound
	// * `XSU` - Sucre
	// * `SDD` - Sudanese Dinar (1992–2007)
	// * `SDG` - Sudanese Pound
	// * `SDP` - Sudanese Pound (1957–1998)
	// * `SRD` - Surinamese Dollar
	// * `SRG` - Surinamese Guilder
	// * `SZL` - Swazi Lilangeni
	// * `SEK` - Swedish Krona
	// * `CHF` - Swiss Franc
	// * `SYP` - Syrian Pound
	// * `STN` - São Tomé & Príncipe Dobra
	// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
	// * `TVD` - TVD
	// * `TJR` - Tajikistani Ruble
	// * `TJS` - Tajikistani Somoni
	// * `TZS` - Tanzanian Shilling
	// * `XTS` - Testing Currency Code
	// * `THB` - Thai Baht
	// * `XXX` - The codes assigned for transactions where no currency is involved
	// * `TPE` - Timorese Escudo
	// * `TOP` - Tongan Paʻanga
	// * `TTD` - Trinidad & Tobago Dollar
	// * `TND` - Tunisian Dinar
	// * `TRY` - Turkish Lira
	// * `TRL` - Turkish Lira (1922–2005)
	// * `TMT` - Turkmenistani Manat
	// * `TMM` - Turkmenistani Manat (1993–2009)
	// * `USD` - US Dollar
	// * `USN` - US Dollar (Next day)
	// * `USS` - US Dollar (Same day)
	// * `UGX` - Ugandan Shilling
	// * `UGS` - Ugandan Shilling (1966–1987)
	// * `UAH` - Ukrainian Hryvnia
	// * `UAK` - Ukrainian Karbovanets
	// * `AED` - United Arab Emirates Dirham
	// * `UYW` - Uruguayan Nominal Wage Index Unit
	// * `UYU` - Uruguayan Peso
	// * `UYP` - Uruguayan Peso (1975–1993)
	// * `UYI` - Uruguayan Peso (Indexed Units)
	// * `UZS` - Uzbekistani Som
	// * `VUV` - Vanuatu Vatu
	// * `VES` - Venezuelan Bolívar
	// * `VEB` - Venezuelan Bolívar (1871–2008)
	// * `VEF` - Venezuelan Bolívar (2008–2018)
	// * `VND` - Vietnamese Dong
	// * `VNN` - Vietnamese Dong (1978–1985)
	// * `CHE` - WIR Euro
	// * `CHW` - WIR Franc
	// * `XOF` - West African CFA Franc
	// * `YDD` - Yemeni Dinar
	// * `YER` - Yemeni Rial
	// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
	// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
	// * `YUM` - Yugoslavian New Dinar (1994–2002)
	// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
	// * `ZWN` - ZWN
	// * `ZRN` - Zairean New Zaire (1993–1998)
	// * `ZRZ` - Zairean Zaire (1971–1993)
	// * `ZMW` - Zambian Kwacha
	// * `ZMK` - Zambian Kwacha (1968–2012)
	// * `ZWD` - Zimbabwean Dollar (1980–2008)
	// * `ZWR` - Zimbabwean Dollar (2008)
	// * `ZWL` - Zimbabwean Dollar (2009)
	Currency *CreditNoteCurrency `json:"currency,omitempty"`
	// When the third party's credit note was created.
	RemoteCreatedAt *time.Time `json:"remote_created_at,omitempty"`
	// When the third party's credit note was updated.
	RemoteUpdatedAt *time.Time `json:"remote_updated_at,omitempty"`
	// Array of `Payment` object IDs
	Payments []*CreditNotePaymentsItem `json:"payments,omitempty"`
	// A list of the Payment Applied to Lines common models related to a given Invoice, Credit Note, or Journal Entry.
	AppliedPayments []*CreditNoteAppliedPaymentsItem `json:"applied_payments,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted *bool `json:"remote_was_deleted,omitempty"`
	// The accounting period that the CreditNote was generated in.
	AccountingPeriod *CreditNoteAccountingPeriod `json:"accounting_period,omitempty"`
	CreatedAt        *time.Time                  `json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt    *time.Time     `json:"modified_at,omitempty"`
	FieldMappings map[string]any `json:"field_mappings,omitempty"`
	RemoteData    []*RemoteData  `json:"remote_data,omitempty"`
}

// The accounting period that the CreditNote was generated in.
type CreditNoteAccountingPeriod struct {
	typeName         string
	String           string
	AccountingPeriod *AccountingPeriod
}

func NewCreditNoteAccountingPeriodFromString(value string) *CreditNoteAccountingPeriod {
	return &CreditNoteAccountingPeriod{typeName: "string", String: value}
}

func NewCreditNoteAccountingPeriodFromAccountingPeriod(value *AccountingPeriod) *CreditNoteAccountingPeriod {
	return &CreditNoteAccountingPeriod{typeName: "accountingPeriod", AccountingPeriod: value}
}

func (c *CreditNoteAccountingPeriod) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	valueAccountingPeriod := new(AccountingPeriod)
	if err := json.Unmarshal(data, &valueAccountingPeriod); err == nil {
		c.typeName = "accountingPeriod"
		c.AccountingPeriod = valueAccountingPeriod
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CreditNoteAccountingPeriod) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "accountingPeriod":
		return json.Marshal(c.AccountingPeriod)
	}
}

type CreditNoteAccountingPeriodVisitor interface {
	VisitString(string) error
	VisitAccountingPeriod(*AccountingPeriod) error
}

func (c *CreditNoteAccountingPeriod) Accept(visitor CreditNoteAccountingPeriodVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return visitor.VisitString(c.String)
	case "accountingPeriod":
		return visitor.VisitAccountingPeriod(c.AccountingPeriod)
	}
}

type CreditNoteAppliedPaymentsItem struct {
	typeName        string
	String          string
	PaymentLineItem *PaymentLineItem
}

func NewCreditNoteAppliedPaymentsItemFromString(value string) *CreditNoteAppliedPaymentsItem {
	return &CreditNoteAppliedPaymentsItem{typeName: "string", String: value}
}

func NewCreditNoteAppliedPaymentsItemFromPaymentLineItem(value *PaymentLineItem) *CreditNoteAppliedPaymentsItem {
	return &CreditNoteAppliedPaymentsItem{typeName: "paymentLineItem", PaymentLineItem: value}
}

func (c *CreditNoteAppliedPaymentsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	valuePaymentLineItem := new(PaymentLineItem)
	if err := json.Unmarshal(data, &valuePaymentLineItem); err == nil {
		c.typeName = "paymentLineItem"
		c.PaymentLineItem = valuePaymentLineItem
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CreditNoteAppliedPaymentsItem) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "paymentLineItem":
		return json.Marshal(c.PaymentLineItem)
	}
}

type CreditNoteAppliedPaymentsItemVisitor interface {
	VisitString(string) error
	VisitPaymentLineItem(*PaymentLineItem) error
}

func (c *CreditNoteAppliedPaymentsItem) Accept(visitor CreditNoteAppliedPaymentsItemVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return visitor.VisitString(c.String)
	case "paymentLineItem":
		return visitor.VisitPaymentLineItem(c.PaymentLineItem)
	}
}

// The company the credit note belongs to.
type CreditNoteCompany struct {
	typeName    string
	String      string
	CompanyInfo *CompanyInfo
}

func NewCreditNoteCompanyFromString(value string) *CreditNoteCompany {
	return &CreditNoteCompany{typeName: "string", String: value}
}

func NewCreditNoteCompanyFromCompanyInfo(value *CompanyInfo) *CreditNoteCompany {
	return &CreditNoteCompany{typeName: "companyInfo", CompanyInfo: value}
}

func (c *CreditNoteCompany) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	valueCompanyInfo := new(CompanyInfo)
	if err := json.Unmarshal(data, &valueCompanyInfo); err == nil {
		c.typeName = "companyInfo"
		c.CompanyInfo = valueCompanyInfo
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CreditNoteCompany) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "companyInfo":
		return json.Marshal(c.CompanyInfo)
	}
}

type CreditNoteCompanyVisitor interface {
	VisitString(string) error
	VisitCompanyInfo(*CompanyInfo) error
}

func (c *CreditNoteCompany) Accept(visitor CreditNoteCompanyVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return visitor.VisitString(c.String)
	case "companyInfo":
		return visitor.VisitCompanyInfo(c.CompanyInfo)
	}
}

// The credit note's contact.
type CreditNoteContact struct {
	typeName string
	String   string
	Contact  *Contact
}

func NewCreditNoteContactFromString(value string) *CreditNoteContact {
	return &CreditNoteContact{typeName: "string", String: value}
}

func NewCreditNoteContactFromContact(value *Contact) *CreditNoteContact {
	return &CreditNoteContact{typeName: "contact", Contact: value}
}

func (c *CreditNoteContact) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	valueContact := new(Contact)
	if err := json.Unmarshal(data, &valueContact); err == nil {
		c.typeName = "contact"
		c.Contact = valueContact
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CreditNoteContact) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "contact":
		return json.Marshal(c.Contact)
	}
}

type CreditNoteContactVisitor interface {
	VisitString(string) error
	VisitContact(*Contact) error
}

func (c *CreditNoteContact) Accept(visitor CreditNoteContactVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return visitor.VisitString(c.String)
	case "contact":
		return visitor.VisitContact(c.Contact)
	}
}

// The credit note's currency.
//
// * `XUA` - ADB Unit of Account
// * `AFN` - Afghan Afghani
// * `AFA` - Afghan Afghani (1927–2002)
// * `ALL` - Albanian Lek
// * `ALK` - Albanian Lek (1946–1965)
// * `DZD` - Algerian Dinar
// * `ADP` - Andorran Peseta
// * `AOA` - Angolan Kwanza
// * `AOK` - Angolan Kwanza (1977–1991)
// * `AON` - Angolan New Kwanza (1990–2000)
// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
// * `ARA` - Argentine Austral
// * `ARS` - Argentine Peso
// * `ARM` - Argentine Peso (1881–1970)
// * `ARP` - Argentine Peso (1983–1985)
// * `ARL` - Argentine Peso Ley (1970–1983)
// * `AMD` - Armenian Dram
// * `AWG` - Aruban Florin
// * `AUD` - Australian Dollar
// * `ATS` - Austrian Schilling
// * `AZN` - Azerbaijani Manat
// * `AZM` - Azerbaijani Manat (1993–2006)
// * `BSD` - Bahamian Dollar
// * `BHD` - Bahraini Dinar
// * `BDT` - Bangladeshi Taka
// * `BBD` - Barbadian Dollar
// * `BYN` - Belarusian Ruble
// * `BYB` - Belarusian Ruble (1994–1999)
// * `BYR` - Belarusian Ruble (2000–2016)
// * `BEF` - Belgian Franc
// * `BEC` - Belgian Franc (convertible)
// * `BEL` - Belgian Franc (financial)
// * `BZD` - Belize Dollar
// * `BMD` - Bermudan Dollar
// * `BTN` - Bhutanese Ngultrum
// * `BOB` - Bolivian Boliviano
// * `BOL` - Bolivian Boliviano (1863–1963)
// * `BOV` - Bolivian Mvdol
// * `BOP` - Bolivian Peso
// * `BAM` - Bosnia-Herzegovina Convertible Mark
// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
// * `BWP` - Botswanan Pula
// * `BRC` - Brazilian Cruzado (1986–1989)
// * `BRZ` - Brazilian Cruzeiro (1942–1967)
// * `BRE` - Brazilian Cruzeiro (1990–1993)
// * `BRR` - Brazilian Cruzeiro (1993–1994)
// * `BRN` - Brazilian New Cruzado (1989–1990)
// * `BRB` - Brazilian New Cruzeiro (1967–1986)
// * `BRL` - Brazilian Real
// * `GBP` - British Pound
// * `BND` - Brunei Dollar
// * `BGL` - Bulgarian Hard Lev
// * `BGN` - Bulgarian Lev
// * `BGO` - Bulgarian Lev (1879–1952)
// * `BGM` - Bulgarian Socialist Lev
// * `BUK` - Burmese Kyat
// * `BIF` - Burundian Franc
// * `XPF` - CFP Franc
// * `KHR` - Cambodian Riel
// * `CAD` - Canadian Dollar
// * `CVE` - Cape Verdean Escudo
// * `KYD` - Cayman Islands Dollar
// * `XAF` - Central African CFA Franc
// * `CLE` - Chilean Escudo
// * `CLP` - Chilean Peso
// * `CLF` - Chilean Unit of Account (UF)
// * `CNX` - Chinese People’s Bank Dollar
// * `CNY` - Chinese Yuan
// * `CNH` - Chinese Yuan (offshore)
// * `COP` - Colombian Peso
// * `COU` - Colombian Real Value Unit
// * `KMF` - Comorian Franc
// * `CDF` - Congolese Franc
// * `CRC` - Costa Rican Colón
// * `HRD` - Croatian Dinar
// * `HRK` - Croatian Kuna
// * `CUC` - Cuban Convertible Peso
// * `CUP` - Cuban Peso
// * `CYP` - Cypriot Pound
// * `CZK` - Czech Koruna
// * `CSK` - Czechoslovak Hard Koruna
// * `DKK` - Danish Krone
// * `DJF` - Djiboutian Franc
// * `DOP` - Dominican Peso
// * `NLG` - Dutch Guilder
// * `XCD` - East Caribbean Dollar
// * `DDM` - East German Mark
// * `ECS` - Ecuadorian Sucre
// * `ECV` - Ecuadorian Unit of Constant Value
// * `EGP` - Egyptian Pound
// * `GQE` - Equatorial Guinean Ekwele
// * `ERN` - Eritrean Nakfa
// * `EEK` - Estonian Kroon
// * `ETB` - Ethiopian Birr
// * `EUR` - Euro
// * `XBA` - European Composite Unit
// * `XEU` - European Currency Unit
// * `XBB` - European Monetary Unit
// * `XBC` - European Unit of Account (XBC)
// * `XBD` - European Unit of Account (XBD)
// * `FKP` - Falkland Islands Pound
// * `FJD` - Fijian Dollar
// * `FIM` - Finnish Markka
// * `FRF` - French Franc
// * `XFO` - French Gold Franc
// * `XFU` - French UIC-Franc
// * `GMD` - Gambian Dalasi
// * `GEK` - Georgian Kupon Larit
// * `GEL` - Georgian Lari
// * `DEM` - German Mark
// * `GHS` - Ghanaian Cedi
// * `GHC` - Ghanaian Cedi (1979–2007)
// * `GIP` - Gibraltar Pound
// * `XAU` - Gold
// * `GRD` - Greek Drachma
// * `GTQ` - Guatemalan Quetzal
// * `GWP` - Guinea-Bissau Peso
// * `GNF` - Guinean Franc
// * `GNS` - Guinean Syli
// * `GYD` - Guyanaese Dollar
// * `HTG` - Haitian Gourde
// * `HNL` - Honduran Lempira
// * `HKD` - Hong Kong Dollar
// * `HUF` - Hungarian Forint
// * `IMP` - IMP
// * `ISK` - Icelandic Króna
// * `ISJ` - Icelandic Króna (1918–1981)
// * `INR` - Indian Rupee
// * `IDR` - Indonesian Rupiah
// * `IRR` - Iranian Rial
// * `IQD` - Iraqi Dinar
// * `IEP` - Irish Pound
// * `ILS` - Israeli New Shekel
// * `ILP` - Israeli Pound
// * `ILR` - Israeli Shekel (1980–1985)
// * `ITL` - Italian Lira
// * `JMD` - Jamaican Dollar
// * `JPY` - Japanese Yen
// * `JOD` - Jordanian Dinar
// * `KZT` - Kazakhstani Tenge
// * `KES` - Kenyan Shilling
// * `KWD` - Kuwaiti Dinar
// * `KGS` - Kyrgystani Som
// * `LAK` - Laotian Kip
// * `LVL` - Latvian Lats
// * `LVR` - Latvian Ruble
// * `LBP` - Lebanese Pound
// * `LSL` - Lesotho Loti
// * `LRD` - Liberian Dollar
// * `LYD` - Libyan Dinar
// * `LTL` - Lithuanian Litas
// * `LTT` - Lithuanian Talonas
// * `LUL` - Luxembourg Financial Franc
// * `LUC` - Luxembourgian Convertible Franc
// * `LUF` - Luxembourgian Franc
// * `MOP` - Macanese Pataca
// * `MKD` - Macedonian Denar
// * `MKN` - Macedonian Denar (1992–1993)
// * `MGA` - Malagasy Ariary
// * `MGF` - Malagasy Franc
// * `MWK` - Malawian Kwacha
// * `MYR` - Malaysian Ringgit
// * `MVR` - Maldivian Rufiyaa
// * `MVP` - Maldivian Rupee (1947–1981)
// * `MLF` - Malian Franc
// * `MTL` - Maltese Lira
// * `MTP` - Maltese Pound
// * `MRU` - Mauritanian Ouguiya
// * `MRO` - Mauritanian Ouguiya (1973–2017)
// * `MUR` - Mauritian Rupee
// * `MXV` - Mexican Investment Unit
// * `MXN` - Mexican Peso
// * `MXP` - Mexican Silver Peso (1861–1992)
// * `MDC` - Moldovan Cupon
// * `MDL` - Moldovan Leu
// * `MCF` - Monegasque Franc
// * `MNT` - Mongolian Tugrik
// * `MAD` - Moroccan Dirham
// * `MAF` - Moroccan Franc
// * `MZE` - Mozambican Escudo
// * `MZN` - Mozambican Metical
// * `MZM` - Mozambican Metical (1980–2006)
// * `MMK` - Myanmar Kyat
// * `NAD` - Namibian Dollar
// * `NPR` - Nepalese Rupee
// * `ANG` - Netherlands Antillean Guilder
// * `TWD` - New Taiwan Dollar
// * `NZD` - New Zealand Dollar
// * `NIO` - Nicaraguan Córdoba
// * `NIC` - Nicaraguan Córdoba (1988–1991)
// * `NGN` - Nigerian Naira
// * `KPW` - North Korean Won
// * `NOK` - Norwegian Krone
// * `OMR` - Omani Rial
// * `PKR` - Pakistani Rupee
// * `XPD` - Palladium
// * `PAB` - Panamanian Balboa
// * `PGK` - Papua New Guinean Kina
// * `PYG` - Paraguayan Guarani
// * `PEI` - Peruvian Inti
// * `PEN` - Peruvian Sol
// * `PES` - Peruvian Sol (1863–1965)
// * `PHP` - Philippine Peso
// * `XPT` - Platinum
// * `PLN` - Polish Zloty
// * `PLZ` - Polish Zloty (1950–1995)
// * `PTE` - Portuguese Escudo
// * `GWE` - Portuguese Guinea Escudo
// * `QAR` - Qatari Rial
// * `XRE` - RINET Funds
// * `RHD` - Rhodesian Dollar
// * `RON` - Romanian Leu
// * `ROL` - Romanian Leu (1952–2006)
// * `RUB` - Russian Ruble
// * `RUR` - Russian Ruble (1991–1998)
// * `RWF` - Rwandan Franc
// * `SVC` - Salvadoran Colón
// * `WST` - Samoan Tala
// * `SAR` - Saudi Riyal
// * `RSD` - Serbian Dinar
// * `CSD` - Serbian Dinar (2002–2006)
// * `SCR` - Seychellois Rupee
// * `SLL` - Sierra Leonean Leone
// * `XAG` - Silver
// * `SGD` - Singapore Dollar
// * `SKK` - Slovak Koruna
// * `SIT` - Slovenian Tolar
// * `SBD` - Solomon Islands Dollar
// * `SOS` - Somali Shilling
// * `ZAR` - South African Rand
// * `ZAL` - South African Rand (financial)
// * `KRH` - South Korean Hwan (1953–1962)
// * `KRW` - South Korean Won
// * `KRO` - South Korean Won (1945–1953)
// * `SSP` - South Sudanese Pound
// * `SUR` - Soviet Rouble
// * `ESP` - Spanish Peseta
// * `ESA` - Spanish Peseta (A account)
// * `ESB` - Spanish Peseta (convertible account)
// * `XDR` - Special Drawing Rights
// * `LKR` - Sri Lankan Rupee
// * `SHP` - St. Helena Pound
// * `XSU` - Sucre
// * `SDD` - Sudanese Dinar (1992–2007)
// * `SDG` - Sudanese Pound
// * `SDP` - Sudanese Pound (1957–1998)
// * `SRD` - Surinamese Dollar
// * `SRG` - Surinamese Guilder
// * `SZL` - Swazi Lilangeni
// * `SEK` - Swedish Krona
// * `CHF` - Swiss Franc
// * `SYP` - Syrian Pound
// * `STN` - São Tomé & Príncipe Dobra
// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
// * `TVD` - TVD
// * `TJR` - Tajikistani Ruble
// * `TJS` - Tajikistani Somoni
// * `TZS` - Tanzanian Shilling
// * `XTS` - Testing Currency Code
// * `THB` - Thai Baht
// * `XXX` - The codes assigned for transactions where no currency is involved
// * `TPE` - Timorese Escudo
// * `TOP` - Tongan Paʻanga
// * `TTD` - Trinidad & Tobago Dollar
// * `TND` - Tunisian Dinar
// * `TRY` - Turkish Lira
// * `TRL` - Turkish Lira (1922–2005)
// * `TMT` - Turkmenistani Manat
// * `TMM` - Turkmenistani Manat (1993–2009)
// * `USD` - US Dollar
// * `USN` - US Dollar (Next day)
// * `USS` - US Dollar (Same day)
// * `UGX` - Ugandan Shilling
// * `UGS` - Ugandan Shilling (1966–1987)
// * `UAH` - Ukrainian Hryvnia
// * `UAK` - Ukrainian Karbovanets
// * `AED` - United Arab Emirates Dirham
// * `UYW` - Uruguayan Nominal Wage Index Unit
// * `UYU` - Uruguayan Peso
// * `UYP` - Uruguayan Peso (1975–1993)
// * `UYI` - Uruguayan Peso (Indexed Units)
// * `UZS` - Uzbekistani Som
// * `VUV` - Vanuatu Vatu
// * `VES` - Venezuelan Bolívar
// * `VEB` - Venezuelan Bolívar (1871–2008)
// * `VEF` - Venezuelan Bolívar (2008–2018)
// * `VND` - Vietnamese Dong
// * `VNN` - Vietnamese Dong (1978–1985)
// * `CHE` - WIR Euro
// * `CHW` - WIR Franc
// * `XOF` - West African CFA Franc
// * `YDD` - Yemeni Dinar
// * `YER` - Yemeni Rial
// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
// * `YUM` - Yugoslavian New Dinar (1994–2002)
// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
// * `ZWN` - ZWN
// * `ZRN` - Zairean New Zaire (1993–1998)
// * `ZRZ` - Zairean Zaire (1971–1993)
// * `ZMW` - Zambian Kwacha
// * `ZMK` - Zambian Kwacha (1968–2012)
// * `ZWD` - Zimbabwean Dollar (1980–2008)
// * `ZWR` - Zimbabwean Dollar (2008)
// * `ZWL` - Zimbabwean Dollar (2009)
type CreditNoteCurrency struct {
	typeName     string
	CurrencyEnum CurrencyEnum
	String       string
}

func NewCreditNoteCurrencyFromCurrencyEnum(value CurrencyEnum) *CreditNoteCurrency {
	return &CreditNoteCurrency{typeName: "currencyEnum", CurrencyEnum: value}
}

func NewCreditNoteCurrencyFromString(value string) *CreditNoteCurrency {
	return &CreditNoteCurrency{typeName: "string", String: value}
}

func (c *CreditNoteCurrency) UnmarshalJSON(data []byte) error {
	var valueCurrencyEnum CurrencyEnum
	if err := json.Unmarshal(data, &valueCurrencyEnum); err == nil {
		c.typeName = "currencyEnum"
		c.CurrencyEnum = valueCurrencyEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CreditNoteCurrency) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "currencyEnum":
		return json.Marshal(c.CurrencyEnum)
	case "string":
		return json.Marshal(c.String)
	}
}

type CreditNoteCurrencyVisitor interface {
	VisitCurrencyEnum(CurrencyEnum) error
	VisitString(string) error
}

func (c *CreditNoteCurrency) Accept(visitor CreditNoteCurrencyVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "currencyEnum":
		return visitor.VisitCurrencyEnum(c.CurrencyEnum)
	case "string":
		return visitor.VisitString(c.String)
	}
}

type CreditNoteLineItem struct {
	Item *CreditNoteLineItemItem `json:"item,omitempty"`
	// The credit note line item's name.
	Name *string `json:"name,omitempty"`
	// The description of the item that is owed.
	Description *string `json:"description,omitempty"`
	// The credit note line item's quantity.
	Quantity *string `json:"quantity,omitempty"`
	// The credit note line item's memo.
	Memo *string `json:"memo,omitempty"`
	// The credit note line item's unit price.
	UnitPrice *string `json:"unit_price,omitempty"`
	// The credit note line item's tax rate.
	TaxRate *string `json:"tax_rate,omitempty"`
	// The credit note line item's total.
	TotalLineAmount *string `json:"total_line_amount,omitempty"`
	// The credit note line item's associated tracking category.
	TrackingCategory *string `json:"tracking_category,omitempty"`
	// The credit note line item's associated tracking categories.
	TrackingCategories []string `json:"tracking_categories,omitempty"`
	// The credit note line item's account.
	Account *string `json:"account,omitempty"`
	// The company the credit note belongs to.
	Company *CreditNoteLineItemCompany `json:"company,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted *bool      `json:"remote_was_deleted,omitempty"`
	Id               *string    `json:"id,omitempty"`
	CreatedAt        *time.Time `json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
}

// The company the credit note belongs to.
type CreditNoteLineItemCompany struct {
	typeName    string
	String      string
	CompanyInfo *CompanyInfo
}

func NewCreditNoteLineItemCompanyFromString(value string) *CreditNoteLineItemCompany {
	return &CreditNoteLineItemCompany{typeName: "string", String: value}
}

func NewCreditNoteLineItemCompanyFromCompanyInfo(value *CompanyInfo) *CreditNoteLineItemCompany {
	return &CreditNoteLineItemCompany{typeName: "companyInfo", CompanyInfo: value}
}

func (c *CreditNoteLineItemCompany) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	valueCompanyInfo := new(CompanyInfo)
	if err := json.Unmarshal(data, &valueCompanyInfo); err == nil {
		c.typeName = "companyInfo"
		c.CompanyInfo = valueCompanyInfo
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CreditNoteLineItemCompany) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "companyInfo":
		return json.Marshal(c.CompanyInfo)
	}
}

type CreditNoteLineItemCompanyVisitor interface {
	VisitString(string) error
	VisitCompanyInfo(*CompanyInfo) error
}

func (c *CreditNoteLineItemCompany) Accept(visitor CreditNoteLineItemCompanyVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return visitor.VisitString(c.String)
	case "companyInfo":
		return visitor.VisitCompanyInfo(c.CompanyInfo)
	}
}

type CreditNoteLineItemItem struct {
	typeName string
	String   string
	Item     *Item
}

func NewCreditNoteLineItemItemFromString(value string) *CreditNoteLineItemItem {
	return &CreditNoteLineItemItem{typeName: "string", String: value}
}

func NewCreditNoteLineItemItemFromItem(value *Item) *CreditNoteLineItemItem {
	return &CreditNoteLineItemItem{typeName: "item", Item: value}
}

func (c *CreditNoteLineItemItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	valueItem := new(Item)
	if err := json.Unmarshal(data, &valueItem); err == nil {
		c.typeName = "item"
		c.Item = valueItem
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CreditNoteLineItemItem) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "item":
		return json.Marshal(c.Item)
	}
}

type CreditNoteLineItemItemVisitor interface {
	VisitString(string) error
	VisitItem(*Item) error
}

func (c *CreditNoteLineItemItem) Accept(visitor CreditNoteLineItemItemVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return visitor.VisitString(c.String)
	case "item":
		return visitor.VisitItem(c.Item)
	}
}

type CreditNotePaymentsItem struct {
	typeName string
	String   string
	Payment  *Payment
}

func NewCreditNotePaymentsItemFromString(value string) *CreditNotePaymentsItem {
	return &CreditNotePaymentsItem{typeName: "string", String: value}
}

func NewCreditNotePaymentsItemFromPayment(value *Payment) *CreditNotePaymentsItem {
	return &CreditNotePaymentsItem{typeName: "payment", Payment: value}
}

func (c *CreditNotePaymentsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	valuePayment := new(Payment)
	if err := json.Unmarshal(data, &valuePayment); err == nil {
		c.typeName = "payment"
		c.Payment = valuePayment
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CreditNotePaymentsItem) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "payment":
		return json.Marshal(c.Payment)
	}
}

type CreditNotePaymentsItemVisitor interface {
	VisitString(string) error
	VisitPayment(*Payment) error
}

func (c *CreditNotePaymentsItem) Accept(visitor CreditNotePaymentsItemVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return visitor.VisitString(c.String)
	case "payment":
		return visitor.VisitPayment(c.Payment)
	}
}

// The credit note's status.
//
// * `SUBMITTED` - SUBMITTED
// * `AUTHORIZED` - AUTHORIZED
// * `PAID` - PAID
type CreditNoteStatus struct {
	typeName             string
	CreditNoteStatusEnum CreditNoteStatusEnum
	String               string
}

func NewCreditNoteStatusFromCreditNoteStatusEnum(value CreditNoteStatusEnum) *CreditNoteStatus {
	return &CreditNoteStatus{typeName: "creditNoteStatusEnum", CreditNoteStatusEnum: value}
}

func NewCreditNoteStatusFromString(value string) *CreditNoteStatus {
	return &CreditNoteStatus{typeName: "string", String: value}
}

func (c *CreditNoteStatus) UnmarshalJSON(data []byte) error {
	var valueCreditNoteStatusEnum CreditNoteStatusEnum
	if err := json.Unmarshal(data, &valueCreditNoteStatusEnum); err == nil {
		c.typeName = "creditNoteStatusEnum"
		c.CreditNoteStatusEnum = valueCreditNoteStatusEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CreditNoteStatus) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "creditNoteStatusEnum":
		return json.Marshal(c.CreditNoteStatusEnum)
	case "string":
		return json.Marshal(c.String)
	}
}

type CreditNoteStatusVisitor interface {
	VisitCreditNoteStatusEnum(CreditNoteStatusEnum) error
	VisitString(string) error
}

func (c *CreditNoteStatus) Accept(visitor CreditNoteStatusVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "creditNoteStatusEnum":
		return visitor.VisitCreditNoteStatusEnum(c.CreditNoteStatusEnum)
	case "string":
		return visitor.VisitString(c.String)
	}
}

// * `SUBMITTED` - SUBMITTED
// * `AUTHORIZED` - AUTHORIZED
// * `PAID` - PAID
type CreditNoteStatusEnum uint

const (
	CreditNoteStatusEnumSubmitted CreditNoteStatusEnum = iota + 1
	CreditNoteStatusEnumAuthorized
	CreditNoteStatusEnumPaid
)

func (c CreditNoteStatusEnum) String() string {
	switch c {
	default:
		return strconv.Itoa(int(c))
	case CreditNoteStatusEnumSubmitted:
		return "SUBMITTED"
	case CreditNoteStatusEnumAuthorized:
		return "AUTHORIZED"
	case CreditNoteStatusEnumPaid:
		return "PAID"
	}
}

func (c CreditNoteStatusEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", c.String())), nil
}

func (c *CreditNoteStatusEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "SUBMITTED":
		value := CreditNoteStatusEnumSubmitted
		*c = value
	case "AUTHORIZED":
		value := CreditNoteStatusEnumAuthorized
		*c = value
	case "PAID":
		value := CreditNoteStatusEnumPaid
		*c = value
	}
	return nil
}

type CreditNoteTrackingCategoriesItem struct {
	typeName         string
	String           string
	TrackingCategory *TrackingCategory
}

func NewCreditNoteTrackingCategoriesItemFromString(value string) *CreditNoteTrackingCategoriesItem {
	return &CreditNoteTrackingCategoriesItem{typeName: "string", String: value}
}

func NewCreditNoteTrackingCategoriesItemFromTrackingCategory(value *TrackingCategory) *CreditNoteTrackingCategoriesItem {
	return &CreditNoteTrackingCategoriesItem{typeName: "trackingCategory", TrackingCategory: value}
}

func (c *CreditNoteTrackingCategoriesItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	valueTrackingCategory := new(TrackingCategory)
	if err := json.Unmarshal(data, &valueTrackingCategory); err == nil {
		c.typeName = "trackingCategory"
		c.TrackingCategory = valueTrackingCategory
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CreditNoteTrackingCategoriesItem) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "trackingCategory":
		return json.Marshal(c.TrackingCategory)
	}
}

type CreditNoteTrackingCategoriesItemVisitor interface {
	VisitString(string) error
	VisitTrackingCategory(*TrackingCategory) error
}

func (c *CreditNoteTrackingCategoriesItem) Accept(visitor CreditNoteTrackingCategoriesItemVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return visitor.VisitString(c.String)
	case "trackingCategory":
		return visitor.VisitTrackingCategory(c.TrackingCategory)
	}
}

type CreditNotesListRequestExpand uint

const (
	CreditNotesListRequestExpandAccountingPeriod CreditNotesListRequestExpand = iota + 1
	CreditNotesListRequestExpandAppliedPayments
	CreditNotesListRequestExpandAppliedPaymentsAccountingPeriod
	CreditNotesListRequestExpandAppliedPaymentsCompany
	CreditNotesListRequestExpandAppliedPaymentsCompanyAccountingPeriod
	CreditNotesListRequestExpandAppliedPaymentsContact
	CreditNotesListRequestExpandAppliedPaymentsContactAccountingPeriod
	CreditNotesListRequestExpandAppliedPaymentsContactCompany
	CreditNotesListRequestExpandAppliedPaymentsContactCompanyAccountingPeriod
	CreditNotesListRequestExpandAppliedPaymentsLineItems
	CreditNotesListRequestExpandAppliedPaymentsLineItemsAccountingPeriod
	CreditNotesListRequestExpandAppliedPaymentsLineItemsCompany
	CreditNotesListRequestExpandAppliedPaymentsLineItemsCompanyAccountingPeriod
	CreditNotesListRequestExpandAppliedPaymentsLineItemsContact
	CreditNotesListRequestExpandAppliedPaymentsLineItemsContactAccountingPeriod
	CreditNotesListRequestExpandAppliedPaymentsLineItemsContactCompany
	CreditNotesListRequestExpandAppliedPaymentsLineItemsContactCompanyAccountingPeriod
	CreditNotesListRequestExpandAppliedPaymentsLineItemsTrackingCategories
	CreditNotesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesAccountingPeriod
	CreditNotesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesCompany
	CreditNotesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesCompanyAccountingPeriod
	CreditNotesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContact
	CreditNotesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContactAccountingPeriod
	CreditNotesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContactCompany
	CreditNotesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContactCompanyAccountingPeriod
	CreditNotesListRequestExpandAppliedPaymentsTrackingCategories
	CreditNotesListRequestExpandAppliedPaymentsTrackingCategoriesAccountingPeriod
	CreditNotesListRequestExpandAppliedPaymentsTrackingCategoriesCompany
	CreditNotesListRequestExpandAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod
	CreditNotesListRequestExpandAppliedPaymentsTrackingCategoriesContact
	CreditNotesListRequestExpandAppliedPaymentsTrackingCategoriesContactAccountingPeriod
	CreditNotesListRequestExpandAppliedPaymentsTrackingCategoriesContactCompany
	CreditNotesListRequestExpandAppliedPaymentsTrackingCategoriesContactCompanyAccountingPeriod
	CreditNotesListRequestExpandCompany
	CreditNotesListRequestExpandCompanyAccountingPeriod
	CreditNotesListRequestExpandContact
	CreditNotesListRequestExpandContactAccountingPeriod
	CreditNotesListRequestExpandContactCompany
	CreditNotesListRequestExpandContactCompanyAccountingPeriod
	CreditNotesListRequestExpandLineItems
	CreditNotesListRequestExpandLineItemsAccountingPeriod
	CreditNotesListRequestExpandLineItemsCompany
	CreditNotesListRequestExpandLineItemsCompanyAccountingPeriod
	CreditNotesListRequestExpandLineItemsContact
	CreditNotesListRequestExpandLineItemsContactAccountingPeriod
	CreditNotesListRequestExpandLineItemsContactCompany
	CreditNotesListRequestExpandLineItemsContactCompanyAccountingPeriod
	CreditNotesListRequestExpandLineItemsTrackingCategories
	CreditNotesListRequestExpandLineItemsTrackingCategoriesAccountingPeriod
	CreditNotesListRequestExpandLineItemsTrackingCategoriesCompany
	CreditNotesListRequestExpandLineItemsTrackingCategoriesCompanyAccountingPeriod
	CreditNotesListRequestExpandLineItemsTrackingCategoriesContact
	CreditNotesListRequestExpandLineItemsTrackingCategoriesContactAccountingPeriod
	CreditNotesListRequestExpandLineItemsTrackingCategoriesContactCompany
	CreditNotesListRequestExpandLineItemsTrackingCategoriesContactCompanyAccountingPeriod
	CreditNotesListRequestExpandPayments
	CreditNotesListRequestExpandPaymentsAccountingPeriod
	CreditNotesListRequestExpandPaymentsAppliedPayments
	CreditNotesListRequestExpandPaymentsAppliedPaymentsAccountingPeriod
	CreditNotesListRequestExpandPaymentsAppliedPaymentsCompany
	CreditNotesListRequestExpandPaymentsAppliedPaymentsCompanyAccountingPeriod
	CreditNotesListRequestExpandPaymentsAppliedPaymentsContact
	CreditNotesListRequestExpandPaymentsAppliedPaymentsContactAccountingPeriod
	CreditNotesListRequestExpandPaymentsAppliedPaymentsContactCompany
	CreditNotesListRequestExpandPaymentsAppliedPaymentsContactCompanyAccountingPeriod
	CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItems
	CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsAccountingPeriod
	CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsCompany
	CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsCompanyAccountingPeriod
	CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsContact
	CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsContactAccountingPeriod
	CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsContactCompany
	CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsContactCompanyAccountingPeriod
	CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategories
	CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesAccountingPeriod
	CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesCompany
	CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesCompanyAccountingPeriod
	CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContact
	CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContactAccountingPeriod
	CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContactCompany
	CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContactCompanyAccountingPeriod
	CreditNotesListRequestExpandPaymentsAppliedPaymentsTrackingCategories
	CreditNotesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesAccountingPeriod
	CreditNotesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesCompany
	CreditNotesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod
	CreditNotesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContact
	CreditNotesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContactAccountingPeriod
	CreditNotesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContactCompany
	CreditNotesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContactCompanyAccountingPeriod
	CreditNotesListRequestExpandPaymentsCompany
	CreditNotesListRequestExpandPaymentsCompanyAccountingPeriod
	CreditNotesListRequestExpandPaymentsContact
	CreditNotesListRequestExpandPaymentsContactAccountingPeriod
	CreditNotesListRequestExpandPaymentsContactCompany
	CreditNotesListRequestExpandPaymentsContactCompanyAccountingPeriod
	CreditNotesListRequestExpandPaymentsLineItems
	CreditNotesListRequestExpandPaymentsLineItemsAccountingPeriod
	CreditNotesListRequestExpandPaymentsLineItemsCompany
	CreditNotesListRequestExpandPaymentsLineItemsCompanyAccountingPeriod
	CreditNotesListRequestExpandPaymentsLineItemsContact
	CreditNotesListRequestExpandPaymentsLineItemsContactAccountingPeriod
	CreditNotesListRequestExpandPaymentsLineItemsContactCompany
	CreditNotesListRequestExpandPaymentsLineItemsContactCompanyAccountingPeriod
	CreditNotesListRequestExpandPaymentsLineItemsTrackingCategories
	CreditNotesListRequestExpandPaymentsLineItemsTrackingCategoriesAccountingPeriod
	CreditNotesListRequestExpandPaymentsLineItemsTrackingCategoriesCompany
	CreditNotesListRequestExpandPaymentsLineItemsTrackingCategoriesCompanyAccountingPeriod
	CreditNotesListRequestExpandPaymentsLineItemsTrackingCategoriesContact
	CreditNotesListRequestExpandPaymentsLineItemsTrackingCategoriesContactAccountingPeriod
	CreditNotesListRequestExpandPaymentsLineItemsTrackingCategoriesContactCompany
	CreditNotesListRequestExpandPaymentsLineItemsTrackingCategoriesContactCompanyAccountingPeriod
	CreditNotesListRequestExpandPaymentsTrackingCategories
	CreditNotesListRequestExpandPaymentsTrackingCategoriesAccountingPeriod
	CreditNotesListRequestExpandPaymentsTrackingCategoriesCompany
	CreditNotesListRequestExpandPaymentsTrackingCategoriesCompanyAccountingPeriod
	CreditNotesListRequestExpandPaymentsTrackingCategoriesContact
	CreditNotesListRequestExpandPaymentsTrackingCategoriesContactAccountingPeriod
	CreditNotesListRequestExpandPaymentsTrackingCategoriesContactCompany
	CreditNotesListRequestExpandPaymentsTrackingCategoriesContactCompanyAccountingPeriod
	CreditNotesListRequestExpandTrackingCategories
	CreditNotesListRequestExpandTrackingCategoriesAccountingPeriod
	CreditNotesListRequestExpandTrackingCategoriesCompany
	CreditNotesListRequestExpandTrackingCategoriesCompanyAccountingPeriod
	CreditNotesListRequestExpandTrackingCategoriesContact
	CreditNotesListRequestExpandTrackingCategoriesContactAccountingPeriod
	CreditNotesListRequestExpandTrackingCategoriesContactCompany
	CreditNotesListRequestExpandTrackingCategoriesContactCompanyAccountingPeriod
)

func (c CreditNotesListRequestExpand) String() string {
	switch c {
	default:
		return strconv.Itoa(int(c))
	case CreditNotesListRequestExpandAccountingPeriod:
		return "accounting_period"
	case CreditNotesListRequestExpandAppliedPayments:
		return "applied_payments"
	case CreditNotesListRequestExpandAppliedPaymentsAccountingPeriod:
		return "applied_payments,accounting_period"
	case CreditNotesListRequestExpandAppliedPaymentsCompany:
		return "applied_payments,company"
	case CreditNotesListRequestExpandAppliedPaymentsCompanyAccountingPeriod:
		return "applied_payments,company,accounting_period"
	case CreditNotesListRequestExpandAppliedPaymentsContact:
		return "applied_payments,contact"
	case CreditNotesListRequestExpandAppliedPaymentsContactAccountingPeriod:
		return "applied_payments,contact,accounting_period"
	case CreditNotesListRequestExpandAppliedPaymentsContactCompany:
		return "applied_payments,contact,company"
	case CreditNotesListRequestExpandAppliedPaymentsContactCompanyAccountingPeriod:
		return "applied_payments,contact,company,accounting_period"
	case CreditNotesListRequestExpandAppliedPaymentsLineItems:
		return "applied_payments,line_items"
	case CreditNotesListRequestExpandAppliedPaymentsLineItemsAccountingPeriod:
		return "applied_payments,line_items,accounting_period"
	case CreditNotesListRequestExpandAppliedPaymentsLineItemsCompany:
		return "applied_payments,line_items,company"
	case CreditNotesListRequestExpandAppliedPaymentsLineItemsCompanyAccountingPeriod:
		return "applied_payments,line_items,company,accounting_period"
	case CreditNotesListRequestExpandAppliedPaymentsLineItemsContact:
		return "applied_payments,line_items,contact"
	case CreditNotesListRequestExpandAppliedPaymentsLineItemsContactAccountingPeriod:
		return "applied_payments,line_items,contact,accounting_period"
	case CreditNotesListRequestExpandAppliedPaymentsLineItemsContactCompany:
		return "applied_payments,line_items,contact,company"
	case CreditNotesListRequestExpandAppliedPaymentsLineItemsContactCompanyAccountingPeriod:
		return "applied_payments,line_items,contact,company,accounting_period"
	case CreditNotesListRequestExpandAppliedPaymentsLineItemsTrackingCategories:
		return "applied_payments,line_items,tracking_categories"
	case CreditNotesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesAccountingPeriod:
		return "applied_payments,line_items,tracking_categories,accounting_period"
	case CreditNotesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesCompany:
		return "applied_payments,line_items,tracking_categories,company"
	case CreditNotesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesCompanyAccountingPeriod:
		return "applied_payments,line_items,tracking_categories,company,accounting_period"
	case CreditNotesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContact:
		return "applied_payments,line_items,tracking_categories,contact"
	case CreditNotesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContactAccountingPeriod:
		return "applied_payments,line_items,tracking_categories,contact,accounting_period"
	case CreditNotesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContactCompany:
		return "applied_payments,line_items,tracking_categories,contact,company"
	case CreditNotesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContactCompanyAccountingPeriod:
		return "applied_payments,line_items,tracking_categories,contact,company,accounting_period"
	case CreditNotesListRequestExpandAppliedPaymentsTrackingCategories:
		return "applied_payments,tracking_categories"
	case CreditNotesListRequestExpandAppliedPaymentsTrackingCategoriesAccountingPeriod:
		return "applied_payments,tracking_categories,accounting_period"
	case CreditNotesListRequestExpandAppliedPaymentsTrackingCategoriesCompany:
		return "applied_payments,tracking_categories,company"
	case CreditNotesListRequestExpandAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod:
		return "applied_payments,tracking_categories,company,accounting_period"
	case CreditNotesListRequestExpandAppliedPaymentsTrackingCategoriesContact:
		return "applied_payments,tracking_categories,contact"
	case CreditNotesListRequestExpandAppliedPaymentsTrackingCategoriesContactAccountingPeriod:
		return "applied_payments,tracking_categories,contact,accounting_period"
	case CreditNotesListRequestExpandAppliedPaymentsTrackingCategoriesContactCompany:
		return "applied_payments,tracking_categories,contact,company"
	case CreditNotesListRequestExpandAppliedPaymentsTrackingCategoriesContactCompanyAccountingPeriod:
		return "applied_payments,tracking_categories,contact,company,accounting_period"
	case CreditNotesListRequestExpandCompany:
		return "company"
	case CreditNotesListRequestExpandCompanyAccountingPeriod:
		return "company,accounting_period"
	case CreditNotesListRequestExpandContact:
		return "contact"
	case CreditNotesListRequestExpandContactAccountingPeriod:
		return "contact,accounting_period"
	case CreditNotesListRequestExpandContactCompany:
		return "contact,company"
	case CreditNotesListRequestExpandContactCompanyAccountingPeriod:
		return "contact,company,accounting_period"
	case CreditNotesListRequestExpandLineItems:
		return "line_items"
	case CreditNotesListRequestExpandLineItemsAccountingPeriod:
		return "line_items,accounting_period"
	case CreditNotesListRequestExpandLineItemsCompany:
		return "line_items,company"
	case CreditNotesListRequestExpandLineItemsCompanyAccountingPeriod:
		return "line_items,company,accounting_period"
	case CreditNotesListRequestExpandLineItemsContact:
		return "line_items,contact"
	case CreditNotesListRequestExpandLineItemsContactAccountingPeriod:
		return "line_items,contact,accounting_period"
	case CreditNotesListRequestExpandLineItemsContactCompany:
		return "line_items,contact,company"
	case CreditNotesListRequestExpandLineItemsContactCompanyAccountingPeriod:
		return "line_items,contact,company,accounting_period"
	case CreditNotesListRequestExpandLineItemsTrackingCategories:
		return "line_items,tracking_categories"
	case CreditNotesListRequestExpandLineItemsTrackingCategoriesAccountingPeriod:
		return "line_items,tracking_categories,accounting_period"
	case CreditNotesListRequestExpandLineItemsTrackingCategoriesCompany:
		return "line_items,tracking_categories,company"
	case CreditNotesListRequestExpandLineItemsTrackingCategoriesCompanyAccountingPeriod:
		return "line_items,tracking_categories,company,accounting_period"
	case CreditNotesListRequestExpandLineItemsTrackingCategoriesContact:
		return "line_items,tracking_categories,contact"
	case CreditNotesListRequestExpandLineItemsTrackingCategoriesContactAccountingPeriod:
		return "line_items,tracking_categories,contact,accounting_period"
	case CreditNotesListRequestExpandLineItemsTrackingCategoriesContactCompany:
		return "line_items,tracking_categories,contact,company"
	case CreditNotesListRequestExpandLineItemsTrackingCategoriesContactCompanyAccountingPeriod:
		return "line_items,tracking_categories,contact,company,accounting_period"
	case CreditNotesListRequestExpandPayments:
		return "payments"
	case CreditNotesListRequestExpandPaymentsAccountingPeriod:
		return "payments,accounting_period"
	case CreditNotesListRequestExpandPaymentsAppliedPayments:
		return "payments,applied_payments"
	case CreditNotesListRequestExpandPaymentsAppliedPaymentsAccountingPeriod:
		return "payments,applied_payments,accounting_period"
	case CreditNotesListRequestExpandPaymentsAppliedPaymentsCompany:
		return "payments,applied_payments,company"
	case CreditNotesListRequestExpandPaymentsAppliedPaymentsCompanyAccountingPeriod:
		return "payments,applied_payments,company,accounting_period"
	case CreditNotesListRequestExpandPaymentsAppliedPaymentsContact:
		return "payments,applied_payments,contact"
	case CreditNotesListRequestExpandPaymentsAppliedPaymentsContactAccountingPeriod:
		return "payments,applied_payments,contact,accounting_period"
	case CreditNotesListRequestExpandPaymentsAppliedPaymentsContactCompany:
		return "payments,applied_payments,contact,company"
	case CreditNotesListRequestExpandPaymentsAppliedPaymentsContactCompanyAccountingPeriod:
		return "payments,applied_payments,contact,company,accounting_period"
	case CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItems:
		return "payments,applied_payments,line_items"
	case CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsAccountingPeriod:
		return "payments,applied_payments,line_items,accounting_period"
	case CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsCompany:
		return "payments,applied_payments,line_items,company"
	case CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsCompanyAccountingPeriod:
		return "payments,applied_payments,line_items,company,accounting_period"
	case CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsContact:
		return "payments,applied_payments,line_items,contact"
	case CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsContactAccountingPeriod:
		return "payments,applied_payments,line_items,contact,accounting_period"
	case CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsContactCompany:
		return "payments,applied_payments,line_items,contact,company"
	case CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsContactCompanyAccountingPeriod:
		return "payments,applied_payments,line_items,contact,company,accounting_period"
	case CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategories:
		return "payments,applied_payments,line_items,tracking_categories"
	case CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesAccountingPeriod:
		return "payments,applied_payments,line_items,tracking_categories,accounting_period"
	case CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesCompany:
		return "payments,applied_payments,line_items,tracking_categories,company"
	case CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesCompanyAccountingPeriod:
		return "payments,applied_payments,line_items,tracking_categories,company,accounting_period"
	case CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContact:
		return "payments,applied_payments,line_items,tracking_categories,contact"
	case CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContactAccountingPeriod:
		return "payments,applied_payments,line_items,tracking_categories,contact,accounting_period"
	case CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContactCompany:
		return "payments,applied_payments,line_items,tracking_categories,contact,company"
	case CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContactCompanyAccountingPeriod:
		return "payments,applied_payments,line_items,tracking_categories,contact,company,accounting_period"
	case CreditNotesListRequestExpandPaymentsAppliedPaymentsTrackingCategories:
		return "payments,applied_payments,tracking_categories"
	case CreditNotesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesAccountingPeriod:
		return "payments,applied_payments,tracking_categories,accounting_period"
	case CreditNotesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesCompany:
		return "payments,applied_payments,tracking_categories,company"
	case CreditNotesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod:
		return "payments,applied_payments,tracking_categories,company,accounting_period"
	case CreditNotesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContact:
		return "payments,applied_payments,tracking_categories,contact"
	case CreditNotesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContactAccountingPeriod:
		return "payments,applied_payments,tracking_categories,contact,accounting_period"
	case CreditNotesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContactCompany:
		return "payments,applied_payments,tracking_categories,contact,company"
	case CreditNotesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContactCompanyAccountingPeriod:
		return "payments,applied_payments,tracking_categories,contact,company,accounting_period"
	case CreditNotesListRequestExpandPaymentsCompany:
		return "payments,company"
	case CreditNotesListRequestExpandPaymentsCompanyAccountingPeriod:
		return "payments,company,accounting_period"
	case CreditNotesListRequestExpandPaymentsContact:
		return "payments,contact"
	case CreditNotesListRequestExpandPaymentsContactAccountingPeriod:
		return "payments,contact,accounting_period"
	case CreditNotesListRequestExpandPaymentsContactCompany:
		return "payments,contact,company"
	case CreditNotesListRequestExpandPaymentsContactCompanyAccountingPeriod:
		return "payments,contact,company,accounting_period"
	case CreditNotesListRequestExpandPaymentsLineItems:
		return "payments,line_items"
	case CreditNotesListRequestExpandPaymentsLineItemsAccountingPeriod:
		return "payments,line_items,accounting_period"
	case CreditNotesListRequestExpandPaymentsLineItemsCompany:
		return "payments,line_items,company"
	case CreditNotesListRequestExpandPaymentsLineItemsCompanyAccountingPeriod:
		return "payments,line_items,company,accounting_period"
	case CreditNotesListRequestExpandPaymentsLineItemsContact:
		return "payments,line_items,contact"
	case CreditNotesListRequestExpandPaymentsLineItemsContactAccountingPeriod:
		return "payments,line_items,contact,accounting_period"
	case CreditNotesListRequestExpandPaymentsLineItemsContactCompany:
		return "payments,line_items,contact,company"
	case CreditNotesListRequestExpandPaymentsLineItemsContactCompanyAccountingPeriod:
		return "payments,line_items,contact,company,accounting_period"
	case CreditNotesListRequestExpandPaymentsLineItemsTrackingCategories:
		return "payments,line_items,tracking_categories"
	case CreditNotesListRequestExpandPaymentsLineItemsTrackingCategoriesAccountingPeriod:
		return "payments,line_items,tracking_categories,accounting_period"
	case CreditNotesListRequestExpandPaymentsLineItemsTrackingCategoriesCompany:
		return "payments,line_items,tracking_categories,company"
	case CreditNotesListRequestExpandPaymentsLineItemsTrackingCategoriesCompanyAccountingPeriod:
		return "payments,line_items,tracking_categories,company,accounting_period"
	case CreditNotesListRequestExpandPaymentsLineItemsTrackingCategoriesContact:
		return "payments,line_items,tracking_categories,contact"
	case CreditNotesListRequestExpandPaymentsLineItemsTrackingCategoriesContactAccountingPeriod:
		return "payments,line_items,tracking_categories,contact,accounting_period"
	case CreditNotesListRequestExpandPaymentsLineItemsTrackingCategoriesContactCompany:
		return "payments,line_items,tracking_categories,contact,company"
	case CreditNotesListRequestExpandPaymentsLineItemsTrackingCategoriesContactCompanyAccountingPeriod:
		return "payments,line_items,tracking_categories,contact,company,accounting_period"
	case CreditNotesListRequestExpandPaymentsTrackingCategories:
		return "payments,tracking_categories"
	case CreditNotesListRequestExpandPaymentsTrackingCategoriesAccountingPeriod:
		return "payments,tracking_categories,accounting_period"
	case CreditNotesListRequestExpandPaymentsTrackingCategoriesCompany:
		return "payments,tracking_categories,company"
	case CreditNotesListRequestExpandPaymentsTrackingCategoriesCompanyAccountingPeriod:
		return "payments,tracking_categories,company,accounting_period"
	case CreditNotesListRequestExpandPaymentsTrackingCategoriesContact:
		return "payments,tracking_categories,contact"
	case CreditNotesListRequestExpandPaymentsTrackingCategoriesContactAccountingPeriod:
		return "payments,tracking_categories,contact,accounting_period"
	case CreditNotesListRequestExpandPaymentsTrackingCategoriesContactCompany:
		return "payments,tracking_categories,contact,company"
	case CreditNotesListRequestExpandPaymentsTrackingCategoriesContactCompanyAccountingPeriod:
		return "payments,tracking_categories,contact,company,accounting_period"
	case CreditNotesListRequestExpandTrackingCategories:
		return "tracking_categories"
	case CreditNotesListRequestExpandTrackingCategoriesAccountingPeriod:
		return "tracking_categories,accounting_period"
	case CreditNotesListRequestExpandTrackingCategoriesCompany:
		return "tracking_categories,company"
	case CreditNotesListRequestExpandTrackingCategoriesCompanyAccountingPeriod:
		return "tracking_categories,company,accounting_period"
	case CreditNotesListRequestExpandTrackingCategoriesContact:
		return "tracking_categories,contact"
	case CreditNotesListRequestExpandTrackingCategoriesContactAccountingPeriod:
		return "tracking_categories,contact,accounting_period"
	case CreditNotesListRequestExpandTrackingCategoriesContactCompany:
		return "tracking_categories,contact,company"
	case CreditNotesListRequestExpandTrackingCategoriesContactCompanyAccountingPeriod:
		return "tracking_categories,contact,company,accounting_period"
	}
}

func (c CreditNotesListRequestExpand) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", c.String())), nil
}

func (c *CreditNotesListRequestExpand) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "accounting_period":
		value := CreditNotesListRequestExpandAccountingPeriod
		*c = value
	case "applied_payments":
		value := CreditNotesListRequestExpandAppliedPayments
		*c = value
	case "applied_payments,accounting_period":
		value := CreditNotesListRequestExpandAppliedPaymentsAccountingPeriod
		*c = value
	case "applied_payments,company":
		value := CreditNotesListRequestExpandAppliedPaymentsCompany
		*c = value
	case "applied_payments,company,accounting_period":
		value := CreditNotesListRequestExpandAppliedPaymentsCompanyAccountingPeriod
		*c = value
	case "applied_payments,contact":
		value := CreditNotesListRequestExpandAppliedPaymentsContact
		*c = value
	case "applied_payments,contact,accounting_period":
		value := CreditNotesListRequestExpandAppliedPaymentsContactAccountingPeriod
		*c = value
	case "applied_payments,contact,company":
		value := CreditNotesListRequestExpandAppliedPaymentsContactCompany
		*c = value
	case "applied_payments,contact,company,accounting_period":
		value := CreditNotesListRequestExpandAppliedPaymentsContactCompanyAccountingPeriod
		*c = value
	case "applied_payments,line_items":
		value := CreditNotesListRequestExpandAppliedPaymentsLineItems
		*c = value
	case "applied_payments,line_items,accounting_period":
		value := CreditNotesListRequestExpandAppliedPaymentsLineItemsAccountingPeriod
		*c = value
	case "applied_payments,line_items,company":
		value := CreditNotesListRequestExpandAppliedPaymentsLineItemsCompany
		*c = value
	case "applied_payments,line_items,company,accounting_period":
		value := CreditNotesListRequestExpandAppliedPaymentsLineItemsCompanyAccountingPeriod
		*c = value
	case "applied_payments,line_items,contact":
		value := CreditNotesListRequestExpandAppliedPaymentsLineItemsContact
		*c = value
	case "applied_payments,line_items,contact,accounting_period":
		value := CreditNotesListRequestExpandAppliedPaymentsLineItemsContactAccountingPeriod
		*c = value
	case "applied_payments,line_items,contact,company":
		value := CreditNotesListRequestExpandAppliedPaymentsLineItemsContactCompany
		*c = value
	case "applied_payments,line_items,contact,company,accounting_period":
		value := CreditNotesListRequestExpandAppliedPaymentsLineItemsContactCompanyAccountingPeriod
		*c = value
	case "applied_payments,line_items,tracking_categories":
		value := CreditNotesListRequestExpandAppliedPaymentsLineItemsTrackingCategories
		*c = value
	case "applied_payments,line_items,tracking_categories,accounting_period":
		value := CreditNotesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesAccountingPeriod
		*c = value
	case "applied_payments,line_items,tracking_categories,company":
		value := CreditNotesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesCompany
		*c = value
	case "applied_payments,line_items,tracking_categories,company,accounting_period":
		value := CreditNotesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesCompanyAccountingPeriod
		*c = value
	case "applied_payments,line_items,tracking_categories,contact":
		value := CreditNotesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContact
		*c = value
	case "applied_payments,line_items,tracking_categories,contact,accounting_period":
		value := CreditNotesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContactAccountingPeriod
		*c = value
	case "applied_payments,line_items,tracking_categories,contact,company":
		value := CreditNotesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContactCompany
		*c = value
	case "applied_payments,line_items,tracking_categories,contact,company,accounting_period":
		value := CreditNotesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContactCompanyAccountingPeriod
		*c = value
	case "applied_payments,tracking_categories":
		value := CreditNotesListRequestExpandAppliedPaymentsTrackingCategories
		*c = value
	case "applied_payments,tracking_categories,accounting_period":
		value := CreditNotesListRequestExpandAppliedPaymentsTrackingCategoriesAccountingPeriod
		*c = value
	case "applied_payments,tracking_categories,company":
		value := CreditNotesListRequestExpandAppliedPaymentsTrackingCategoriesCompany
		*c = value
	case "applied_payments,tracking_categories,company,accounting_period":
		value := CreditNotesListRequestExpandAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod
		*c = value
	case "applied_payments,tracking_categories,contact":
		value := CreditNotesListRequestExpandAppliedPaymentsTrackingCategoriesContact
		*c = value
	case "applied_payments,tracking_categories,contact,accounting_period":
		value := CreditNotesListRequestExpandAppliedPaymentsTrackingCategoriesContactAccountingPeriod
		*c = value
	case "applied_payments,tracking_categories,contact,company":
		value := CreditNotesListRequestExpandAppliedPaymentsTrackingCategoriesContactCompany
		*c = value
	case "applied_payments,tracking_categories,contact,company,accounting_period":
		value := CreditNotesListRequestExpandAppliedPaymentsTrackingCategoriesContactCompanyAccountingPeriod
		*c = value
	case "company":
		value := CreditNotesListRequestExpandCompany
		*c = value
	case "company,accounting_period":
		value := CreditNotesListRequestExpandCompanyAccountingPeriod
		*c = value
	case "contact":
		value := CreditNotesListRequestExpandContact
		*c = value
	case "contact,accounting_period":
		value := CreditNotesListRequestExpandContactAccountingPeriod
		*c = value
	case "contact,company":
		value := CreditNotesListRequestExpandContactCompany
		*c = value
	case "contact,company,accounting_period":
		value := CreditNotesListRequestExpandContactCompanyAccountingPeriod
		*c = value
	case "line_items":
		value := CreditNotesListRequestExpandLineItems
		*c = value
	case "line_items,accounting_period":
		value := CreditNotesListRequestExpandLineItemsAccountingPeriod
		*c = value
	case "line_items,company":
		value := CreditNotesListRequestExpandLineItemsCompany
		*c = value
	case "line_items,company,accounting_period":
		value := CreditNotesListRequestExpandLineItemsCompanyAccountingPeriod
		*c = value
	case "line_items,contact":
		value := CreditNotesListRequestExpandLineItemsContact
		*c = value
	case "line_items,contact,accounting_period":
		value := CreditNotesListRequestExpandLineItemsContactAccountingPeriod
		*c = value
	case "line_items,contact,company":
		value := CreditNotesListRequestExpandLineItemsContactCompany
		*c = value
	case "line_items,contact,company,accounting_period":
		value := CreditNotesListRequestExpandLineItemsContactCompanyAccountingPeriod
		*c = value
	case "line_items,tracking_categories":
		value := CreditNotesListRequestExpandLineItemsTrackingCategories
		*c = value
	case "line_items,tracking_categories,accounting_period":
		value := CreditNotesListRequestExpandLineItemsTrackingCategoriesAccountingPeriod
		*c = value
	case "line_items,tracking_categories,company":
		value := CreditNotesListRequestExpandLineItemsTrackingCategoriesCompany
		*c = value
	case "line_items,tracking_categories,company,accounting_period":
		value := CreditNotesListRequestExpandLineItemsTrackingCategoriesCompanyAccountingPeriod
		*c = value
	case "line_items,tracking_categories,contact":
		value := CreditNotesListRequestExpandLineItemsTrackingCategoriesContact
		*c = value
	case "line_items,tracking_categories,contact,accounting_period":
		value := CreditNotesListRequestExpandLineItemsTrackingCategoriesContactAccountingPeriod
		*c = value
	case "line_items,tracking_categories,contact,company":
		value := CreditNotesListRequestExpandLineItemsTrackingCategoriesContactCompany
		*c = value
	case "line_items,tracking_categories,contact,company,accounting_period":
		value := CreditNotesListRequestExpandLineItemsTrackingCategoriesContactCompanyAccountingPeriod
		*c = value
	case "payments":
		value := CreditNotesListRequestExpandPayments
		*c = value
	case "payments,accounting_period":
		value := CreditNotesListRequestExpandPaymentsAccountingPeriod
		*c = value
	case "payments,applied_payments":
		value := CreditNotesListRequestExpandPaymentsAppliedPayments
		*c = value
	case "payments,applied_payments,accounting_period":
		value := CreditNotesListRequestExpandPaymentsAppliedPaymentsAccountingPeriod
		*c = value
	case "payments,applied_payments,company":
		value := CreditNotesListRequestExpandPaymentsAppliedPaymentsCompany
		*c = value
	case "payments,applied_payments,company,accounting_period":
		value := CreditNotesListRequestExpandPaymentsAppliedPaymentsCompanyAccountingPeriod
		*c = value
	case "payments,applied_payments,contact":
		value := CreditNotesListRequestExpandPaymentsAppliedPaymentsContact
		*c = value
	case "payments,applied_payments,contact,accounting_period":
		value := CreditNotesListRequestExpandPaymentsAppliedPaymentsContactAccountingPeriod
		*c = value
	case "payments,applied_payments,contact,company":
		value := CreditNotesListRequestExpandPaymentsAppliedPaymentsContactCompany
		*c = value
	case "payments,applied_payments,contact,company,accounting_period":
		value := CreditNotesListRequestExpandPaymentsAppliedPaymentsContactCompanyAccountingPeriod
		*c = value
	case "payments,applied_payments,line_items":
		value := CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItems
		*c = value
	case "payments,applied_payments,line_items,accounting_period":
		value := CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsAccountingPeriod
		*c = value
	case "payments,applied_payments,line_items,company":
		value := CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsCompany
		*c = value
	case "payments,applied_payments,line_items,company,accounting_period":
		value := CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsCompanyAccountingPeriod
		*c = value
	case "payments,applied_payments,line_items,contact":
		value := CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsContact
		*c = value
	case "payments,applied_payments,line_items,contact,accounting_period":
		value := CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsContactAccountingPeriod
		*c = value
	case "payments,applied_payments,line_items,contact,company":
		value := CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsContactCompany
		*c = value
	case "payments,applied_payments,line_items,contact,company,accounting_period":
		value := CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsContactCompanyAccountingPeriod
		*c = value
	case "payments,applied_payments,line_items,tracking_categories":
		value := CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategories
		*c = value
	case "payments,applied_payments,line_items,tracking_categories,accounting_period":
		value := CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesAccountingPeriod
		*c = value
	case "payments,applied_payments,line_items,tracking_categories,company":
		value := CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesCompany
		*c = value
	case "payments,applied_payments,line_items,tracking_categories,company,accounting_period":
		value := CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesCompanyAccountingPeriod
		*c = value
	case "payments,applied_payments,line_items,tracking_categories,contact":
		value := CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContact
		*c = value
	case "payments,applied_payments,line_items,tracking_categories,contact,accounting_period":
		value := CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContactAccountingPeriod
		*c = value
	case "payments,applied_payments,line_items,tracking_categories,contact,company":
		value := CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContactCompany
		*c = value
	case "payments,applied_payments,line_items,tracking_categories,contact,company,accounting_period":
		value := CreditNotesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContactCompanyAccountingPeriod
		*c = value
	case "payments,applied_payments,tracking_categories":
		value := CreditNotesListRequestExpandPaymentsAppliedPaymentsTrackingCategories
		*c = value
	case "payments,applied_payments,tracking_categories,accounting_period":
		value := CreditNotesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesAccountingPeriod
		*c = value
	case "payments,applied_payments,tracking_categories,company":
		value := CreditNotesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesCompany
		*c = value
	case "payments,applied_payments,tracking_categories,company,accounting_period":
		value := CreditNotesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod
		*c = value
	case "payments,applied_payments,tracking_categories,contact":
		value := CreditNotesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContact
		*c = value
	case "payments,applied_payments,tracking_categories,contact,accounting_period":
		value := CreditNotesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContactAccountingPeriod
		*c = value
	case "payments,applied_payments,tracking_categories,contact,company":
		value := CreditNotesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContactCompany
		*c = value
	case "payments,applied_payments,tracking_categories,contact,company,accounting_period":
		value := CreditNotesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContactCompanyAccountingPeriod
		*c = value
	case "payments,company":
		value := CreditNotesListRequestExpandPaymentsCompany
		*c = value
	case "payments,company,accounting_period":
		value := CreditNotesListRequestExpandPaymentsCompanyAccountingPeriod
		*c = value
	case "payments,contact":
		value := CreditNotesListRequestExpandPaymentsContact
		*c = value
	case "payments,contact,accounting_period":
		value := CreditNotesListRequestExpandPaymentsContactAccountingPeriod
		*c = value
	case "payments,contact,company":
		value := CreditNotesListRequestExpandPaymentsContactCompany
		*c = value
	case "payments,contact,company,accounting_period":
		value := CreditNotesListRequestExpandPaymentsContactCompanyAccountingPeriod
		*c = value
	case "payments,line_items":
		value := CreditNotesListRequestExpandPaymentsLineItems
		*c = value
	case "payments,line_items,accounting_period":
		value := CreditNotesListRequestExpandPaymentsLineItemsAccountingPeriod
		*c = value
	case "payments,line_items,company":
		value := CreditNotesListRequestExpandPaymentsLineItemsCompany
		*c = value
	case "payments,line_items,company,accounting_period":
		value := CreditNotesListRequestExpandPaymentsLineItemsCompanyAccountingPeriod
		*c = value
	case "payments,line_items,contact":
		value := CreditNotesListRequestExpandPaymentsLineItemsContact
		*c = value
	case "payments,line_items,contact,accounting_period":
		value := CreditNotesListRequestExpandPaymentsLineItemsContactAccountingPeriod
		*c = value
	case "payments,line_items,contact,company":
		value := CreditNotesListRequestExpandPaymentsLineItemsContactCompany
		*c = value
	case "payments,line_items,contact,company,accounting_period":
		value := CreditNotesListRequestExpandPaymentsLineItemsContactCompanyAccountingPeriod
		*c = value
	case "payments,line_items,tracking_categories":
		value := CreditNotesListRequestExpandPaymentsLineItemsTrackingCategories
		*c = value
	case "payments,line_items,tracking_categories,accounting_period":
		value := CreditNotesListRequestExpandPaymentsLineItemsTrackingCategoriesAccountingPeriod
		*c = value
	case "payments,line_items,tracking_categories,company":
		value := CreditNotesListRequestExpandPaymentsLineItemsTrackingCategoriesCompany
		*c = value
	case "payments,line_items,tracking_categories,company,accounting_period":
		value := CreditNotesListRequestExpandPaymentsLineItemsTrackingCategoriesCompanyAccountingPeriod
		*c = value
	case "payments,line_items,tracking_categories,contact":
		value := CreditNotesListRequestExpandPaymentsLineItemsTrackingCategoriesContact
		*c = value
	case "payments,line_items,tracking_categories,contact,accounting_period":
		value := CreditNotesListRequestExpandPaymentsLineItemsTrackingCategoriesContactAccountingPeriod
		*c = value
	case "payments,line_items,tracking_categories,contact,company":
		value := CreditNotesListRequestExpandPaymentsLineItemsTrackingCategoriesContactCompany
		*c = value
	case "payments,line_items,tracking_categories,contact,company,accounting_period":
		value := CreditNotesListRequestExpandPaymentsLineItemsTrackingCategoriesContactCompanyAccountingPeriod
		*c = value
	case "payments,tracking_categories":
		value := CreditNotesListRequestExpandPaymentsTrackingCategories
		*c = value
	case "payments,tracking_categories,accounting_period":
		value := CreditNotesListRequestExpandPaymentsTrackingCategoriesAccountingPeriod
		*c = value
	case "payments,tracking_categories,company":
		value := CreditNotesListRequestExpandPaymentsTrackingCategoriesCompany
		*c = value
	case "payments,tracking_categories,company,accounting_period":
		value := CreditNotesListRequestExpandPaymentsTrackingCategoriesCompanyAccountingPeriod
		*c = value
	case "payments,tracking_categories,contact":
		value := CreditNotesListRequestExpandPaymentsTrackingCategoriesContact
		*c = value
	case "payments,tracking_categories,contact,accounting_period":
		value := CreditNotesListRequestExpandPaymentsTrackingCategoriesContactAccountingPeriod
		*c = value
	case "payments,tracking_categories,contact,company":
		value := CreditNotesListRequestExpandPaymentsTrackingCategoriesContactCompany
		*c = value
	case "payments,tracking_categories,contact,company,accounting_period":
		value := CreditNotesListRequestExpandPaymentsTrackingCategoriesContactCompanyAccountingPeriod
		*c = value
	case "tracking_categories":
		value := CreditNotesListRequestExpandTrackingCategories
		*c = value
	case "tracking_categories,accounting_period":
		value := CreditNotesListRequestExpandTrackingCategoriesAccountingPeriod
		*c = value
	case "tracking_categories,company":
		value := CreditNotesListRequestExpandTrackingCategoriesCompany
		*c = value
	case "tracking_categories,company,accounting_period":
		value := CreditNotesListRequestExpandTrackingCategoriesCompanyAccountingPeriod
		*c = value
	case "tracking_categories,contact":
		value := CreditNotesListRequestExpandTrackingCategoriesContact
		*c = value
	case "tracking_categories,contact,accounting_period":
		value := CreditNotesListRequestExpandTrackingCategoriesContactAccountingPeriod
		*c = value
	case "tracking_categories,contact,company":
		value := CreditNotesListRequestExpandTrackingCategoriesContactCompany
		*c = value
	case "tracking_categories,contact,company,accounting_period":
		value := CreditNotesListRequestExpandTrackingCategoriesContactCompanyAccountingPeriod
		*c = value
	}
	return nil
}

type CreditNotesListRequestRemoteFields uint

const (
	CreditNotesListRequestRemoteFieldsStatus CreditNotesListRequestRemoteFields = iota + 1
	CreditNotesListRequestRemoteFieldsStatusType
	CreditNotesListRequestRemoteFieldsType
)

func (c CreditNotesListRequestRemoteFields) String() string {
	switch c {
	default:
		return strconv.Itoa(int(c))
	case CreditNotesListRequestRemoteFieldsStatus:
		return "status"
	case CreditNotesListRequestRemoteFieldsStatusType:
		return "status,type"
	case CreditNotesListRequestRemoteFieldsType:
		return "type"
	}
}

func (c CreditNotesListRequestRemoteFields) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", c.String())), nil
}

func (c *CreditNotesListRequestRemoteFields) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "status":
		value := CreditNotesListRequestRemoteFieldsStatus
		*c = value
	case "status,type":
		value := CreditNotesListRequestRemoteFieldsStatusType
		*c = value
	case "type":
		value := CreditNotesListRequestRemoteFieldsType
		*c = value
	}
	return nil
}

type CreditNotesListRequestShowEnumOrigins uint

const (
	CreditNotesListRequestShowEnumOriginsStatus CreditNotesListRequestShowEnumOrigins = iota + 1
	CreditNotesListRequestShowEnumOriginsStatusType
	CreditNotesListRequestShowEnumOriginsType
)

func (c CreditNotesListRequestShowEnumOrigins) String() string {
	switch c {
	default:
		return strconv.Itoa(int(c))
	case CreditNotesListRequestShowEnumOriginsStatus:
		return "status"
	case CreditNotesListRequestShowEnumOriginsStatusType:
		return "status,type"
	case CreditNotesListRequestShowEnumOriginsType:
		return "type"
	}
}

func (c CreditNotesListRequestShowEnumOrigins) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", c.String())), nil
}

func (c *CreditNotesListRequestShowEnumOrigins) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "status":
		value := CreditNotesListRequestShowEnumOriginsStatus
		*c = value
	case "status,type":
		value := CreditNotesListRequestShowEnumOriginsStatusType
		*c = value
	case "type":
		value := CreditNotesListRequestShowEnumOriginsType
		*c = value
	}
	return nil
}

type CreditNotesRetrieveRequestExpand uint

const (
	CreditNotesRetrieveRequestExpandAccountingPeriod CreditNotesRetrieveRequestExpand = iota + 1
	CreditNotesRetrieveRequestExpandAppliedPayments
	CreditNotesRetrieveRequestExpandAppliedPaymentsAccountingPeriod
	CreditNotesRetrieveRequestExpandAppliedPaymentsCompany
	CreditNotesRetrieveRequestExpandAppliedPaymentsCompanyAccountingPeriod
	CreditNotesRetrieveRequestExpandAppliedPaymentsContact
	CreditNotesRetrieveRequestExpandAppliedPaymentsContactAccountingPeriod
	CreditNotesRetrieveRequestExpandAppliedPaymentsContactCompany
	CreditNotesRetrieveRequestExpandAppliedPaymentsContactCompanyAccountingPeriod
	CreditNotesRetrieveRequestExpandAppliedPaymentsLineItems
	CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsAccountingPeriod
	CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsCompany
	CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsCompanyAccountingPeriod
	CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsContact
	CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsContactAccountingPeriod
	CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsContactCompany
	CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsContactCompanyAccountingPeriod
	CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategories
	CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesAccountingPeriod
	CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesCompany
	CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesCompanyAccountingPeriod
	CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContact
	CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContactAccountingPeriod
	CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContactCompany
	CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContactCompanyAccountingPeriod
	CreditNotesRetrieveRequestExpandAppliedPaymentsTrackingCategories
	CreditNotesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesAccountingPeriod
	CreditNotesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesCompany
	CreditNotesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod
	CreditNotesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesContact
	CreditNotesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesContactAccountingPeriod
	CreditNotesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesContactCompany
	CreditNotesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesContactCompanyAccountingPeriod
	CreditNotesRetrieveRequestExpandCompany
	CreditNotesRetrieveRequestExpandCompanyAccountingPeriod
	CreditNotesRetrieveRequestExpandContact
	CreditNotesRetrieveRequestExpandContactAccountingPeriod
	CreditNotesRetrieveRequestExpandContactCompany
	CreditNotesRetrieveRequestExpandContactCompanyAccountingPeriod
	CreditNotesRetrieveRequestExpandLineItems
	CreditNotesRetrieveRequestExpandLineItemsAccountingPeriod
	CreditNotesRetrieveRequestExpandLineItemsCompany
	CreditNotesRetrieveRequestExpandLineItemsCompanyAccountingPeriod
	CreditNotesRetrieveRequestExpandLineItemsContact
	CreditNotesRetrieveRequestExpandLineItemsContactAccountingPeriod
	CreditNotesRetrieveRequestExpandLineItemsContactCompany
	CreditNotesRetrieveRequestExpandLineItemsContactCompanyAccountingPeriod
	CreditNotesRetrieveRequestExpandLineItemsTrackingCategories
	CreditNotesRetrieveRequestExpandLineItemsTrackingCategoriesAccountingPeriod
	CreditNotesRetrieveRequestExpandLineItemsTrackingCategoriesCompany
	CreditNotesRetrieveRequestExpandLineItemsTrackingCategoriesCompanyAccountingPeriod
	CreditNotesRetrieveRequestExpandLineItemsTrackingCategoriesContact
	CreditNotesRetrieveRequestExpandLineItemsTrackingCategoriesContactAccountingPeriod
	CreditNotesRetrieveRequestExpandLineItemsTrackingCategoriesContactCompany
	CreditNotesRetrieveRequestExpandLineItemsTrackingCategoriesContactCompanyAccountingPeriod
	CreditNotesRetrieveRequestExpandPayments
	CreditNotesRetrieveRequestExpandPaymentsAccountingPeriod
	CreditNotesRetrieveRequestExpandPaymentsAppliedPayments
	CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsAccountingPeriod
	CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsCompany
	CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsCompanyAccountingPeriod
	CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsContact
	CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsContactAccountingPeriod
	CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsContactCompany
	CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsContactCompanyAccountingPeriod
	CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItems
	CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsAccountingPeriod
	CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsCompany
	CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsCompanyAccountingPeriod
	CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsContact
	CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsContactAccountingPeriod
	CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsContactCompany
	CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsContactCompanyAccountingPeriod
	CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategories
	CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesAccountingPeriod
	CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesCompany
	CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesCompanyAccountingPeriod
	CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContact
	CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContactAccountingPeriod
	CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContactCompany
	CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContactCompanyAccountingPeriod
	CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategories
	CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesAccountingPeriod
	CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesCompany
	CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod
	CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContact
	CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContactAccountingPeriod
	CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContactCompany
	CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContactCompanyAccountingPeriod
	CreditNotesRetrieveRequestExpandPaymentsCompany
	CreditNotesRetrieveRequestExpandPaymentsCompanyAccountingPeriod
	CreditNotesRetrieveRequestExpandPaymentsContact
	CreditNotesRetrieveRequestExpandPaymentsContactAccountingPeriod
	CreditNotesRetrieveRequestExpandPaymentsContactCompany
	CreditNotesRetrieveRequestExpandPaymentsContactCompanyAccountingPeriod
	CreditNotesRetrieveRequestExpandPaymentsLineItems
	CreditNotesRetrieveRequestExpandPaymentsLineItemsAccountingPeriod
	CreditNotesRetrieveRequestExpandPaymentsLineItemsCompany
	CreditNotesRetrieveRequestExpandPaymentsLineItemsCompanyAccountingPeriod
	CreditNotesRetrieveRequestExpandPaymentsLineItemsContact
	CreditNotesRetrieveRequestExpandPaymentsLineItemsContactAccountingPeriod
	CreditNotesRetrieveRequestExpandPaymentsLineItemsContactCompany
	CreditNotesRetrieveRequestExpandPaymentsLineItemsContactCompanyAccountingPeriod
	CreditNotesRetrieveRequestExpandPaymentsLineItemsTrackingCategories
	CreditNotesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesAccountingPeriod
	CreditNotesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesCompany
	CreditNotesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesCompanyAccountingPeriod
	CreditNotesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesContact
	CreditNotesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesContactAccountingPeriod
	CreditNotesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesContactCompany
	CreditNotesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesContactCompanyAccountingPeriod
	CreditNotesRetrieveRequestExpandPaymentsTrackingCategories
	CreditNotesRetrieveRequestExpandPaymentsTrackingCategoriesAccountingPeriod
	CreditNotesRetrieveRequestExpandPaymentsTrackingCategoriesCompany
	CreditNotesRetrieveRequestExpandPaymentsTrackingCategoriesCompanyAccountingPeriod
	CreditNotesRetrieveRequestExpandPaymentsTrackingCategoriesContact
	CreditNotesRetrieveRequestExpandPaymentsTrackingCategoriesContactAccountingPeriod
	CreditNotesRetrieveRequestExpandPaymentsTrackingCategoriesContactCompany
	CreditNotesRetrieveRequestExpandPaymentsTrackingCategoriesContactCompanyAccountingPeriod
	CreditNotesRetrieveRequestExpandTrackingCategories
	CreditNotesRetrieveRequestExpandTrackingCategoriesAccountingPeriod
	CreditNotesRetrieveRequestExpandTrackingCategoriesCompany
	CreditNotesRetrieveRequestExpandTrackingCategoriesCompanyAccountingPeriod
	CreditNotesRetrieveRequestExpandTrackingCategoriesContact
	CreditNotesRetrieveRequestExpandTrackingCategoriesContactAccountingPeriod
	CreditNotesRetrieveRequestExpandTrackingCategoriesContactCompany
	CreditNotesRetrieveRequestExpandTrackingCategoriesContactCompanyAccountingPeriod
)

func (c CreditNotesRetrieveRequestExpand) String() string {
	switch c {
	default:
		return strconv.Itoa(int(c))
	case CreditNotesRetrieveRequestExpandAccountingPeriod:
		return "accounting_period"
	case CreditNotesRetrieveRequestExpandAppliedPayments:
		return "applied_payments"
	case CreditNotesRetrieveRequestExpandAppliedPaymentsAccountingPeriod:
		return "applied_payments,accounting_period"
	case CreditNotesRetrieveRequestExpandAppliedPaymentsCompany:
		return "applied_payments,company"
	case CreditNotesRetrieveRequestExpandAppliedPaymentsCompanyAccountingPeriod:
		return "applied_payments,company,accounting_period"
	case CreditNotesRetrieveRequestExpandAppliedPaymentsContact:
		return "applied_payments,contact"
	case CreditNotesRetrieveRequestExpandAppliedPaymentsContactAccountingPeriod:
		return "applied_payments,contact,accounting_period"
	case CreditNotesRetrieveRequestExpandAppliedPaymentsContactCompany:
		return "applied_payments,contact,company"
	case CreditNotesRetrieveRequestExpandAppliedPaymentsContactCompanyAccountingPeriod:
		return "applied_payments,contact,company,accounting_period"
	case CreditNotesRetrieveRequestExpandAppliedPaymentsLineItems:
		return "applied_payments,line_items"
	case CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsAccountingPeriod:
		return "applied_payments,line_items,accounting_period"
	case CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsCompany:
		return "applied_payments,line_items,company"
	case CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsCompanyAccountingPeriod:
		return "applied_payments,line_items,company,accounting_period"
	case CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsContact:
		return "applied_payments,line_items,contact"
	case CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsContactAccountingPeriod:
		return "applied_payments,line_items,contact,accounting_period"
	case CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsContactCompany:
		return "applied_payments,line_items,contact,company"
	case CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsContactCompanyAccountingPeriod:
		return "applied_payments,line_items,contact,company,accounting_period"
	case CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategories:
		return "applied_payments,line_items,tracking_categories"
	case CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesAccountingPeriod:
		return "applied_payments,line_items,tracking_categories,accounting_period"
	case CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesCompany:
		return "applied_payments,line_items,tracking_categories,company"
	case CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesCompanyAccountingPeriod:
		return "applied_payments,line_items,tracking_categories,company,accounting_period"
	case CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContact:
		return "applied_payments,line_items,tracking_categories,contact"
	case CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContactAccountingPeriod:
		return "applied_payments,line_items,tracking_categories,contact,accounting_period"
	case CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContactCompany:
		return "applied_payments,line_items,tracking_categories,contact,company"
	case CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContactCompanyAccountingPeriod:
		return "applied_payments,line_items,tracking_categories,contact,company,accounting_period"
	case CreditNotesRetrieveRequestExpandAppliedPaymentsTrackingCategories:
		return "applied_payments,tracking_categories"
	case CreditNotesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesAccountingPeriod:
		return "applied_payments,tracking_categories,accounting_period"
	case CreditNotesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesCompany:
		return "applied_payments,tracking_categories,company"
	case CreditNotesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod:
		return "applied_payments,tracking_categories,company,accounting_period"
	case CreditNotesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesContact:
		return "applied_payments,tracking_categories,contact"
	case CreditNotesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesContactAccountingPeriod:
		return "applied_payments,tracking_categories,contact,accounting_period"
	case CreditNotesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesContactCompany:
		return "applied_payments,tracking_categories,contact,company"
	case CreditNotesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesContactCompanyAccountingPeriod:
		return "applied_payments,tracking_categories,contact,company,accounting_period"
	case CreditNotesRetrieveRequestExpandCompany:
		return "company"
	case CreditNotesRetrieveRequestExpandCompanyAccountingPeriod:
		return "company,accounting_period"
	case CreditNotesRetrieveRequestExpandContact:
		return "contact"
	case CreditNotesRetrieveRequestExpandContactAccountingPeriod:
		return "contact,accounting_period"
	case CreditNotesRetrieveRequestExpandContactCompany:
		return "contact,company"
	case CreditNotesRetrieveRequestExpandContactCompanyAccountingPeriod:
		return "contact,company,accounting_period"
	case CreditNotesRetrieveRequestExpandLineItems:
		return "line_items"
	case CreditNotesRetrieveRequestExpandLineItemsAccountingPeriod:
		return "line_items,accounting_period"
	case CreditNotesRetrieveRequestExpandLineItemsCompany:
		return "line_items,company"
	case CreditNotesRetrieveRequestExpandLineItemsCompanyAccountingPeriod:
		return "line_items,company,accounting_period"
	case CreditNotesRetrieveRequestExpandLineItemsContact:
		return "line_items,contact"
	case CreditNotesRetrieveRequestExpandLineItemsContactAccountingPeriod:
		return "line_items,contact,accounting_period"
	case CreditNotesRetrieveRequestExpandLineItemsContactCompany:
		return "line_items,contact,company"
	case CreditNotesRetrieveRequestExpandLineItemsContactCompanyAccountingPeriod:
		return "line_items,contact,company,accounting_period"
	case CreditNotesRetrieveRequestExpandLineItemsTrackingCategories:
		return "line_items,tracking_categories"
	case CreditNotesRetrieveRequestExpandLineItemsTrackingCategoriesAccountingPeriod:
		return "line_items,tracking_categories,accounting_period"
	case CreditNotesRetrieveRequestExpandLineItemsTrackingCategoriesCompany:
		return "line_items,tracking_categories,company"
	case CreditNotesRetrieveRequestExpandLineItemsTrackingCategoriesCompanyAccountingPeriod:
		return "line_items,tracking_categories,company,accounting_period"
	case CreditNotesRetrieveRequestExpandLineItemsTrackingCategoriesContact:
		return "line_items,tracking_categories,contact"
	case CreditNotesRetrieveRequestExpandLineItemsTrackingCategoriesContactAccountingPeriod:
		return "line_items,tracking_categories,contact,accounting_period"
	case CreditNotesRetrieveRequestExpandLineItemsTrackingCategoriesContactCompany:
		return "line_items,tracking_categories,contact,company"
	case CreditNotesRetrieveRequestExpandLineItemsTrackingCategoriesContactCompanyAccountingPeriod:
		return "line_items,tracking_categories,contact,company,accounting_period"
	case CreditNotesRetrieveRequestExpandPayments:
		return "payments"
	case CreditNotesRetrieveRequestExpandPaymentsAccountingPeriod:
		return "payments,accounting_period"
	case CreditNotesRetrieveRequestExpandPaymentsAppliedPayments:
		return "payments,applied_payments"
	case CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsAccountingPeriod:
		return "payments,applied_payments,accounting_period"
	case CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsCompany:
		return "payments,applied_payments,company"
	case CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsCompanyAccountingPeriod:
		return "payments,applied_payments,company,accounting_period"
	case CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsContact:
		return "payments,applied_payments,contact"
	case CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsContactAccountingPeriod:
		return "payments,applied_payments,contact,accounting_period"
	case CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsContactCompany:
		return "payments,applied_payments,contact,company"
	case CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsContactCompanyAccountingPeriod:
		return "payments,applied_payments,contact,company,accounting_period"
	case CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItems:
		return "payments,applied_payments,line_items"
	case CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsAccountingPeriod:
		return "payments,applied_payments,line_items,accounting_period"
	case CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsCompany:
		return "payments,applied_payments,line_items,company"
	case CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsCompanyAccountingPeriod:
		return "payments,applied_payments,line_items,company,accounting_period"
	case CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsContact:
		return "payments,applied_payments,line_items,contact"
	case CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsContactAccountingPeriod:
		return "payments,applied_payments,line_items,contact,accounting_period"
	case CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsContactCompany:
		return "payments,applied_payments,line_items,contact,company"
	case CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsContactCompanyAccountingPeriod:
		return "payments,applied_payments,line_items,contact,company,accounting_period"
	case CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategories:
		return "payments,applied_payments,line_items,tracking_categories"
	case CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesAccountingPeriod:
		return "payments,applied_payments,line_items,tracking_categories,accounting_period"
	case CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesCompany:
		return "payments,applied_payments,line_items,tracking_categories,company"
	case CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesCompanyAccountingPeriod:
		return "payments,applied_payments,line_items,tracking_categories,company,accounting_period"
	case CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContact:
		return "payments,applied_payments,line_items,tracking_categories,contact"
	case CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContactAccountingPeriod:
		return "payments,applied_payments,line_items,tracking_categories,contact,accounting_period"
	case CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContactCompany:
		return "payments,applied_payments,line_items,tracking_categories,contact,company"
	case CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContactCompanyAccountingPeriod:
		return "payments,applied_payments,line_items,tracking_categories,contact,company,accounting_period"
	case CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategories:
		return "payments,applied_payments,tracking_categories"
	case CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesAccountingPeriod:
		return "payments,applied_payments,tracking_categories,accounting_period"
	case CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesCompany:
		return "payments,applied_payments,tracking_categories,company"
	case CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod:
		return "payments,applied_payments,tracking_categories,company,accounting_period"
	case CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContact:
		return "payments,applied_payments,tracking_categories,contact"
	case CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContactAccountingPeriod:
		return "payments,applied_payments,tracking_categories,contact,accounting_period"
	case CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContactCompany:
		return "payments,applied_payments,tracking_categories,contact,company"
	case CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContactCompanyAccountingPeriod:
		return "payments,applied_payments,tracking_categories,contact,company,accounting_period"
	case CreditNotesRetrieveRequestExpandPaymentsCompany:
		return "payments,company"
	case CreditNotesRetrieveRequestExpandPaymentsCompanyAccountingPeriod:
		return "payments,company,accounting_period"
	case CreditNotesRetrieveRequestExpandPaymentsContact:
		return "payments,contact"
	case CreditNotesRetrieveRequestExpandPaymentsContactAccountingPeriod:
		return "payments,contact,accounting_period"
	case CreditNotesRetrieveRequestExpandPaymentsContactCompany:
		return "payments,contact,company"
	case CreditNotesRetrieveRequestExpandPaymentsContactCompanyAccountingPeriod:
		return "payments,contact,company,accounting_period"
	case CreditNotesRetrieveRequestExpandPaymentsLineItems:
		return "payments,line_items"
	case CreditNotesRetrieveRequestExpandPaymentsLineItemsAccountingPeriod:
		return "payments,line_items,accounting_period"
	case CreditNotesRetrieveRequestExpandPaymentsLineItemsCompany:
		return "payments,line_items,company"
	case CreditNotesRetrieveRequestExpandPaymentsLineItemsCompanyAccountingPeriod:
		return "payments,line_items,company,accounting_period"
	case CreditNotesRetrieveRequestExpandPaymentsLineItemsContact:
		return "payments,line_items,contact"
	case CreditNotesRetrieveRequestExpandPaymentsLineItemsContactAccountingPeriod:
		return "payments,line_items,contact,accounting_period"
	case CreditNotesRetrieveRequestExpandPaymentsLineItemsContactCompany:
		return "payments,line_items,contact,company"
	case CreditNotesRetrieveRequestExpandPaymentsLineItemsContactCompanyAccountingPeriod:
		return "payments,line_items,contact,company,accounting_period"
	case CreditNotesRetrieveRequestExpandPaymentsLineItemsTrackingCategories:
		return "payments,line_items,tracking_categories"
	case CreditNotesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesAccountingPeriod:
		return "payments,line_items,tracking_categories,accounting_period"
	case CreditNotesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesCompany:
		return "payments,line_items,tracking_categories,company"
	case CreditNotesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesCompanyAccountingPeriod:
		return "payments,line_items,tracking_categories,company,accounting_period"
	case CreditNotesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesContact:
		return "payments,line_items,tracking_categories,contact"
	case CreditNotesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesContactAccountingPeriod:
		return "payments,line_items,tracking_categories,contact,accounting_period"
	case CreditNotesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesContactCompany:
		return "payments,line_items,tracking_categories,contact,company"
	case CreditNotesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesContactCompanyAccountingPeriod:
		return "payments,line_items,tracking_categories,contact,company,accounting_period"
	case CreditNotesRetrieveRequestExpandPaymentsTrackingCategories:
		return "payments,tracking_categories"
	case CreditNotesRetrieveRequestExpandPaymentsTrackingCategoriesAccountingPeriod:
		return "payments,tracking_categories,accounting_period"
	case CreditNotesRetrieveRequestExpandPaymentsTrackingCategoriesCompany:
		return "payments,tracking_categories,company"
	case CreditNotesRetrieveRequestExpandPaymentsTrackingCategoriesCompanyAccountingPeriod:
		return "payments,tracking_categories,company,accounting_period"
	case CreditNotesRetrieveRequestExpandPaymentsTrackingCategoriesContact:
		return "payments,tracking_categories,contact"
	case CreditNotesRetrieveRequestExpandPaymentsTrackingCategoriesContactAccountingPeriod:
		return "payments,tracking_categories,contact,accounting_period"
	case CreditNotesRetrieveRequestExpandPaymentsTrackingCategoriesContactCompany:
		return "payments,tracking_categories,contact,company"
	case CreditNotesRetrieveRequestExpandPaymentsTrackingCategoriesContactCompanyAccountingPeriod:
		return "payments,tracking_categories,contact,company,accounting_period"
	case CreditNotesRetrieveRequestExpandTrackingCategories:
		return "tracking_categories"
	case CreditNotesRetrieveRequestExpandTrackingCategoriesAccountingPeriod:
		return "tracking_categories,accounting_period"
	case CreditNotesRetrieveRequestExpandTrackingCategoriesCompany:
		return "tracking_categories,company"
	case CreditNotesRetrieveRequestExpandTrackingCategoriesCompanyAccountingPeriod:
		return "tracking_categories,company,accounting_period"
	case CreditNotesRetrieveRequestExpandTrackingCategoriesContact:
		return "tracking_categories,contact"
	case CreditNotesRetrieveRequestExpandTrackingCategoriesContactAccountingPeriod:
		return "tracking_categories,contact,accounting_period"
	case CreditNotesRetrieveRequestExpandTrackingCategoriesContactCompany:
		return "tracking_categories,contact,company"
	case CreditNotesRetrieveRequestExpandTrackingCategoriesContactCompanyAccountingPeriod:
		return "tracking_categories,contact,company,accounting_period"
	}
}

func (c CreditNotesRetrieveRequestExpand) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", c.String())), nil
}

func (c *CreditNotesRetrieveRequestExpand) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "accounting_period":
		value := CreditNotesRetrieveRequestExpandAccountingPeriod
		*c = value
	case "applied_payments":
		value := CreditNotesRetrieveRequestExpandAppliedPayments
		*c = value
	case "applied_payments,accounting_period":
		value := CreditNotesRetrieveRequestExpandAppliedPaymentsAccountingPeriod
		*c = value
	case "applied_payments,company":
		value := CreditNotesRetrieveRequestExpandAppliedPaymentsCompany
		*c = value
	case "applied_payments,company,accounting_period":
		value := CreditNotesRetrieveRequestExpandAppliedPaymentsCompanyAccountingPeriod
		*c = value
	case "applied_payments,contact":
		value := CreditNotesRetrieveRequestExpandAppliedPaymentsContact
		*c = value
	case "applied_payments,contact,accounting_period":
		value := CreditNotesRetrieveRequestExpandAppliedPaymentsContactAccountingPeriod
		*c = value
	case "applied_payments,contact,company":
		value := CreditNotesRetrieveRequestExpandAppliedPaymentsContactCompany
		*c = value
	case "applied_payments,contact,company,accounting_period":
		value := CreditNotesRetrieveRequestExpandAppliedPaymentsContactCompanyAccountingPeriod
		*c = value
	case "applied_payments,line_items":
		value := CreditNotesRetrieveRequestExpandAppliedPaymentsLineItems
		*c = value
	case "applied_payments,line_items,accounting_period":
		value := CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsAccountingPeriod
		*c = value
	case "applied_payments,line_items,company":
		value := CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsCompany
		*c = value
	case "applied_payments,line_items,company,accounting_period":
		value := CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsCompanyAccountingPeriod
		*c = value
	case "applied_payments,line_items,contact":
		value := CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsContact
		*c = value
	case "applied_payments,line_items,contact,accounting_period":
		value := CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsContactAccountingPeriod
		*c = value
	case "applied_payments,line_items,contact,company":
		value := CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsContactCompany
		*c = value
	case "applied_payments,line_items,contact,company,accounting_period":
		value := CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsContactCompanyAccountingPeriod
		*c = value
	case "applied_payments,line_items,tracking_categories":
		value := CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategories
		*c = value
	case "applied_payments,line_items,tracking_categories,accounting_period":
		value := CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesAccountingPeriod
		*c = value
	case "applied_payments,line_items,tracking_categories,company":
		value := CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesCompany
		*c = value
	case "applied_payments,line_items,tracking_categories,company,accounting_period":
		value := CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesCompanyAccountingPeriod
		*c = value
	case "applied_payments,line_items,tracking_categories,contact":
		value := CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContact
		*c = value
	case "applied_payments,line_items,tracking_categories,contact,accounting_period":
		value := CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContactAccountingPeriod
		*c = value
	case "applied_payments,line_items,tracking_categories,contact,company":
		value := CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContactCompany
		*c = value
	case "applied_payments,line_items,tracking_categories,contact,company,accounting_period":
		value := CreditNotesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContactCompanyAccountingPeriod
		*c = value
	case "applied_payments,tracking_categories":
		value := CreditNotesRetrieveRequestExpandAppliedPaymentsTrackingCategories
		*c = value
	case "applied_payments,tracking_categories,accounting_period":
		value := CreditNotesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesAccountingPeriod
		*c = value
	case "applied_payments,tracking_categories,company":
		value := CreditNotesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesCompany
		*c = value
	case "applied_payments,tracking_categories,company,accounting_period":
		value := CreditNotesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod
		*c = value
	case "applied_payments,tracking_categories,contact":
		value := CreditNotesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesContact
		*c = value
	case "applied_payments,tracking_categories,contact,accounting_period":
		value := CreditNotesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesContactAccountingPeriod
		*c = value
	case "applied_payments,tracking_categories,contact,company":
		value := CreditNotesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesContactCompany
		*c = value
	case "applied_payments,tracking_categories,contact,company,accounting_period":
		value := CreditNotesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesContactCompanyAccountingPeriod
		*c = value
	case "company":
		value := CreditNotesRetrieveRequestExpandCompany
		*c = value
	case "company,accounting_period":
		value := CreditNotesRetrieveRequestExpandCompanyAccountingPeriod
		*c = value
	case "contact":
		value := CreditNotesRetrieveRequestExpandContact
		*c = value
	case "contact,accounting_period":
		value := CreditNotesRetrieveRequestExpandContactAccountingPeriod
		*c = value
	case "contact,company":
		value := CreditNotesRetrieveRequestExpandContactCompany
		*c = value
	case "contact,company,accounting_period":
		value := CreditNotesRetrieveRequestExpandContactCompanyAccountingPeriod
		*c = value
	case "line_items":
		value := CreditNotesRetrieveRequestExpandLineItems
		*c = value
	case "line_items,accounting_period":
		value := CreditNotesRetrieveRequestExpandLineItemsAccountingPeriod
		*c = value
	case "line_items,company":
		value := CreditNotesRetrieveRequestExpandLineItemsCompany
		*c = value
	case "line_items,company,accounting_period":
		value := CreditNotesRetrieveRequestExpandLineItemsCompanyAccountingPeriod
		*c = value
	case "line_items,contact":
		value := CreditNotesRetrieveRequestExpandLineItemsContact
		*c = value
	case "line_items,contact,accounting_period":
		value := CreditNotesRetrieveRequestExpandLineItemsContactAccountingPeriod
		*c = value
	case "line_items,contact,company":
		value := CreditNotesRetrieveRequestExpandLineItemsContactCompany
		*c = value
	case "line_items,contact,company,accounting_period":
		value := CreditNotesRetrieveRequestExpandLineItemsContactCompanyAccountingPeriod
		*c = value
	case "line_items,tracking_categories":
		value := CreditNotesRetrieveRequestExpandLineItemsTrackingCategories
		*c = value
	case "line_items,tracking_categories,accounting_period":
		value := CreditNotesRetrieveRequestExpandLineItemsTrackingCategoriesAccountingPeriod
		*c = value
	case "line_items,tracking_categories,company":
		value := CreditNotesRetrieveRequestExpandLineItemsTrackingCategoriesCompany
		*c = value
	case "line_items,tracking_categories,company,accounting_period":
		value := CreditNotesRetrieveRequestExpandLineItemsTrackingCategoriesCompanyAccountingPeriod
		*c = value
	case "line_items,tracking_categories,contact":
		value := CreditNotesRetrieveRequestExpandLineItemsTrackingCategoriesContact
		*c = value
	case "line_items,tracking_categories,contact,accounting_period":
		value := CreditNotesRetrieveRequestExpandLineItemsTrackingCategoriesContactAccountingPeriod
		*c = value
	case "line_items,tracking_categories,contact,company":
		value := CreditNotesRetrieveRequestExpandLineItemsTrackingCategoriesContactCompany
		*c = value
	case "line_items,tracking_categories,contact,company,accounting_period":
		value := CreditNotesRetrieveRequestExpandLineItemsTrackingCategoriesContactCompanyAccountingPeriod
		*c = value
	case "payments":
		value := CreditNotesRetrieveRequestExpandPayments
		*c = value
	case "payments,accounting_period":
		value := CreditNotesRetrieveRequestExpandPaymentsAccountingPeriod
		*c = value
	case "payments,applied_payments":
		value := CreditNotesRetrieveRequestExpandPaymentsAppliedPayments
		*c = value
	case "payments,applied_payments,accounting_period":
		value := CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsAccountingPeriod
		*c = value
	case "payments,applied_payments,company":
		value := CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsCompany
		*c = value
	case "payments,applied_payments,company,accounting_period":
		value := CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsCompanyAccountingPeriod
		*c = value
	case "payments,applied_payments,contact":
		value := CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsContact
		*c = value
	case "payments,applied_payments,contact,accounting_period":
		value := CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsContactAccountingPeriod
		*c = value
	case "payments,applied_payments,contact,company":
		value := CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsContactCompany
		*c = value
	case "payments,applied_payments,contact,company,accounting_period":
		value := CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsContactCompanyAccountingPeriod
		*c = value
	case "payments,applied_payments,line_items":
		value := CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItems
		*c = value
	case "payments,applied_payments,line_items,accounting_period":
		value := CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsAccountingPeriod
		*c = value
	case "payments,applied_payments,line_items,company":
		value := CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsCompany
		*c = value
	case "payments,applied_payments,line_items,company,accounting_period":
		value := CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsCompanyAccountingPeriod
		*c = value
	case "payments,applied_payments,line_items,contact":
		value := CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsContact
		*c = value
	case "payments,applied_payments,line_items,contact,accounting_period":
		value := CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsContactAccountingPeriod
		*c = value
	case "payments,applied_payments,line_items,contact,company":
		value := CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsContactCompany
		*c = value
	case "payments,applied_payments,line_items,contact,company,accounting_period":
		value := CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsContactCompanyAccountingPeriod
		*c = value
	case "payments,applied_payments,line_items,tracking_categories":
		value := CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategories
		*c = value
	case "payments,applied_payments,line_items,tracking_categories,accounting_period":
		value := CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesAccountingPeriod
		*c = value
	case "payments,applied_payments,line_items,tracking_categories,company":
		value := CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesCompany
		*c = value
	case "payments,applied_payments,line_items,tracking_categories,company,accounting_period":
		value := CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesCompanyAccountingPeriod
		*c = value
	case "payments,applied_payments,line_items,tracking_categories,contact":
		value := CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContact
		*c = value
	case "payments,applied_payments,line_items,tracking_categories,contact,accounting_period":
		value := CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContactAccountingPeriod
		*c = value
	case "payments,applied_payments,line_items,tracking_categories,contact,company":
		value := CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContactCompany
		*c = value
	case "payments,applied_payments,line_items,tracking_categories,contact,company,accounting_period":
		value := CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContactCompanyAccountingPeriod
		*c = value
	case "payments,applied_payments,tracking_categories":
		value := CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategories
		*c = value
	case "payments,applied_payments,tracking_categories,accounting_period":
		value := CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesAccountingPeriod
		*c = value
	case "payments,applied_payments,tracking_categories,company":
		value := CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesCompany
		*c = value
	case "payments,applied_payments,tracking_categories,company,accounting_period":
		value := CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod
		*c = value
	case "payments,applied_payments,tracking_categories,contact":
		value := CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContact
		*c = value
	case "payments,applied_payments,tracking_categories,contact,accounting_period":
		value := CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContactAccountingPeriod
		*c = value
	case "payments,applied_payments,tracking_categories,contact,company":
		value := CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContactCompany
		*c = value
	case "payments,applied_payments,tracking_categories,contact,company,accounting_period":
		value := CreditNotesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContactCompanyAccountingPeriod
		*c = value
	case "payments,company":
		value := CreditNotesRetrieveRequestExpandPaymentsCompany
		*c = value
	case "payments,company,accounting_period":
		value := CreditNotesRetrieveRequestExpandPaymentsCompanyAccountingPeriod
		*c = value
	case "payments,contact":
		value := CreditNotesRetrieveRequestExpandPaymentsContact
		*c = value
	case "payments,contact,accounting_period":
		value := CreditNotesRetrieveRequestExpandPaymentsContactAccountingPeriod
		*c = value
	case "payments,contact,company":
		value := CreditNotesRetrieveRequestExpandPaymentsContactCompany
		*c = value
	case "payments,contact,company,accounting_period":
		value := CreditNotesRetrieveRequestExpandPaymentsContactCompanyAccountingPeriod
		*c = value
	case "payments,line_items":
		value := CreditNotesRetrieveRequestExpandPaymentsLineItems
		*c = value
	case "payments,line_items,accounting_period":
		value := CreditNotesRetrieveRequestExpandPaymentsLineItemsAccountingPeriod
		*c = value
	case "payments,line_items,company":
		value := CreditNotesRetrieveRequestExpandPaymentsLineItemsCompany
		*c = value
	case "payments,line_items,company,accounting_period":
		value := CreditNotesRetrieveRequestExpandPaymentsLineItemsCompanyAccountingPeriod
		*c = value
	case "payments,line_items,contact":
		value := CreditNotesRetrieveRequestExpandPaymentsLineItemsContact
		*c = value
	case "payments,line_items,contact,accounting_period":
		value := CreditNotesRetrieveRequestExpandPaymentsLineItemsContactAccountingPeriod
		*c = value
	case "payments,line_items,contact,company":
		value := CreditNotesRetrieveRequestExpandPaymentsLineItemsContactCompany
		*c = value
	case "payments,line_items,contact,company,accounting_period":
		value := CreditNotesRetrieveRequestExpandPaymentsLineItemsContactCompanyAccountingPeriod
		*c = value
	case "payments,line_items,tracking_categories":
		value := CreditNotesRetrieveRequestExpandPaymentsLineItemsTrackingCategories
		*c = value
	case "payments,line_items,tracking_categories,accounting_period":
		value := CreditNotesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesAccountingPeriod
		*c = value
	case "payments,line_items,tracking_categories,company":
		value := CreditNotesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesCompany
		*c = value
	case "payments,line_items,tracking_categories,company,accounting_period":
		value := CreditNotesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesCompanyAccountingPeriod
		*c = value
	case "payments,line_items,tracking_categories,contact":
		value := CreditNotesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesContact
		*c = value
	case "payments,line_items,tracking_categories,contact,accounting_period":
		value := CreditNotesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesContactAccountingPeriod
		*c = value
	case "payments,line_items,tracking_categories,contact,company":
		value := CreditNotesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesContactCompany
		*c = value
	case "payments,line_items,tracking_categories,contact,company,accounting_period":
		value := CreditNotesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesContactCompanyAccountingPeriod
		*c = value
	case "payments,tracking_categories":
		value := CreditNotesRetrieveRequestExpandPaymentsTrackingCategories
		*c = value
	case "payments,tracking_categories,accounting_period":
		value := CreditNotesRetrieveRequestExpandPaymentsTrackingCategoriesAccountingPeriod
		*c = value
	case "payments,tracking_categories,company":
		value := CreditNotesRetrieveRequestExpandPaymentsTrackingCategoriesCompany
		*c = value
	case "payments,tracking_categories,company,accounting_period":
		value := CreditNotesRetrieveRequestExpandPaymentsTrackingCategoriesCompanyAccountingPeriod
		*c = value
	case "payments,tracking_categories,contact":
		value := CreditNotesRetrieveRequestExpandPaymentsTrackingCategoriesContact
		*c = value
	case "payments,tracking_categories,contact,accounting_period":
		value := CreditNotesRetrieveRequestExpandPaymentsTrackingCategoriesContactAccountingPeriod
		*c = value
	case "payments,tracking_categories,contact,company":
		value := CreditNotesRetrieveRequestExpandPaymentsTrackingCategoriesContactCompany
		*c = value
	case "payments,tracking_categories,contact,company,accounting_period":
		value := CreditNotesRetrieveRequestExpandPaymentsTrackingCategoriesContactCompanyAccountingPeriod
		*c = value
	case "tracking_categories":
		value := CreditNotesRetrieveRequestExpandTrackingCategories
		*c = value
	case "tracking_categories,accounting_period":
		value := CreditNotesRetrieveRequestExpandTrackingCategoriesAccountingPeriod
		*c = value
	case "tracking_categories,company":
		value := CreditNotesRetrieveRequestExpandTrackingCategoriesCompany
		*c = value
	case "tracking_categories,company,accounting_period":
		value := CreditNotesRetrieveRequestExpandTrackingCategoriesCompanyAccountingPeriod
		*c = value
	case "tracking_categories,contact":
		value := CreditNotesRetrieveRequestExpandTrackingCategoriesContact
		*c = value
	case "tracking_categories,contact,accounting_period":
		value := CreditNotesRetrieveRequestExpandTrackingCategoriesContactAccountingPeriod
		*c = value
	case "tracking_categories,contact,company":
		value := CreditNotesRetrieveRequestExpandTrackingCategoriesContactCompany
		*c = value
	case "tracking_categories,contact,company,accounting_period":
		value := CreditNotesRetrieveRequestExpandTrackingCategoriesContactCompanyAccountingPeriod
		*c = value
	}
	return nil
}

type CreditNotesRetrieveRequestRemoteFields uint

const (
	CreditNotesRetrieveRequestRemoteFieldsStatus CreditNotesRetrieveRequestRemoteFields = iota + 1
	CreditNotesRetrieveRequestRemoteFieldsStatusType
	CreditNotesRetrieveRequestRemoteFieldsType
)

func (c CreditNotesRetrieveRequestRemoteFields) String() string {
	switch c {
	default:
		return strconv.Itoa(int(c))
	case CreditNotesRetrieveRequestRemoteFieldsStatus:
		return "status"
	case CreditNotesRetrieveRequestRemoteFieldsStatusType:
		return "status,type"
	case CreditNotesRetrieveRequestRemoteFieldsType:
		return "type"
	}
}

func (c CreditNotesRetrieveRequestRemoteFields) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", c.String())), nil
}

func (c *CreditNotesRetrieveRequestRemoteFields) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "status":
		value := CreditNotesRetrieveRequestRemoteFieldsStatus
		*c = value
	case "status,type":
		value := CreditNotesRetrieveRequestRemoteFieldsStatusType
		*c = value
	case "type":
		value := CreditNotesRetrieveRequestRemoteFieldsType
		*c = value
	}
	return nil
}

type CreditNotesRetrieveRequestShowEnumOrigins uint

const (
	CreditNotesRetrieveRequestShowEnumOriginsStatus CreditNotesRetrieveRequestShowEnumOrigins = iota + 1
	CreditNotesRetrieveRequestShowEnumOriginsStatusType
	CreditNotesRetrieveRequestShowEnumOriginsType
)

func (c CreditNotesRetrieveRequestShowEnumOrigins) String() string {
	switch c {
	default:
		return strconv.Itoa(int(c))
	case CreditNotesRetrieveRequestShowEnumOriginsStatus:
		return "status"
	case CreditNotesRetrieveRequestShowEnumOriginsStatusType:
		return "status,type"
	case CreditNotesRetrieveRequestShowEnumOriginsType:
		return "type"
	}
}

func (c CreditNotesRetrieveRequestShowEnumOrigins) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", c.String())), nil
}

func (c *CreditNotesRetrieveRequestShowEnumOrigins) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "status":
		value := CreditNotesRetrieveRequestShowEnumOriginsStatus
		*c = value
	case "status,type":
		value := CreditNotesRetrieveRequestShowEnumOriginsStatusType
		*c = value
	case "type":
		value := CreditNotesRetrieveRequestShowEnumOriginsType
		*c = value
	}
	return nil
}

// * `XUA` - ADB Unit of Account
// * `AFN` - Afghan Afghani
// * `AFA` - Afghan Afghani (1927–2002)
// * `ALL` - Albanian Lek
// * `ALK` - Albanian Lek (1946–1965)
// * `DZD` - Algerian Dinar
// * `ADP` - Andorran Peseta
// * `AOA` - Angolan Kwanza
// * `AOK` - Angolan Kwanza (1977–1991)
// * `AON` - Angolan New Kwanza (1990–2000)
// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
// * `ARA` - Argentine Austral
// * `ARS` - Argentine Peso
// * `ARM` - Argentine Peso (1881–1970)
// * `ARP` - Argentine Peso (1983–1985)
// * `ARL` - Argentine Peso Ley (1970–1983)
// * `AMD` - Armenian Dram
// * `AWG` - Aruban Florin
// * `AUD` - Australian Dollar
// * `ATS` - Austrian Schilling
// * `AZN` - Azerbaijani Manat
// * `AZM` - Azerbaijani Manat (1993–2006)
// * `BSD` - Bahamian Dollar
// * `BHD` - Bahraini Dinar
// * `BDT` - Bangladeshi Taka
// * `BBD` - Barbadian Dollar
// * `BYN` - Belarusian Ruble
// * `BYB` - Belarusian Ruble (1994–1999)
// * `BYR` - Belarusian Ruble (2000–2016)
// * `BEF` - Belgian Franc
// * `BEC` - Belgian Franc (convertible)
// * `BEL` - Belgian Franc (financial)
// * `BZD` - Belize Dollar
// * `BMD` - Bermudan Dollar
// * `BTN` - Bhutanese Ngultrum
// * `BOB` - Bolivian Boliviano
// * `BOL` - Bolivian Boliviano (1863–1963)
// * `BOV` - Bolivian Mvdol
// * `BOP` - Bolivian Peso
// * `BAM` - Bosnia-Herzegovina Convertible Mark
// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
// * `BWP` - Botswanan Pula
// * `BRC` - Brazilian Cruzado (1986–1989)
// * `BRZ` - Brazilian Cruzeiro (1942–1967)
// * `BRE` - Brazilian Cruzeiro (1990–1993)
// * `BRR` - Brazilian Cruzeiro (1993–1994)
// * `BRN` - Brazilian New Cruzado (1989–1990)
// * `BRB` - Brazilian New Cruzeiro (1967–1986)
// * `BRL` - Brazilian Real
// * `GBP` - British Pound
// * `BND` - Brunei Dollar
// * `BGL` - Bulgarian Hard Lev
// * `BGN` - Bulgarian Lev
// * `BGO` - Bulgarian Lev (1879–1952)
// * `BGM` - Bulgarian Socialist Lev
// * `BUK` - Burmese Kyat
// * `BIF` - Burundian Franc
// * `XPF` - CFP Franc
// * `KHR` - Cambodian Riel
// * `CAD` - Canadian Dollar
// * `CVE` - Cape Verdean Escudo
// * `KYD` - Cayman Islands Dollar
// * `XAF` - Central African CFA Franc
// * `CLE` - Chilean Escudo
// * `CLP` - Chilean Peso
// * `CLF` - Chilean Unit of Account (UF)
// * `CNX` - Chinese People’s Bank Dollar
// * `CNY` - Chinese Yuan
// * `CNH` - Chinese Yuan (offshore)
// * `COP` - Colombian Peso
// * `COU` - Colombian Real Value Unit
// * `KMF` - Comorian Franc
// * `CDF` - Congolese Franc
// * `CRC` - Costa Rican Colón
// * `HRD` - Croatian Dinar
// * `HRK` - Croatian Kuna
// * `CUC` - Cuban Convertible Peso
// * `CUP` - Cuban Peso
// * `CYP` - Cypriot Pound
// * `CZK` - Czech Koruna
// * `CSK` - Czechoslovak Hard Koruna
// * `DKK` - Danish Krone
// * `DJF` - Djiboutian Franc
// * `DOP` - Dominican Peso
// * `NLG` - Dutch Guilder
// * `XCD` - East Caribbean Dollar
// * `DDM` - East German Mark
// * `ECS` - Ecuadorian Sucre
// * `ECV` - Ecuadorian Unit of Constant Value
// * `EGP` - Egyptian Pound
// * `GQE` - Equatorial Guinean Ekwele
// * `ERN` - Eritrean Nakfa
// * `EEK` - Estonian Kroon
// * `ETB` - Ethiopian Birr
// * `EUR` - Euro
// * `XBA` - European Composite Unit
// * `XEU` - European Currency Unit
// * `XBB` - European Monetary Unit
// * `XBC` - European Unit of Account (XBC)
// * `XBD` - European Unit of Account (XBD)
// * `FKP` - Falkland Islands Pound
// * `FJD` - Fijian Dollar
// * `FIM` - Finnish Markka
// * `FRF` - French Franc
// * `XFO` - French Gold Franc
// * `XFU` - French UIC-Franc
// * `GMD` - Gambian Dalasi
// * `GEK` - Georgian Kupon Larit
// * `GEL` - Georgian Lari
// * `DEM` - German Mark
// * `GHS` - Ghanaian Cedi
// * `GHC` - Ghanaian Cedi (1979–2007)
// * `GIP` - Gibraltar Pound
// * `XAU` - Gold
// * `GRD` - Greek Drachma
// * `GTQ` - Guatemalan Quetzal
// * `GWP` - Guinea-Bissau Peso
// * `GNF` - Guinean Franc
// * `GNS` - Guinean Syli
// * `GYD` - Guyanaese Dollar
// * `HTG` - Haitian Gourde
// * `HNL` - Honduran Lempira
// * `HKD` - Hong Kong Dollar
// * `HUF` - Hungarian Forint
// * `IMP` - IMP
// * `ISK` - Icelandic Króna
// * `ISJ` - Icelandic Króna (1918–1981)
// * `INR` - Indian Rupee
// * `IDR` - Indonesian Rupiah
// * `IRR` - Iranian Rial
// * `IQD` - Iraqi Dinar
// * `IEP` - Irish Pound
// * `ILS` - Israeli New Shekel
// * `ILP` - Israeli Pound
// * `ILR` - Israeli Shekel (1980–1985)
// * `ITL` - Italian Lira
// * `JMD` - Jamaican Dollar
// * `JPY` - Japanese Yen
// * `JOD` - Jordanian Dinar
// * `KZT` - Kazakhstani Tenge
// * `KES` - Kenyan Shilling
// * `KWD` - Kuwaiti Dinar
// * `KGS` - Kyrgystani Som
// * `LAK` - Laotian Kip
// * `LVL` - Latvian Lats
// * `LVR` - Latvian Ruble
// * `LBP` - Lebanese Pound
// * `LSL` - Lesotho Loti
// * `LRD` - Liberian Dollar
// * `LYD` - Libyan Dinar
// * `LTL` - Lithuanian Litas
// * `LTT` - Lithuanian Talonas
// * `LUL` - Luxembourg Financial Franc
// * `LUC` - Luxembourgian Convertible Franc
// * `LUF` - Luxembourgian Franc
// * `MOP` - Macanese Pataca
// * `MKD` - Macedonian Denar
// * `MKN` - Macedonian Denar (1992–1993)
// * `MGA` - Malagasy Ariary
// * `MGF` - Malagasy Franc
// * `MWK` - Malawian Kwacha
// * `MYR` - Malaysian Ringgit
// * `MVR` - Maldivian Rufiyaa
// * `MVP` - Maldivian Rupee (1947–1981)
// * `MLF` - Malian Franc
// * `MTL` - Maltese Lira
// * `MTP` - Maltese Pound
// * `MRU` - Mauritanian Ouguiya
// * `MRO` - Mauritanian Ouguiya (1973–2017)
// * `MUR` - Mauritian Rupee
// * `MXV` - Mexican Investment Unit
// * `MXN` - Mexican Peso
// * `MXP` - Mexican Silver Peso (1861–1992)
// * `MDC` - Moldovan Cupon
// * `MDL` - Moldovan Leu
// * `MCF` - Monegasque Franc
// * `MNT` - Mongolian Tugrik
// * `MAD` - Moroccan Dirham
// * `MAF` - Moroccan Franc
// * `MZE` - Mozambican Escudo
// * `MZN` - Mozambican Metical
// * `MZM` - Mozambican Metical (1980–2006)
// * `MMK` - Myanmar Kyat
// * `NAD` - Namibian Dollar
// * `NPR` - Nepalese Rupee
// * `ANG` - Netherlands Antillean Guilder
// * `TWD` - New Taiwan Dollar
// * `NZD` - New Zealand Dollar
// * `NIO` - Nicaraguan Córdoba
// * `NIC` - Nicaraguan Córdoba (1988–1991)
// * `NGN` - Nigerian Naira
// * `KPW` - North Korean Won
// * `NOK` - Norwegian Krone
// * `OMR` - Omani Rial
// * `PKR` - Pakistani Rupee
// * `XPD` - Palladium
// * `PAB` - Panamanian Balboa
// * `PGK` - Papua New Guinean Kina
// * `PYG` - Paraguayan Guarani
// * `PEI` - Peruvian Inti
// * `PEN` - Peruvian Sol
// * `PES` - Peruvian Sol (1863–1965)
// * `PHP` - Philippine Peso
// * `XPT` - Platinum
// * `PLN` - Polish Zloty
// * `PLZ` - Polish Zloty (1950–1995)
// * `PTE` - Portuguese Escudo
// * `GWE` - Portuguese Guinea Escudo
// * `QAR` - Qatari Rial
// * `XRE` - RINET Funds
// * `RHD` - Rhodesian Dollar
// * `RON` - Romanian Leu
// * `ROL` - Romanian Leu (1952–2006)
// * `RUB` - Russian Ruble
// * `RUR` - Russian Ruble (1991–1998)
// * `RWF` - Rwandan Franc
// * `SVC` - Salvadoran Colón
// * `WST` - Samoan Tala
// * `SAR` - Saudi Riyal
// * `RSD` - Serbian Dinar
// * `CSD` - Serbian Dinar (2002–2006)
// * `SCR` - Seychellois Rupee
// * `SLL` - Sierra Leonean Leone
// * `XAG` - Silver
// * `SGD` - Singapore Dollar
// * `SKK` - Slovak Koruna
// * `SIT` - Slovenian Tolar
// * `SBD` - Solomon Islands Dollar
// * `SOS` - Somali Shilling
// * `ZAR` - South African Rand
// * `ZAL` - South African Rand (financial)
// * `KRH` - South Korean Hwan (1953–1962)
// * `KRW` - South Korean Won
// * `KRO` - South Korean Won (1945–1953)
// * `SSP` - South Sudanese Pound
// * `SUR` - Soviet Rouble
// * `ESP` - Spanish Peseta
// * `ESA` - Spanish Peseta (A account)
// * `ESB` - Spanish Peseta (convertible account)
// * `XDR` - Special Drawing Rights
// * `LKR` - Sri Lankan Rupee
// * `SHP` - St. Helena Pound
// * `XSU` - Sucre
// * `SDD` - Sudanese Dinar (1992–2007)
// * `SDG` - Sudanese Pound
// * `SDP` - Sudanese Pound (1957–1998)
// * `SRD` - Surinamese Dollar
// * `SRG` - Surinamese Guilder
// * `SZL` - Swazi Lilangeni
// * `SEK` - Swedish Krona
// * `CHF` - Swiss Franc
// * `SYP` - Syrian Pound
// * `STN` - São Tomé & Príncipe Dobra
// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
// * `TVD` - TVD
// * `TJR` - Tajikistani Ruble
// * `TJS` - Tajikistani Somoni
// * `TZS` - Tanzanian Shilling
// * `XTS` - Testing Currency Code
// * `THB` - Thai Baht
// * `XXX` - The codes assigned for transactions where no currency is involved
// * `TPE` - Timorese Escudo
// * `TOP` - Tongan Paʻanga
// * `TTD` - Trinidad & Tobago Dollar
// * `TND` - Tunisian Dinar
// * `TRY` - Turkish Lira
// * `TRL` - Turkish Lira (1922–2005)
// * `TMT` - Turkmenistani Manat
// * `TMM` - Turkmenistani Manat (1993–2009)
// * `USD` - US Dollar
// * `USN` - US Dollar (Next day)
// * `USS` - US Dollar (Same day)
// * `UGX` - Ugandan Shilling
// * `UGS` - Ugandan Shilling (1966–1987)
// * `UAH` - Ukrainian Hryvnia
// * `UAK` - Ukrainian Karbovanets
// * `AED` - United Arab Emirates Dirham
// * `UYW` - Uruguayan Nominal Wage Index Unit
// * `UYU` - Uruguayan Peso
// * `UYP` - Uruguayan Peso (1975–1993)
// * `UYI` - Uruguayan Peso (Indexed Units)
// * `UZS` - Uzbekistani Som
// * `VUV` - Vanuatu Vatu
// * `VES` - Venezuelan Bolívar
// * `VEB` - Venezuelan Bolívar (1871–2008)
// * `VEF` - Venezuelan Bolívar (2008–2018)
// * `VND` - Vietnamese Dong
// * `VNN` - Vietnamese Dong (1978–1985)
// * `CHE` - WIR Euro
// * `CHW` - WIR Franc
// * `XOF` - West African CFA Franc
// * `YDD` - Yemeni Dinar
// * `YER` - Yemeni Rial
// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
// * `YUM` - Yugoslavian New Dinar (1994–2002)
// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
// * `ZWN` - ZWN
// * `ZRN` - Zairean New Zaire (1993–1998)
// * `ZRZ` - Zairean Zaire (1971–1993)
// * `ZMW` - Zambian Kwacha
// * `ZMK` - Zambian Kwacha (1968–2012)
// * `ZWD` - Zimbabwean Dollar (1980–2008)
// * `ZWR` - Zimbabwean Dollar (2008)
// * `ZWL` - Zimbabwean Dollar (2009)
type CurrencyEnum uint

const (
	CurrencyEnumXua CurrencyEnum = iota + 1
	CurrencyEnumAfn
	CurrencyEnumAfa
	CurrencyEnumAll
	CurrencyEnumAlk
	CurrencyEnumDzd
	CurrencyEnumAdp
	CurrencyEnumAoa
	CurrencyEnumAok
	CurrencyEnumAon
	CurrencyEnumAor
	CurrencyEnumAra
	CurrencyEnumArs
	CurrencyEnumArm
	CurrencyEnumArp
	CurrencyEnumArl
	CurrencyEnumAmd
	CurrencyEnumAwg
	CurrencyEnumAud
	CurrencyEnumAts
	CurrencyEnumAzn
	CurrencyEnumAzm
	CurrencyEnumBsd
	CurrencyEnumBhd
	CurrencyEnumBdt
	CurrencyEnumBbd
	CurrencyEnumByn
	CurrencyEnumByb
	CurrencyEnumByr
	CurrencyEnumBef
	CurrencyEnumBec
	CurrencyEnumBel
	CurrencyEnumBzd
	CurrencyEnumBmd
	CurrencyEnumBtn
	CurrencyEnumBob
	CurrencyEnumBol
	CurrencyEnumBov
	CurrencyEnumBop
	CurrencyEnumBam
	CurrencyEnumBad
	CurrencyEnumBan
	CurrencyEnumBwp
	CurrencyEnumBrc
	CurrencyEnumBrz
	CurrencyEnumBre
	CurrencyEnumBrr
	CurrencyEnumBrn
	CurrencyEnumBrb
	CurrencyEnumBrl
	CurrencyEnumGbp
	CurrencyEnumBnd
	CurrencyEnumBgl
	CurrencyEnumBgn
	CurrencyEnumBgo
	CurrencyEnumBgm
	CurrencyEnumBuk
	CurrencyEnumBif
	CurrencyEnumXpf
	CurrencyEnumKhr
	CurrencyEnumCad
	CurrencyEnumCve
	CurrencyEnumKyd
	CurrencyEnumXaf
	CurrencyEnumCle
	CurrencyEnumClp
	CurrencyEnumClf
	CurrencyEnumCnx
	CurrencyEnumCny
	CurrencyEnumCnh
	CurrencyEnumCop
	CurrencyEnumCou
	CurrencyEnumKmf
	CurrencyEnumCdf
	CurrencyEnumCrc
	CurrencyEnumHrd
	CurrencyEnumHrk
	CurrencyEnumCuc
	CurrencyEnumCup
	CurrencyEnumCyp
	CurrencyEnumCzk
	CurrencyEnumCsk
	CurrencyEnumDkk
	CurrencyEnumDjf
	CurrencyEnumDop
	CurrencyEnumNlg
	CurrencyEnumXcd
	CurrencyEnumDdm
	CurrencyEnumEcs
	CurrencyEnumEcv
	CurrencyEnumEgp
	CurrencyEnumGqe
	CurrencyEnumErn
	CurrencyEnumEek
	CurrencyEnumEtb
	CurrencyEnumEur
	CurrencyEnumXba
	CurrencyEnumXeu
	CurrencyEnumXbb
	CurrencyEnumXbc
	CurrencyEnumXbd
	CurrencyEnumFkp
	CurrencyEnumFjd
	CurrencyEnumFim
	CurrencyEnumFrf
	CurrencyEnumXfo
	CurrencyEnumXfu
	CurrencyEnumGmd
	CurrencyEnumGek
	CurrencyEnumGel
	CurrencyEnumDem
	CurrencyEnumGhs
	CurrencyEnumGhc
	CurrencyEnumGip
	CurrencyEnumXau
	CurrencyEnumGrd
	CurrencyEnumGtq
	CurrencyEnumGwp
	CurrencyEnumGnf
	CurrencyEnumGns
	CurrencyEnumGyd
	CurrencyEnumHtg
	CurrencyEnumHnl
	CurrencyEnumHkd
	CurrencyEnumHuf
	CurrencyEnumImp
	CurrencyEnumIsk
	CurrencyEnumIsj
	CurrencyEnumInr
	CurrencyEnumIdr
	CurrencyEnumIrr
	CurrencyEnumIqd
	CurrencyEnumIep
	CurrencyEnumIls
	CurrencyEnumIlp
	CurrencyEnumIlr
	CurrencyEnumItl
	CurrencyEnumJmd
	CurrencyEnumJpy
	CurrencyEnumJod
	CurrencyEnumKzt
	CurrencyEnumKes
	CurrencyEnumKwd
	CurrencyEnumKgs
	CurrencyEnumLak
	CurrencyEnumLvl
	CurrencyEnumLvr
	CurrencyEnumLbp
	CurrencyEnumLsl
	CurrencyEnumLrd
	CurrencyEnumLyd
	CurrencyEnumLtl
	CurrencyEnumLtt
	CurrencyEnumLul
	CurrencyEnumLuc
	CurrencyEnumLuf
	CurrencyEnumMop
	CurrencyEnumMkd
	CurrencyEnumMkn
	CurrencyEnumMga
	CurrencyEnumMgf
	CurrencyEnumMwk
	CurrencyEnumMyr
	CurrencyEnumMvr
	CurrencyEnumMvp
	CurrencyEnumMlf
	CurrencyEnumMtl
	CurrencyEnumMtp
	CurrencyEnumMru
	CurrencyEnumMro
	CurrencyEnumMur
	CurrencyEnumMxv
	CurrencyEnumMxn
	CurrencyEnumMxp
	CurrencyEnumMdc
	CurrencyEnumMdl
	CurrencyEnumMcf
	CurrencyEnumMnt
	CurrencyEnumMad
	CurrencyEnumMaf
	CurrencyEnumMze
	CurrencyEnumMzn
	CurrencyEnumMzm
	CurrencyEnumMmk
	CurrencyEnumNad
	CurrencyEnumNpr
	CurrencyEnumAng
	CurrencyEnumTwd
	CurrencyEnumNzd
	CurrencyEnumNio
	CurrencyEnumNic
	CurrencyEnumNgn
	CurrencyEnumKpw
	CurrencyEnumNok
	CurrencyEnumOmr
	CurrencyEnumPkr
	CurrencyEnumXpd
	CurrencyEnumPab
	CurrencyEnumPgk
	CurrencyEnumPyg
	CurrencyEnumPei
	CurrencyEnumPen
	CurrencyEnumPes
	CurrencyEnumPhp
	CurrencyEnumXpt
	CurrencyEnumPln
	CurrencyEnumPlz
	CurrencyEnumPte
	CurrencyEnumGwe
	CurrencyEnumQar
	CurrencyEnumXre
	CurrencyEnumRhd
	CurrencyEnumRon
	CurrencyEnumRol
	CurrencyEnumRub
	CurrencyEnumRur
	CurrencyEnumRwf
	CurrencyEnumSvc
	CurrencyEnumWst
	CurrencyEnumSar
	CurrencyEnumRsd
	CurrencyEnumCsd
	CurrencyEnumScr
	CurrencyEnumSll
	CurrencyEnumXag
	CurrencyEnumSgd
	CurrencyEnumSkk
	CurrencyEnumSit
	CurrencyEnumSbd
	CurrencyEnumSos
	CurrencyEnumZar
	CurrencyEnumZal
	CurrencyEnumKrh
	CurrencyEnumKrw
	CurrencyEnumKro
	CurrencyEnumSsp
	CurrencyEnumSur
	CurrencyEnumEsp
	CurrencyEnumEsa
	CurrencyEnumEsb
	CurrencyEnumXdr
	CurrencyEnumLkr
	CurrencyEnumShp
	CurrencyEnumXsu
	CurrencyEnumSdd
	CurrencyEnumSdg
	CurrencyEnumSdp
	CurrencyEnumSrd
	CurrencyEnumSrg
	CurrencyEnumSzl
	CurrencyEnumSek
	CurrencyEnumChf
	CurrencyEnumSyp
	CurrencyEnumStn
	CurrencyEnumStd
	CurrencyEnumTvd
	CurrencyEnumTjr
	CurrencyEnumTjs
	CurrencyEnumTzs
	CurrencyEnumXts
	CurrencyEnumThb
	CurrencyEnumXxx
	CurrencyEnumTpe
	CurrencyEnumTop
	CurrencyEnumTtd
	CurrencyEnumTnd
	CurrencyEnumTry
	CurrencyEnumTrl
	CurrencyEnumTmt
	CurrencyEnumTmm
	CurrencyEnumUsd
	CurrencyEnumUsn
	CurrencyEnumUss
	CurrencyEnumUgx
	CurrencyEnumUgs
	CurrencyEnumUah
	CurrencyEnumUak
	CurrencyEnumAed
	CurrencyEnumUyw
	CurrencyEnumUyu
	CurrencyEnumUyp
	CurrencyEnumUyi
	CurrencyEnumUzs
	CurrencyEnumVuv
	CurrencyEnumVes
	CurrencyEnumVeb
	CurrencyEnumVef
	CurrencyEnumVnd
	CurrencyEnumVnn
	CurrencyEnumChe
	CurrencyEnumChw
	CurrencyEnumXof
	CurrencyEnumYdd
	CurrencyEnumYer
	CurrencyEnumYun
	CurrencyEnumYud
	CurrencyEnumYum
	CurrencyEnumYur
	CurrencyEnumZwn
	CurrencyEnumZrn
	CurrencyEnumZrz
	CurrencyEnumZmw
	CurrencyEnumZmk
	CurrencyEnumZwd
	CurrencyEnumZwr
	CurrencyEnumZwl
)

func (c CurrencyEnum) String() string {
	switch c {
	default:
		return strconv.Itoa(int(c))
	case CurrencyEnumXua:
		return "XUA"
	case CurrencyEnumAfn:
		return "AFN"
	case CurrencyEnumAfa:
		return "AFA"
	case CurrencyEnumAll:
		return "ALL"
	case CurrencyEnumAlk:
		return "ALK"
	case CurrencyEnumDzd:
		return "DZD"
	case CurrencyEnumAdp:
		return "ADP"
	case CurrencyEnumAoa:
		return "AOA"
	case CurrencyEnumAok:
		return "AOK"
	case CurrencyEnumAon:
		return "AON"
	case CurrencyEnumAor:
		return "AOR"
	case CurrencyEnumAra:
		return "ARA"
	case CurrencyEnumArs:
		return "ARS"
	case CurrencyEnumArm:
		return "ARM"
	case CurrencyEnumArp:
		return "ARP"
	case CurrencyEnumArl:
		return "ARL"
	case CurrencyEnumAmd:
		return "AMD"
	case CurrencyEnumAwg:
		return "AWG"
	case CurrencyEnumAud:
		return "AUD"
	case CurrencyEnumAts:
		return "ATS"
	case CurrencyEnumAzn:
		return "AZN"
	case CurrencyEnumAzm:
		return "AZM"
	case CurrencyEnumBsd:
		return "BSD"
	case CurrencyEnumBhd:
		return "BHD"
	case CurrencyEnumBdt:
		return "BDT"
	case CurrencyEnumBbd:
		return "BBD"
	case CurrencyEnumByn:
		return "BYN"
	case CurrencyEnumByb:
		return "BYB"
	case CurrencyEnumByr:
		return "BYR"
	case CurrencyEnumBef:
		return "BEF"
	case CurrencyEnumBec:
		return "BEC"
	case CurrencyEnumBel:
		return "BEL"
	case CurrencyEnumBzd:
		return "BZD"
	case CurrencyEnumBmd:
		return "BMD"
	case CurrencyEnumBtn:
		return "BTN"
	case CurrencyEnumBob:
		return "BOB"
	case CurrencyEnumBol:
		return "BOL"
	case CurrencyEnumBov:
		return "BOV"
	case CurrencyEnumBop:
		return "BOP"
	case CurrencyEnumBam:
		return "BAM"
	case CurrencyEnumBad:
		return "BAD"
	case CurrencyEnumBan:
		return "BAN"
	case CurrencyEnumBwp:
		return "BWP"
	case CurrencyEnumBrc:
		return "BRC"
	case CurrencyEnumBrz:
		return "BRZ"
	case CurrencyEnumBre:
		return "BRE"
	case CurrencyEnumBrr:
		return "BRR"
	case CurrencyEnumBrn:
		return "BRN"
	case CurrencyEnumBrb:
		return "BRB"
	case CurrencyEnumBrl:
		return "BRL"
	case CurrencyEnumGbp:
		return "GBP"
	case CurrencyEnumBnd:
		return "BND"
	case CurrencyEnumBgl:
		return "BGL"
	case CurrencyEnumBgn:
		return "BGN"
	case CurrencyEnumBgo:
		return "BGO"
	case CurrencyEnumBgm:
		return "BGM"
	case CurrencyEnumBuk:
		return "BUK"
	case CurrencyEnumBif:
		return "BIF"
	case CurrencyEnumXpf:
		return "XPF"
	case CurrencyEnumKhr:
		return "KHR"
	case CurrencyEnumCad:
		return "CAD"
	case CurrencyEnumCve:
		return "CVE"
	case CurrencyEnumKyd:
		return "KYD"
	case CurrencyEnumXaf:
		return "XAF"
	case CurrencyEnumCle:
		return "CLE"
	case CurrencyEnumClp:
		return "CLP"
	case CurrencyEnumClf:
		return "CLF"
	case CurrencyEnumCnx:
		return "CNX"
	case CurrencyEnumCny:
		return "CNY"
	case CurrencyEnumCnh:
		return "CNH"
	case CurrencyEnumCop:
		return "COP"
	case CurrencyEnumCou:
		return "COU"
	case CurrencyEnumKmf:
		return "KMF"
	case CurrencyEnumCdf:
		return "CDF"
	case CurrencyEnumCrc:
		return "CRC"
	case CurrencyEnumHrd:
		return "HRD"
	case CurrencyEnumHrk:
		return "HRK"
	case CurrencyEnumCuc:
		return "CUC"
	case CurrencyEnumCup:
		return "CUP"
	case CurrencyEnumCyp:
		return "CYP"
	case CurrencyEnumCzk:
		return "CZK"
	case CurrencyEnumCsk:
		return "CSK"
	case CurrencyEnumDkk:
		return "DKK"
	case CurrencyEnumDjf:
		return "DJF"
	case CurrencyEnumDop:
		return "DOP"
	case CurrencyEnumNlg:
		return "NLG"
	case CurrencyEnumXcd:
		return "XCD"
	case CurrencyEnumDdm:
		return "DDM"
	case CurrencyEnumEcs:
		return "ECS"
	case CurrencyEnumEcv:
		return "ECV"
	case CurrencyEnumEgp:
		return "EGP"
	case CurrencyEnumGqe:
		return "GQE"
	case CurrencyEnumErn:
		return "ERN"
	case CurrencyEnumEek:
		return "EEK"
	case CurrencyEnumEtb:
		return "ETB"
	case CurrencyEnumEur:
		return "EUR"
	case CurrencyEnumXba:
		return "XBA"
	case CurrencyEnumXeu:
		return "XEU"
	case CurrencyEnumXbb:
		return "XBB"
	case CurrencyEnumXbc:
		return "XBC"
	case CurrencyEnumXbd:
		return "XBD"
	case CurrencyEnumFkp:
		return "FKP"
	case CurrencyEnumFjd:
		return "FJD"
	case CurrencyEnumFim:
		return "FIM"
	case CurrencyEnumFrf:
		return "FRF"
	case CurrencyEnumXfo:
		return "XFO"
	case CurrencyEnumXfu:
		return "XFU"
	case CurrencyEnumGmd:
		return "GMD"
	case CurrencyEnumGek:
		return "GEK"
	case CurrencyEnumGel:
		return "GEL"
	case CurrencyEnumDem:
		return "DEM"
	case CurrencyEnumGhs:
		return "GHS"
	case CurrencyEnumGhc:
		return "GHC"
	case CurrencyEnumGip:
		return "GIP"
	case CurrencyEnumXau:
		return "XAU"
	case CurrencyEnumGrd:
		return "GRD"
	case CurrencyEnumGtq:
		return "GTQ"
	case CurrencyEnumGwp:
		return "GWP"
	case CurrencyEnumGnf:
		return "GNF"
	case CurrencyEnumGns:
		return "GNS"
	case CurrencyEnumGyd:
		return "GYD"
	case CurrencyEnumHtg:
		return "HTG"
	case CurrencyEnumHnl:
		return "HNL"
	case CurrencyEnumHkd:
		return "HKD"
	case CurrencyEnumHuf:
		return "HUF"
	case CurrencyEnumImp:
		return "IMP"
	case CurrencyEnumIsk:
		return "ISK"
	case CurrencyEnumIsj:
		return "ISJ"
	case CurrencyEnumInr:
		return "INR"
	case CurrencyEnumIdr:
		return "IDR"
	case CurrencyEnumIrr:
		return "IRR"
	case CurrencyEnumIqd:
		return "IQD"
	case CurrencyEnumIep:
		return "IEP"
	case CurrencyEnumIls:
		return "ILS"
	case CurrencyEnumIlp:
		return "ILP"
	case CurrencyEnumIlr:
		return "ILR"
	case CurrencyEnumItl:
		return "ITL"
	case CurrencyEnumJmd:
		return "JMD"
	case CurrencyEnumJpy:
		return "JPY"
	case CurrencyEnumJod:
		return "JOD"
	case CurrencyEnumKzt:
		return "KZT"
	case CurrencyEnumKes:
		return "KES"
	case CurrencyEnumKwd:
		return "KWD"
	case CurrencyEnumKgs:
		return "KGS"
	case CurrencyEnumLak:
		return "LAK"
	case CurrencyEnumLvl:
		return "LVL"
	case CurrencyEnumLvr:
		return "LVR"
	case CurrencyEnumLbp:
		return "LBP"
	case CurrencyEnumLsl:
		return "LSL"
	case CurrencyEnumLrd:
		return "LRD"
	case CurrencyEnumLyd:
		return "LYD"
	case CurrencyEnumLtl:
		return "LTL"
	case CurrencyEnumLtt:
		return "LTT"
	case CurrencyEnumLul:
		return "LUL"
	case CurrencyEnumLuc:
		return "LUC"
	case CurrencyEnumLuf:
		return "LUF"
	case CurrencyEnumMop:
		return "MOP"
	case CurrencyEnumMkd:
		return "MKD"
	case CurrencyEnumMkn:
		return "MKN"
	case CurrencyEnumMga:
		return "MGA"
	case CurrencyEnumMgf:
		return "MGF"
	case CurrencyEnumMwk:
		return "MWK"
	case CurrencyEnumMyr:
		return "MYR"
	case CurrencyEnumMvr:
		return "MVR"
	case CurrencyEnumMvp:
		return "MVP"
	case CurrencyEnumMlf:
		return "MLF"
	case CurrencyEnumMtl:
		return "MTL"
	case CurrencyEnumMtp:
		return "MTP"
	case CurrencyEnumMru:
		return "MRU"
	case CurrencyEnumMro:
		return "MRO"
	case CurrencyEnumMur:
		return "MUR"
	case CurrencyEnumMxv:
		return "MXV"
	case CurrencyEnumMxn:
		return "MXN"
	case CurrencyEnumMxp:
		return "MXP"
	case CurrencyEnumMdc:
		return "MDC"
	case CurrencyEnumMdl:
		return "MDL"
	case CurrencyEnumMcf:
		return "MCF"
	case CurrencyEnumMnt:
		return "MNT"
	case CurrencyEnumMad:
		return "MAD"
	case CurrencyEnumMaf:
		return "MAF"
	case CurrencyEnumMze:
		return "MZE"
	case CurrencyEnumMzn:
		return "MZN"
	case CurrencyEnumMzm:
		return "MZM"
	case CurrencyEnumMmk:
		return "MMK"
	case CurrencyEnumNad:
		return "NAD"
	case CurrencyEnumNpr:
		return "NPR"
	case CurrencyEnumAng:
		return "ANG"
	case CurrencyEnumTwd:
		return "TWD"
	case CurrencyEnumNzd:
		return "NZD"
	case CurrencyEnumNio:
		return "NIO"
	case CurrencyEnumNic:
		return "NIC"
	case CurrencyEnumNgn:
		return "NGN"
	case CurrencyEnumKpw:
		return "KPW"
	case CurrencyEnumNok:
		return "NOK"
	case CurrencyEnumOmr:
		return "OMR"
	case CurrencyEnumPkr:
		return "PKR"
	case CurrencyEnumXpd:
		return "XPD"
	case CurrencyEnumPab:
		return "PAB"
	case CurrencyEnumPgk:
		return "PGK"
	case CurrencyEnumPyg:
		return "PYG"
	case CurrencyEnumPei:
		return "PEI"
	case CurrencyEnumPen:
		return "PEN"
	case CurrencyEnumPes:
		return "PES"
	case CurrencyEnumPhp:
		return "PHP"
	case CurrencyEnumXpt:
		return "XPT"
	case CurrencyEnumPln:
		return "PLN"
	case CurrencyEnumPlz:
		return "PLZ"
	case CurrencyEnumPte:
		return "PTE"
	case CurrencyEnumGwe:
		return "GWE"
	case CurrencyEnumQar:
		return "QAR"
	case CurrencyEnumXre:
		return "XRE"
	case CurrencyEnumRhd:
		return "RHD"
	case CurrencyEnumRon:
		return "RON"
	case CurrencyEnumRol:
		return "ROL"
	case CurrencyEnumRub:
		return "RUB"
	case CurrencyEnumRur:
		return "RUR"
	case CurrencyEnumRwf:
		return "RWF"
	case CurrencyEnumSvc:
		return "SVC"
	case CurrencyEnumWst:
		return "WST"
	case CurrencyEnumSar:
		return "SAR"
	case CurrencyEnumRsd:
		return "RSD"
	case CurrencyEnumCsd:
		return "CSD"
	case CurrencyEnumScr:
		return "SCR"
	case CurrencyEnumSll:
		return "SLL"
	case CurrencyEnumXag:
		return "XAG"
	case CurrencyEnumSgd:
		return "SGD"
	case CurrencyEnumSkk:
		return "SKK"
	case CurrencyEnumSit:
		return "SIT"
	case CurrencyEnumSbd:
		return "SBD"
	case CurrencyEnumSos:
		return "SOS"
	case CurrencyEnumZar:
		return "ZAR"
	case CurrencyEnumZal:
		return "ZAL"
	case CurrencyEnumKrh:
		return "KRH"
	case CurrencyEnumKrw:
		return "KRW"
	case CurrencyEnumKro:
		return "KRO"
	case CurrencyEnumSsp:
		return "SSP"
	case CurrencyEnumSur:
		return "SUR"
	case CurrencyEnumEsp:
		return "ESP"
	case CurrencyEnumEsa:
		return "ESA"
	case CurrencyEnumEsb:
		return "ESB"
	case CurrencyEnumXdr:
		return "XDR"
	case CurrencyEnumLkr:
		return "LKR"
	case CurrencyEnumShp:
		return "SHP"
	case CurrencyEnumXsu:
		return "XSU"
	case CurrencyEnumSdd:
		return "SDD"
	case CurrencyEnumSdg:
		return "SDG"
	case CurrencyEnumSdp:
		return "SDP"
	case CurrencyEnumSrd:
		return "SRD"
	case CurrencyEnumSrg:
		return "SRG"
	case CurrencyEnumSzl:
		return "SZL"
	case CurrencyEnumSek:
		return "SEK"
	case CurrencyEnumChf:
		return "CHF"
	case CurrencyEnumSyp:
		return "SYP"
	case CurrencyEnumStn:
		return "STN"
	case CurrencyEnumStd:
		return "STD"
	case CurrencyEnumTvd:
		return "TVD"
	case CurrencyEnumTjr:
		return "TJR"
	case CurrencyEnumTjs:
		return "TJS"
	case CurrencyEnumTzs:
		return "TZS"
	case CurrencyEnumXts:
		return "XTS"
	case CurrencyEnumThb:
		return "THB"
	case CurrencyEnumXxx:
		return "XXX"
	case CurrencyEnumTpe:
		return "TPE"
	case CurrencyEnumTop:
		return "TOP"
	case CurrencyEnumTtd:
		return "TTD"
	case CurrencyEnumTnd:
		return "TND"
	case CurrencyEnumTry:
		return "TRY"
	case CurrencyEnumTrl:
		return "TRL"
	case CurrencyEnumTmt:
		return "TMT"
	case CurrencyEnumTmm:
		return "TMM"
	case CurrencyEnumUsd:
		return "USD"
	case CurrencyEnumUsn:
		return "USN"
	case CurrencyEnumUss:
		return "USS"
	case CurrencyEnumUgx:
		return "UGX"
	case CurrencyEnumUgs:
		return "UGS"
	case CurrencyEnumUah:
		return "UAH"
	case CurrencyEnumUak:
		return "UAK"
	case CurrencyEnumAed:
		return "AED"
	case CurrencyEnumUyw:
		return "UYW"
	case CurrencyEnumUyu:
		return "UYU"
	case CurrencyEnumUyp:
		return "UYP"
	case CurrencyEnumUyi:
		return "UYI"
	case CurrencyEnumUzs:
		return "UZS"
	case CurrencyEnumVuv:
		return "VUV"
	case CurrencyEnumVes:
		return "VES"
	case CurrencyEnumVeb:
		return "VEB"
	case CurrencyEnumVef:
		return "VEF"
	case CurrencyEnumVnd:
		return "VND"
	case CurrencyEnumVnn:
		return "VNN"
	case CurrencyEnumChe:
		return "CHE"
	case CurrencyEnumChw:
		return "CHW"
	case CurrencyEnumXof:
		return "XOF"
	case CurrencyEnumYdd:
		return "YDD"
	case CurrencyEnumYer:
		return "YER"
	case CurrencyEnumYun:
		return "YUN"
	case CurrencyEnumYud:
		return "YUD"
	case CurrencyEnumYum:
		return "YUM"
	case CurrencyEnumYur:
		return "YUR"
	case CurrencyEnumZwn:
		return "ZWN"
	case CurrencyEnumZrn:
		return "ZRN"
	case CurrencyEnumZrz:
		return "ZRZ"
	case CurrencyEnumZmw:
		return "ZMW"
	case CurrencyEnumZmk:
		return "ZMK"
	case CurrencyEnumZwd:
		return "ZWD"
	case CurrencyEnumZwr:
		return "ZWR"
	case CurrencyEnumZwl:
		return "ZWL"
	}
}

func (c CurrencyEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", c.String())), nil
}

func (c *CurrencyEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "XUA":
		value := CurrencyEnumXua
		*c = value
	case "AFN":
		value := CurrencyEnumAfn
		*c = value
	case "AFA":
		value := CurrencyEnumAfa
		*c = value
	case "ALL":
		value := CurrencyEnumAll
		*c = value
	case "ALK":
		value := CurrencyEnumAlk
		*c = value
	case "DZD":
		value := CurrencyEnumDzd
		*c = value
	case "ADP":
		value := CurrencyEnumAdp
		*c = value
	case "AOA":
		value := CurrencyEnumAoa
		*c = value
	case "AOK":
		value := CurrencyEnumAok
		*c = value
	case "AON":
		value := CurrencyEnumAon
		*c = value
	case "AOR":
		value := CurrencyEnumAor
		*c = value
	case "ARA":
		value := CurrencyEnumAra
		*c = value
	case "ARS":
		value := CurrencyEnumArs
		*c = value
	case "ARM":
		value := CurrencyEnumArm
		*c = value
	case "ARP":
		value := CurrencyEnumArp
		*c = value
	case "ARL":
		value := CurrencyEnumArl
		*c = value
	case "AMD":
		value := CurrencyEnumAmd
		*c = value
	case "AWG":
		value := CurrencyEnumAwg
		*c = value
	case "AUD":
		value := CurrencyEnumAud
		*c = value
	case "ATS":
		value := CurrencyEnumAts
		*c = value
	case "AZN":
		value := CurrencyEnumAzn
		*c = value
	case "AZM":
		value := CurrencyEnumAzm
		*c = value
	case "BSD":
		value := CurrencyEnumBsd
		*c = value
	case "BHD":
		value := CurrencyEnumBhd
		*c = value
	case "BDT":
		value := CurrencyEnumBdt
		*c = value
	case "BBD":
		value := CurrencyEnumBbd
		*c = value
	case "BYN":
		value := CurrencyEnumByn
		*c = value
	case "BYB":
		value := CurrencyEnumByb
		*c = value
	case "BYR":
		value := CurrencyEnumByr
		*c = value
	case "BEF":
		value := CurrencyEnumBef
		*c = value
	case "BEC":
		value := CurrencyEnumBec
		*c = value
	case "BEL":
		value := CurrencyEnumBel
		*c = value
	case "BZD":
		value := CurrencyEnumBzd
		*c = value
	case "BMD":
		value := CurrencyEnumBmd
		*c = value
	case "BTN":
		value := CurrencyEnumBtn
		*c = value
	case "BOB":
		value := CurrencyEnumBob
		*c = value
	case "BOL":
		value := CurrencyEnumBol
		*c = value
	case "BOV":
		value := CurrencyEnumBov
		*c = value
	case "BOP":
		value := CurrencyEnumBop
		*c = value
	case "BAM":
		value := CurrencyEnumBam
		*c = value
	case "BAD":
		value := CurrencyEnumBad
		*c = value
	case "BAN":
		value := CurrencyEnumBan
		*c = value
	case "BWP":
		value := CurrencyEnumBwp
		*c = value
	case "BRC":
		value := CurrencyEnumBrc
		*c = value
	case "BRZ":
		value := CurrencyEnumBrz
		*c = value
	case "BRE":
		value := CurrencyEnumBre
		*c = value
	case "BRR":
		value := CurrencyEnumBrr
		*c = value
	case "BRN":
		value := CurrencyEnumBrn
		*c = value
	case "BRB":
		value := CurrencyEnumBrb
		*c = value
	case "BRL":
		value := CurrencyEnumBrl
		*c = value
	case "GBP":
		value := CurrencyEnumGbp
		*c = value
	case "BND":
		value := CurrencyEnumBnd
		*c = value
	case "BGL":
		value := CurrencyEnumBgl
		*c = value
	case "BGN":
		value := CurrencyEnumBgn
		*c = value
	case "BGO":
		value := CurrencyEnumBgo
		*c = value
	case "BGM":
		value := CurrencyEnumBgm
		*c = value
	case "BUK":
		value := CurrencyEnumBuk
		*c = value
	case "BIF":
		value := CurrencyEnumBif
		*c = value
	case "XPF":
		value := CurrencyEnumXpf
		*c = value
	case "KHR":
		value := CurrencyEnumKhr
		*c = value
	case "CAD":
		value := CurrencyEnumCad
		*c = value
	case "CVE":
		value := CurrencyEnumCve
		*c = value
	case "KYD":
		value := CurrencyEnumKyd
		*c = value
	case "XAF":
		value := CurrencyEnumXaf
		*c = value
	case "CLE":
		value := CurrencyEnumCle
		*c = value
	case "CLP":
		value := CurrencyEnumClp
		*c = value
	case "CLF":
		value := CurrencyEnumClf
		*c = value
	case "CNX":
		value := CurrencyEnumCnx
		*c = value
	case "CNY":
		value := CurrencyEnumCny
		*c = value
	case "CNH":
		value := CurrencyEnumCnh
		*c = value
	case "COP":
		value := CurrencyEnumCop
		*c = value
	case "COU":
		value := CurrencyEnumCou
		*c = value
	case "KMF":
		value := CurrencyEnumKmf
		*c = value
	case "CDF":
		value := CurrencyEnumCdf
		*c = value
	case "CRC":
		value := CurrencyEnumCrc
		*c = value
	case "HRD":
		value := CurrencyEnumHrd
		*c = value
	case "HRK":
		value := CurrencyEnumHrk
		*c = value
	case "CUC":
		value := CurrencyEnumCuc
		*c = value
	case "CUP":
		value := CurrencyEnumCup
		*c = value
	case "CYP":
		value := CurrencyEnumCyp
		*c = value
	case "CZK":
		value := CurrencyEnumCzk
		*c = value
	case "CSK":
		value := CurrencyEnumCsk
		*c = value
	case "DKK":
		value := CurrencyEnumDkk
		*c = value
	case "DJF":
		value := CurrencyEnumDjf
		*c = value
	case "DOP":
		value := CurrencyEnumDop
		*c = value
	case "NLG":
		value := CurrencyEnumNlg
		*c = value
	case "XCD":
		value := CurrencyEnumXcd
		*c = value
	case "DDM":
		value := CurrencyEnumDdm
		*c = value
	case "ECS":
		value := CurrencyEnumEcs
		*c = value
	case "ECV":
		value := CurrencyEnumEcv
		*c = value
	case "EGP":
		value := CurrencyEnumEgp
		*c = value
	case "GQE":
		value := CurrencyEnumGqe
		*c = value
	case "ERN":
		value := CurrencyEnumErn
		*c = value
	case "EEK":
		value := CurrencyEnumEek
		*c = value
	case "ETB":
		value := CurrencyEnumEtb
		*c = value
	case "EUR":
		value := CurrencyEnumEur
		*c = value
	case "XBA":
		value := CurrencyEnumXba
		*c = value
	case "XEU":
		value := CurrencyEnumXeu
		*c = value
	case "XBB":
		value := CurrencyEnumXbb
		*c = value
	case "XBC":
		value := CurrencyEnumXbc
		*c = value
	case "XBD":
		value := CurrencyEnumXbd
		*c = value
	case "FKP":
		value := CurrencyEnumFkp
		*c = value
	case "FJD":
		value := CurrencyEnumFjd
		*c = value
	case "FIM":
		value := CurrencyEnumFim
		*c = value
	case "FRF":
		value := CurrencyEnumFrf
		*c = value
	case "XFO":
		value := CurrencyEnumXfo
		*c = value
	case "XFU":
		value := CurrencyEnumXfu
		*c = value
	case "GMD":
		value := CurrencyEnumGmd
		*c = value
	case "GEK":
		value := CurrencyEnumGek
		*c = value
	case "GEL":
		value := CurrencyEnumGel
		*c = value
	case "DEM":
		value := CurrencyEnumDem
		*c = value
	case "GHS":
		value := CurrencyEnumGhs
		*c = value
	case "GHC":
		value := CurrencyEnumGhc
		*c = value
	case "GIP":
		value := CurrencyEnumGip
		*c = value
	case "XAU":
		value := CurrencyEnumXau
		*c = value
	case "GRD":
		value := CurrencyEnumGrd
		*c = value
	case "GTQ":
		value := CurrencyEnumGtq
		*c = value
	case "GWP":
		value := CurrencyEnumGwp
		*c = value
	case "GNF":
		value := CurrencyEnumGnf
		*c = value
	case "GNS":
		value := CurrencyEnumGns
		*c = value
	case "GYD":
		value := CurrencyEnumGyd
		*c = value
	case "HTG":
		value := CurrencyEnumHtg
		*c = value
	case "HNL":
		value := CurrencyEnumHnl
		*c = value
	case "HKD":
		value := CurrencyEnumHkd
		*c = value
	case "HUF":
		value := CurrencyEnumHuf
		*c = value
	case "IMP":
		value := CurrencyEnumImp
		*c = value
	case "ISK":
		value := CurrencyEnumIsk
		*c = value
	case "ISJ":
		value := CurrencyEnumIsj
		*c = value
	case "INR":
		value := CurrencyEnumInr
		*c = value
	case "IDR":
		value := CurrencyEnumIdr
		*c = value
	case "IRR":
		value := CurrencyEnumIrr
		*c = value
	case "IQD":
		value := CurrencyEnumIqd
		*c = value
	case "IEP":
		value := CurrencyEnumIep
		*c = value
	case "ILS":
		value := CurrencyEnumIls
		*c = value
	case "ILP":
		value := CurrencyEnumIlp
		*c = value
	case "ILR":
		value := CurrencyEnumIlr
		*c = value
	case "ITL":
		value := CurrencyEnumItl
		*c = value
	case "JMD":
		value := CurrencyEnumJmd
		*c = value
	case "JPY":
		value := CurrencyEnumJpy
		*c = value
	case "JOD":
		value := CurrencyEnumJod
		*c = value
	case "KZT":
		value := CurrencyEnumKzt
		*c = value
	case "KES":
		value := CurrencyEnumKes
		*c = value
	case "KWD":
		value := CurrencyEnumKwd
		*c = value
	case "KGS":
		value := CurrencyEnumKgs
		*c = value
	case "LAK":
		value := CurrencyEnumLak
		*c = value
	case "LVL":
		value := CurrencyEnumLvl
		*c = value
	case "LVR":
		value := CurrencyEnumLvr
		*c = value
	case "LBP":
		value := CurrencyEnumLbp
		*c = value
	case "LSL":
		value := CurrencyEnumLsl
		*c = value
	case "LRD":
		value := CurrencyEnumLrd
		*c = value
	case "LYD":
		value := CurrencyEnumLyd
		*c = value
	case "LTL":
		value := CurrencyEnumLtl
		*c = value
	case "LTT":
		value := CurrencyEnumLtt
		*c = value
	case "LUL":
		value := CurrencyEnumLul
		*c = value
	case "LUC":
		value := CurrencyEnumLuc
		*c = value
	case "LUF":
		value := CurrencyEnumLuf
		*c = value
	case "MOP":
		value := CurrencyEnumMop
		*c = value
	case "MKD":
		value := CurrencyEnumMkd
		*c = value
	case "MKN":
		value := CurrencyEnumMkn
		*c = value
	case "MGA":
		value := CurrencyEnumMga
		*c = value
	case "MGF":
		value := CurrencyEnumMgf
		*c = value
	case "MWK":
		value := CurrencyEnumMwk
		*c = value
	case "MYR":
		value := CurrencyEnumMyr
		*c = value
	case "MVR":
		value := CurrencyEnumMvr
		*c = value
	case "MVP":
		value := CurrencyEnumMvp
		*c = value
	case "MLF":
		value := CurrencyEnumMlf
		*c = value
	case "MTL":
		value := CurrencyEnumMtl
		*c = value
	case "MTP":
		value := CurrencyEnumMtp
		*c = value
	case "MRU":
		value := CurrencyEnumMru
		*c = value
	case "MRO":
		value := CurrencyEnumMro
		*c = value
	case "MUR":
		value := CurrencyEnumMur
		*c = value
	case "MXV":
		value := CurrencyEnumMxv
		*c = value
	case "MXN":
		value := CurrencyEnumMxn
		*c = value
	case "MXP":
		value := CurrencyEnumMxp
		*c = value
	case "MDC":
		value := CurrencyEnumMdc
		*c = value
	case "MDL":
		value := CurrencyEnumMdl
		*c = value
	case "MCF":
		value := CurrencyEnumMcf
		*c = value
	case "MNT":
		value := CurrencyEnumMnt
		*c = value
	case "MAD":
		value := CurrencyEnumMad
		*c = value
	case "MAF":
		value := CurrencyEnumMaf
		*c = value
	case "MZE":
		value := CurrencyEnumMze
		*c = value
	case "MZN":
		value := CurrencyEnumMzn
		*c = value
	case "MZM":
		value := CurrencyEnumMzm
		*c = value
	case "MMK":
		value := CurrencyEnumMmk
		*c = value
	case "NAD":
		value := CurrencyEnumNad
		*c = value
	case "NPR":
		value := CurrencyEnumNpr
		*c = value
	case "ANG":
		value := CurrencyEnumAng
		*c = value
	case "TWD":
		value := CurrencyEnumTwd
		*c = value
	case "NZD":
		value := CurrencyEnumNzd
		*c = value
	case "NIO":
		value := CurrencyEnumNio
		*c = value
	case "NIC":
		value := CurrencyEnumNic
		*c = value
	case "NGN":
		value := CurrencyEnumNgn
		*c = value
	case "KPW":
		value := CurrencyEnumKpw
		*c = value
	case "NOK":
		value := CurrencyEnumNok
		*c = value
	case "OMR":
		value := CurrencyEnumOmr
		*c = value
	case "PKR":
		value := CurrencyEnumPkr
		*c = value
	case "XPD":
		value := CurrencyEnumXpd
		*c = value
	case "PAB":
		value := CurrencyEnumPab
		*c = value
	case "PGK":
		value := CurrencyEnumPgk
		*c = value
	case "PYG":
		value := CurrencyEnumPyg
		*c = value
	case "PEI":
		value := CurrencyEnumPei
		*c = value
	case "PEN":
		value := CurrencyEnumPen
		*c = value
	case "PES":
		value := CurrencyEnumPes
		*c = value
	case "PHP":
		value := CurrencyEnumPhp
		*c = value
	case "XPT":
		value := CurrencyEnumXpt
		*c = value
	case "PLN":
		value := CurrencyEnumPln
		*c = value
	case "PLZ":
		value := CurrencyEnumPlz
		*c = value
	case "PTE":
		value := CurrencyEnumPte
		*c = value
	case "GWE":
		value := CurrencyEnumGwe
		*c = value
	case "QAR":
		value := CurrencyEnumQar
		*c = value
	case "XRE":
		value := CurrencyEnumXre
		*c = value
	case "RHD":
		value := CurrencyEnumRhd
		*c = value
	case "RON":
		value := CurrencyEnumRon
		*c = value
	case "ROL":
		value := CurrencyEnumRol
		*c = value
	case "RUB":
		value := CurrencyEnumRub
		*c = value
	case "RUR":
		value := CurrencyEnumRur
		*c = value
	case "RWF":
		value := CurrencyEnumRwf
		*c = value
	case "SVC":
		value := CurrencyEnumSvc
		*c = value
	case "WST":
		value := CurrencyEnumWst
		*c = value
	case "SAR":
		value := CurrencyEnumSar
		*c = value
	case "RSD":
		value := CurrencyEnumRsd
		*c = value
	case "CSD":
		value := CurrencyEnumCsd
		*c = value
	case "SCR":
		value := CurrencyEnumScr
		*c = value
	case "SLL":
		value := CurrencyEnumSll
		*c = value
	case "XAG":
		value := CurrencyEnumXag
		*c = value
	case "SGD":
		value := CurrencyEnumSgd
		*c = value
	case "SKK":
		value := CurrencyEnumSkk
		*c = value
	case "SIT":
		value := CurrencyEnumSit
		*c = value
	case "SBD":
		value := CurrencyEnumSbd
		*c = value
	case "SOS":
		value := CurrencyEnumSos
		*c = value
	case "ZAR":
		value := CurrencyEnumZar
		*c = value
	case "ZAL":
		value := CurrencyEnumZal
		*c = value
	case "KRH":
		value := CurrencyEnumKrh
		*c = value
	case "KRW":
		value := CurrencyEnumKrw
		*c = value
	case "KRO":
		value := CurrencyEnumKro
		*c = value
	case "SSP":
		value := CurrencyEnumSsp
		*c = value
	case "SUR":
		value := CurrencyEnumSur
		*c = value
	case "ESP":
		value := CurrencyEnumEsp
		*c = value
	case "ESA":
		value := CurrencyEnumEsa
		*c = value
	case "ESB":
		value := CurrencyEnumEsb
		*c = value
	case "XDR":
		value := CurrencyEnumXdr
		*c = value
	case "LKR":
		value := CurrencyEnumLkr
		*c = value
	case "SHP":
		value := CurrencyEnumShp
		*c = value
	case "XSU":
		value := CurrencyEnumXsu
		*c = value
	case "SDD":
		value := CurrencyEnumSdd
		*c = value
	case "SDG":
		value := CurrencyEnumSdg
		*c = value
	case "SDP":
		value := CurrencyEnumSdp
		*c = value
	case "SRD":
		value := CurrencyEnumSrd
		*c = value
	case "SRG":
		value := CurrencyEnumSrg
		*c = value
	case "SZL":
		value := CurrencyEnumSzl
		*c = value
	case "SEK":
		value := CurrencyEnumSek
		*c = value
	case "CHF":
		value := CurrencyEnumChf
		*c = value
	case "SYP":
		value := CurrencyEnumSyp
		*c = value
	case "STN":
		value := CurrencyEnumStn
		*c = value
	case "STD":
		value := CurrencyEnumStd
		*c = value
	case "TVD":
		value := CurrencyEnumTvd
		*c = value
	case "TJR":
		value := CurrencyEnumTjr
		*c = value
	case "TJS":
		value := CurrencyEnumTjs
		*c = value
	case "TZS":
		value := CurrencyEnumTzs
		*c = value
	case "XTS":
		value := CurrencyEnumXts
		*c = value
	case "THB":
		value := CurrencyEnumThb
		*c = value
	case "XXX":
		value := CurrencyEnumXxx
		*c = value
	case "TPE":
		value := CurrencyEnumTpe
		*c = value
	case "TOP":
		value := CurrencyEnumTop
		*c = value
	case "TTD":
		value := CurrencyEnumTtd
		*c = value
	case "TND":
		value := CurrencyEnumTnd
		*c = value
	case "TRY":
		value := CurrencyEnumTry
		*c = value
	case "TRL":
		value := CurrencyEnumTrl
		*c = value
	case "TMT":
		value := CurrencyEnumTmt
		*c = value
	case "TMM":
		value := CurrencyEnumTmm
		*c = value
	case "USD":
		value := CurrencyEnumUsd
		*c = value
	case "USN":
		value := CurrencyEnumUsn
		*c = value
	case "USS":
		value := CurrencyEnumUss
		*c = value
	case "UGX":
		value := CurrencyEnumUgx
		*c = value
	case "UGS":
		value := CurrencyEnumUgs
		*c = value
	case "UAH":
		value := CurrencyEnumUah
		*c = value
	case "UAK":
		value := CurrencyEnumUak
		*c = value
	case "AED":
		value := CurrencyEnumAed
		*c = value
	case "UYW":
		value := CurrencyEnumUyw
		*c = value
	case "UYU":
		value := CurrencyEnumUyu
		*c = value
	case "UYP":
		value := CurrencyEnumUyp
		*c = value
	case "UYI":
		value := CurrencyEnumUyi
		*c = value
	case "UZS":
		value := CurrencyEnumUzs
		*c = value
	case "VUV":
		value := CurrencyEnumVuv
		*c = value
	case "VES":
		value := CurrencyEnumVes
		*c = value
	case "VEB":
		value := CurrencyEnumVeb
		*c = value
	case "VEF":
		value := CurrencyEnumVef
		*c = value
	case "VND":
		value := CurrencyEnumVnd
		*c = value
	case "VNN":
		value := CurrencyEnumVnn
		*c = value
	case "CHE":
		value := CurrencyEnumChe
		*c = value
	case "CHW":
		value := CurrencyEnumChw
		*c = value
	case "XOF":
		value := CurrencyEnumXof
		*c = value
	case "YDD":
		value := CurrencyEnumYdd
		*c = value
	case "YER":
		value := CurrencyEnumYer
		*c = value
	case "YUN":
		value := CurrencyEnumYun
		*c = value
	case "YUD":
		value := CurrencyEnumYud
		*c = value
	case "YUM":
		value := CurrencyEnumYum
		*c = value
	case "YUR":
		value := CurrencyEnumYur
		*c = value
	case "ZWN":
		value := CurrencyEnumZwn
		*c = value
	case "ZRN":
		value := CurrencyEnumZrn
		*c = value
	case "ZRZ":
		value := CurrencyEnumZrz
		*c = value
	case "ZMW":
		value := CurrencyEnumZmw
		*c = value
	case "ZMK":
		value := CurrencyEnumZmk
		*c = value
	case "ZWD":
		value := CurrencyEnumZwd
		*c = value
	case "ZWR":
		value := CurrencyEnumZwr
		*c = value
	case "ZWL":
		value := CurrencyEnumZwl
		*c = value
	}
	return nil
}

// # The DataPassthrough Object
// ### Description
// The `DataPassthrough` object is used to send information to an otherwise-unsupported third-party endpoint.
//
// ### Usage Example
// Create a `DataPassthrough` to get team hierarchies from your Rippling integration.
type DataPassthroughRequest struct {
	Method          MethodEnum `json:"method,omitempty"`
	Path            string     `json:"path"`
	BaseUrlOverride *string    `json:"base_url_override,omitempty"`
	Data            *string    `json:"data,omitempty"`
	// Pass an array of `MultipartFormField` objects in here instead of using the `data` param if `request_format` is set to `MULTIPART`.
	MultipartFormData []*MultipartFormFieldRequest `json:"multipart_form_data,omitempty"`
	// The headers to use for the request (Merge will handle the account's authorization headers). `Content-Type` header is required for passthrough. Choose content type corresponding to expected format of receiving server.
	Headers       map[string]any     `json:"headers,omitempty"`
	RequestFormat *RequestFormatEnum `json:"request_format,omitempty"`
	// Optional. If true, the response will always be an object of the form `{"type": T, "value": ...}` where `T` will be one of `string, boolean, number, null, array, object`.
	NormalizeResponse *bool `json:"normalize_response,omitempty"`
}

type DebugModeLog struct {
	LogId         string                `json:"log_id"`
	DashboardView string                `json:"dashboard_view"`
	LogSummary    *DebugModelLogSummary `json:"log_summary,omitempty"`
}

type DebugModelLogSummary struct {
	Url        string `json:"url"`
	Method     string `json:"method"`
	StatusCode int    `json:"status_code"`
}

// * `READ` - READ
// * `WRITE` - WRITE
type EnabledActionsEnum uint

const (
	EnabledActionsEnumRead EnabledActionsEnum = iota + 1
	EnabledActionsEnumWrite
)

func (e EnabledActionsEnum) String() string {
	switch e {
	default:
		return strconv.Itoa(int(e))
	case EnabledActionsEnumRead:
		return "READ"
	case EnabledActionsEnumWrite:
		return "WRITE"
	}
}

func (e EnabledActionsEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", e.String())), nil
}

func (e *EnabledActionsEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "READ":
		value := EnabledActionsEnumRead
		*e = value
	case "WRITE":
		value := EnabledActionsEnumWrite
		*e = value
	}
	return nil
}

// * `RAW` - RAW
// * `BASE64` - BASE64
// * `GZIP_BASE64` - GZIP_BASE64
type EncodingEnum uint

const (
	EncodingEnumRaw EncodingEnum = iota + 1
	EncodingEnumBase64
	EncodingEnumGzipBase64
)

func (e EncodingEnum) String() string {
	switch e {
	default:
		return strconv.Itoa(int(e))
	case EncodingEnumRaw:
		return "RAW"
	case EncodingEnumBase64:
		return "BASE64"
	case EncodingEnumGzipBase64:
		return "GZIP_BASE64"
	}
}

func (e EncodingEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", e.String())), nil
}

func (e *EncodingEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "RAW":
		value := EncodingEnumRaw
		*e = value
	case "BASE64":
		value := EncodingEnumBase64
		*e = value
	case "GZIP_BASE64":
		value := EncodingEnumGzipBase64
		*e = value
	}
	return nil
}

type ErrorValidationProblem struct {
	Source      *ValidationProblemSource `json:"source,omitempty"`
	Title       string                   `json:"title"`
	Detail      string                   `json:"detail"`
	ProblemType string                   `json:"problem_type"`
}

// * `CREATED_REMOTE_PRODUCTION_API_KEY` - CREATED_REMOTE_PRODUCTION_API_KEY
// * `DELETED_REMOTE_PRODUCTION_API_KEY` - DELETED_REMOTE_PRODUCTION_API_KEY
// * `CREATED_TEST_API_KEY` - CREATED_TEST_API_KEY
// * `DELETED_TEST_API_KEY` - DELETED_TEST_API_KEY
// * `REGENERATED_PRODUCTION_API_KEY` - REGENERATED_PRODUCTION_API_KEY
// * `INVITED_USER` - INVITED_USER
// * `TWO_FACTOR_AUTH_ENABLED` - TWO_FACTOR_AUTH_ENABLED
// * `TWO_FACTOR_AUTH_DISABLED` - TWO_FACTOR_AUTH_DISABLED
// * `DELETED_LINKED_ACCOUNT` - DELETED_LINKED_ACCOUNT
// * `CREATED_DESTINATION` - CREATED_DESTINATION
// * `DELETED_DESTINATION` - DELETED_DESTINATION
// * `CHANGED_SCOPES` - CHANGED_SCOPES
// * `CHANGED_PERSONAL_INFORMATION` - CHANGED_PERSONAL_INFORMATION
// * `CHANGED_ORGANIZATION_SETTINGS` - CHANGED_ORGANIZATION_SETTINGS
// * `ENABLED_INTEGRATION` - ENABLED_INTEGRATION
// * `DISABLED_INTEGRATION` - DISABLED_INTEGRATION
// * `ENABLED_CATEGORY` - ENABLED_CATEGORY
// * `DISABLED_CATEGORY` - DISABLED_CATEGORY
// * `CHANGED_PASSWORD` - CHANGED_PASSWORD
// * `RESET_PASSWORD` - RESET_PASSWORD
// * `ENABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION` - ENABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION
// * `ENABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT` - ENABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT
// * `DISABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION` - DISABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION
// * `DISABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT` - DISABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT
// * `CREATED_INTEGRATION_WIDE_FIELD_MAPPING` - CREATED_INTEGRATION_WIDE_FIELD_MAPPING
// * `CREATED_LINKED_ACCOUNT_FIELD_MAPPING` - CREATED_LINKED_ACCOUNT_FIELD_MAPPING
// * `CHANGED_INTEGRATION_WIDE_FIELD_MAPPING` - CHANGED_INTEGRATION_WIDE_FIELD_MAPPING
// * `CHANGED_LINKED_ACCOUNT_FIELD_MAPPING` - CHANGED_LINKED_ACCOUNT_FIELD_MAPPING
// * `DELETED_INTEGRATION_WIDE_FIELD_MAPPING` - DELETED_INTEGRATION_WIDE_FIELD_MAPPING
// * `DELETED_LINKED_ACCOUNT_FIELD_MAPPING` - DELETED_LINKED_ACCOUNT_FIELD_MAPPING
type EventTypeEnum uint

const (
	EventTypeEnumCreatedRemoteProductionApiKey EventTypeEnum = iota + 1
	EventTypeEnumDeletedRemoteProductionApiKey
	EventTypeEnumCreatedTestApiKey
	EventTypeEnumDeletedTestApiKey
	EventTypeEnumRegeneratedProductionApiKey
	EventTypeEnumInvitedUser
	EventTypeEnumTwoFactorAuthEnabled
	EventTypeEnumTwoFactorAuthDisabled
	EventTypeEnumDeletedLinkedAccount
	EventTypeEnumCreatedDestination
	EventTypeEnumDeletedDestination
	EventTypeEnumChangedScopes
	EventTypeEnumChangedPersonalInformation
	EventTypeEnumChangedOrganizationSettings
	EventTypeEnumEnabledIntegration
	EventTypeEnumDisabledIntegration
	EventTypeEnumEnabledCategory
	EventTypeEnumDisabledCategory
	EventTypeEnumChangedPassword
	EventTypeEnumResetPassword
	EventTypeEnumEnabledRedactUnmappedDataForOrganization
	EventTypeEnumEnabledRedactUnmappedDataForLinkedAccount
	EventTypeEnumDisabledRedactUnmappedDataForOrganization
	EventTypeEnumDisabledRedactUnmappedDataForLinkedAccount
	EventTypeEnumCreatedIntegrationWideFieldMapping
	EventTypeEnumCreatedLinkedAccountFieldMapping
	EventTypeEnumChangedIntegrationWideFieldMapping
	EventTypeEnumChangedLinkedAccountFieldMapping
	EventTypeEnumDeletedIntegrationWideFieldMapping
	EventTypeEnumDeletedLinkedAccountFieldMapping
)

func (e EventTypeEnum) String() string {
	switch e {
	default:
		return strconv.Itoa(int(e))
	case EventTypeEnumCreatedRemoteProductionApiKey:
		return "CREATED_REMOTE_PRODUCTION_API_KEY"
	case EventTypeEnumDeletedRemoteProductionApiKey:
		return "DELETED_REMOTE_PRODUCTION_API_KEY"
	case EventTypeEnumCreatedTestApiKey:
		return "CREATED_TEST_API_KEY"
	case EventTypeEnumDeletedTestApiKey:
		return "DELETED_TEST_API_KEY"
	case EventTypeEnumRegeneratedProductionApiKey:
		return "REGENERATED_PRODUCTION_API_KEY"
	case EventTypeEnumInvitedUser:
		return "INVITED_USER"
	case EventTypeEnumTwoFactorAuthEnabled:
		return "TWO_FACTOR_AUTH_ENABLED"
	case EventTypeEnumTwoFactorAuthDisabled:
		return "TWO_FACTOR_AUTH_DISABLED"
	case EventTypeEnumDeletedLinkedAccount:
		return "DELETED_LINKED_ACCOUNT"
	case EventTypeEnumCreatedDestination:
		return "CREATED_DESTINATION"
	case EventTypeEnumDeletedDestination:
		return "DELETED_DESTINATION"
	case EventTypeEnumChangedScopes:
		return "CHANGED_SCOPES"
	case EventTypeEnumChangedPersonalInformation:
		return "CHANGED_PERSONAL_INFORMATION"
	case EventTypeEnumChangedOrganizationSettings:
		return "CHANGED_ORGANIZATION_SETTINGS"
	case EventTypeEnumEnabledIntegration:
		return "ENABLED_INTEGRATION"
	case EventTypeEnumDisabledIntegration:
		return "DISABLED_INTEGRATION"
	case EventTypeEnumEnabledCategory:
		return "ENABLED_CATEGORY"
	case EventTypeEnumDisabledCategory:
		return "DISABLED_CATEGORY"
	case EventTypeEnumChangedPassword:
		return "CHANGED_PASSWORD"
	case EventTypeEnumResetPassword:
		return "RESET_PASSWORD"
	case EventTypeEnumEnabledRedactUnmappedDataForOrganization:
		return "ENABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION"
	case EventTypeEnumEnabledRedactUnmappedDataForLinkedAccount:
		return "ENABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT"
	case EventTypeEnumDisabledRedactUnmappedDataForOrganization:
		return "DISABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION"
	case EventTypeEnumDisabledRedactUnmappedDataForLinkedAccount:
		return "DISABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT"
	case EventTypeEnumCreatedIntegrationWideFieldMapping:
		return "CREATED_INTEGRATION_WIDE_FIELD_MAPPING"
	case EventTypeEnumCreatedLinkedAccountFieldMapping:
		return "CREATED_LINKED_ACCOUNT_FIELD_MAPPING"
	case EventTypeEnumChangedIntegrationWideFieldMapping:
		return "CHANGED_INTEGRATION_WIDE_FIELD_MAPPING"
	case EventTypeEnumChangedLinkedAccountFieldMapping:
		return "CHANGED_LINKED_ACCOUNT_FIELD_MAPPING"
	case EventTypeEnumDeletedIntegrationWideFieldMapping:
		return "DELETED_INTEGRATION_WIDE_FIELD_MAPPING"
	case EventTypeEnumDeletedLinkedAccountFieldMapping:
		return "DELETED_LINKED_ACCOUNT_FIELD_MAPPING"
	}
}

func (e EventTypeEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", e.String())), nil
}

func (e *EventTypeEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "CREATED_REMOTE_PRODUCTION_API_KEY":
		value := EventTypeEnumCreatedRemoteProductionApiKey
		*e = value
	case "DELETED_REMOTE_PRODUCTION_API_KEY":
		value := EventTypeEnumDeletedRemoteProductionApiKey
		*e = value
	case "CREATED_TEST_API_KEY":
		value := EventTypeEnumCreatedTestApiKey
		*e = value
	case "DELETED_TEST_API_KEY":
		value := EventTypeEnumDeletedTestApiKey
		*e = value
	case "REGENERATED_PRODUCTION_API_KEY":
		value := EventTypeEnumRegeneratedProductionApiKey
		*e = value
	case "INVITED_USER":
		value := EventTypeEnumInvitedUser
		*e = value
	case "TWO_FACTOR_AUTH_ENABLED":
		value := EventTypeEnumTwoFactorAuthEnabled
		*e = value
	case "TWO_FACTOR_AUTH_DISABLED":
		value := EventTypeEnumTwoFactorAuthDisabled
		*e = value
	case "DELETED_LINKED_ACCOUNT":
		value := EventTypeEnumDeletedLinkedAccount
		*e = value
	case "CREATED_DESTINATION":
		value := EventTypeEnumCreatedDestination
		*e = value
	case "DELETED_DESTINATION":
		value := EventTypeEnumDeletedDestination
		*e = value
	case "CHANGED_SCOPES":
		value := EventTypeEnumChangedScopes
		*e = value
	case "CHANGED_PERSONAL_INFORMATION":
		value := EventTypeEnumChangedPersonalInformation
		*e = value
	case "CHANGED_ORGANIZATION_SETTINGS":
		value := EventTypeEnumChangedOrganizationSettings
		*e = value
	case "ENABLED_INTEGRATION":
		value := EventTypeEnumEnabledIntegration
		*e = value
	case "DISABLED_INTEGRATION":
		value := EventTypeEnumDisabledIntegration
		*e = value
	case "ENABLED_CATEGORY":
		value := EventTypeEnumEnabledCategory
		*e = value
	case "DISABLED_CATEGORY":
		value := EventTypeEnumDisabledCategory
		*e = value
	case "CHANGED_PASSWORD":
		value := EventTypeEnumChangedPassword
		*e = value
	case "RESET_PASSWORD":
		value := EventTypeEnumResetPassword
		*e = value
	case "ENABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION":
		value := EventTypeEnumEnabledRedactUnmappedDataForOrganization
		*e = value
	case "ENABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT":
		value := EventTypeEnumEnabledRedactUnmappedDataForLinkedAccount
		*e = value
	case "DISABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION":
		value := EventTypeEnumDisabledRedactUnmappedDataForOrganization
		*e = value
	case "DISABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT":
		value := EventTypeEnumDisabledRedactUnmappedDataForLinkedAccount
		*e = value
	case "CREATED_INTEGRATION_WIDE_FIELD_MAPPING":
		value := EventTypeEnumCreatedIntegrationWideFieldMapping
		*e = value
	case "CREATED_LINKED_ACCOUNT_FIELD_MAPPING":
		value := EventTypeEnumCreatedLinkedAccountFieldMapping
		*e = value
	case "CHANGED_INTEGRATION_WIDE_FIELD_MAPPING":
		value := EventTypeEnumChangedIntegrationWideFieldMapping
		*e = value
	case "CHANGED_LINKED_ACCOUNT_FIELD_MAPPING":
		value := EventTypeEnumChangedLinkedAccountFieldMapping
		*e = value
	case "DELETED_INTEGRATION_WIDE_FIELD_MAPPING":
		value := EventTypeEnumDeletedIntegrationWideFieldMapping
		*e = value
	case "DELETED_LINKED_ACCOUNT_FIELD_MAPPING":
		value := EventTypeEnumDeletedLinkedAccountFieldMapping
		*e = value
	}
	return nil
}

// # The Expense Object
// ### Description
// The `Expense` object is used to represent a direct purchase by a business, typically made with a check, credit card, or cash. Each `Expense` object is dedicated to a grouping of expenses, with each expense recorded in the lines object.
//
// The `Expense` object is used also used to represent refunds to direct purchases. Refunds can be distinguished from purchases by the amount sign of the records. Expense objects with a negative amount are purchases and `Expense` objects with a positive amount are refunds to those purchases.
//
// ### Usage Example
// Fetch from the `GET Expense` endpoint and view a company's expense.
type Expense struct {
	// When the transaction occurred.
	TransactionDate *time.Time `json:"transaction_date,omitempty"`
	// When the expense was created.
	RemoteCreatedAt *time.Time `json:"remote_created_at,omitempty"`
	// The expense's payment account.
	Account *ExpenseAccount `json:"account,omitempty"`
	// The expense's contact.
	Contact *ExpenseContact `json:"contact,omitempty"`
	// The expense's total amount.
	TotalAmount *float64 `json:"total_amount,omitempty"`
	// The expense's total amount before tax.
	SubTotal *float64 `json:"sub_total,omitempty"`
	// The expense's total tax amount.
	TotalTaxAmount *float64 `json:"total_tax_amount,omitempty"`
	// The expense's currency.
	//
	// * `XUA` - ADB Unit of Account
	// * `AFN` - Afghan Afghani
	// * `AFA` - Afghan Afghani (1927–2002)
	// * `ALL` - Albanian Lek
	// * `ALK` - Albanian Lek (1946–1965)
	// * `DZD` - Algerian Dinar
	// * `ADP` - Andorran Peseta
	// * `AOA` - Angolan Kwanza
	// * `AOK` - Angolan Kwanza (1977–1991)
	// * `AON` - Angolan New Kwanza (1990–2000)
	// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
	// * `ARA` - Argentine Austral
	// * `ARS` - Argentine Peso
	// * `ARM` - Argentine Peso (1881–1970)
	// * `ARP` - Argentine Peso (1983–1985)
	// * `ARL` - Argentine Peso Ley (1970–1983)
	// * `AMD` - Armenian Dram
	// * `AWG` - Aruban Florin
	// * `AUD` - Australian Dollar
	// * `ATS` - Austrian Schilling
	// * `AZN` - Azerbaijani Manat
	// * `AZM` - Azerbaijani Manat (1993–2006)
	// * `BSD` - Bahamian Dollar
	// * `BHD` - Bahraini Dinar
	// * `BDT` - Bangladeshi Taka
	// * `BBD` - Barbadian Dollar
	// * `BYN` - Belarusian Ruble
	// * `BYB` - Belarusian Ruble (1994–1999)
	// * `BYR` - Belarusian Ruble (2000–2016)
	// * `BEF` - Belgian Franc
	// * `BEC` - Belgian Franc (convertible)
	// * `BEL` - Belgian Franc (financial)
	// * `BZD` - Belize Dollar
	// * `BMD` - Bermudan Dollar
	// * `BTN` - Bhutanese Ngultrum
	// * `BOB` - Bolivian Boliviano
	// * `BOL` - Bolivian Boliviano (1863–1963)
	// * `BOV` - Bolivian Mvdol
	// * `BOP` - Bolivian Peso
	// * `BAM` - Bosnia-Herzegovina Convertible Mark
	// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
	// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
	// * `BWP` - Botswanan Pula
	// * `BRC` - Brazilian Cruzado (1986–1989)
	// * `BRZ` - Brazilian Cruzeiro (1942–1967)
	// * `BRE` - Brazilian Cruzeiro (1990–1993)
	// * `BRR` - Brazilian Cruzeiro (1993–1994)
	// * `BRN` - Brazilian New Cruzado (1989–1990)
	// * `BRB` - Brazilian New Cruzeiro (1967–1986)
	// * `BRL` - Brazilian Real
	// * `GBP` - British Pound
	// * `BND` - Brunei Dollar
	// * `BGL` - Bulgarian Hard Lev
	// * `BGN` - Bulgarian Lev
	// * `BGO` - Bulgarian Lev (1879–1952)
	// * `BGM` - Bulgarian Socialist Lev
	// * `BUK` - Burmese Kyat
	// * `BIF` - Burundian Franc
	// * `XPF` - CFP Franc
	// * `KHR` - Cambodian Riel
	// * `CAD` - Canadian Dollar
	// * `CVE` - Cape Verdean Escudo
	// * `KYD` - Cayman Islands Dollar
	// * `XAF` - Central African CFA Franc
	// * `CLE` - Chilean Escudo
	// * `CLP` - Chilean Peso
	// * `CLF` - Chilean Unit of Account (UF)
	// * `CNX` - Chinese People’s Bank Dollar
	// * `CNY` - Chinese Yuan
	// * `CNH` - Chinese Yuan (offshore)
	// * `COP` - Colombian Peso
	// * `COU` - Colombian Real Value Unit
	// * `KMF` - Comorian Franc
	// * `CDF` - Congolese Franc
	// * `CRC` - Costa Rican Colón
	// * `HRD` - Croatian Dinar
	// * `HRK` - Croatian Kuna
	// * `CUC` - Cuban Convertible Peso
	// * `CUP` - Cuban Peso
	// * `CYP` - Cypriot Pound
	// * `CZK` - Czech Koruna
	// * `CSK` - Czechoslovak Hard Koruna
	// * `DKK` - Danish Krone
	// * `DJF` - Djiboutian Franc
	// * `DOP` - Dominican Peso
	// * `NLG` - Dutch Guilder
	// * `XCD` - East Caribbean Dollar
	// * `DDM` - East German Mark
	// * `ECS` - Ecuadorian Sucre
	// * `ECV` - Ecuadorian Unit of Constant Value
	// * `EGP` - Egyptian Pound
	// * `GQE` - Equatorial Guinean Ekwele
	// * `ERN` - Eritrean Nakfa
	// * `EEK` - Estonian Kroon
	// * `ETB` - Ethiopian Birr
	// * `EUR` - Euro
	// * `XBA` - European Composite Unit
	// * `XEU` - European Currency Unit
	// * `XBB` - European Monetary Unit
	// * `XBC` - European Unit of Account (XBC)
	// * `XBD` - European Unit of Account (XBD)
	// * `FKP` - Falkland Islands Pound
	// * `FJD` - Fijian Dollar
	// * `FIM` - Finnish Markka
	// * `FRF` - French Franc
	// * `XFO` - French Gold Franc
	// * `XFU` - French UIC-Franc
	// * `GMD` - Gambian Dalasi
	// * `GEK` - Georgian Kupon Larit
	// * `GEL` - Georgian Lari
	// * `DEM` - German Mark
	// * `GHS` - Ghanaian Cedi
	// * `GHC` - Ghanaian Cedi (1979–2007)
	// * `GIP` - Gibraltar Pound
	// * `XAU` - Gold
	// * `GRD` - Greek Drachma
	// * `GTQ` - Guatemalan Quetzal
	// * `GWP` - Guinea-Bissau Peso
	// * `GNF` - Guinean Franc
	// * `GNS` - Guinean Syli
	// * `GYD` - Guyanaese Dollar
	// * `HTG` - Haitian Gourde
	// * `HNL` - Honduran Lempira
	// * `HKD` - Hong Kong Dollar
	// * `HUF` - Hungarian Forint
	// * `IMP` - IMP
	// * `ISK` - Icelandic Króna
	// * `ISJ` - Icelandic Króna (1918–1981)
	// * `INR` - Indian Rupee
	// * `IDR` - Indonesian Rupiah
	// * `IRR` - Iranian Rial
	// * `IQD` - Iraqi Dinar
	// * `IEP` - Irish Pound
	// * `ILS` - Israeli New Shekel
	// * `ILP` - Israeli Pound
	// * `ILR` - Israeli Shekel (1980–1985)
	// * `ITL` - Italian Lira
	// * `JMD` - Jamaican Dollar
	// * `JPY` - Japanese Yen
	// * `JOD` - Jordanian Dinar
	// * `KZT` - Kazakhstani Tenge
	// * `KES` - Kenyan Shilling
	// * `KWD` - Kuwaiti Dinar
	// * `KGS` - Kyrgystani Som
	// * `LAK` - Laotian Kip
	// * `LVL` - Latvian Lats
	// * `LVR` - Latvian Ruble
	// * `LBP` - Lebanese Pound
	// * `LSL` - Lesotho Loti
	// * `LRD` - Liberian Dollar
	// * `LYD` - Libyan Dinar
	// * `LTL` - Lithuanian Litas
	// * `LTT` - Lithuanian Talonas
	// * `LUL` - Luxembourg Financial Franc
	// * `LUC` - Luxembourgian Convertible Franc
	// * `LUF` - Luxembourgian Franc
	// * `MOP` - Macanese Pataca
	// * `MKD` - Macedonian Denar
	// * `MKN` - Macedonian Denar (1992–1993)
	// * `MGA` - Malagasy Ariary
	// * `MGF` - Malagasy Franc
	// * `MWK` - Malawian Kwacha
	// * `MYR` - Malaysian Ringgit
	// * `MVR` - Maldivian Rufiyaa
	// * `MVP` - Maldivian Rupee (1947–1981)
	// * `MLF` - Malian Franc
	// * `MTL` - Maltese Lira
	// * `MTP` - Maltese Pound
	// * `MRU` - Mauritanian Ouguiya
	// * `MRO` - Mauritanian Ouguiya (1973–2017)
	// * `MUR` - Mauritian Rupee
	// * `MXV` - Mexican Investment Unit
	// * `MXN` - Mexican Peso
	// * `MXP` - Mexican Silver Peso (1861–1992)
	// * `MDC` - Moldovan Cupon
	// * `MDL` - Moldovan Leu
	// * `MCF` - Monegasque Franc
	// * `MNT` - Mongolian Tugrik
	// * `MAD` - Moroccan Dirham
	// * `MAF` - Moroccan Franc
	// * `MZE` - Mozambican Escudo
	// * `MZN` - Mozambican Metical
	// * `MZM` - Mozambican Metical (1980–2006)
	// * `MMK` - Myanmar Kyat
	// * `NAD` - Namibian Dollar
	// * `NPR` - Nepalese Rupee
	// * `ANG` - Netherlands Antillean Guilder
	// * `TWD` - New Taiwan Dollar
	// * `NZD` - New Zealand Dollar
	// * `NIO` - Nicaraguan Córdoba
	// * `NIC` - Nicaraguan Córdoba (1988–1991)
	// * `NGN` - Nigerian Naira
	// * `KPW` - North Korean Won
	// * `NOK` - Norwegian Krone
	// * `OMR` - Omani Rial
	// * `PKR` - Pakistani Rupee
	// * `XPD` - Palladium
	// * `PAB` - Panamanian Balboa
	// * `PGK` - Papua New Guinean Kina
	// * `PYG` - Paraguayan Guarani
	// * `PEI` - Peruvian Inti
	// * `PEN` - Peruvian Sol
	// * `PES` - Peruvian Sol (1863–1965)
	// * `PHP` - Philippine Peso
	// * `XPT` - Platinum
	// * `PLN` - Polish Zloty
	// * `PLZ` - Polish Zloty (1950–1995)
	// * `PTE` - Portuguese Escudo
	// * `GWE` - Portuguese Guinea Escudo
	// * `QAR` - Qatari Rial
	// * `XRE` - RINET Funds
	// * `RHD` - Rhodesian Dollar
	// * `RON` - Romanian Leu
	// * `ROL` - Romanian Leu (1952–2006)
	// * `RUB` - Russian Ruble
	// * `RUR` - Russian Ruble (1991–1998)
	// * `RWF` - Rwandan Franc
	// * `SVC` - Salvadoran Colón
	// * `WST` - Samoan Tala
	// * `SAR` - Saudi Riyal
	// * `RSD` - Serbian Dinar
	// * `CSD` - Serbian Dinar (2002–2006)
	// * `SCR` - Seychellois Rupee
	// * `SLL` - Sierra Leonean Leone
	// * `XAG` - Silver
	// * `SGD` - Singapore Dollar
	// * `SKK` - Slovak Koruna
	// * `SIT` - Slovenian Tolar
	// * `SBD` - Solomon Islands Dollar
	// * `SOS` - Somali Shilling
	// * `ZAR` - South African Rand
	// * `ZAL` - South African Rand (financial)
	// * `KRH` - South Korean Hwan (1953–1962)
	// * `KRW` - South Korean Won
	// * `KRO` - South Korean Won (1945–1953)
	// * `SSP` - South Sudanese Pound
	// * `SUR` - Soviet Rouble
	// * `ESP` - Spanish Peseta
	// * `ESA` - Spanish Peseta (A account)
	// * `ESB` - Spanish Peseta (convertible account)
	// * `XDR` - Special Drawing Rights
	// * `LKR` - Sri Lankan Rupee
	// * `SHP` - St. Helena Pound
	// * `XSU` - Sucre
	// * `SDD` - Sudanese Dinar (1992–2007)
	// * `SDG` - Sudanese Pound
	// * `SDP` - Sudanese Pound (1957–1998)
	// * `SRD` - Surinamese Dollar
	// * `SRG` - Surinamese Guilder
	// * `SZL` - Swazi Lilangeni
	// * `SEK` - Swedish Krona
	// * `CHF` - Swiss Franc
	// * `SYP` - Syrian Pound
	// * `STN` - São Tomé & Príncipe Dobra
	// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
	// * `TVD` - TVD
	// * `TJR` - Tajikistani Ruble
	// * `TJS` - Tajikistani Somoni
	// * `TZS` - Tanzanian Shilling
	// * `XTS` - Testing Currency Code
	// * `THB` - Thai Baht
	// * `XXX` - The codes assigned for transactions where no currency is involved
	// * `TPE` - Timorese Escudo
	// * `TOP` - Tongan Paʻanga
	// * `TTD` - Trinidad & Tobago Dollar
	// * `TND` - Tunisian Dinar
	// * `TRY` - Turkish Lira
	// * `TRL` - Turkish Lira (1922–2005)
	// * `TMT` - Turkmenistani Manat
	// * `TMM` - Turkmenistani Manat (1993–2009)
	// * `USD` - US Dollar
	// * `USN` - US Dollar (Next day)
	// * `USS` - US Dollar (Same day)
	// * `UGX` - Ugandan Shilling
	// * `UGS` - Ugandan Shilling (1966–1987)
	// * `UAH` - Ukrainian Hryvnia
	// * `UAK` - Ukrainian Karbovanets
	// * `AED` - United Arab Emirates Dirham
	// * `UYW` - Uruguayan Nominal Wage Index Unit
	// * `UYU` - Uruguayan Peso
	// * `UYP` - Uruguayan Peso (1975–1993)
	// * `UYI` - Uruguayan Peso (Indexed Units)
	// * `UZS` - Uzbekistani Som
	// * `VUV` - Vanuatu Vatu
	// * `VES` - Venezuelan Bolívar
	// * `VEB` - Venezuelan Bolívar (1871–2008)
	// * `VEF` - Venezuelan Bolívar (2008–2018)
	// * `VND` - Vietnamese Dong
	// * `VNN` - Vietnamese Dong (1978–1985)
	// * `CHE` - WIR Euro
	// * `CHW` - WIR Franc
	// * `XOF` - West African CFA Franc
	// * `YDD` - Yemeni Dinar
	// * `YER` - Yemeni Rial
	// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
	// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
	// * `YUM` - Yugoslavian New Dinar (1994–2002)
	// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
	// * `ZWN` - ZWN
	// * `ZRN` - Zairean New Zaire (1993–1998)
	// * `ZRZ` - Zairean Zaire (1971–1993)
	// * `ZMW` - Zambian Kwacha
	// * `ZMK` - Zambian Kwacha (1968–2012)
	// * `ZWD` - Zimbabwean Dollar (1980–2008)
	// * `ZWR` - Zimbabwean Dollar (2008)
	// * `ZWL` - Zimbabwean Dollar (2009)
	Currency *ExpenseCurrency `json:"currency,omitempty"`
	// The expense's exchange rate.
	ExchangeRate *string `json:"exchange_rate,omitempty"`
	// The company the expense belongs to.
	Company *ExpenseCompany `json:"company,omitempty"`
	// The expense's private note.
	Memo               *string                          `json:"memo,omitempty"`
	Lines              []*ExpenseLine                   `json:"lines,omitempty"`
	TrackingCategories []*ExpenseTrackingCategoriesItem `json:"tracking_categories,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted *bool `json:"remote_was_deleted,omitempty"`
	// The accounting period that the Expense was generated in.
	AccountingPeriod *ExpenseAccountingPeriod `json:"accounting_period,omitempty"`
	Id               *string                  `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId  *string    `json:"remote_id,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt    *time.Time     `json:"modified_at,omitempty"`
	FieldMappings map[string]any `json:"field_mappings,omitempty"`
	RemoteData    []*RemoteData  `json:"remote_data,omitempty"`
}

// The expense's payment account.
type ExpenseAccount struct {
	typeName string
	String   string
	Account  *Account
}

func NewExpenseAccountFromString(value string) *ExpenseAccount {
	return &ExpenseAccount{typeName: "string", String: value}
}

func NewExpenseAccountFromAccount(value *Account) *ExpenseAccount {
	return &ExpenseAccount{typeName: "account", Account: value}
}

func (e *ExpenseAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		e.typeName = "account"
		e.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e ExpenseAccount) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return json.Marshal(e.String)
	case "account":
		return json.Marshal(e.Account)
	}
}

type ExpenseAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (e *ExpenseAccount) Accept(visitor ExpenseAccountVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return visitor.VisitString(e.String)
	case "account":
		return visitor.VisitAccount(e.Account)
	}
}

// The accounting period that the Expense was generated in.
type ExpenseAccountingPeriod struct {
	typeName         string
	String           string
	AccountingPeriod *AccountingPeriod
}

func NewExpenseAccountingPeriodFromString(value string) *ExpenseAccountingPeriod {
	return &ExpenseAccountingPeriod{typeName: "string", String: value}
}

func NewExpenseAccountingPeriodFromAccountingPeriod(value *AccountingPeriod) *ExpenseAccountingPeriod {
	return &ExpenseAccountingPeriod{typeName: "accountingPeriod", AccountingPeriod: value}
}

func (e *ExpenseAccountingPeriod) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	valueAccountingPeriod := new(AccountingPeriod)
	if err := json.Unmarshal(data, &valueAccountingPeriod); err == nil {
		e.typeName = "accountingPeriod"
		e.AccountingPeriod = valueAccountingPeriod
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e ExpenseAccountingPeriod) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return json.Marshal(e.String)
	case "accountingPeriod":
		return json.Marshal(e.AccountingPeriod)
	}
}

type ExpenseAccountingPeriodVisitor interface {
	VisitString(string) error
	VisitAccountingPeriod(*AccountingPeriod) error
}

func (e *ExpenseAccountingPeriod) Accept(visitor ExpenseAccountingPeriodVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return visitor.VisitString(e.String)
	case "accountingPeriod":
		return visitor.VisitAccountingPeriod(e.AccountingPeriod)
	}
}

// The company the expense belongs to.
type ExpenseCompany struct {
	typeName    string
	String      string
	CompanyInfo *CompanyInfo
}

func NewExpenseCompanyFromString(value string) *ExpenseCompany {
	return &ExpenseCompany{typeName: "string", String: value}
}

func NewExpenseCompanyFromCompanyInfo(value *CompanyInfo) *ExpenseCompany {
	return &ExpenseCompany{typeName: "companyInfo", CompanyInfo: value}
}

func (e *ExpenseCompany) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	valueCompanyInfo := new(CompanyInfo)
	if err := json.Unmarshal(data, &valueCompanyInfo); err == nil {
		e.typeName = "companyInfo"
		e.CompanyInfo = valueCompanyInfo
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e ExpenseCompany) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return json.Marshal(e.String)
	case "companyInfo":
		return json.Marshal(e.CompanyInfo)
	}
}

type ExpenseCompanyVisitor interface {
	VisitString(string) error
	VisitCompanyInfo(*CompanyInfo) error
}

func (e *ExpenseCompany) Accept(visitor ExpenseCompanyVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return visitor.VisitString(e.String)
	case "companyInfo":
		return visitor.VisitCompanyInfo(e.CompanyInfo)
	}
}

// The expense's contact.
type ExpenseContact struct {
	typeName string
	String   string
	Contact  *Contact
}

func NewExpenseContactFromString(value string) *ExpenseContact {
	return &ExpenseContact{typeName: "string", String: value}
}

func NewExpenseContactFromContact(value *Contact) *ExpenseContact {
	return &ExpenseContact{typeName: "contact", Contact: value}
}

func (e *ExpenseContact) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	valueContact := new(Contact)
	if err := json.Unmarshal(data, &valueContact); err == nil {
		e.typeName = "contact"
		e.Contact = valueContact
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e ExpenseContact) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return json.Marshal(e.String)
	case "contact":
		return json.Marshal(e.Contact)
	}
}

type ExpenseContactVisitor interface {
	VisitString(string) error
	VisitContact(*Contact) error
}

func (e *ExpenseContact) Accept(visitor ExpenseContactVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return visitor.VisitString(e.String)
	case "contact":
		return visitor.VisitContact(e.Contact)
	}
}

// The expense's currency.
//
// * `XUA` - ADB Unit of Account
// * `AFN` - Afghan Afghani
// * `AFA` - Afghan Afghani (1927–2002)
// * `ALL` - Albanian Lek
// * `ALK` - Albanian Lek (1946–1965)
// * `DZD` - Algerian Dinar
// * `ADP` - Andorran Peseta
// * `AOA` - Angolan Kwanza
// * `AOK` - Angolan Kwanza (1977–1991)
// * `AON` - Angolan New Kwanza (1990–2000)
// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
// * `ARA` - Argentine Austral
// * `ARS` - Argentine Peso
// * `ARM` - Argentine Peso (1881–1970)
// * `ARP` - Argentine Peso (1983–1985)
// * `ARL` - Argentine Peso Ley (1970–1983)
// * `AMD` - Armenian Dram
// * `AWG` - Aruban Florin
// * `AUD` - Australian Dollar
// * `ATS` - Austrian Schilling
// * `AZN` - Azerbaijani Manat
// * `AZM` - Azerbaijani Manat (1993–2006)
// * `BSD` - Bahamian Dollar
// * `BHD` - Bahraini Dinar
// * `BDT` - Bangladeshi Taka
// * `BBD` - Barbadian Dollar
// * `BYN` - Belarusian Ruble
// * `BYB` - Belarusian Ruble (1994–1999)
// * `BYR` - Belarusian Ruble (2000–2016)
// * `BEF` - Belgian Franc
// * `BEC` - Belgian Franc (convertible)
// * `BEL` - Belgian Franc (financial)
// * `BZD` - Belize Dollar
// * `BMD` - Bermudan Dollar
// * `BTN` - Bhutanese Ngultrum
// * `BOB` - Bolivian Boliviano
// * `BOL` - Bolivian Boliviano (1863–1963)
// * `BOV` - Bolivian Mvdol
// * `BOP` - Bolivian Peso
// * `BAM` - Bosnia-Herzegovina Convertible Mark
// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
// * `BWP` - Botswanan Pula
// * `BRC` - Brazilian Cruzado (1986–1989)
// * `BRZ` - Brazilian Cruzeiro (1942–1967)
// * `BRE` - Brazilian Cruzeiro (1990–1993)
// * `BRR` - Brazilian Cruzeiro (1993–1994)
// * `BRN` - Brazilian New Cruzado (1989–1990)
// * `BRB` - Brazilian New Cruzeiro (1967–1986)
// * `BRL` - Brazilian Real
// * `GBP` - British Pound
// * `BND` - Brunei Dollar
// * `BGL` - Bulgarian Hard Lev
// * `BGN` - Bulgarian Lev
// * `BGO` - Bulgarian Lev (1879–1952)
// * `BGM` - Bulgarian Socialist Lev
// * `BUK` - Burmese Kyat
// * `BIF` - Burundian Franc
// * `XPF` - CFP Franc
// * `KHR` - Cambodian Riel
// * `CAD` - Canadian Dollar
// * `CVE` - Cape Verdean Escudo
// * `KYD` - Cayman Islands Dollar
// * `XAF` - Central African CFA Franc
// * `CLE` - Chilean Escudo
// * `CLP` - Chilean Peso
// * `CLF` - Chilean Unit of Account (UF)
// * `CNX` - Chinese People’s Bank Dollar
// * `CNY` - Chinese Yuan
// * `CNH` - Chinese Yuan (offshore)
// * `COP` - Colombian Peso
// * `COU` - Colombian Real Value Unit
// * `KMF` - Comorian Franc
// * `CDF` - Congolese Franc
// * `CRC` - Costa Rican Colón
// * `HRD` - Croatian Dinar
// * `HRK` - Croatian Kuna
// * `CUC` - Cuban Convertible Peso
// * `CUP` - Cuban Peso
// * `CYP` - Cypriot Pound
// * `CZK` - Czech Koruna
// * `CSK` - Czechoslovak Hard Koruna
// * `DKK` - Danish Krone
// * `DJF` - Djiboutian Franc
// * `DOP` - Dominican Peso
// * `NLG` - Dutch Guilder
// * `XCD` - East Caribbean Dollar
// * `DDM` - East German Mark
// * `ECS` - Ecuadorian Sucre
// * `ECV` - Ecuadorian Unit of Constant Value
// * `EGP` - Egyptian Pound
// * `GQE` - Equatorial Guinean Ekwele
// * `ERN` - Eritrean Nakfa
// * `EEK` - Estonian Kroon
// * `ETB` - Ethiopian Birr
// * `EUR` - Euro
// * `XBA` - European Composite Unit
// * `XEU` - European Currency Unit
// * `XBB` - European Monetary Unit
// * `XBC` - European Unit of Account (XBC)
// * `XBD` - European Unit of Account (XBD)
// * `FKP` - Falkland Islands Pound
// * `FJD` - Fijian Dollar
// * `FIM` - Finnish Markka
// * `FRF` - French Franc
// * `XFO` - French Gold Franc
// * `XFU` - French UIC-Franc
// * `GMD` - Gambian Dalasi
// * `GEK` - Georgian Kupon Larit
// * `GEL` - Georgian Lari
// * `DEM` - German Mark
// * `GHS` - Ghanaian Cedi
// * `GHC` - Ghanaian Cedi (1979–2007)
// * `GIP` - Gibraltar Pound
// * `XAU` - Gold
// * `GRD` - Greek Drachma
// * `GTQ` - Guatemalan Quetzal
// * `GWP` - Guinea-Bissau Peso
// * `GNF` - Guinean Franc
// * `GNS` - Guinean Syli
// * `GYD` - Guyanaese Dollar
// * `HTG` - Haitian Gourde
// * `HNL` - Honduran Lempira
// * `HKD` - Hong Kong Dollar
// * `HUF` - Hungarian Forint
// * `IMP` - IMP
// * `ISK` - Icelandic Króna
// * `ISJ` - Icelandic Króna (1918–1981)
// * `INR` - Indian Rupee
// * `IDR` - Indonesian Rupiah
// * `IRR` - Iranian Rial
// * `IQD` - Iraqi Dinar
// * `IEP` - Irish Pound
// * `ILS` - Israeli New Shekel
// * `ILP` - Israeli Pound
// * `ILR` - Israeli Shekel (1980–1985)
// * `ITL` - Italian Lira
// * `JMD` - Jamaican Dollar
// * `JPY` - Japanese Yen
// * `JOD` - Jordanian Dinar
// * `KZT` - Kazakhstani Tenge
// * `KES` - Kenyan Shilling
// * `KWD` - Kuwaiti Dinar
// * `KGS` - Kyrgystani Som
// * `LAK` - Laotian Kip
// * `LVL` - Latvian Lats
// * `LVR` - Latvian Ruble
// * `LBP` - Lebanese Pound
// * `LSL` - Lesotho Loti
// * `LRD` - Liberian Dollar
// * `LYD` - Libyan Dinar
// * `LTL` - Lithuanian Litas
// * `LTT` - Lithuanian Talonas
// * `LUL` - Luxembourg Financial Franc
// * `LUC` - Luxembourgian Convertible Franc
// * `LUF` - Luxembourgian Franc
// * `MOP` - Macanese Pataca
// * `MKD` - Macedonian Denar
// * `MKN` - Macedonian Denar (1992–1993)
// * `MGA` - Malagasy Ariary
// * `MGF` - Malagasy Franc
// * `MWK` - Malawian Kwacha
// * `MYR` - Malaysian Ringgit
// * `MVR` - Maldivian Rufiyaa
// * `MVP` - Maldivian Rupee (1947–1981)
// * `MLF` - Malian Franc
// * `MTL` - Maltese Lira
// * `MTP` - Maltese Pound
// * `MRU` - Mauritanian Ouguiya
// * `MRO` - Mauritanian Ouguiya (1973–2017)
// * `MUR` - Mauritian Rupee
// * `MXV` - Mexican Investment Unit
// * `MXN` - Mexican Peso
// * `MXP` - Mexican Silver Peso (1861–1992)
// * `MDC` - Moldovan Cupon
// * `MDL` - Moldovan Leu
// * `MCF` - Monegasque Franc
// * `MNT` - Mongolian Tugrik
// * `MAD` - Moroccan Dirham
// * `MAF` - Moroccan Franc
// * `MZE` - Mozambican Escudo
// * `MZN` - Mozambican Metical
// * `MZM` - Mozambican Metical (1980–2006)
// * `MMK` - Myanmar Kyat
// * `NAD` - Namibian Dollar
// * `NPR` - Nepalese Rupee
// * `ANG` - Netherlands Antillean Guilder
// * `TWD` - New Taiwan Dollar
// * `NZD` - New Zealand Dollar
// * `NIO` - Nicaraguan Córdoba
// * `NIC` - Nicaraguan Córdoba (1988–1991)
// * `NGN` - Nigerian Naira
// * `KPW` - North Korean Won
// * `NOK` - Norwegian Krone
// * `OMR` - Omani Rial
// * `PKR` - Pakistani Rupee
// * `XPD` - Palladium
// * `PAB` - Panamanian Balboa
// * `PGK` - Papua New Guinean Kina
// * `PYG` - Paraguayan Guarani
// * `PEI` - Peruvian Inti
// * `PEN` - Peruvian Sol
// * `PES` - Peruvian Sol (1863–1965)
// * `PHP` - Philippine Peso
// * `XPT` - Platinum
// * `PLN` - Polish Zloty
// * `PLZ` - Polish Zloty (1950–1995)
// * `PTE` - Portuguese Escudo
// * `GWE` - Portuguese Guinea Escudo
// * `QAR` - Qatari Rial
// * `XRE` - RINET Funds
// * `RHD` - Rhodesian Dollar
// * `RON` - Romanian Leu
// * `ROL` - Romanian Leu (1952–2006)
// * `RUB` - Russian Ruble
// * `RUR` - Russian Ruble (1991–1998)
// * `RWF` - Rwandan Franc
// * `SVC` - Salvadoran Colón
// * `WST` - Samoan Tala
// * `SAR` - Saudi Riyal
// * `RSD` - Serbian Dinar
// * `CSD` - Serbian Dinar (2002–2006)
// * `SCR` - Seychellois Rupee
// * `SLL` - Sierra Leonean Leone
// * `XAG` - Silver
// * `SGD` - Singapore Dollar
// * `SKK` - Slovak Koruna
// * `SIT` - Slovenian Tolar
// * `SBD` - Solomon Islands Dollar
// * `SOS` - Somali Shilling
// * `ZAR` - South African Rand
// * `ZAL` - South African Rand (financial)
// * `KRH` - South Korean Hwan (1953–1962)
// * `KRW` - South Korean Won
// * `KRO` - South Korean Won (1945–1953)
// * `SSP` - South Sudanese Pound
// * `SUR` - Soviet Rouble
// * `ESP` - Spanish Peseta
// * `ESA` - Spanish Peseta (A account)
// * `ESB` - Spanish Peseta (convertible account)
// * `XDR` - Special Drawing Rights
// * `LKR` - Sri Lankan Rupee
// * `SHP` - St. Helena Pound
// * `XSU` - Sucre
// * `SDD` - Sudanese Dinar (1992–2007)
// * `SDG` - Sudanese Pound
// * `SDP` - Sudanese Pound (1957–1998)
// * `SRD` - Surinamese Dollar
// * `SRG` - Surinamese Guilder
// * `SZL` - Swazi Lilangeni
// * `SEK` - Swedish Krona
// * `CHF` - Swiss Franc
// * `SYP` - Syrian Pound
// * `STN` - São Tomé & Príncipe Dobra
// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
// * `TVD` - TVD
// * `TJR` - Tajikistani Ruble
// * `TJS` - Tajikistani Somoni
// * `TZS` - Tanzanian Shilling
// * `XTS` - Testing Currency Code
// * `THB` - Thai Baht
// * `XXX` - The codes assigned for transactions where no currency is involved
// * `TPE` - Timorese Escudo
// * `TOP` - Tongan Paʻanga
// * `TTD` - Trinidad & Tobago Dollar
// * `TND` - Tunisian Dinar
// * `TRY` - Turkish Lira
// * `TRL` - Turkish Lira (1922–2005)
// * `TMT` - Turkmenistani Manat
// * `TMM` - Turkmenistani Manat (1993–2009)
// * `USD` - US Dollar
// * `USN` - US Dollar (Next day)
// * `USS` - US Dollar (Same day)
// * `UGX` - Ugandan Shilling
// * `UGS` - Ugandan Shilling (1966–1987)
// * `UAH` - Ukrainian Hryvnia
// * `UAK` - Ukrainian Karbovanets
// * `AED` - United Arab Emirates Dirham
// * `UYW` - Uruguayan Nominal Wage Index Unit
// * `UYU` - Uruguayan Peso
// * `UYP` - Uruguayan Peso (1975–1993)
// * `UYI` - Uruguayan Peso (Indexed Units)
// * `UZS` - Uzbekistani Som
// * `VUV` - Vanuatu Vatu
// * `VES` - Venezuelan Bolívar
// * `VEB` - Venezuelan Bolívar (1871–2008)
// * `VEF` - Venezuelan Bolívar (2008–2018)
// * `VND` - Vietnamese Dong
// * `VNN` - Vietnamese Dong (1978–1985)
// * `CHE` - WIR Euro
// * `CHW` - WIR Franc
// * `XOF` - West African CFA Franc
// * `YDD` - Yemeni Dinar
// * `YER` - Yemeni Rial
// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
// * `YUM` - Yugoslavian New Dinar (1994–2002)
// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
// * `ZWN` - ZWN
// * `ZRN` - Zairean New Zaire (1993–1998)
// * `ZRZ` - Zairean Zaire (1971–1993)
// * `ZMW` - Zambian Kwacha
// * `ZMK` - Zambian Kwacha (1968–2012)
// * `ZWD` - Zimbabwean Dollar (1980–2008)
// * `ZWR` - Zimbabwean Dollar (2008)
// * `ZWL` - Zimbabwean Dollar (2009)
type ExpenseCurrency struct {
	typeName     string
	CurrencyEnum CurrencyEnum
	String       string
}

func NewExpenseCurrencyFromCurrencyEnum(value CurrencyEnum) *ExpenseCurrency {
	return &ExpenseCurrency{typeName: "currencyEnum", CurrencyEnum: value}
}

func NewExpenseCurrencyFromString(value string) *ExpenseCurrency {
	return &ExpenseCurrency{typeName: "string", String: value}
}

func (e *ExpenseCurrency) UnmarshalJSON(data []byte) error {
	var valueCurrencyEnum CurrencyEnum
	if err := json.Unmarshal(data, &valueCurrencyEnum); err == nil {
		e.typeName = "currencyEnum"
		e.CurrencyEnum = valueCurrencyEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e ExpenseCurrency) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "currencyEnum":
		return json.Marshal(e.CurrencyEnum)
	case "string":
		return json.Marshal(e.String)
	}
}

type ExpenseCurrencyVisitor interface {
	VisitCurrencyEnum(CurrencyEnum) error
	VisitString(string) error
}

func (e *ExpenseCurrency) Accept(visitor ExpenseCurrencyVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "currencyEnum":
		return visitor.VisitCurrencyEnum(e.CurrencyEnum)
	case "string":
		return visitor.VisitString(e.String)
	}
}

// # The ExpenseLine Object
// ### Description
// The `ExpenseLine` object is used to represent an expense's line items.
//
// ### Usage Example
// Fetch from the `GET Expense` endpoint and view the expense's line items.
type ExpenseLine struct {
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The line's item.
	Item *ExpenseLineItem `json:"item,omitempty"`
	// The line's net amount.
	NetAmount          *float64                             `json:"net_amount,omitempty"`
	TrackingCategory   *ExpenseLineTrackingCategory         `json:"tracking_category,omitempty"`
	TrackingCategories []*ExpenseLineTrackingCategoriesItem `json:"tracking_categories,omitempty"`
	// The company the line belongs to.
	Company *string `json:"company,omitempty"`
	// The expense line item's currency.
	//
	// * `XUA` - ADB Unit of Account
	// * `AFN` - Afghan Afghani
	// * `AFA` - Afghan Afghani (1927–2002)
	// * `ALL` - Albanian Lek
	// * `ALK` - Albanian Lek (1946–1965)
	// * `DZD` - Algerian Dinar
	// * `ADP` - Andorran Peseta
	// * `AOA` - Angolan Kwanza
	// * `AOK` - Angolan Kwanza (1977–1991)
	// * `AON` - Angolan New Kwanza (1990–2000)
	// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
	// * `ARA` - Argentine Austral
	// * `ARS` - Argentine Peso
	// * `ARM` - Argentine Peso (1881–1970)
	// * `ARP` - Argentine Peso (1983–1985)
	// * `ARL` - Argentine Peso Ley (1970–1983)
	// * `AMD` - Armenian Dram
	// * `AWG` - Aruban Florin
	// * `AUD` - Australian Dollar
	// * `ATS` - Austrian Schilling
	// * `AZN` - Azerbaijani Manat
	// * `AZM` - Azerbaijani Manat (1993–2006)
	// * `BSD` - Bahamian Dollar
	// * `BHD` - Bahraini Dinar
	// * `BDT` - Bangladeshi Taka
	// * `BBD` - Barbadian Dollar
	// * `BYN` - Belarusian Ruble
	// * `BYB` - Belarusian Ruble (1994–1999)
	// * `BYR` - Belarusian Ruble (2000–2016)
	// * `BEF` - Belgian Franc
	// * `BEC` - Belgian Franc (convertible)
	// * `BEL` - Belgian Franc (financial)
	// * `BZD` - Belize Dollar
	// * `BMD` - Bermudan Dollar
	// * `BTN` - Bhutanese Ngultrum
	// * `BOB` - Bolivian Boliviano
	// * `BOL` - Bolivian Boliviano (1863–1963)
	// * `BOV` - Bolivian Mvdol
	// * `BOP` - Bolivian Peso
	// * `BAM` - Bosnia-Herzegovina Convertible Mark
	// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
	// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
	// * `BWP` - Botswanan Pula
	// * `BRC` - Brazilian Cruzado (1986–1989)
	// * `BRZ` - Brazilian Cruzeiro (1942–1967)
	// * `BRE` - Brazilian Cruzeiro (1990–1993)
	// * `BRR` - Brazilian Cruzeiro (1993–1994)
	// * `BRN` - Brazilian New Cruzado (1989–1990)
	// * `BRB` - Brazilian New Cruzeiro (1967–1986)
	// * `BRL` - Brazilian Real
	// * `GBP` - British Pound
	// * `BND` - Brunei Dollar
	// * `BGL` - Bulgarian Hard Lev
	// * `BGN` - Bulgarian Lev
	// * `BGO` - Bulgarian Lev (1879–1952)
	// * `BGM` - Bulgarian Socialist Lev
	// * `BUK` - Burmese Kyat
	// * `BIF` - Burundian Franc
	// * `XPF` - CFP Franc
	// * `KHR` - Cambodian Riel
	// * `CAD` - Canadian Dollar
	// * `CVE` - Cape Verdean Escudo
	// * `KYD` - Cayman Islands Dollar
	// * `XAF` - Central African CFA Franc
	// * `CLE` - Chilean Escudo
	// * `CLP` - Chilean Peso
	// * `CLF` - Chilean Unit of Account (UF)
	// * `CNX` - Chinese People’s Bank Dollar
	// * `CNY` - Chinese Yuan
	// * `CNH` - Chinese Yuan (offshore)
	// * `COP` - Colombian Peso
	// * `COU` - Colombian Real Value Unit
	// * `KMF` - Comorian Franc
	// * `CDF` - Congolese Franc
	// * `CRC` - Costa Rican Colón
	// * `HRD` - Croatian Dinar
	// * `HRK` - Croatian Kuna
	// * `CUC` - Cuban Convertible Peso
	// * `CUP` - Cuban Peso
	// * `CYP` - Cypriot Pound
	// * `CZK` - Czech Koruna
	// * `CSK` - Czechoslovak Hard Koruna
	// * `DKK` - Danish Krone
	// * `DJF` - Djiboutian Franc
	// * `DOP` - Dominican Peso
	// * `NLG` - Dutch Guilder
	// * `XCD` - East Caribbean Dollar
	// * `DDM` - East German Mark
	// * `ECS` - Ecuadorian Sucre
	// * `ECV` - Ecuadorian Unit of Constant Value
	// * `EGP` - Egyptian Pound
	// * `GQE` - Equatorial Guinean Ekwele
	// * `ERN` - Eritrean Nakfa
	// * `EEK` - Estonian Kroon
	// * `ETB` - Ethiopian Birr
	// * `EUR` - Euro
	// * `XBA` - European Composite Unit
	// * `XEU` - European Currency Unit
	// * `XBB` - European Monetary Unit
	// * `XBC` - European Unit of Account (XBC)
	// * `XBD` - European Unit of Account (XBD)
	// * `FKP` - Falkland Islands Pound
	// * `FJD` - Fijian Dollar
	// * `FIM` - Finnish Markka
	// * `FRF` - French Franc
	// * `XFO` - French Gold Franc
	// * `XFU` - French UIC-Franc
	// * `GMD` - Gambian Dalasi
	// * `GEK` - Georgian Kupon Larit
	// * `GEL` - Georgian Lari
	// * `DEM` - German Mark
	// * `GHS` - Ghanaian Cedi
	// * `GHC` - Ghanaian Cedi (1979–2007)
	// * `GIP` - Gibraltar Pound
	// * `XAU` - Gold
	// * `GRD` - Greek Drachma
	// * `GTQ` - Guatemalan Quetzal
	// * `GWP` - Guinea-Bissau Peso
	// * `GNF` - Guinean Franc
	// * `GNS` - Guinean Syli
	// * `GYD` - Guyanaese Dollar
	// * `HTG` - Haitian Gourde
	// * `HNL` - Honduran Lempira
	// * `HKD` - Hong Kong Dollar
	// * `HUF` - Hungarian Forint
	// * `IMP` - IMP
	// * `ISK` - Icelandic Króna
	// * `ISJ` - Icelandic Króna (1918–1981)
	// * `INR` - Indian Rupee
	// * `IDR` - Indonesian Rupiah
	// * `IRR` - Iranian Rial
	// * `IQD` - Iraqi Dinar
	// * `IEP` - Irish Pound
	// * `ILS` - Israeli New Shekel
	// * `ILP` - Israeli Pound
	// * `ILR` - Israeli Shekel (1980–1985)
	// * `ITL` - Italian Lira
	// * `JMD` - Jamaican Dollar
	// * `JPY` - Japanese Yen
	// * `JOD` - Jordanian Dinar
	// * `KZT` - Kazakhstani Tenge
	// * `KES` - Kenyan Shilling
	// * `KWD` - Kuwaiti Dinar
	// * `KGS` - Kyrgystani Som
	// * `LAK` - Laotian Kip
	// * `LVL` - Latvian Lats
	// * `LVR` - Latvian Ruble
	// * `LBP` - Lebanese Pound
	// * `LSL` - Lesotho Loti
	// * `LRD` - Liberian Dollar
	// * `LYD` - Libyan Dinar
	// * `LTL` - Lithuanian Litas
	// * `LTT` - Lithuanian Talonas
	// * `LUL` - Luxembourg Financial Franc
	// * `LUC` - Luxembourgian Convertible Franc
	// * `LUF` - Luxembourgian Franc
	// * `MOP` - Macanese Pataca
	// * `MKD` - Macedonian Denar
	// * `MKN` - Macedonian Denar (1992–1993)
	// * `MGA` - Malagasy Ariary
	// * `MGF` - Malagasy Franc
	// * `MWK` - Malawian Kwacha
	// * `MYR` - Malaysian Ringgit
	// * `MVR` - Maldivian Rufiyaa
	// * `MVP` - Maldivian Rupee (1947–1981)
	// * `MLF` - Malian Franc
	// * `MTL` - Maltese Lira
	// * `MTP` - Maltese Pound
	// * `MRU` - Mauritanian Ouguiya
	// * `MRO` - Mauritanian Ouguiya (1973–2017)
	// * `MUR` - Mauritian Rupee
	// * `MXV` - Mexican Investment Unit
	// * `MXN` - Mexican Peso
	// * `MXP` - Mexican Silver Peso (1861–1992)
	// * `MDC` - Moldovan Cupon
	// * `MDL` - Moldovan Leu
	// * `MCF` - Monegasque Franc
	// * `MNT` - Mongolian Tugrik
	// * `MAD` - Moroccan Dirham
	// * `MAF` - Moroccan Franc
	// * `MZE` - Mozambican Escudo
	// * `MZN` - Mozambican Metical
	// * `MZM` - Mozambican Metical (1980–2006)
	// * `MMK` - Myanmar Kyat
	// * `NAD` - Namibian Dollar
	// * `NPR` - Nepalese Rupee
	// * `ANG` - Netherlands Antillean Guilder
	// * `TWD` - New Taiwan Dollar
	// * `NZD` - New Zealand Dollar
	// * `NIO` - Nicaraguan Córdoba
	// * `NIC` - Nicaraguan Córdoba (1988–1991)
	// * `NGN` - Nigerian Naira
	// * `KPW` - North Korean Won
	// * `NOK` - Norwegian Krone
	// * `OMR` - Omani Rial
	// * `PKR` - Pakistani Rupee
	// * `XPD` - Palladium
	// * `PAB` - Panamanian Balboa
	// * `PGK` - Papua New Guinean Kina
	// * `PYG` - Paraguayan Guarani
	// * `PEI` - Peruvian Inti
	// * `PEN` - Peruvian Sol
	// * `PES` - Peruvian Sol (1863–1965)
	// * `PHP` - Philippine Peso
	// * `XPT` - Platinum
	// * `PLN` - Polish Zloty
	// * `PLZ` - Polish Zloty (1950–1995)
	// * `PTE` - Portuguese Escudo
	// * `GWE` - Portuguese Guinea Escudo
	// * `QAR` - Qatari Rial
	// * `XRE` - RINET Funds
	// * `RHD` - Rhodesian Dollar
	// * `RON` - Romanian Leu
	// * `ROL` - Romanian Leu (1952–2006)
	// * `RUB` - Russian Ruble
	// * `RUR` - Russian Ruble (1991–1998)
	// * `RWF` - Rwandan Franc
	// * `SVC` - Salvadoran Colón
	// * `WST` - Samoan Tala
	// * `SAR` - Saudi Riyal
	// * `RSD` - Serbian Dinar
	// * `CSD` - Serbian Dinar (2002–2006)
	// * `SCR` - Seychellois Rupee
	// * `SLL` - Sierra Leonean Leone
	// * `XAG` - Silver
	// * `SGD` - Singapore Dollar
	// * `SKK` - Slovak Koruna
	// * `SIT` - Slovenian Tolar
	// * `SBD` - Solomon Islands Dollar
	// * `SOS` - Somali Shilling
	// * `ZAR` - South African Rand
	// * `ZAL` - South African Rand (financial)
	// * `KRH` - South Korean Hwan (1953–1962)
	// * `KRW` - South Korean Won
	// * `KRO` - South Korean Won (1945–1953)
	// * `SSP` - South Sudanese Pound
	// * `SUR` - Soviet Rouble
	// * `ESP` - Spanish Peseta
	// * `ESA` - Spanish Peseta (A account)
	// * `ESB` - Spanish Peseta (convertible account)
	// * `XDR` - Special Drawing Rights
	// * `LKR` - Sri Lankan Rupee
	// * `SHP` - St. Helena Pound
	// * `XSU` - Sucre
	// * `SDD` - Sudanese Dinar (1992–2007)
	// * `SDG` - Sudanese Pound
	// * `SDP` - Sudanese Pound (1957–1998)
	// * `SRD` - Surinamese Dollar
	// * `SRG` - Surinamese Guilder
	// * `SZL` - Swazi Lilangeni
	// * `SEK` - Swedish Krona
	// * `CHF` - Swiss Franc
	// * `SYP` - Syrian Pound
	// * `STN` - São Tomé & Príncipe Dobra
	// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
	// * `TVD` - TVD
	// * `TJR` - Tajikistani Ruble
	// * `TJS` - Tajikistani Somoni
	// * `TZS` - Tanzanian Shilling
	// * `XTS` - Testing Currency Code
	// * `THB` - Thai Baht
	// * `XXX` - The codes assigned for transactions where no currency is involved
	// * `TPE` - Timorese Escudo
	// * `TOP` - Tongan Paʻanga
	// * `TTD` - Trinidad & Tobago Dollar
	// * `TND` - Tunisian Dinar
	// * `TRY` - Turkish Lira
	// * `TRL` - Turkish Lira (1922–2005)
	// * `TMT` - Turkmenistani Manat
	// * `TMM` - Turkmenistani Manat (1993–2009)
	// * `USD` - US Dollar
	// * `USN` - US Dollar (Next day)
	// * `USS` - US Dollar (Same day)
	// * `UGX` - Ugandan Shilling
	// * `UGS` - Ugandan Shilling (1966–1987)
	// * `UAH` - Ukrainian Hryvnia
	// * `UAK` - Ukrainian Karbovanets
	// * `AED` - United Arab Emirates Dirham
	// * `UYW` - Uruguayan Nominal Wage Index Unit
	// * `UYU` - Uruguayan Peso
	// * `UYP` - Uruguayan Peso (1975–1993)
	// * `UYI` - Uruguayan Peso (Indexed Units)
	// * `UZS` - Uzbekistani Som
	// * `VUV` - Vanuatu Vatu
	// * `VES` - Venezuelan Bolívar
	// * `VEB` - Venezuelan Bolívar (1871–2008)
	// * `VEF` - Venezuelan Bolívar (2008–2018)
	// * `VND` - Vietnamese Dong
	// * `VNN` - Vietnamese Dong (1978–1985)
	// * `CHE` - WIR Euro
	// * `CHW` - WIR Franc
	// * `XOF` - West African CFA Franc
	// * `YDD` - Yemeni Dinar
	// * `YER` - Yemeni Rial
	// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
	// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
	// * `YUM` - Yugoslavian New Dinar (1994–2002)
	// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
	// * `ZWN` - ZWN
	// * `ZRN` - Zairean New Zaire (1993–1998)
	// * `ZRZ` - Zairean Zaire (1971–1993)
	// * `ZMW` - Zambian Kwacha
	// * `ZMK` - Zambian Kwacha (1968–2012)
	// * `ZWD` - Zimbabwean Dollar (1980–2008)
	// * `ZWR` - Zimbabwean Dollar (2008)
	// * `ZWL` - Zimbabwean Dollar (2009)
	Currency *ExpenseLineCurrency `json:"currency,omitempty"`
	// The expense's payment account.
	Account *ExpenseLineAccount `json:"account,omitempty"`
	// The expense's contact.
	Contact *ExpenseLineContact `json:"contact,omitempty"`
	// The description of the item that was purchased by the company.
	Description *string `json:"description,omitempty"`
	// The expense line item's exchange rate.
	ExchangeRate *string `json:"exchange_rate,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted *bool      `json:"remote_was_deleted,omitempty"`
	Id               *string    `json:"id,omitempty"`
	CreatedAt        *time.Time `json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
}

// The expense's payment account.
type ExpenseLineAccount struct {
	typeName string
	String   string
	Account  *Account
}

func NewExpenseLineAccountFromString(value string) *ExpenseLineAccount {
	return &ExpenseLineAccount{typeName: "string", String: value}
}

func NewExpenseLineAccountFromAccount(value *Account) *ExpenseLineAccount {
	return &ExpenseLineAccount{typeName: "account", Account: value}
}

func (e *ExpenseLineAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		e.typeName = "account"
		e.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e ExpenseLineAccount) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return json.Marshal(e.String)
	case "account":
		return json.Marshal(e.Account)
	}
}

type ExpenseLineAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (e *ExpenseLineAccount) Accept(visitor ExpenseLineAccountVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return visitor.VisitString(e.String)
	case "account":
		return visitor.VisitAccount(e.Account)
	}
}

// The expense's contact.
type ExpenseLineContact struct {
	typeName string
	String   string
	Contact  *Contact
}

func NewExpenseLineContactFromString(value string) *ExpenseLineContact {
	return &ExpenseLineContact{typeName: "string", String: value}
}

func NewExpenseLineContactFromContact(value *Contact) *ExpenseLineContact {
	return &ExpenseLineContact{typeName: "contact", Contact: value}
}

func (e *ExpenseLineContact) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	valueContact := new(Contact)
	if err := json.Unmarshal(data, &valueContact); err == nil {
		e.typeName = "contact"
		e.Contact = valueContact
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e ExpenseLineContact) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return json.Marshal(e.String)
	case "contact":
		return json.Marshal(e.Contact)
	}
}

type ExpenseLineContactVisitor interface {
	VisitString(string) error
	VisitContact(*Contact) error
}

func (e *ExpenseLineContact) Accept(visitor ExpenseLineContactVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return visitor.VisitString(e.String)
	case "contact":
		return visitor.VisitContact(e.Contact)
	}
}

// The expense line item's currency.
//
// * `XUA` - ADB Unit of Account
// * `AFN` - Afghan Afghani
// * `AFA` - Afghan Afghani (1927–2002)
// * `ALL` - Albanian Lek
// * `ALK` - Albanian Lek (1946–1965)
// * `DZD` - Algerian Dinar
// * `ADP` - Andorran Peseta
// * `AOA` - Angolan Kwanza
// * `AOK` - Angolan Kwanza (1977–1991)
// * `AON` - Angolan New Kwanza (1990–2000)
// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
// * `ARA` - Argentine Austral
// * `ARS` - Argentine Peso
// * `ARM` - Argentine Peso (1881–1970)
// * `ARP` - Argentine Peso (1983–1985)
// * `ARL` - Argentine Peso Ley (1970–1983)
// * `AMD` - Armenian Dram
// * `AWG` - Aruban Florin
// * `AUD` - Australian Dollar
// * `ATS` - Austrian Schilling
// * `AZN` - Azerbaijani Manat
// * `AZM` - Azerbaijani Manat (1993–2006)
// * `BSD` - Bahamian Dollar
// * `BHD` - Bahraini Dinar
// * `BDT` - Bangladeshi Taka
// * `BBD` - Barbadian Dollar
// * `BYN` - Belarusian Ruble
// * `BYB` - Belarusian Ruble (1994–1999)
// * `BYR` - Belarusian Ruble (2000–2016)
// * `BEF` - Belgian Franc
// * `BEC` - Belgian Franc (convertible)
// * `BEL` - Belgian Franc (financial)
// * `BZD` - Belize Dollar
// * `BMD` - Bermudan Dollar
// * `BTN` - Bhutanese Ngultrum
// * `BOB` - Bolivian Boliviano
// * `BOL` - Bolivian Boliviano (1863–1963)
// * `BOV` - Bolivian Mvdol
// * `BOP` - Bolivian Peso
// * `BAM` - Bosnia-Herzegovina Convertible Mark
// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
// * `BWP` - Botswanan Pula
// * `BRC` - Brazilian Cruzado (1986–1989)
// * `BRZ` - Brazilian Cruzeiro (1942–1967)
// * `BRE` - Brazilian Cruzeiro (1990–1993)
// * `BRR` - Brazilian Cruzeiro (1993–1994)
// * `BRN` - Brazilian New Cruzado (1989–1990)
// * `BRB` - Brazilian New Cruzeiro (1967–1986)
// * `BRL` - Brazilian Real
// * `GBP` - British Pound
// * `BND` - Brunei Dollar
// * `BGL` - Bulgarian Hard Lev
// * `BGN` - Bulgarian Lev
// * `BGO` - Bulgarian Lev (1879–1952)
// * `BGM` - Bulgarian Socialist Lev
// * `BUK` - Burmese Kyat
// * `BIF` - Burundian Franc
// * `XPF` - CFP Franc
// * `KHR` - Cambodian Riel
// * `CAD` - Canadian Dollar
// * `CVE` - Cape Verdean Escudo
// * `KYD` - Cayman Islands Dollar
// * `XAF` - Central African CFA Franc
// * `CLE` - Chilean Escudo
// * `CLP` - Chilean Peso
// * `CLF` - Chilean Unit of Account (UF)
// * `CNX` - Chinese People’s Bank Dollar
// * `CNY` - Chinese Yuan
// * `CNH` - Chinese Yuan (offshore)
// * `COP` - Colombian Peso
// * `COU` - Colombian Real Value Unit
// * `KMF` - Comorian Franc
// * `CDF` - Congolese Franc
// * `CRC` - Costa Rican Colón
// * `HRD` - Croatian Dinar
// * `HRK` - Croatian Kuna
// * `CUC` - Cuban Convertible Peso
// * `CUP` - Cuban Peso
// * `CYP` - Cypriot Pound
// * `CZK` - Czech Koruna
// * `CSK` - Czechoslovak Hard Koruna
// * `DKK` - Danish Krone
// * `DJF` - Djiboutian Franc
// * `DOP` - Dominican Peso
// * `NLG` - Dutch Guilder
// * `XCD` - East Caribbean Dollar
// * `DDM` - East German Mark
// * `ECS` - Ecuadorian Sucre
// * `ECV` - Ecuadorian Unit of Constant Value
// * `EGP` - Egyptian Pound
// * `GQE` - Equatorial Guinean Ekwele
// * `ERN` - Eritrean Nakfa
// * `EEK` - Estonian Kroon
// * `ETB` - Ethiopian Birr
// * `EUR` - Euro
// * `XBA` - European Composite Unit
// * `XEU` - European Currency Unit
// * `XBB` - European Monetary Unit
// * `XBC` - European Unit of Account (XBC)
// * `XBD` - European Unit of Account (XBD)
// * `FKP` - Falkland Islands Pound
// * `FJD` - Fijian Dollar
// * `FIM` - Finnish Markka
// * `FRF` - French Franc
// * `XFO` - French Gold Franc
// * `XFU` - French UIC-Franc
// * `GMD` - Gambian Dalasi
// * `GEK` - Georgian Kupon Larit
// * `GEL` - Georgian Lari
// * `DEM` - German Mark
// * `GHS` - Ghanaian Cedi
// * `GHC` - Ghanaian Cedi (1979–2007)
// * `GIP` - Gibraltar Pound
// * `XAU` - Gold
// * `GRD` - Greek Drachma
// * `GTQ` - Guatemalan Quetzal
// * `GWP` - Guinea-Bissau Peso
// * `GNF` - Guinean Franc
// * `GNS` - Guinean Syli
// * `GYD` - Guyanaese Dollar
// * `HTG` - Haitian Gourde
// * `HNL` - Honduran Lempira
// * `HKD` - Hong Kong Dollar
// * `HUF` - Hungarian Forint
// * `IMP` - IMP
// * `ISK` - Icelandic Króna
// * `ISJ` - Icelandic Króna (1918–1981)
// * `INR` - Indian Rupee
// * `IDR` - Indonesian Rupiah
// * `IRR` - Iranian Rial
// * `IQD` - Iraqi Dinar
// * `IEP` - Irish Pound
// * `ILS` - Israeli New Shekel
// * `ILP` - Israeli Pound
// * `ILR` - Israeli Shekel (1980–1985)
// * `ITL` - Italian Lira
// * `JMD` - Jamaican Dollar
// * `JPY` - Japanese Yen
// * `JOD` - Jordanian Dinar
// * `KZT` - Kazakhstani Tenge
// * `KES` - Kenyan Shilling
// * `KWD` - Kuwaiti Dinar
// * `KGS` - Kyrgystani Som
// * `LAK` - Laotian Kip
// * `LVL` - Latvian Lats
// * `LVR` - Latvian Ruble
// * `LBP` - Lebanese Pound
// * `LSL` - Lesotho Loti
// * `LRD` - Liberian Dollar
// * `LYD` - Libyan Dinar
// * `LTL` - Lithuanian Litas
// * `LTT` - Lithuanian Talonas
// * `LUL` - Luxembourg Financial Franc
// * `LUC` - Luxembourgian Convertible Franc
// * `LUF` - Luxembourgian Franc
// * `MOP` - Macanese Pataca
// * `MKD` - Macedonian Denar
// * `MKN` - Macedonian Denar (1992–1993)
// * `MGA` - Malagasy Ariary
// * `MGF` - Malagasy Franc
// * `MWK` - Malawian Kwacha
// * `MYR` - Malaysian Ringgit
// * `MVR` - Maldivian Rufiyaa
// * `MVP` - Maldivian Rupee (1947–1981)
// * `MLF` - Malian Franc
// * `MTL` - Maltese Lira
// * `MTP` - Maltese Pound
// * `MRU` - Mauritanian Ouguiya
// * `MRO` - Mauritanian Ouguiya (1973–2017)
// * `MUR` - Mauritian Rupee
// * `MXV` - Mexican Investment Unit
// * `MXN` - Mexican Peso
// * `MXP` - Mexican Silver Peso (1861–1992)
// * `MDC` - Moldovan Cupon
// * `MDL` - Moldovan Leu
// * `MCF` - Monegasque Franc
// * `MNT` - Mongolian Tugrik
// * `MAD` - Moroccan Dirham
// * `MAF` - Moroccan Franc
// * `MZE` - Mozambican Escudo
// * `MZN` - Mozambican Metical
// * `MZM` - Mozambican Metical (1980–2006)
// * `MMK` - Myanmar Kyat
// * `NAD` - Namibian Dollar
// * `NPR` - Nepalese Rupee
// * `ANG` - Netherlands Antillean Guilder
// * `TWD` - New Taiwan Dollar
// * `NZD` - New Zealand Dollar
// * `NIO` - Nicaraguan Córdoba
// * `NIC` - Nicaraguan Córdoba (1988–1991)
// * `NGN` - Nigerian Naira
// * `KPW` - North Korean Won
// * `NOK` - Norwegian Krone
// * `OMR` - Omani Rial
// * `PKR` - Pakistani Rupee
// * `XPD` - Palladium
// * `PAB` - Panamanian Balboa
// * `PGK` - Papua New Guinean Kina
// * `PYG` - Paraguayan Guarani
// * `PEI` - Peruvian Inti
// * `PEN` - Peruvian Sol
// * `PES` - Peruvian Sol (1863–1965)
// * `PHP` - Philippine Peso
// * `XPT` - Platinum
// * `PLN` - Polish Zloty
// * `PLZ` - Polish Zloty (1950–1995)
// * `PTE` - Portuguese Escudo
// * `GWE` - Portuguese Guinea Escudo
// * `QAR` - Qatari Rial
// * `XRE` - RINET Funds
// * `RHD` - Rhodesian Dollar
// * `RON` - Romanian Leu
// * `ROL` - Romanian Leu (1952–2006)
// * `RUB` - Russian Ruble
// * `RUR` - Russian Ruble (1991–1998)
// * `RWF` - Rwandan Franc
// * `SVC` - Salvadoran Colón
// * `WST` - Samoan Tala
// * `SAR` - Saudi Riyal
// * `RSD` - Serbian Dinar
// * `CSD` - Serbian Dinar (2002–2006)
// * `SCR` - Seychellois Rupee
// * `SLL` - Sierra Leonean Leone
// * `XAG` - Silver
// * `SGD` - Singapore Dollar
// * `SKK` - Slovak Koruna
// * `SIT` - Slovenian Tolar
// * `SBD` - Solomon Islands Dollar
// * `SOS` - Somali Shilling
// * `ZAR` - South African Rand
// * `ZAL` - South African Rand (financial)
// * `KRH` - South Korean Hwan (1953–1962)
// * `KRW` - South Korean Won
// * `KRO` - South Korean Won (1945–1953)
// * `SSP` - South Sudanese Pound
// * `SUR` - Soviet Rouble
// * `ESP` - Spanish Peseta
// * `ESA` - Spanish Peseta (A account)
// * `ESB` - Spanish Peseta (convertible account)
// * `XDR` - Special Drawing Rights
// * `LKR` - Sri Lankan Rupee
// * `SHP` - St. Helena Pound
// * `XSU` - Sucre
// * `SDD` - Sudanese Dinar (1992–2007)
// * `SDG` - Sudanese Pound
// * `SDP` - Sudanese Pound (1957–1998)
// * `SRD` - Surinamese Dollar
// * `SRG` - Surinamese Guilder
// * `SZL` - Swazi Lilangeni
// * `SEK` - Swedish Krona
// * `CHF` - Swiss Franc
// * `SYP` - Syrian Pound
// * `STN` - São Tomé & Príncipe Dobra
// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
// * `TVD` - TVD
// * `TJR` - Tajikistani Ruble
// * `TJS` - Tajikistani Somoni
// * `TZS` - Tanzanian Shilling
// * `XTS` - Testing Currency Code
// * `THB` - Thai Baht
// * `XXX` - The codes assigned for transactions where no currency is involved
// * `TPE` - Timorese Escudo
// * `TOP` - Tongan Paʻanga
// * `TTD` - Trinidad & Tobago Dollar
// * `TND` - Tunisian Dinar
// * `TRY` - Turkish Lira
// * `TRL` - Turkish Lira (1922–2005)
// * `TMT` - Turkmenistani Manat
// * `TMM` - Turkmenistani Manat (1993–2009)
// * `USD` - US Dollar
// * `USN` - US Dollar (Next day)
// * `USS` - US Dollar (Same day)
// * `UGX` - Ugandan Shilling
// * `UGS` - Ugandan Shilling (1966–1987)
// * `UAH` - Ukrainian Hryvnia
// * `UAK` - Ukrainian Karbovanets
// * `AED` - United Arab Emirates Dirham
// * `UYW` - Uruguayan Nominal Wage Index Unit
// * `UYU` - Uruguayan Peso
// * `UYP` - Uruguayan Peso (1975–1993)
// * `UYI` - Uruguayan Peso (Indexed Units)
// * `UZS` - Uzbekistani Som
// * `VUV` - Vanuatu Vatu
// * `VES` - Venezuelan Bolívar
// * `VEB` - Venezuelan Bolívar (1871–2008)
// * `VEF` - Venezuelan Bolívar (2008–2018)
// * `VND` - Vietnamese Dong
// * `VNN` - Vietnamese Dong (1978–1985)
// * `CHE` - WIR Euro
// * `CHW` - WIR Franc
// * `XOF` - West African CFA Franc
// * `YDD` - Yemeni Dinar
// * `YER` - Yemeni Rial
// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
// * `YUM` - Yugoslavian New Dinar (1994–2002)
// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
// * `ZWN` - ZWN
// * `ZRN` - Zairean New Zaire (1993–1998)
// * `ZRZ` - Zairean Zaire (1971–1993)
// * `ZMW` - Zambian Kwacha
// * `ZMK` - Zambian Kwacha (1968–2012)
// * `ZWD` - Zimbabwean Dollar (1980–2008)
// * `ZWR` - Zimbabwean Dollar (2008)
// * `ZWL` - Zimbabwean Dollar (2009)
type ExpenseLineCurrency struct {
	typeName     string
	CurrencyEnum CurrencyEnum
	String       string
}

func NewExpenseLineCurrencyFromCurrencyEnum(value CurrencyEnum) *ExpenseLineCurrency {
	return &ExpenseLineCurrency{typeName: "currencyEnum", CurrencyEnum: value}
}

func NewExpenseLineCurrencyFromString(value string) *ExpenseLineCurrency {
	return &ExpenseLineCurrency{typeName: "string", String: value}
}

func (e *ExpenseLineCurrency) UnmarshalJSON(data []byte) error {
	var valueCurrencyEnum CurrencyEnum
	if err := json.Unmarshal(data, &valueCurrencyEnum); err == nil {
		e.typeName = "currencyEnum"
		e.CurrencyEnum = valueCurrencyEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e ExpenseLineCurrency) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "currencyEnum":
		return json.Marshal(e.CurrencyEnum)
	case "string":
		return json.Marshal(e.String)
	}
}

type ExpenseLineCurrencyVisitor interface {
	VisitCurrencyEnum(CurrencyEnum) error
	VisitString(string) error
}

func (e *ExpenseLineCurrency) Accept(visitor ExpenseLineCurrencyVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "currencyEnum":
		return visitor.VisitCurrencyEnum(e.CurrencyEnum)
	case "string":
		return visitor.VisitString(e.String)
	}
}

// The line's item.
type ExpenseLineItem struct {
	typeName string
	String   string
	Item     *Item
}

func NewExpenseLineItemFromString(value string) *ExpenseLineItem {
	return &ExpenseLineItem{typeName: "string", String: value}
}

func NewExpenseLineItemFromItem(value *Item) *ExpenseLineItem {
	return &ExpenseLineItem{typeName: "item", Item: value}
}

func (e *ExpenseLineItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	valueItem := new(Item)
	if err := json.Unmarshal(data, &valueItem); err == nil {
		e.typeName = "item"
		e.Item = valueItem
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e ExpenseLineItem) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return json.Marshal(e.String)
	case "item":
		return json.Marshal(e.Item)
	}
}

type ExpenseLineItemVisitor interface {
	VisitString(string) error
	VisitItem(*Item) error
}

func (e *ExpenseLineItem) Accept(visitor ExpenseLineItemVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return visitor.VisitString(e.String)
	case "item":
		return visitor.VisitItem(e.Item)
	}
}

// # The ExpenseLine Object
// ### Description
// The `ExpenseLine` object is used to represent an expense's line items.
//
// ### Usage Example
// Fetch from the `GET Expense` endpoint and view the expense's line items.
type ExpenseLineRequest struct {
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The line's item.
	Item *ExpenseLineRequestItem `json:"item,omitempty"`
	// The line's net amount.
	NetAmount          *float64                                    `json:"net_amount,omitempty"`
	TrackingCategory   *ExpenseLineRequestTrackingCategory         `json:"tracking_category,omitempty"`
	TrackingCategories []*ExpenseLineRequestTrackingCategoriesItem `json:"tracking_categories,omitempty"`
	// The company the line belongs to.
	Company *string `json:"company,omitempty"`
	// The expense line item's currency.
	//
	// * `XUA` - ADB Unit of Account
	// * `AFN` - Afghan Afghani
	// * `AFA` - Afghan Afghani (1927–2002)
	// * `ALL` - Albanian Lek
	// * `ALK` - Albanian Lek (1946–1965)
	// * `DZD` - Algerian Dinar
	// * `ADP` - Andorran Peseta
	// * `AOA` - Angolan Kwanza
	// * `AOK` - Angolan Kwanza (1977–1991)
	// * `AON` - Angolan New Kwanza (1990–2000)
	// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
	// * `ARA` - Argentine Austral
	// * `ARS` - Argentine Peso
	// * `ARM` - Argentine Peso (1881–1970)
	// * `ARP` - Argentine Peso (1983–1985)
	// * `ARL` - Argentine Peso Ley (1970–1983)
	// * `AMD` - Armenian Dram
	// * `AWG` - Aruban Florin
	// * `AUD` - Australian Dollar
	// * `ATS` - Austrian Schilling
	// * `AZN` - Azerbaijani Manat
	// * `AZM` - Azerbaijani Manat (1993–2006)
	// * `BSD` - Bahamian Dollar
	// * `BHD` - Bahraini Dinar
	// * `BDT` - Bangladeshi Taka
	// * `BBD` - Barbadian Dollar
	// * `BYN` - Belarusian Ruble
	// * `BYB` - Belarusian Ruble (1994–1999)
	// * `BYR` - Belarusian Ruble (2000–2016)
	// * `BEF` - Belgian Franc
	// * `BEC` - Belgian Franc (convertible)
	// * `BEL` - Belgian Franc (financial)
	// * `BZD` - Belize Dollar
	// * `BMD` - Bermudan Dollar
	// * `BTN` - Bhutanese Ngultrum
	// * `BOB` - Bolivian Boliviano
	// * `BOL` - Bolivian Boliviano (1863–1963)
	// * `BOV` - Bolivian Mvdol
	// * `BOP` - Bolivian Peso
	// * `BAM` - Bosnia-Herzegovina Convertible Mark
	// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
	// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
	// * `BWP` - Botswanan Pula
	// * `BRC` - Brazilian Cruzado (1986–1989)
	// * `BRZ` - Brazilian Cruzeiro (1942–1967)
	// * `BRE` - Brazilian Cruzeiro (1990–1993)
	// * `BRR` - Brazilian Cruzeiro (1993–1994)
	// * `BRN` - Brazilian New Cruzado (1989–1990)
	// * `BRB` - Brazilian New Cruzeiro (1967–1986)
	// * `BRL` - Brazilian Real
	// * `GBP` - British Pound
	// * `BND` - Brunei Dollar
	// * `BGL` - Bulgarian Hard Lev
	// * `BGN` - Bulgarian Lev
	// * `BGO` - Bulgarian Lev (1879–1952)
	// * `BGM` - Bulgarian Socialist Lev
	// * `BUK` - Burmese Kyat
	// * `BIF` - Burundian Franc
	// * `XPF` - CFP Franc
	// * `KHR` - Cambodian Riel
	// * `CAD` - Canadian Dollar
	// * `CVE` - Cape Verdean Escudo
	// * `KYD` - Cayman Islands Dollar
	// * `XAF` - Central African CFA Franc
	// * `CLE` - Chilean Escudo
	// * `CLP` - Chilean Peso
	// * `CLF` - Chilean Unit of Account (UF)
	// * `CNX` - Chinese People’s Bank Dollar
	// * `CNY` - Chinese Yuan
	// * `CNH` - Chinese Yuan (offshore)
	// * `COP` - Colombian Peso
	// * `COU` - Colombian Real Value Unit
	// * `KMF` - Comorian Franc
	// * `CDF` - Congolese Franc
	// * `CRC` - Costa Rican Colón
	// * `HRD` - Croatian Dinar
	// * `HRK` - Croatian Kuna
	// * `CUC` - Cuban Convertible Peso
	// * `CUP` - Cuban Peso
	// * `CYP` - Cypriot Pound
	// * `CZK` - Czech Koruna
	// * `CSK` - Czechoslovak Hard Koruna
	// * `DKK` - Danish Krone
	// * `DJF` - Djiboutian Franc
	// * `DOP` - Dominican Peso
	// * `NLG` - Dutch Guilder
	// * `XCD` - East Caribbean Dollar
	// * `DDM` - East German Mark
	// * `ECS` - Ecuadorian Sucre
	// * `ECV` - Ecuadorian Unit of Constant Value
	// * `EGP` - Egyptian Pound
	// * `GQE` - Equatorial Guinean Ekwele
	// * `ERN` - Eritrean Nakfa
	// * `EEK` - Estonian Kroon
	// * `ETB` - Ethiopian Birr
	// * `EUR` - Euro
	// * `XBA` - European Composite Unit
	// * `XEU` - European Currency Unit
	// * `XBB` - European Monetary Unit
	// * `XBC` - European Unit of Account (XBC)
	// * `XBD` - European Unit of Account (XBD)
	// * `FKP` - Falkland Islands Pound
	// * `FJD` - Fijian Dollar
	// * `FIM` - Finnish Markka
	// * `FRF` - French Franc
	// * `XFO` - French Gold Franc
	// * `XFU` - French UIC-Franc
	// * `GMD` - Gambian Dalasi
	// * `GEK` - Georgian Kupon Larit
	// * `GEL` - Georgian Lari
	// * `DEM` - German Mark
	// * `GHS` - Ghanaian Cedi
	// * `GHC` - Ghanaian Cedi (1979–2007)
	// * `GIP` - Gibraltar Pound
	// * `XAU` - Gold
	// * `GRD` - Greek Drachma
	// * `GTQ` - Guatemalan Quetzal
	// * `GWP` - Guinea-Bissau Peso
	// * `GNF` - Guinean Franc
	// * `GNS` - Guinean Syli
	// * `GYD` - Guyanaese Dollar
	// * `HTG` - Haitian Gourde
	// * `HNL` - Honduran Lempira
	// * `HKD` - Hong Kong Dollar
	// * `HUF` - Hungarian Forint
	// * `IMP` - IMP
	// * `ISK` - Icelandic Króna
	// * `ISJ` - Icelandic Króna (1918–1981)
	// * `INR` - Indian Rupee
	// * `IDR` - Indonesian Rupiah
	// * `IRR` - Iranian Rial
	// * `IQD` - Iraqi Dinar
	// * `IEP` - Irish Pound
	// * `ILS` - Israeli New Shekel
	// * `ILP` - Israeli Pound
	// * `ILR` - Israeli Shekel (1980–1985)
	// * `ITL` - Italian Lira
	// * `JMD` - Jamaican Dollar
	// * `JPY` - Japanese Yen
	// * `JOD` - Jordanian Dinar
	// * `KZT` - Kazakhstani Tenge
	// * `KES` - Kenyan Shilling
	// * `KWD` - Kuwaiti Dinar
	// * `KGS` - Kyrgystani Som
	// * `LAK` - Laotian Kip
	// * `LVL` - Latvian Lats
	// * `LVR` - Latvian Ruble
	// * `LBP` - Lebanese Pound
	// * `LSL` - Lesotho Loti
	// * `LRD` - Liberian Dollar
	// * `LYD` - Libyan Dinar
	// * `LTL` - Lithuanian Litas
	// * `LTT` - Lithuanian Talonas
	// * `LUL` - Luxembourg Financial Franc
	// * `LUC` - Luxembourgian Convertible Franc
	// * `LUF` - Luxembourgian Franc
	// * `MOP` - Macanese Pataca
	// * `MKD` - Macedonian Denar
	// * `MKN` - Macedonian Denar (1992–1993)
	// * `MGA` - Malagasy Ariary
	// * `MGF` - Malagasy Franc
	// * `MWK` - Malawian Kwacha
	// * `MYR` - Malaysian Ringgit
	// * `MVR` - Maldivian Rufiyaa
	// * `MVP` - Maldivian Rupee (1947–1981)
	// * `MLF` - Malian Franc
	// * `MTL` - Maltese Lira
	// * `MTP` - Maltese Pound
	// * `MRU` - Mauritanian Ouguiya
	// * `MRO` - Mauritanian Ouguiya (1973–2017)
	// * `MUR` - Mauritian Rupee
	// * `MXV` - Mexican Investment Unit
	// * `MXN` - Mexican Peso
	// * `MXP` - Mexican Silver Peso (1861–1992)
	// * `MDC` - Moldovan Cupon
	// * `MDL` - Moldovan Leu
	// * `MCF` - Monegasque Franc
	// * `MNT` - Mongolian Tugrik
	// * `MAD` - Moroccan Dirham
	// * `MAF` - Moroccan Franc
	// * `MZE` - Mozambican Escudo
	// * `MZN` - Mozambican Metical
	// * `MZM` - Mozambican Metical (1980–2006)
	// * `MMK` - Myanmar Kyat
	// * `NAD` - Namibian Dollar
	// * `NPR` - Nepalese Rupee
	// * `ANG` - Netherlands Antillean Guilder
	// * `TWD` - New Taiwan Dollar
	// * `NZD` - New Zealand Dollar
	// * `NIO` - Nicaraguan Córdoba
	// * `NIC` - Nicaraguan Córdoba (1988–1991)
	// * `NGN` - Nigerian Naira
	// * `KPW` - North Korean Won
	// * `NOK` - Norwegian Krone
	// * `OMR` - Omani Rial
	// * `PKR` - Pakistani Rupee
	// * `XPD` - Palladium
	// * `PAB` - Panamanian Balboa
	// * `PGK` - Papua New Guinean Kina
	// * `PYG` - Paraguayan Guarani
	// * `PEI` - Peruvian Inti
	// * `PEN` - Peruvian Sol
	// * `PES` - Peruvian Sol (1863–1965)
	// * `PHP` - Philippine Peso
	// * `XPT` - Platinum
	// * `PLN` - Polish Zloty
	// * `PLZ` - Polish Zloty (1950–1995)
	// * `PTE` - Portuguese Escudo
	// * `GWE` - Portuguese Guinea Escudo
	// * `QAR` - Qatari Rial
	// * `XRE` - RINET Funds
	// * `RHD` - Rhodesian Dollar
	// * `RON` - Romanian Leu
	// * `ROL` - Romanian Leu (1952–2006)
	// * `RUB` - Russian Ruble
	// * `RUR` - Russian Ruble (1991–1998)
	// * `RWF` - Rwandan Franc
	// * `SVC` - Salvadoran Colón
	// * `WST` - Samoan Tala
	// * `SAR` - Saudi Riyal
	// * `RSD` - Serbian Dinar
	// * `CSD` - Serbian Dinar (2002–2006)
	// * `SCR` - Seychellois Rupee
	// * `SLL` - Sierra Leonean Leone
	// * `XAG` - Silver
	// * `SGD` - Singapore Dollar
	// * `SKK` - Slovak Koruna
	// * `SIT` - Slovenian Tolar
	// * `SBD` - Solomon Islands Dollar
	// * `SOS` - Somali Shilling
	// * `ZAR` - South African Rand
	// * `ZAL` - South African Rand (financial)
	// * `KRH` - South Korean Hwan (1953–1962)
	// * `KRW` - South Korean Won
	// * `KRO` - South Korean Won (1945–1953)
	// * `SSP` - South Sudanese Pound
	// * `SUR` - Soviet Rouble
	// * `ESP` - Spanish Peseta
	// * `ESA` - Spanish Peseta (A account)
	// * `ESB` - Spanish Peseta (convertible account)
	// * `XDR` - Special Drawing Rights
	// * `LKR` - Sri Lankan Rupee
	// * `SHP` - St. Helena Pound
	// * `XSU` - Sucre
	// * `SDD` - Sudanese Dinar (1992–2007)
	// * `SDG` - Sudanese Pound
	// * `SDP` - Sudanese Pound (1957–1998)
	// * `SRD` - Surinamese Dollar
	// * `SRG` - Surinamese Guilder
	// * `SZL` - Swazi Lilangeni
	// * `SEK` - Swedish Krona
	// * `CHF` - Swiss Franc
	// * `SYP` - Syrian Pound
	// * `STN` - São Tomé & Príncipe Dobra
	// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
	// * `TVD` - TVD
	// * `TJR` - Tajikistani Ruble
	// * `TJS` - Tajikistani Somoni
	// * `TZS` - Tanzanian Shilling
	// * `XTS` - Testing Currency Code
	// * `THB` - Thai Baht
	// * `XXX` - The codes assigned for transactions where no currency is involved
	// * `TPE` - Timorese Escudo
	// * `TOP` - Tongan Paʻanga
	// * `TTD` - Trinidad & Tobago Dollar
	// * `TND` - Tunisian Dinar
	// * `TRY` - Turkish Lira
	// * `TRL` - Turkish Lira (1922–2005)
	// * `TMT` - Turkmenistani Manat
	// * `TMM` - Turkmenistani Manat (1993–2009)
	// * `USD` - US Dollar
	// * `USN` - US Dollar (Next day)
	// * `USS` - US Dollar (Same day)
	// * `UGX` - Ugandan Shilling
	// * `UGS` - Ugandan Shilling (1966–1987)
	// * `UAH` - Ukrainian Hryvnia
	// * `UAK` - Ukrainian Karbovanets
	// * `AED` - United Arab Emirates Dirham
	// * `UYW` - Uruguayan Nominal Wage Index Unit
	// * `UYU` - Uruguayan Peso
	// * `UYP` - Uruguayan Peso (1975–1993)
	// * `UYI` - Uruguayan Peso (Indexed Units)
	// * `UZS` - Uzbekistani Som
	// * `VUV` - Vanuatu Vatu
	// * `VES` - Venezuelan Bolívar
	// * `VEB` - Venezuelan Bolívar (1871–2008)
	// * `VEF` - Venezuelan Bolívar (2008–2018)
	// * `VND` - Vietnamese Dong
	// * `VNN` - Vietnamese Dong (1978–1985)
	// * `CHE` - WIR Euro
	// * `CHW` - WIR Franc
	// * `XOF` - West African CFA Franc
	// * `YDD` - Yemeni Dinar
	// * `YER` - Yemeni Rial
	// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
	// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
	// * `YUM` - Yugoslavian New Dinar (1994–2002)
	// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
	// * `ZWN` - ZWN
	// * `ZRN` - Zairean New Zaire (1993–1998)
	// * `ZRZ` - Zairean Zaire (1971–1993)
	// * `ZMW` - Zambian Kwacha
	// * `ZMK` - Zambian Kwacha (1968–2012)
	// * `ZWD` - Zimbabwean Dollar (1980–2008)
	// * `ZWR` - Zimbabwean Dollar (2008)
	// * `ZWL` - Zimbabwean Dollar (2009)
	Currency *ExpenseLineRequestCurrency `json:"currency,omitempty"`
	// The expense's payment account.
	Account *ExpenseLineRequestAccount `json:"account,omitempty"`
	// The expense's contact.
	Contact *ExpenseLineRequestContact `json:"contact,omitempty"`
	// The description of the item that was purchased by the company.
	Description *string `json:"description,omitempty"`
	// The expense line item's exchange rate.
	ExchangeRate        *string        `json:"exchange_rate,omitempty"`
	IntegrationParams   map[string]any `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]any `json:"linked_account_params,omitempty"`
}

// The expense's payment account.
type ExpenseLineRequestAccount struct {
	typeName string
	String   string
	Account  *Account
}

func NewExpenseLineRequestAccountFromString(value string) *ExpenseLineRequestAccount {
	return &ExpenseLineRequestAccount{typeName: "string", String: value}
}

func NewExpenseLineRequestAccountFromAccount(value *Account) *ExpenseLineRequestAccount {
	return &ExpenseLineRequestAccount{typeName: "account", Account: value}
}

func (e *ExpenseLineRequestAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		e.typeName = "account"
		e.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e ExpenseLineRequestAccount) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return json.Marshal(e.String)
	case "account":
		return json.Marshal(e.Account)
	}
}

type ExpenseLineRequestAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (e *ExpenseLineRequestAccount) Accept(visitor ExpenseLineRequestAccountVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return visitor.VisitString(e.String)
	case "account":
		return visitor.VisitAccount(e.Account)
	}
}

// The expense's contact.
type ExpenseLineRequestContact struct {
	typeName string
	String   string
	Contact  *Contact
}

func NewExpenseLineRequestContactFromString(value string) *ExpenseLineRequestContact {
	return &ExpenseLineRequestContact{typeName: "string", String: value}
}

func NewExpenseLineRequestContactFromContact(value *Contact) *ExpenseLineRequestContact {
	return &ExpenseLineRequestContact{typeName: "contact", Contact: value}
}

func (e *ExpenseLineRequestContact) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	valueContact := new(Contact)
	if err := json.Unmarshal(data, &valueContact); err == nil {
		e.typeName = "contact"
		e.Contact = valueContact
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e ExpenseLineRequestContact) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return json.Marshal(e.String)
	case "contact":
		return json.Marshal(e.Contact)
	}
}

type ExpenseLineRequestContactVisitor interface {
	VisitString(string) error
	VisitContact(*Contact) error
}

func (e *ExpenseLineRequestContact) Accept(visitor ExpenseLineRequestContactVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return visitor.VisitString(e.String)
	case "contact":
		return visitor.VisitContact(e.Contact)
	}
}

// The expense line item's currency.
//
// * `XUA` - ADB Unit of Account
// * `AFN` - Afghan Afghani
// * `AFA` - Afghan Afghani (1927–2002)
// * `ALL` - Albanian Lek
// * `ALK` - Albanian Lek (1946–1965)
// * `DZD` - Algerian Dinar
// * `ADP` - Andorran Peseta
// * `AOA` - Angolan Kwanza
// * `AOK` - Angolan Kwanza (1977–1991)
// * `AON` - Angolan New Kwanza (1990–2000)
// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
// * `ARA` - Argentine Austral
// * `ARS` - Argentine Peso
// * `ARM` - Argentine Peso (1881–1970)
// * `ARP` - Argentine Peso (1983–1985)
// * `ARL` - Argentine Peso Ley (1970–1983)
// * `AMD` - Armenian Dram
// * `AWG` - Aruban Florin
// * `AUD` - Australian Dollar
// * `ATS` - Austrian Schilling
// * `AZN` - Azerbaijani Manat
// * `AZM` - Azerbaijani Manat (1993–2006)
// * `BSD` - Bahamian Dollar
// * `BHD` - Bahraini Dinar
// * `BDT` - Bangladeshi Taka
// * `BBD` - Barbadian Dollar
// * `BYN` - Belarusian Ruble
// * `BYB` - Belarusian Ruble (1994–1999)
// * `BYR` - Belarusian Ruble (2000–2016)
// * `BEF` - Belgian Franc
// * `BEC` - Belgian Franc (convertible)
// * `BEL` - Belgian Franc (financial)
// * `BZD` - Belize Dollar
// * `BMD` - Bermudan Dollar
// * `BTN` - Bhutanese Ngultrum
// * `BOB` - Bolivian Boliviano
// * `BOL` - Bolivian Boliviano (1863–1963)
// * `BOV` - Bolivian Mvdol
// * `BOP` - Bolivian Peso
// * `BAM` - Bosnia-Herzegovina Convertible Mark
// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
// * `BWP` - Botswanan Pula
// * `BRC` - Brazilian Cruzado (1986–1989)
// * `BRZ` - Brazilian Cruzeiro (1942–1967)
// * `BRE` - Brazilian Cruzeiro (1990–1993)
// * `BRR` - Brazilian Cruzeiro (1993–1994)
// * `BRN` - Brazilian New Cruzado (1989–1990)
// * `BRB` - Brazilian New Cruzeiro (1967–1986)
// * `BRL` - Brazilian Real
// * `GBP` - British Pound
// * `BND` - Brunei Dollar
// * `BGL` - Bulgarian Hard Lev
// * `BGN` - Bulgarian Lev
// * `BGO` - Bulgarian Lev (1879–1952)
// * `BGM` - Bulgarian Socialist Lev
// * `BUK` - Burmese Kyat
// * `BIF` - Burundian Franc
// * `XPF` - CFP Franc
// * `KHR` - Cambodian Riel
// * `CAD` - Canadian Dollar
// * `CVE` - Cape Verdean Escudo
// * `KYD` - Cayman Islands Dollar
// * `XAF` - Central African CFA Franc
// * `CLE` - Chilean Escudo
// * `CLP` - Chilean Peso
// * `CLF` - Chilean Unit of Account (UF)
// * `CNX` - Chinese People’s Bank Dollar
// * `CNY` - Chinese Yuan
// * `CNH` - Chinese Yuan (offshore)
// * `COP` - Colombian Peso
// * `COU` - Colombian Real Value Unit
// * `KMF` - Comorian Franc
// * `CDF` - Congolese Franc
// * `CRC` - Costa Rican Colón
// * `HRD` - Croatian Dinar
// * `HRK` - Croatian Kuna
// * `CUC` - Cuban Convertible Peso
// * `CUP` - Cuban Peso
// * `CYP` - Cypriot Pound
// * `CZK` - Czech Koruna
// * `CSK` - Czechoslovak Hard Koruna
// * `DKK` - Danish Krone
// * `DJF` - Djiboutian Franc
// * `DOP` - Dominican Peso
// * `NLG` - Dutch Guilder
// * `XCD` - East Caribbean Dollar
// * `DDM` - East German Mark
// * `ECS` - Ecuadorian Sucre
// * `ECV` - Ecuadorian Unit of Constant Value
// * `EGP` - Egyptian Pound
// * `GQE` - Equatorial Guinean Ekwele
// * `ERN` - Eritrean Nakfa
// * `EEK` - Estonian Kroon
// * `ETB` - Ethiopian Birr
// * `EUR` - Euro
// * `XBA` - European Composite Unit
// * `XEU` - European Currency Unit
// * `XBB` - European Monetary Unit
// * `XBC` - European Unit of Account (XBC)
// * `XBD` - European Unit of Account (XBD)
// * `FKP` - Falkland Islands Pound
// * `FJD` - Fijian Dollar
// * `FIM` - Finnish Markka
// * `FRF` - French Franc
// * `XFO` - French Gold Franc
// * `XFU` - French UIC-Franc
// * `GMD` - Gambian Dalasi
// * `GEK` - Georgian Kupon Larit
// * `GEL` - Georgian Lari
// * `DEM` - German Mark
// * `GHS` - Ghanaian Cedi
// * `GHC` - Ghanaian Cedi (1979–2007)
// * `GIP` - Gibraltar Pound
// * `XAU` - Gold
// * `GRD` - Greek Drachma
// * `GTQ` - Guatemalan Quetzal
// * `GWP` - Guinea-Bissau Peso
// * `GNF` - Guinean Franc
// * `GNS` - Guinean Syli
// * `GYD` - Guyanaese Dollar
// * `HTG` - Haitian Gourde
// * `HNL` - Honduran Lempira
// * `HKD` - Hong Kong Dollar
// * `HUF` - Hungarian Forint
// * `IMP` - IMP
// * `ISK` - Icelandic Króna
// * `ISJ` - Icelandic Króna (1918–1981)
// * `INR` - Indian Rupee
// * `IDR` - Indonesian Rupiah
// * `IRR` - Iranian Rial
// * `IQD` - Iraqi Dinar
// * `IEP` - Irish Pound
// * `ILS` - Israeli New Shekel
// * `ILP` - Israeli Pound
// * `ILR` - Israeli Shekel (1980–1985)
// * `ITL` - Italian Lira
// * `JMD` - Jamaican Dollar
// * `JPY` - Japanese Yen
// * `JOD` - Jordanian Dinar
// * `KZT` - Kazakhstani Tenge
// * `KES` - Kenyan Shilling
// * `KWD` - Kuwaiti Dinar
// * `KGS` - Kyrgystani Som
// * `LAK` - Laotian Kip
// * `LVL` - Latvian Lats
// * `LVR` - Latvian Ruble
// * `LBP` - Lebanese Pound
// * `LSL` - Lesotho Loti
// * `LRD` - Liberian Dollar
// * `LYD` - Libyan Dinar
// * `LTL` - Lithuanian Litas
// * `LTT` - Lithuanian Talonas
// * `LUL` - Luxembourg Financial Franc
// * `LUC` - Luxembourgian Convertible Franc
// * `LUF` - Luxembourgian Franc
// * `MOP` - Macanese Pataca
// * `MKD` - Macedonian Denar
// * `MKN` - Macedonian Denar (1992–1993)
// * `MGA` - Malagasy Ariary
// * `MGF` - Malagasy Franc
// * `MWK` - Malawian Kwacha
// * `MYR` - Malaysian Ringgit
// * `MVR` - Maldivian Rufiyaa
// * `MVP` - Maldivian Rupee (1947–1981)
// * `MLF` - Malian Franc
// * `MTL` - Maltese Lira
// * `MTP` - Maltese Pound
// * `MRU` - Mauritanian Ouguiya
// * `MRO` - Mauritanian Ouguiya (1973–2017)
// * `MUR` - Mauritian Rupee
// * `MXV` - Mexican Investment Unit
// * `MXN` - Mexican Peso
// * `MXP` - Mexican Silver Peso (1861–1992)
// * `MDC` - Moldovan Cupon
// * `MDL` - Moldovan Leu
// * `MCF` - Monegasque Franc
// * `MNT` - Mongolian Tugrik
// * `MAD` - Moroccan Dirham
// * `MAF` - Moroccan Franc
// * `MZE` - Mozambican Escudo
// * `MZN` - Mozambican Metical
// * `MZM` - Mozambican Metical (1980–2006)
// * `MMK` - Myanmar Kyat
// * `NAD` - Namibian Dollar
// * `NPR` - Nepalese Rupee
// * `ANG` - Netherlands Antillean Guilder
// * `TWD` - New Taiwan Dollar
// * `NZD` - New Zealand Dollar
// * `NIO` - Nicaraguan Córdoba
// * `NIC` - Nicaraguan Córdoba (1988–1991)
// * `NGN` - Nigerian Naira
// * `KPW` - North Korean Won
// * `NOK` - Norwegian Krone
// * `OMR` - Omani Rial
// * `PKR` - Pakistani Rupee
// * `XPD` - Palladium
// * `PAB` - Panamanian Balboa
// * `PGK` - Papua New Guinean Kina
// * `PYG` - Paraguayan Guarani
// * `PEI` - Peruvian Inti
// * `PEN` - Peruvian Sol
// * `PES` - Peruvian Sol (1863–1965)
// * `PHP` - Philippine Peso
// * `XPT` - Platinum
// * `PLN` - Polish Zloty
// * `PLZ` - Polish Zloty (1950–1995)
// * `PTE` - Portuguese Escudo
// * `GWE` - Portuguese Guinea Escudo
// * `QAR` - Qatari Rial
// * `XRE` - RINET Funds
// * `RHD` - Rhodesian Dollar
// * `RON` - Romanian Leu
// * `ROL` - Romanian Leu (1952–2006)
// * `RUB` - Russian Ruble
// * `RUR` - Russian Ruble (1991–1998)
// * `RWF` - Rwandan Franc
// * `SVC` - Salvadoran Colón
// * `WST` - Samoan Tala
// * `SAR` - Saudi Riyal
// * `RSD` - Serbian Dinar
// * `CSD` - Serbian Dinar (2002–2006)
// * `SCR` - Seychellois Rupee
// * `SLL` - Sierra Leonean Leone
// * `XAG` - Silver
// * `SGD` - Singapore Dollar
// * `SKK` - Slovak Koruna
// * `SIT` - Slovenian Tolar
// * `SBD` - Solomon Islands Dollar
// * `SOS` - Somali Shilling
// * `ZAR` - South African Rand
// * `ZAL` - South African Rand (financial)
// * `KRH` - South Korean Hwan (1953–1962)
// * `KRW` - South Korean Won
// * `KRO` - South Korean Won (1945–1953)
// * `SSP` - South Sudanese Pound
// * `SUR` - Soviet Rouble
// * `ESP` - Spanish Peseta
// * `ESA` - Spanish Peseta (A account)
// * `ESB` - Spanish Peseta (convertible account)
// * `XDR` - Special Drawing Rights
// * `LKR` - Sri Lankan Rupee
// * `SHP` - St. Helena Pound
// * `XSU` - Sucre
// * `SDD` - Sudanese Dinar (1992–2007)
// * `SDG` - Sudanese Pound
// * `SDP` - Sudanese Pound (1957–1998)
// * `SRD` - Surinamese Dollar
// * `SRG` - Surinamese Guilder
// * `SZL` - Swazi Lilangeni
// * `SEK` - Swedish Krona
// * `CHF` - Swiss Franc
// * `SYP` - Syrian Pound
// * `STN` - São Tomé & Príncipe Dobra
// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
// * `TVD` - TVD
// * `TJR` - Tajikistani Ruble
// * `TJS` - Tajikistani Somoni
// * `TZS` - Tanzanian Shilling
// * `XTS` - Testing Currency Code
// * `THB` - Thai Baht
// * `XXX` - The codes assigned for transactions where no currency is involved
// * `TPE` - Timorese Escudo
// * `TOP` - Tongan Paʻanga
// * `TTD` - Trinidad & Tobago Dollar
// * `TND` - Tunisian Dinar
// * `TRY` - Turkish Lira
// * `TRL` - Turkish Lira (1922–2005)
// * `TMT` - Turkmenistani Manat
// * `TMM` - Turkmenistani Manat (1993–2009)
// * `USD` - US Dollar
// * `USN` - US Dollar (Next day)
// * `USS` - US Dollar (Same day)
// * `UGX` - Ugandan Shilling
// * `UGS` - Ugandan Shilling (1966–1987)
// * `UAH` - Ukrainian Hryvnia
// * `UAK` - Ukrainian Karbovanets
// * `AED` - United Arab Emirates Dirham
// * `UYW` - Uruguayan Nominal Wage Index Unit
// * `UYU` - Uruguayan Peso
// * `UYP` - Uruguayan Peso (1975–1993)
// * `UYI` - Uruguayan Peso (Indexed Units)
// * `UZS` - Uzbekistani Som
// * `VUV` - Vanuatu Vatu
// * `VES` - Venezuelan Bolívar
// * `VEB` - Venezuelan Bolívar (1871–2008)
// * `VEF` - Venezuelan Bolívar (2008–2018)
// * `VND` - Vietnamese Dong
// * `VNN` - Vietnamese Dong (1978–1985)
// * `CHE` - WIR Euro
// * `CHW` - WIR Franc
// * `XOF` - West African CFA Franc
// * `YDD` - Yemeni Dinar
// * `YER` - Yemeni Rial
// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
// * `YUM` - Yugoslavian New Dinar (1994–2002)
// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
// * `ZWN` - ZWN
// * `ZRN` - Zairean New Zaire (1993–1998)
// * `ZRZ` - Zairean Zaire (1971–1993)
// * `ZMW` - Zambian Kwacha
// * `ZMK` - Zambian Kwacha (1968–2012)
// * `ZWD` - Zimbabwean Dollar (1980–2008)
// * `ZWR` - Zimbabwean Dollar (2008)
// * `ZWL` - Zimbabwean Dollar (2009)
type ExpenseLineRequestCurrency struct {
	typeName     string
	CurrencyEnum CurrencyEnum
	String       string
}

func NewExpenseLineRequestCurrencyFromCurrencyEnum(value CurrencyEnum) *ExpenseLineRequestCurrency {
	return &ExpenseLineRequestCurrency{typeName: "currencyEnum", CurrencyEnum: value}
}

func NewExpenseLineRequestCurrencyFromString(value string) *ExpenseLineRequestCurrency {
	return &ExpenseLineRequestCurrency{typeName: "string", String: value}
}

func (e *ExpenseLineRequestCurrency) UnmarshalJSON(data []byte) error {
	var valueCurrencyEnum CurrencyEnum
	if err := json.Unmarshal(data, &valueCurrencyEnum); err == nil {
		e.typeName = "currencyEnum"
		e.CurrencyEnum = valueCurrencyEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e ExpenseLineRequestCurrency) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "currencyEnum":
		return json.Marshal(e.CurrencyEnum)
	case "string":
		return json.Marshal(e.String)
	}
}

type ExpenseLineRequestCurrencyVisitor interface {
	VisitCurrencyEnum(CurrencyEnum) error
	VisitString(string) error
}

func (e *ExpenseLineRequestCurrency) Accept(visitor ExpenseLineRequestCurrencyVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "currencyEnum":
		return visitor.VisitCurrencyEnum(e.CurrencyEnum)
	case "string":
		return visitor.VisitString(e.String)
	}
}

// The line's item.
type ExpenseLineRequestItem struct {
	typeName string
	String   string
	Item     *Item
}

func NewExpenseLineRequestItemFromString(value string) *ExpenseLineRequestItem {
	return &ExpenseLineRequestItem{typeName: "string", String: value}
}

func NewExpenseLineRequestItemFromItem(value *Item) *ExpenseLineRequestItem {
	return &ExpenseLineRequestItem{typeName: "item", Item: value}
}

func (e *ExpenseLineRequestItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	valueItem := new(Item)
	if err := json.Unmarshal(data, &valueItem); err == nil {
		e.typeName = "item"
		e.Item = valueItem
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e ExpenseLineRequestItem) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return json.Marshal(e.String)
	case "item":
		return json.Marshal(e.Item)
	}
}

type ExpenseLineRequestItemVisitor interface {
	VisitString(string) error
	VisitItem(*Item) error
}

func (e *ExpenseLineRequestItem) Accept(visitor ExpenseLineRequestItemVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return visitor.VisitString(e.String)
	case "item":
		return visitor.VisitItem(e.Item)
	}
}

type ExpenseLineRequestTrackingCategoriesItem struct {
	typeName         string
	String           string
	TrackingCategory *TrackingCategory
}

func NewExpenseLineRequestTrackingCategoriesItemFromString(value string) *ExpenseLineRequestTrackingCategoriesItem {
	return &ExpenseLineRequestTrackingCategoriesItem{typeName: "string", String: value}
}

func NewExpenseLineRequestTrackingCategoriesItemFromTrackingCategory(value *TrackingCategory) *ExpenseLineRequestTrackingCategoriesItem {
	return &ExpenseLineRequestTrackingCategoriesItem{typeName: "trackingCategory", TrackingCategory: value}
}

func (e *ExpenseLineRequestTrackingCategoriesItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	valueTrackingCategory := new(TrackingCategory)
	if err := json.Unmarshal(data, &valueTrackingCategory); err == nil {
		e.typeName = "trackingCategory"
		e.TrackingCategory = valueTrackingCategory
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e ExpenseLineRequestTrackingCategoriesItem) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return json.Marshal(e.String)
	case "trackingCategory":
		return json.Marshal(e.TrackingCategory)
	}
}

type ExpenseLineRequestTrackingCategoriesItemVisitor interface {
	VisitString(string) error
	VisitTrackingCategory(*TrackingCategory) error
}

func (e *ExpenseLineRequestTrackingCategoriesItem) Accept(visitor ExpenseLineRequestTrackingCategoriesItemVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return visitor.VisitString(e.String)
	case "trackingCategory":
		return visitor.VisitTrackingCategory(e.TrackingCategory)
	}
}

type ExpenseLineRequestTrackingCategory struct {
	typeName         string
	String           string
	TrackingCategory *TrackingCategory
}

func NewExpenseLineRequestTrackingCategoryFromString(value string) *ExpenseLineRequestTrackingCategory {
	return &ExpenseLineRequestTrackingCategory{typeName: "string", String: value}
}

func NewExpenseLineRequestTrackingCategoryFromTrackingCategory(value *TrackingCategory) *ExpenseLineRequestTrackingCategory {
	return &ExpenseLineRequestTrackingCategory{typeName: "trackingCategory", TrackingCategory: value}
}

func (e *ExpenseLineRequestTrackingCategory) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	valueTrackingCategory := new(TrackingCategory)
	if err := json.Unmarshal(data, &valueTrackingCategory); err == nil {
		e.typeName = "trackingCategory"
		e.TrackingCategory = valueTrackingCategory
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e ExpenseLineRequestTrackingCategory) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return json.Marshal(e.String)
	case "trackingCategory":
		return json.Marshal(e.TrackingCategory)
	}
}

type ExpenseLineRequestTrackingCategoryVisitor interface {
	VisitString(string) error
	VisitTrackingCategory(*TrackingCategory) error
}

func (e *ExpenseLineRequestTrackingCategory) Accept(visitor ExpenseLineRequestTrackingCategoryVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return visitor.VisitString(e.String)
	case "trackingCategory":
		return visitor.VisitTrackingCategory(e.TrackingCategory)
	}
}

type ExpenseLineTrackingCategoriesItem struct {
	typeName         string
	String           string
	TrackingCategory *TrackingCategory
}

func NewExpenseLineTrackingCategoriesItemFromString(value string) *ExpenseLineTrackingCategoriesItem {
	return &ExpenseLineTrackingCategoriesItem{typeName: "string", String: value}
}

func NewExpenseLineTrackingCategoriesItemFromTrackingCategory(value *TrackingCategory) *ExpenseLineTrackingCategoriesItem {
	return &ExpenseLineTrackingCategoriesItem{typeName: "trackingCategory", TrackingCategory: value}
}

func (e *ExpenseLineTrackingCategoriesItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	valueTrackingCategory := new(TrackingCategory)
	if err := json.Unmarshal(data, &valueTrackingCategory); err == nil {
		e.typeName = "trackingCategory"
		e.TrackingCategory = valueTrackingCategory
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e ExpenseLineTrackingCategoriesItem) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return json.Marshal(e.String)
	case "trackingCategory":
		return json.Marshal(e.TrackingCategory)
	}
}

type ExpenseLineTrackingCategoriesItemVisitor interface {
	VisitString(string) error
	VisitTrackingCategory(*TrackingCategory) error
}

func (e *ExpenseLineTrackingCategoriesItem) Accept(visitor ExpenseLineTrackingCategoriesItemVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return visitor.VisitString(e.String)
	case "trackingCategory":
		return visitor.VisitTrackingCategory(e.TrackingCategory)
	}
}

type ExpenseLineTrackingCategory struct {
	typeName         string
	String           string
	TrackingCategory *TrackingCategory
}

func NewExpenseLineTrackingCategoryFromString(value string) *ExpenseLineTrackingCategory {
	return &ExpenseLineTrackingCategory{typeName: "string", String: value}
}

func NewExpenseLineTrackingCategoryFromTrackingCategory(value *TrackingCategory) *ExpenseLineTrackingCategory {
	return &ExpenseLineTrackingCategory{typeName: "trackingCategory", TrackingCategory: value}
}

func (e *ExpenseLineTrackingCategory) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	valueTrackingCategory := new(TrackingCategory)
	if err := json.Unmarshal(data, &valueTrackingCategory); err == nil {
		e.typeName = "trackingCategory"
		e.TrackingCategory = valueTrackingCategory
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e ExpenseLineTrackingCategory) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return json.Marshal(e.String)
	case "trackingCategory":
		return json.Marshal(e.TrackingCategory)
	}
}

type ExpenseLineTrackingCategoryVisitor interface {
	VisitString(string) error
	VisitTrackingCategory(*TrackingCategory) error
}

func (e *ExpenseLineTrackingCategory) Accept(visitor ExpenseLineTrackingCategoryVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return visitor.VisitString(e.String)
	case "trackingCategory":
		return visitor.VisitTrackingCategory(e.TrackingCategory)
	}
}

// # The Expense Object
// ### Description
// The `Expense` object is used to represent a direct purchase by a business, typically made with a check, credit card, or cash. Each `Expense` object is dedicated to a grouping of expenses, with each expense recorded in the lines object.
//
// The `Expense` object is used also used to represent refunds to direct purchases. Refunds can be distinguished from purchases by the amount sign of the records. Expense objects with a negative amount are purchases and `Expense` objects with a positive amount are refunds to those purchases.
//
// ### Usage Example
// Fetch from the `GET Expense` endpoint and view a company's expense.
type ExpenseRequest struct {
	// When the transaction occurred.
	TransactionDate *time.Time `json:"transaction_date,omitempty"`
	// The expense's payment account.
	Account *ExpenseRequestAccount `json:"account,omitempty"`
	// The expense's contact.
	Contact *ExpenseRequestContact `json:"contact,omitempty"`
	// The expense's total amount.
	TotalAmount *float64 `json:"total_amount,omitempty"`
	// The expense's total amount before tax.
	SubTotal *float64 `json:"sub_total,omitempty"`
	// The expense's total tax amount.
	TotalTaxAmount *float64 `json:"total_tax_amount,omitempty"`
	// The expense's currency.
	//
	// * `XUA` - ADB Unit of Account
	// * `AFN` - Afghan Afghani
	// * `AFA` - Afghan Afghani (1927–2002)
	// * `ALL` - Albanian Lek
	// * `ALK` - Albanian Lek (1946–1965)
	// * `DZD` - Algerian Dinar
	// * `ADP` - Andorran Peseta
	// * `AOA` - Angolan Kwanza
	// * `AOK` - Angolan Kwanza (1977–1991)
	// * `AON` - Angolan New Kwanza (1990–2000)
	// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
	// * `ARA` - Argentine Austral
	// * `ARS` - Argentine Peso
	// * `ARM` - Argentine Peso (1881–1970)
	// * `ARP` - Argentine Peso (1983–1985)
	// * `ARL` - Argentine Peso Ley (1970–1983)
	// * `AMD` - Armenian Dram
	// * `AWG` - Aruban Florin
	// * `AUD` - Australian Dollar
	// * `ATS` - Austrian Schilling
	// * `AZN` - Azerbaijani Manat
	// * `AZM` - Azerbaijani Manat (1993–2006)
	// * `BSD` - Bahamian Dollar
	// * `BHD` - Bahraini Dinar
	// * `BDT` - Bangladeshi Taka
	// * `BBD` - Barbadian Dollar
	// * `BYN` - Belarusian Ruble
	// * `BYB` - Belarusian Ruble (1994–1999)
	// * `BYR` - Belarusian Ruble (2000–2016)
	// * `BEF` - Belgian Franc
	// * `BEC` - Belgian Franc (convertible)
	// * `BEL` - Belgian Franc (financial)
	// * `BZD` - Belize Dollar
	// * `BMD` - Bermudan Dollar
	// * `BTN` - Bhutanese Ngultrum
	// * `BOB` - Bolivian Boliviano
	// * `BOL` - Bolivian Boliviano (1863–1963)
	// * `BOV` - Bolivian Mvdol
	// * `BOP` - Bolivian Peso
	// * `BAM` - Bosnia-Herzegovina Convertible Mark
	// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
	// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
	// * `BWP` - Botswanan Pula
	// * `BRC` - Brazilian Cruzado (1986–1989)
	// * `BRZ` - Brazilian Cruzeiro (1942–1967)
	// * `BRE` - Brazilian Cruzeiro (1990–1993)
	// * `BRR` - Brazilian Cruzeiro (1993–1994)
	// * `BRN` - Brazilian New Cruzado (1989–1990)
	// * `BRB` - Brazilian New Cruzeiro (1967–1986)
	// * `BRL` - Brazilian Real
	// * `GBP` - British Pound
	// * `BND` - Brunei Dollar
	// * `BGL` - Bulgarian Hard Lev
	// * `BGN` - Bulgarian Lev
	// * `BGO` - Bulgarian Lev (1879–1952)
	// * `BGM` - Bulgarian Socialist Lev
	// * `BUK` - Burmese Kyat
	// * `BIF` - Burundian Franc
	// * `XPF` - CFP Franc
	// * `KHR` - Cambodian Riel
	// * `CAD` - Canadian Dollar
	// * `CVE` - Cape Verdean Escudo
	// * `KYD` - Cayman Islands Dollar
	// * `XAF` - Central African CFA Franc
	// * `CLE` - Chilean Escudo
	// * `CLP` - Chilean Peso
	// * `CLF` - Chilean Unit of Account (UF)
	// * `CNX` - Chinese People’s Bank Dollar
	// * `CNY` - Chinese Yuan
	// * `CNH` - Chinese Yuan (offshore)
	// * `COP` - Colombian Peso
	// * `COU` - Colombian Real Value Unit
	// * `KMF` - Comorian Franc
	// * `CDF` - Congolese Franc
	// * `CRC` - Costa Rican Colón
	// * `HRD` - Croatian Dinar
	// * `HRK` - Croatian Kuna
	// * `CUC` - Cuban Convertible Peso
	// * `CUP` - Cuban Peso
	// * `CYP` - Cypriot Pound
	// * `CZK` - Czech Koruna
	// * `CSK` - Czechoslovak Hard Koruna
	// * `DKK` - Danish Krone
	// * `DJF` - Djiboutian Franc
	// * `DOP` - Dominican Peso
	// * `NLG` - Dutch Guilder
	// * `XCD` - East Caribbean Dollar
	// * `DDM` - East German Mark
	// * `ECS` - Ecuadorian Sucre
	// * `ECV` - Ecuadorian Unit of Constant Value
	// * `EGP` - Egyptian Pound
	// * `GQE` - Equatorial Guinean Ekwele
	// * `ERN` - Eritrean Nakfa
	// * `EEK` - Estonian Kroon
	// * `ETB` - Ethiopian Birr
	// * `EUR` - Euro
	// * `XBA` - European Composite Unit
	// * `XEU` - European Currency Unit
	// * `XBB` - European Monetary Unit
	// * `XBC` - European Unit of Account (XBC)
	// * `XBD` - European Unit of Account (XBD)
	// * `FKP` - Falkland Islands Pound
	// * `FJD` - Fijian Dollar
	// * `FIM` - Finnish Markka
	// * `FRF` - French Franc
	// * `XFO` - French Gold Franc
	// * `XFU` - French UIC-Franc
	// * `GMD` - Gambian Dalasi
	// * `GEK` - Georgian Kupon Larit
	// * `GEL` - Georgian Lari
	// * `DEM` - German Mark
	// * `GHS` - Ghanaian Cedi
	// * `GHC` - Ghanaian Cedi (1979–2007)
	// * `GIP` - Gibraltar Pound
	// * `XAU` - Gold
	// * `GRD` - Greek Drachma
	// * `GTQ` - Guatemalan Quetzal
	// * `GWP` - Guinea-Bissau Peso
	// * `GNF` - Guinean Franc
	// * `GNS` - Guinean Syli
	// * `GYD` - Guyanaese Dollar
	// * `HTG` - Haitian Gourde
	// * `HNL` - Honduran Lempira
	// * `HKD` - Hong Kong Dollar
	// * `HUF` - Hungarian Forint
	// * `IMP` - IMP
	// * `ISK` - Icelandic Króna
	// * `ISJ` - Icelandic Króna (1918–1981)
	// * `INR` - Indian Rupee
	// * `IDR` - Indonesian Rupiah
	// * `IRR` - Iranian Rial
	// * `IQD` - Iraqi Dinar
	// * `IEP` - Irish Pound
	// * `ILS` - Israeli New Shekel
	// * `ILP` - Israeli Pound
	// * `ILR` - Israeli Shekel (1980–1985)
	// * `ITL` - Italian Lira
	// * `JMD` - Jamaican Dollar
	// * `JPY` - Japanese Yen
	// * `JOD` - Jordanian Dinar
	// * `KZT` - Kazakhstani Tenge
	// * `KES` - Kenyan Shilling
	// * `KWD` - Kuwaiti Dinar
	// * `KGS` - Kyrgystani Som
	// * `LAK` - Laotian Kip
	// * `LVL` - Latvian Lats
	// * `LVR` - Latvian Ruble
	// * `LBP` - Lebanese Pound
	// * `LSL` - Lesotho Loti
	// * `LRD` - Liberian Dollar
	// * `LYD` - Libyan Dinar
	// * `LTL` - Lithuanian Litas
	// * `LTT` - Lithuanian Talonas
	// * `LUL` - Luxembourg Financial Franc
	// * `LUC` - Luxembourgian Convertible Franc
	// * `LUF` - Luxembourgian Franc
	// * `MOP` - Macanese Pataca
	// * `MKD` - Macedonian Denar
	// * `MKN` - Macedonian Denar (1992–1993)
	// * `MGA` - Malagasy Ariary
	// * `MGF` - Malagasy Franc
	// * `MWK` - Malawian Kwacha
	// * `MYR` - Malaysian Ringgit
	// * `MVR` - Maldivian Rufiyaa
	// * `MVP` - Maldivian Rupee (1947–1981)
	// * `MLF` - Malian Franc
	// * `MTL` - Maltese Lira
	// * `MTP` - Maltese Pound
	// * `MRU` - Mauritanian Ouguiya
	// * `MRO` - Mauritanian Ouguiya (1973–2017)
	// * `MUR` - Mauritian Rupee
	// * `MXV` - Mexican Investment Unit
	// * `MXN` - Mexican Peso
	// * `MXP` - Mexican Silver Peso (1861–1992)
	// * `MDC` - Moldovan Cupon
	// * `MDL` - Moldovan Leu
	// * `MCF` - Monegasque Franc
	// * `MNT` - Mongolian Tugrik
	// * `MAD` - Moroccan Dirham
	// * `MAF` - Moroccan Franc
	// * `MZE` - Mozambican Escudo
	// * `MZN` - Mozambican Metical
	// * `MZM` - Mozambican Metical (1980–2006)
	// * `MMK` - Myanmar Kyat
	// * `NAD` - Namibian Dollar
	// * `NPR` - Nepalese Rupee
	// * `ANG` - Netherlands Antillean Guilder
	// * `TWD` - New Taiwan Dollar
	// * `NZD` - New Zealand Dollar
	// * `NIO` - Nicaraguan Córdoba
	// * `NIC` - Nicaraguan Córdoba (1988–1991)
	// * `NGN` - Nigerian Naira
	// * `KPW` - North Korean Won
	// * `NOK` - Norwegian Krone
	// * `OMR` - Omani Rial
	// * `PKR` - Pakistani Rupee
	// * `XPD` - Palladium
	// * `PAB` - Panamanian Balboa
	// * `PGK` - Papua New Guinean Kina
	// * `PYG` - Paraguayan Guarani
	// * `PEI` - Peruvian Inti
	// * `PEN` - Peruvian Sol
	// * `PES` - Peruvian Sol (1863–1965)
	// * `PHP` - Philippine Peso
	// * `XPT` - Platinum
	// * `PLN` - Polish Zloty
	// * `PLZ` - Polish Zloty (1950–1995)
	// * `PTE` - Portuguese Escudo
	// * `GWE` - Portuguese Guinea Escudo
	// * `QAR` - Qatari Rial
	// * `XRE` - RINET Funds
	// * `RHD` - Rhodesian Dollar
	// * `RON` - Romanian Leu
	// * `ROL` - Romanian Leu (1952–2006)
	// * `RUB` - Russian Ruble
	// * `RUR` - Russian Ruble (1991–1998)
	// * `RWF` - Rwandan Franc
	// * `SVC` - Salvadoran Colón
	// * `WST` - Samoan Tala
	// * `SAR` - Saudi Riyal
	// * `RSD` - Serbian Dinar
	// * `CSD` - Serbian Dinar (2002–2006)
	// * `SCR` - Seychellois Rupee
	// * `SLL` - Sierra Leonean Leone
	// * `XAG` - Silver
	// * `SGD` - Singapore Dollar
	// * `SKK` - Slovak Koruna
	// * `SIT` - Slovenian Tolar
	// * `SBD` - Solomon Islands Dollar
	// * `SOS` - Somali Shilling
	// * `ZAR` - South African Rand
	// * `ZAL` - South African Rand (financial)
	// * `KRH` - South Korean Hwan (1953–1962)
	// * `KRW` - South Korean Won
	// * `KRO` - South Korean Won (1945–1953)
	// * `SSP` - South Sudanese Pound
	// * `SUR` - Soviet Rouble
	// * `ESP` - Spanish Peseta
	// * `ESA` - Spanish Peseta (A account)
	// * `ESB` - Spanish Peseta (convertible account)
	// * `XDR` - Special Drawing Rights
	// * `LKR` - Sri Lankan Rupee
	// * `SHP` - St. Helena Pound
	// * `XSU` - Sucre
	// * `SDD` - Sudanese Dinar (1992–2007)
	// * `SDG` - Sudanese Pound
	// * `SDP` - Sudanese Pound (1957–1998)
	// * `SRD` - Surinamese Dollar
	// * `SRG` - Surinamese Guilder
	// * `SZL` - Swazi Lilangeni
	// * `SEK` - Swedish Krona
	// * `CHF` - Swiss Franc
	// * `SYP` - Syrian Pound
	// * `STN` - São Tomé & Príncipe Dobra
	// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
	// * `TVD` - TVD
	// * `TJR` - Tajikistani Ruble
	// * `TJS` - Tajikistani Somoni
	// * `TZS` - Tanzanian Shilling
	// * `XTS` - Testing Currency Code
	// * `THB` - Thai Baht
	// * `XXX` - The codes assigned for transactions where no currency is involved
	// * `TPE` - Timorese Escudo
	// * `TOP` - Tongan Paʻanga
	// * `TTD` - Trinidad & Tobago Dollar
	// * `TND` - Tunisian Dinar
	// * `TRY` - Turkish Lira
	// * `TRL` - Turkish Lira (1922–2005)
	// * `TMT` - Turkmenistani Manat
	// * `TMM` - Turkmenistani Manat (1993–2009)
	// * `USD` - US Dollar
	// * `USN` - US Dollar (Next day)
	// * `USS` - US Dollar (Same day)
	// * `UGX` - Ugandan Shilling
	// * `UGS` - Ugandan Shilling (1966–1987)
	// * `UAH` - Ukrainian Hryvnia
	// * `UAK` - Ukrainian Karbovanets
	// * `AED` - United Arab Emirates Dirham
	// * `UYW` - Uruguayan Nominal Wage Index Unit
	// * `UYU` - Uruguayan Peso
	// * `UYP` - Uruguayan Peso (1975–1993)
	// * `UYI` - Uruguayan Peso (Indexed Units)
	// * `UZS` - Uzbekistani Som
	// * `VUV` - Vanuatu Vatu
	// * `VES` - Venezuelan Bolívar
	// * `VEB` - Venezuelan Bolívar (1871–2008)
	// * `VEF` - Venezuelan Bolívar (2008–2018)
	// * `VND` - Vietnamese Dong
	// * `VNN` - Vietnamese Dong (1978–1985)
	// * `CHE` - WIR Euro
	// * `CHW` - WIR Franc
	// * `XOF` - West African CFA Franc
	// * `YDD` - Yemeni Dinar
	// * `YER` - Yemeni Rial
	// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
	// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
	// * `YUM` - Yugoslavian New Dinar (1994–2002)
	// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
	// * `ZWN` - ZWN
	// * `ZRN` - Zairean New Zaire (1993–1998)
	// * `ZRZ` - Zairean Zaire (1971–1993)
	// * `ZMW` - Zambian Kwacha
	// * `ZMK` - Zambian Kwacha (1968–2012)
	// * `ZWD` - Zimbabwean Dollar (1980–2008)
	// * `ZWR` - Zimbabwean Dollar (2008)
	// * `ZWL` - Zimbabwean Dollar (2009)
	Currency *ExpenseRequestCurrency `json:"currency,omitempty"`
	// The expense's exchange rate.
	ExchangeRate *string `json:"exchange_rate,omitempty"`
	// The company the expense belongs to.
	Company *ExpenseRequestCompany `json:"company,omitempty"`
	// The expense's private note.
	Memo               *string                                 `json:"memo,omitempty"`
	Lines              []*ExpenseLineRequest                   `json:"lines,omitempty"`
	TrackingCategories []*ExpenseRequestTrackingCategoriesItem `json:"tracking_categories,omitempty"`
	// The accounting period that the Expense was generated in.
	AccountingPeriod    *ExpenseRequestAccountingPeriod `json:"accounting_period,omitempty"`
	IntegrationParams   map[string]any                  `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]any                  `json:"linked_account_params,omitempty"`
}

// The expense's payment account.
type ExpenseRequestAccount struct {
	typeName string
	String   string
	Account  *Account
}

func NewExpenseRequestAccountFromString(value string) *ExpenseRequestAccount {
	return &ExpenseRequestAccount{typeName: "string", String: value}
}

func NewExpenseRequestAccountFromAccount(value *Account) *ExpenseRequestAccount {
	return &ExpenseRequestAccount{typeName: "account", Account: value}
}

func (e *ExpenseRequestAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		e.typeName = "account"
		e.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e ExpenseRequestAccount) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return json.Marshal(e.String)
	case "account":
		return json.Marshal(e.Account)
	}
}

type ExpenseRequestAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (e *ExpenseRequestAccount) Accept(visitor ExpenseRequestAccountVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return visitor.VisitString(e.String)
	case "account":
		return visitor.VisitAccount(e.Account)
	}
}

// The accounting period that the Expense was generated in.
type ExpenseRequestAccountingPeriod struct {
	typeName         string
	String           string
	AccountingPeriod *AccountingPeriod
}

func NewExpenseRequestAccountingPeriodFromString(value string) *ExpenseRequestAccountingPeriod {
	return &ExpenseRequestAccountingPeriod{typeName: "string", String: value}
}

func NewExpenseRequestAccountingPeriodFromAccountingPeriod(value *AccountingPeriod) *ExpenseRequestAccountingPeriod {
	return &ExpenseRequestAccountingPeriod{typeName: "accountingPeriod", AccountingPeriod: value}
}

func (e *ExpenseRequestAccountingPeriod) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	valueAccountingPeriod := new(AccountingPeriod)
	if err := json.Unmarshal(data, &valueAccountingPeriod); err == nil {
		e.typeName = "accountingPeriod"
		e.AccountingPeriod = valueAccountingPeriod
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e ExpenseRequestAccountingPeriod) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return json.Marshal(e.String)
	case "accountingPeriod":
		return json.Marshal(e.AccountingPeriod)
	}
}

type ExpenseRequestAccountingPeriodVisitor interface {
	VisitString(string) error
	VisitAccountingPeriod(*AccountingPeriod) error
}

func (e *ExpenseRequestAccountingPeriod) Accept(visitor ExpenseRequestAccountingPeriodVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return visitor.VisitString(e.String)
	case "accountingPeriod":
		return visitor.VisitAccountingPeriod(e.AccountingPeriod)
	}
}

// The company the expense belongs to.
type ExpenseRequestCompany struct {
	typeName    string
	String      string
	CompanyInfo *CompanyInfo
}

func NewExpenseRequestCompanyFromString(value string) *ExpenseRequestCompany {
	return &ExpenseRequestCompany{typeName: "string", String: value}
}

func NewExpenseRequestCompanyFromCompanyInfo(value *CompanyInfo) *ExpenseRequestCompany {
	return &ExpenseRequestCompany{typeName: "companyInfo", CompanyInfo: value}
}

func (e *ExpenseRequestCompany) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	valueCompanyInfo := new(CompanyInfo)
	if err := json.Unmarshal(data, &valueCompanyInfo); err == nil {
		e.typeName = "companyInfo"
		e.CompanyInfo = valueCompanyInfo
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e ExpenseRequestCompany) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return json.Marshal(e.String)
	case "companyInfo":
		return json.Marshal(e.CompanyInfo)
	}
}

type ExpenseRequestCompanyVisitor interface {
	VisitString(string) error
	VisitCompanyInfo(*CompanyInfo) error
}

func (e *ExpenseRequestCompany) Accept(visitor ExpenseRequestCompanyVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return visitor.VisitString(e.String)
	case "companyInfo":
		return visitor.VisitCompanyInfo(e.CompanyInfo)
	}
}

// The expense's contact.
type ExpenseRequestContact struct {
	typeName string
	String   string
	Contact  *Contact
}

func NewExpenseRequestContactFromString(value string) *ExpenseRequestContact {
	return &ExpenseRequestContact{typeName: "string", String: value}
}

func NewExpenseRequestContactFromContact(value *Contact) *ExpenseRequestContact {
	return &ExpenseRequestContact{typeName: "contact", Contact: value}
}

func (e *ExpenseRequestContact) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	valueContact := new(Contact)
	if err := json.Unmarshal(data, &valueContact); err == nil {
		e.typeName = "contact"
		e.Contact = valueContact
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e ExpenseRequestContact) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return json.Marshal(e.String)
	case "contact":
		return json.Marshal(e.Contact)
	}
}

type ExpenseRequestContactVisitor interface {
	VisitString(string) error
	VisitContact(*Contact) error
}

func (e *ExpenseRequestContact) Accept(visitor ExpenseRequestContactVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return visitor.VisitString(e.String)
	case "contact":
		return visitor.VisitContact(e.Contact)
	}
}

// The expense's currency.
//
// * `XUA` - ADB Unit of Account
// * `AFN` - Afghan Afghani
// * `AFA` - Afghan Afghani (1927–2002)
// * `ALL` - Albanian Lek
// * `ALK` - Albanian Lek (1946–1965)
// * `DZD` - Algerian Dinar
// * `ADP` - Andorran Peseta
// * `AOA` - Angolan Kwanza
// * `AOK` - Angolan Kwanza (1977–1991)
// * `AON` - Angolan New Kwanza (1990–2000)
// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
// * `ARA` - Argentine Austral
// * `ARS` - Argentine Peso
// * `ARM` - Argentine Peso (1881–1970)
// * `ARP` - Argentine Peso (1983–1985)
// * `ARL` - Argentine Peso Ley (1970–1983)
// * `AMD` - Armenian Dram
// * `AWG` - Aruban Florin
// * `AUD` - Australian Dollar
// * `ATS` - Austrian Schilling
// * `AZN` - Azerbaijani Manat
// * `AZM` - Azerbaijani Manat (1993–2006)
// * `BSD` - Bahamian Dollar
// * `BHD` - Bahraini Dinar
// * `BDT` - Bangladeshi Taka
// * `BBD` - Barbadian Dollar
// * `BYN` - Belarusian Ruble
// * `BYB` - Belarusian Ruble (1994–1999)
// * `BYR` - Belarusian Ruble (2000–2016)
// * `BEF` - Belgian Franc
// * `BEC` - Belgian Franc (convertible)
// * `BEL` - Belgian Franc (financial)
// * `BZD` - Belize Dollar
// * `BMD` - Bermudan Dollar
// * `BTN` - Bhutanese Ngultrum
// * `BOB` - Bolivian Boliviano
// * `BOL` - Bolivian Boliviano (1863–1963)
// * `BOV` - Bolivian Mvdol
// * `BOP` - Bolivian Peso
// * `BAM` - Bosnia-Herzegovina Convertible Mark
// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
// * `BWP` - Botswanan Pula
// * `BRC` - Brazilian Cruzado (1986–1989)
// * `BRZ` - Brazilian Cruzeiro (1942–1967)
// * `BRE` - Brazilian Cruzeiro (1990–1993)
// * `BRR` - Brazilian Cruzeiro (1993–1994)
// * `BRN` - Brazilian New Cruzado (1989–1990)
// * `BRB` - Brazilian New Cruzeiro (1967–1986)
// * `BRL` - Brazilian Real
// * `GBP` - British Pound
// * `BND` - Brunei Dollar
// * `BGL` - Bulgarian Hard Lev
// * `BGN` - Bulgarian Lev
// * `BGO` - Bulgarian Lev (1879–1952)
// * `BGM` - Bulgarian Socialist Lev
// * `BUK` - Burmese Kyat
// * `BIF` - Burundian Franc
// * `XPF` - CFP Franc
// * `KHR` - Cambodian Riel
// * `CAD` - Canadian Dollar
// * `CVE` - Cape Verdean Escudo
// * `KYD` - Cayman Islands Dollar
// * `XAF` - Central African CFA Franc
// * `CLE` - Chilean Escudo
// * `CLP` - Chilean Peso
// * `CLF` - Chilean Unit of Account (UF)
// * `CNX` - Chinese People’s Bank Dollar
// * `CNY` - Chinese Yuan
// * `CNH` - Chinese Yuan (offshore)
// * `COP` - Colombian Peso
// * `COU` - Colombian Real Value Unit
// * `KMF` - Comorian Franc
// * `CDF` - Congolese Franc
// * `CRC` - Costa Rican Colón
// * `HRD` - Croatian Dinar
// * `HRK` - Croatian Kuna
// * `CUC` - Cuban Convertible Peso
// * `CUP` - Cuban Peso
// * `CYP` - Cypriot Pound
// * `CZK` - Czech Koruna
// * `CSK` - Czechoslovak Hard Koruna
// * `DKK` - Danish Krone
// * `DJF` - Djiboutian Franc
// * `DOP` - Dominican Peso
// * `NLG` - Dutch Guilder
// * `XCD` - East Caribbean Dollar
// * `DDM` - East German Mark
// * `ECS` - Ecuadorian Sucre
// * `ECV` - Ecuadorian Unit of Constant Value
// * `EGP` - Egyptian Pound
// * `GQE` - Equatorial Guinean Ekwele
// * `ERN` - Eritrean Nakfa
// * `EEK` - Estonian Kroon
// * `ETB` - Ethiopian Birr
// * `EUR` - Euro
// * `XBA` - European Composite Unit
// * `XEU` - European Currency Unit
// * `XBB` - European Monetary Unit
// * `XBC` - European Unit of Account (XBC)
// * `XBD` - European Unit of Account (XBD)
// * `FKP` - Falkland Islands Pound
// * `FJD` - Fijian Dollar
// * `FIM` - Finnish Markka
// * `FRF` - French Franc
// * `XFO` - French Gold Franc
// * `XFU` - French UIC-Franc
// * `GMD` - Gambian Dalasi
// * `GEK` - Georgian Kupon Larit
// * `GEL` - Georgian Lari
// * `DEM` - German Mark
// * `GHS` - Ghanaian Cedi
// * `GHC` - Ghanaian Cedi (1979–2007)
// * `GIP` - Gibraltar Pound
// * `XAU` - Gold
// * `GRD` - Greek Drachma
// * `GTQ` - Guatemalan Quetzal
// * `GWP` - Guinea-Bissau Peso
// * `GNF` - Guinean Franc
// * `GNS` - Guinean Syli
// * `GYD` - Guyanaese Dollar
// * `HTG` - Haitian Gourde
// * `HNL` - Honduran Lempira
// * `HKD` - Hong Kong Dollar
// * `HUF` - Hungarian Forint
// * `IMP` - IMP
// * `ISK` - Icelandic Króna
// * `ISJ` - Icelandic Króna (1918–1981)
// * `INR` - Indian Rupee
// * `IDR` - Indonesian Rupiah
// * `IRR` - Iranian Rial
// * `IQD` - Iraqi Dinar
// * `IEP` - Irish Pound
// * `ILS` - Israeli New Shekel
// * `ILP` - Israeli Pound
// * `ILR` - Israeli Shekel (1980–1985)
// * `ITL` - Italian Lira
// * `JMD` - Jamaican Dollar
// * `JPY` - Japanese Yen
// * `JOD` - Jordanian Dinar
// * `KZT` - Kazakhstani Tenge
// * `KES` - Kenyan Shilling
// * `KWD` - Kuwaiti Dinar
// * `KGS` - Kyrgystani Som
// * `LAK` - Laotian Kip
// * `LVL` - Latvian Lats
// * `LVR` - Latvian Ruble
// * `LBP` - Lebanese Pound
// * `LSL` - Lesotho Loti
// * `LRD` - Liberian Dollar
// * `LYD` - Libyan Dinar
// * `LTL` - Lithuanian Litas
// * `LTT` - Lithuanian Talonas
// * `LUL` - Luxembourg Financial Franc
// * `LUC` - Luxembourgian Convertible Franc
// * `LUF` - Luxembourgian Franc
// * `MOP` - Macanese Pataca
// * `MKD` - Macedonian Denar
// * `MKN` - Macedonian Denar (1992–1993)
// * `MGA` - Malagasy Ariary
// * `MGF` - Malagasy Franc
// * `MWK` - Malawian Kwacha
// * `MYR` - Malaysian Ringgit
// * `MVR` - Maldivian Rufiyaa
// * `MVP` - Maldivian Rupee (1947–1981)
// * `MLF` - Malian Franc
// * `MTL` - Maltese Lira
// * `MTP` - Maltese Pound
// * `MRU` - Mauritanian Ouguiya
// * `MRO` - Mauritanian Ouguiya (1973–2017)
// * `MUR` - Mauritian Rupee
// * `MXV` - Mexican Investment Unit
// * `MXN` - Mexican Peso
// * `MXP` - Mexican Silver Peso (1861–1992)
// * `MDC` - Moldovan Cupon
// * `MDL` - Moldovan Leu
// * `MCF` - Monegasque Franc
// * `MNT` - Mongolian Tugrik
// * `MAD` - Moroccan Dirham
// * `MAF` - Moroccan Franc
// * `MZE` - Mozambican Escudo
// * `MZN` - Mozambican Metical
// * `MZM` - Mozambican Metical (1980–2006)
// * `MMK` - Myanmar Kyat
// * `NAD` - Namibian Dollar
// * `NPR` - Nepalese Rupee
// * `ANG` - Netherlands Antillean Guilder
// * `TWD` - New Taiwan Dollar
// * `NZD` - New Zealand Dollar
// * `NIO` - Nicaraguan Córdoba
// * `NIC` - Nicaraguan Córdoba (1988–1991)
// * `NGN` - Nigerian Naira
// * `KPW` - North Korean Won
// * `NOK` - Norwegian Krone
// * `OMR` - Omani Rial
// * `PKR` - Pakistani Rupee
// * `XPD` - Palladium
// * `PAB` - Panamanian Balboa
// * `PGK` - Papua New Guinean Kina
// * `PYG` - Paraguayan Guarani
// * `PEI` - Peruvian Inti
// * `PEN` - Peruvian Sol
// * `PES` - Peruvian Sol (1863–1965)
// * `PHP` - Philippine Peso
// * `XPT` - Platinum
// * `PLN` - Polish Zloty
// * `PLZ` - Polish Zloty (1950–1995)
// * `PTE` - Portuguese Escudo
// * `GWE` - Portuguese Guinea Escudo
// * `QAR` - Qatari Rial
// * `XRE` - RINET Funds
// * `RHD` - Rhodesian Dollar
// * `RON` - Romanian Leu
// * `ROL` - Romanian Leu (1952–2006)
// * `RUB` - Russian Ruble
// * `RUR` - Russian Ruble (1991–1998)
// * `RWF` - Rwandan Franc
// * `SVC` - Salvadoran Colón
// * `WST` - Samoan Tala
// * `SAR` - Saudi Riyal
// * `RSD` - Serbian Dinar
// * `CSD` - Serbian Dinar (2002–2006)
// * `SCR` - Seychellois Rupee
// * `SLL` - Sierra Leonean Leone
// * `XAG` - Silver
// * `SGD` - Singapore Dollar
// * `SKK` - Slovak Koruna
// * `SIT` - Slovenian Tolar
// * `SBD` - Solomon Islands Dollar
// * `SOS` - Somali Shilling
// * `ZAR` - South African Rand
// * `ZAL` - South African Rand (financial)
// * `KRH` - South Korean Hwan (1953–1962)
// * `KRW` - South Korean Won
// * `KRO` - South Korean Won (1945–1953)
// * `SSP` - South Sudanese Pound
// * `SUR` - Soviet Rouble
// * `ESP` - Spanish Peseta
// * `ESA` - Spanish Peseta (A account)
// * `ESB` - Spanish Peseta (convertible account)
// * `XDR` - Special Drawing Rights
// * `LKR` - Sri Lankan Rupee
// * `SHP` - St. Helena Pound
// * `XSU` - Sucre
// * `SDD` - Sudanese Dinar (1992–2007)
// * `SDG` - Sudanese Pound
// * `SDP` - Sudanese Pound (1957–1998)
// * `SRD` - Surinamese Dollar
// * `SRG` - Surinamese Guilder
// * `SZL` - Swazi Lilangeni
// * `SEK` - Swedish Krona
// * `CHF` - Swiss Franc
// * `SYP` - Syrian Pound
// * `STN` - São Tomé & Príncipe Dobra
// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
// * `TVD` - TVD
// * `TJR` - Tajikistani Ruble
// * `TJS` - Tajikistani Somoni
// * `TZS` - Tanzanian Shilling
// * `XTS` - Testing Currency Code
// * `THB` - Thai Baht
// * `XXX` - The codes assigned for transactions where no currency is involved
// * `TPE` - Timorese Escudo
// * `TOP` - Tongan Paʻanga
// * `TTD` - Trinidad & Tobago Dollar
// * `TND` - Tunisian Dinar
// * `TRY` - Turkish Lira
// * `TRL` - Turkish Lira (1922–2005)
// * `TMT` - Turkmenistani Manat
// * `TMM` - Turkmenistani Manat (1993–2009)
// * `USD` - US Dollar
// * `USN` - US Dollar (Next day)
// * `USS` - US Dollar (Same day)
// * `UGX` - Ugandan Shilling
// * `UGS` - Ugandan Shilling (1966–1987)
// * `UAH` - Ukrainian Hryvnia
// * `UAK` - Ukrainian Karbovanets
// * `AED` - United Arab Emirates Dirham
// * `UYW` - Uruguayan Nominal Wage Index Unit
// * `UYU` - Uruguayan Peso
// * `UYP` - Uruguayan Peso (1975–1993)
// * `UYI` - Uruguayan Peso (Indexed Units)
// * `UZS` - Uzbekistani Som
// * `VUV` - Vanuatu Vatu
// * `VES` - Venezuelan Bolívar
// * `VEB` - Venezuelan Bolívar (1871–2008)
// * `VEF` - Venezuelan Bolívar (2008–2018)
// * `VND` - Vietnamese Dong
// * `VNN` - Vietnamese Dong (1978–1985)
// * `CHE` - WIR Euro
// * `CHW` - WIR Franc
// * `XOF` - West African CFA Franc
// * `YDD` - Yemeni Dinar
// * `YER` - Yemeni Rial
// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
// * `YUM` - Yugoslavian New Dinar (1994–2002)
// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
// * `ZWN` - ZWN
// * `ZRN` - Zairean New Zaire (1993–1998)
// * `ZRZ` - Zairean Zaire (1971–1993)
// * `ZMW` - Zambian Kwacha
// * `ZMK` - Zambian Kwacha (1968–2012)
// * `ZWD` - Zimbabwean Dollar (1980–2008)
// * `ZWR` - Zimbabwean Dollar (2008)
// * `ZWL` - Zimbabwean Dollar (2009)
type ExpenseRequestCurrency struct {
	typeName     string
	CurrencyEnum CurrencyEnum
	String       string
}

func NewExpenseRequestCurrencyFromCurrencyEnum(value CurrencyEnum) *ExpenseRequestCurrency {
	return &ExpenseRequestCurrency{typeName: "currencyEnum", CurrencyEnum: value}
}

func NewExpenseRequestCurrencyFromString(value string) *ExpenseRequestCurrency {
	return &ExpenseRequestCurrency{typeName: "string", String: value}
}

func (e *ExpenseRequestCurrency) UnmarshalJSON(data []byte) error {
	var valueCurrencyEnum CurrencyEnum
	if err := json.Unmarshal(data, &valueCurrencyEnum); err == nil {
		e.typeName = "currencyEnum"
		e.CurrencyEnum = valueCurrencyEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e ExpenseRequestCurrency) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "currencyEnum":
		return json.Marshal(e.CurrencyEnum)
	case "string":
		return json.Marshal(e.String)
	}
}

type ExpenseRequestCurrencyVisitor interface {
	VisitCurrencyEnum(CurrencyEnum) error
	VisitString(string) error
}

func (e *ExpenseRequestCurrency) Accept(visitor ExpenseRequestCurrencyVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "currencyEnum":
		return visitor.VisitCurrencyEnum(e.CurrencyEnum)
	case "string":
		return visitor.VisitString(e.String)
	}
}

type ExpenseRequestTrackingCategoriesItem struct {
	typeName         string
	String           string
	TrackingCategory *TrackingCategory
}

func NewExpenseRequestTrackingCategoriesItemFromString(value string) *ExpenseRequestTrackingCategoriesItem {
	return &ExpenseRequestTrackingCategoriesItem{typeName: "string", String: value}
}

func NewExpenseRequestTrackingCategoriesItemFromTrackingCategory(value *TrackingCategory) *ExpenseRequestTrackingCategoriesItem {
	return &ExpenseRequestTrackingCategoriesItem{typeName: "trackingCategory", TrackingCategory: value}
}

func (e *ExpenseRequestTrackingCategoriesItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	valueTrackingCategory := new(TrackingCategory)
	if err := json.Unmarshal(data, &valueTrackingCategory); err == nil {
		e.typeName = "trackingCategory"
		e.TrackingCategory = valueTrackingCategory
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e ExpenseRequestTrackingCategoriesItem) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return json.Marshal(e.String)
	case "trackingCategory":
		return json.Marshal(e.TrackingCategory)
	}
}

type ExpenseRequestTrackingCategoriesItemVisitor interface {
	VisitString(string) error
	VisitTrackingCategory(*TrackingCategory) error
}

func (e *ExpenseRequestTrackingCategoriesItem) Accept(visitor ExpenseRequestTrackingCategoriesItemVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return visitor.VisitString(e.String)
	case "trackingCategory":
		return visitor.VisitTrackingCategory(e.TrackingCategory)
	}
}

type ExpenseResponse struct {
	Model    *Expense                    `json:"model,omitempty"`
	Warnings []*WarningValidationProblem `json:"warnings,omitempty"`
	Errors   []*ErrorValidationProblem   `json:"errors,omitempty"`
	Logs     []*DebugModeLog             `json:"logs,omitempty"`
}

type ExpenseTrackingCategoriesItem struct {
	typeName         string
	String           string
	TrackingCategory *TrackingCategory
}

func NewExpenseTrackingCategoriesItemFromString(value string) *ExpenseTrackingCategoriesItem {
	return &ExpenseTrackingCategoriesItem{typeName: "string", String: value}
}

func NewExpenseTrackingCategoriesItemFromTrackingCategory(value *TrackingCategory) *ExpenseTrackingCategoriesItem {
	return &ExpenseTrackingCategoriesItem{typeName: "trackingCategory", TrackingCategory: value}
}

func (e *ExpenseTrackingCategoriesItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	valueTrackingCategory := new(TrackingCategory)
	if err := json.Unmarshal(data, &valueTrackingCategory); err == nil {
		e.typeName = "trackingCategory"
		e.TrackingCategory = valueTrackingCategory
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e ExpenseTrackingCategoriesItem) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return json.Marshal(e.String)
	case "trackingCategory":
		return json.Marshal(e.TrackingCategory)
	}
}

type ExpenseTrackingCategoriesItemVisitor interface {
	VisitString(string) error
	VisitTrackingCategory(*TrackingCategory) error
}

func (e *ExpenseTrackingCategoriesItem) Accept(visitor ExpenseTrackingCategoriesItemVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return visitor.VisitString(e.String)
	case "trackingCategory":
		return visitor.VisitTrackingCategory(e.TrackingCategory)
	}
}

type ExpensesListRequestExpand uint

const (
	ExpensesListRequestExpandAccount ExpensesListRequestExpand = iota + 1
	ExpensesListRequestExpandAccountAccountingPeriod
	ExpensesListRequestExpandAccountCompany
	ExpensesListRequestExpandAccountCompanyAccountingPeriod
	ExpensesListRequestExpandAccountContact
	ExpensesListRequestExpandAccountContactAccountingPeriod
	ExpensesListRequestExpandAccountContactCompany
	ExpensesListRequestExpandAccountContactCompanyAccountingPeriod
	ExpensesListRequestExpandAccountingPeriod
	ExpensesListRequestExpandCompany
	ExpensesListRequestExpandCompanyAccountingPeriod
	ExpensesListRequestExpandContact
	ExpensesListRequestExpandContactAccountingPeriod
	ExpensesListRequestExpandContactCompany
	ExpensesListRequestExpandContactCompanyAccountingPeriod
	ExpensesListRequestExpandTrackingCategories
	ExpensesListRequestExpandTrackingCategoriesAccount
	ExpensesListRequestExpandTrackingCategoriesAccountAccountingPeriod
	ExpensesListRequestExpandTrackingCategoriesAccountCompany
	ExpensesListRequestExpandTrackingCategoriesAccountCompanyAccountingPeriod
	ExpensesListRequestExpandTrackingCategoriesAccountContact
	ExpensesListRequestExpandTrackingCategoriesAccountContactAccountingPeriod
	ExpensesListRequestExpandTrackingCategoriesAccountContactCompany
	ExpensesListRequestExpandTrackingCategoriesAccountContactCompanyAccountingPeriod
	ExpensesListRequestExpandTrackingCategoriesAccountingPeriod
	ExpensesListRequestExpandTrackingCategoriesCompany
	ExpensesListRequestExpandTrackingCategoriesCompanyAccountingPeriod
	ExpensesListRequestExpandTrackingCategoriesContact
	ExpensesListRequestExpandTrackingCategoriesContactAccountingPeriod
	ExpensesListRequestExpandTrackingCategoriesContactCompany
	ExpensesListRequestExpandTrackingCategoriesContactCompanyAccountingPeriod
)

func (e ExpensesListRequestExpand) String() string {
	switch e {
	default:
		return strconv.Itoa(int(e))
	case ExpensesListRequestExpandAccount:
		return "account"
	case ExpensesListRequestExpandAccountAccountingPeriod:
		return "account,accounting_period"
	case ExpensesListRequestExpandAccountCompany:
		return "account,company"
	case ExpensesListRequestExpandAccountCompanyAccountingPeriod:
		return "account,company,accounting_period"
	case ExpensesListRequestExpandAccountContact:
		return "account,contact"
	case ExpensesListRequestExpandAccountContactAccountingPeriod:
		return "account,contact,accounting_period"
	case ExpensesListRequestExpandAccountContactCompany:
		return "account,contact,company"
	case ExpensesListRequestExpandAccountContactCompanyAccountingPeriod:
		return "account,contact,company,accounting_period"
	case ExpensesListRequestExpandAccountingPeriod:
		return "accounting_period"
	case ExpensesListRequestExpandCompany:
		return "company"
	case ExpensesListRequestExpandCompanyAccountingPeriod:
		return "company,accounting_period"
	case ExpensesListRequestExpandContact:
		return "contact"
	case ExpensesListRequestExpandContactAccountingPeriod:
		return "contact,accounting_period"
	case ExpensesListRequestExpandContactCompany:
		return "contact,company"
	case ExpensesListRequestExpandContactCompanyAccountingPeriod:
		return "contact,company,accounting_period"
	case ExpensesListRequestExpandTrackingCategories:
		return "tracking_categories"
	case ExpensesListRequestExpandTrackingCategoriesAccount:
		return "tracking_categories,account"
	case ExpensesListRequestExpandTrackingCategoriesAccountAccountingPeriod:
		return "tracking_categories,account,accounting_period"
	case ExpensesListRequestExpandTrackingCategoriesAccountCompany:
		return "tracking_categories,account,company"
	case ExpensesListRequestExpandTrackingCategoriesAccountCompanyAccountingPeriod:
		return "tracking_categories,account,company,accounting_period"
	case ExpensesListRequestExpandTrackingCategoriesAccountContact:
		return "tracking_categories,account,contact"
	case ExpensesListRequestExpandTrackingCategoriesAccountContactAccountingPeriod:
		return "tracking_categories,account,contact,accounting_period"
	case ExpensesListRequestExpandTrackingCategoriesAccountContactCompany:
		return "tracking_categories,account,contact,company"
	case ExpensesListRequestExpandTrackingCategoriesAccountContactCompanyAccountingPeriod:
		return "tracking_categories,account,contact,company,accounting_period"
	case ExpensesListRequestExpandTrackingCategoriesAccountingPeriod:
		return "tracking_categories,accounting_period"
	case ExpensesListRequestExpandTrackingCategoriesCompany:
		return "tracking_categories,company"
	case ExpensesListRequestExpandTrackingCategoriesCompanyAccountingPeriod:
		return "tracking_categories,company,accounting_period"
	case ExpensesListRequestExpandTrackingCategoriesContact:
		return "tracking_categories,contact"
	case ExpensesListRequestExpandTrackingCategoriesContactAccountingPeriod:
		return "tracking_categories,contact,accounting_period"
	case ExpensesListRequestExpandTrackingCategoriesContactCompany:
		return "tracking_categories,contact,company"
	case ExpensesListRequestExpandTrackingCategoriesContactCompanyAccountingPeriod:
		return "tracking_categories,contact,company,accounting_period"
	}
}

func (e ExpensesListRequestExpand) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", e.String())), nil
}

func (e *ExpensesListRequestExpand) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "account":
		value := ExpensesListRequestExpandAccount
		*e = value
	case "account,accounting_period":
		value := ExpensesListRequestExpandAccountAccountingPeriod
		*e = value
	case "account,company":
		value := ExpensesListRequestExpandAccountCompany
		*e = value
	case "account,company,accounting_period":
		value := ExpensesListRequestExpandAccountCompanyAccountingPeriod
		*e = value
	case "account,contact":
		value := ExpensesListRequestExpandAccountContact
		*e = value
	case "account,contact,accounting_period":
		value := ExpensesListRequestExpandAccountContactAccountingPeriod
		*e = value
	case "account,contact,company":
		value := ExpensesListRequestExpandAccountContactCompany
		*e = value
	case "account,contact,company,accounting_period":
		value := ExpensesListRequestExpandAccountContactCompanyAccountingPeriod
		*e = value
	case "accounting_period":
		value := ExpensesListRequestExpandAccountingPeriod
		*e = value
	case "company":
		value := ExpensesListRequestExpandCompany
		*e = value
	case "company,accounting_period":
		value := ExpensesListRequestExpandCompanyAccountingPeriod
		*e = value
	case "contact":
		value := ExpensesListRequestExpandContact
		*e = value
	case "contact,accounting_period":
		value := ExpensesListRequestExpandContactAccountingPeriod
		*e = value
	case "contact,company":
		value := ExpensesListRequestExpandContactCompany
		*e = value
	case "contact,company,accounting_period":
		value := ExpensesListRequestExpandContactCompanyAccountingPeriod
		*e = value
	case "tracking_categories":
		value := ExpensesListRequestExpandTrackingCategories
		*e = value
	case "tracking_categories,account":
		value := ExpensesListRequestExpandTrackingCategoriesAccount
		*e = value
	case "tracking_categories,account,accounting_period":
		value := ExpensesListRequestExpandTrackingCategoriesAccountAccountingPeriod
		*e = value
	case "tracking_categories,account,company":
		value := ExpensesListRequestExpandTrackingCategoriesAccountCompany
		*e = value
	case "tracking_categories,account,company,accounting_period":
		value := ExpensesListRequestExpandTrackingCategoriesAccountCompanyAccountingPeriod
		*e = value
	case "tracking_categories,account,contact":
		value := ExpensesListRequestExpandTrackingCategoriesAccountContact
		*e = value
	case "tracking_categories,account,contact,accounting_period":
		value := ExpensesListRequestExpandTrackingCategoriesAccountContactAccountingPeriod
		*e = value
	case "tracking_categories,account,contact,company":
		value := ExpensesListRequestExpandTrackingCategoriesAccountContactCompany
		*e = value
	case "tracking_categories,account,contact,company,accounting_period":
		value := ExpensesListRequestExpandTrackingCategoriesAccountContactCompanyAccountingPeriod
		*e = value
	case "tracking_categories,accounting_period":
		value := ExpensesListRequestExpandTrackingCategoriesAccountingPeriod
		*e = value
	case "tracking_categories,company":
		value := ExpensesListRequestExpandTrackingCategoriesCompany
		*e = value
	case "tracking_categories,company,accounting_period":
		value := ExpensesListRequestExpandTrackingCategoriesCompanyAccountingPeriod
		*e = value
	case "tracking_categories,contact":
		value := ExpensesListRequestExpandTrackingCategoriesContact
		*e = value
	case "tracking_categories,contact,accounting_period":
		value := ExpensesListRequestExpandTrackingCategoriesContactAccountingPeriod
		*e = value
	case "tracking_categories,contact,company":
		value := ExpensesListRequestExpandTrackingCategoriesContactCompany
		*e = value
	case "tracking_categories,contact,company,accounting_period":
		value := ExpensesListRequestExpandTrackingCategoriesContactCompanyAccountingPeriod
		*e = value
	}
	return nil
}

type ExpensesRetrieveRequestExpand uint

const (
	ExpensesRetrieveRequestExpandAccount ExpensesRetrieveRequestExpand = iota + 1
	ExpensesRetrieveRequestExpandAccountAccountingPeriod
	ExpensesRetrieveRequestExpandAccountCompany
	ExpensesRetrieveRequestExpandAccountCompanyAccountingPeriod
	ExpensesRetrieveRequestExpandAccountContact
	ExpensesRetrieveRequestExpandAccountContactAccountingPeriod
	ExpensesRetrieveRequestExpandAccountContactCompany
	ExpensesRetrieveRequestExpandAccountContactCompanyAccountingPeriod
	ExpensesRetrieveRequestExpandAccountingPeriod
	ExpensesRetrieveRequestExpandCompany
	ExpensesRetrieveRequestExpandCompanyAccountingPeriod
	ExpensesRetrieveRequestExpandContact
	ExpensesRetrieveRequestExpandContactAccountingPeriod
	ExpensesRetrieveRequestExpandContactCompany
	ExpensesRetrieveRequestExpandContactCompanyAccountingPeriod
	ExpensesRetrieveRequestExpandTrackingCategories
	ExpensesRetrieveRequestExpandTrackingCategoriesAccount
	ExpensesRetrieveRequestExpandTrackingCategoriesAccountAccountingPeriod
	ExpensesRetrieveRequestExpandTrackingCategoriesAccountCompany
	ExpensesRetrieveRequestExpandTrackingCategoriesAccountCompanyAccountingPeriod
	ExpensesRetrieveRequestExpandTrackingCategoriesAccountContact
	ExpensesRetrieveRequestExpandTrackingCategoriesAccountContactAccountingPeriod
	ExpensesRetrieveRequestExpandTrackingCategoriesAccountContactCompany
	ExpensesRetrieveRequestExpandTrackingCategoriesAccountContactCompanyAccountingPeriod
	ExpensesRetrieveRequestExpandTrackingCategoriesAccountingPeriod
	ExpensesRetrieveRequestExpandTrackingCategoriesCompany
	ExpensesRetrieveRequestExpandTrackingCategoriesCompanyAccountingPeriod
	ExpensesRetrieveRequestExpandTrackingCategoriesContact
	ExpensesRetrieveRequestExpandTrackingCategoriesContactAccountingPeriod
	ExpensesRetrieveRequestExpandTrackingCategoriesContactCompany
	ExpensesRetrieveRequestExpandTrackingCategoriesContactCompanyAccountingPeriod
)

func (e ExpensesRetrieveRequestExpand) String() string {
	switch e {
	default:
		return strconv.Itoa(int(e))
	case ExpensesRetrieveRequestExpandAccount:
		return "account"
	case ExpensesRetrieveRequestExpandAccountAccountingPeriod:
		return "account,accounting_period"
	case ExpensesRetrieveRequestExpandAccountCompany:
		return "account,company"
	case ExpensesRetrieveRequestExpandAccountCompanyAccountingPeriod:
		return "account,company,accounting_period"
	case ExpensesRetrieveRequestExpandAccountContact:
		return "account,contact"
	case ExpensesRetrieveRequestExpandAccountContactAccountingPeriod:
		return "account,contact,accounting_period"
	case ExpensesRetrieveRequestExpandAccountContactCompany:
		return "account,contact,company"
	case ExpensesRetrieveRequestExpandAccountContactCompanyAccountingPeriod:
		return "account,contact,company,accounting_period"
	case ExpensesRetrieveRequestExpandAccountingPeriod:
		return "accounting_period"
	case ExpensesRetrieveRequestExpandCompany:
		return "company"
	case ExpensesRetrieveRequestExpandCompanyAccountingPeriod:
		return "company,accounting_period"
	case ExpensesRetrieveRequestExpandContact:
		return "contact"
	case ExpensesRetrieveRequestExpandContactAccountingPeriod:
		return "contact,accounting_period"
	case ExpensesRetrieveRequestExpandContactCompany:
		return "contact,company"
	case ExpensesRetrieveRequestExpandContactCompanyAccountingPeriod:
		return "contact,company,accounting_period"
	case ExpensesRetrieveRequestExpandTrackingCategories:
		return "tracking_categories"
	case ExpensesRetrieveRequestExpandTrackingCategoriesAccount:
		return "tracking_categories,account"
	case ExpensesRetrieveRequestExpandTrackingCategoriesAccountAccountingPeriod:
		return "tracking_categories,account,accounting_period"
	case ExpensesRetrieveRequestExpandTrackingCategoriesAccountCompany:
		return "tracking_categories,account,company"
	case ExpensesRetrieveRequestExpandTrackingCategoriesAccountCompanyAccountingPeriod:
		return "tracking_categories,account,company,accounting_period"
	case ExpensesRetrieveRequestExpandTrackingCategoriesAccountContact:
		return "tracking_categories,account,contact"
	case ExpensesRetrieveRequestExpandTrackingCategoriesAccountContactAccountingPeriod:
		return "tracking_categories,account,contact,accounting_period"
	case ExpensesRetrieveRequestExpandTrackingCategoriesAccountContactCompany:
		return "tracking_categories,account,contact,company"
	case ExpensesRetrieveRequestExpandTrackingCategoriesAccountContactCompanyAccountingPeriod:
		return "tracking_categories,account,contact,company,accounting_period"
	case ExpensesRetrieveRequestExpandTrackingCategoriesAccountingPeriod:
		return "tracking_categories,accounting_period"
	case ExpensesRetrieveRequestExpandTrackingCategoriesCompany:
		return "tracking_categories,company"
	case ExpensesRetrieveRequestExpandTrackingCategoriesCompanyAccountingPeriod:
		return "tracking_categories,company,accounting_period"
	case ExpensesRetrieveRequestExpandTrackingCategoriesContact:
		return "tracking_categories,contact"
	case ExpensesRetrieveRequestExpandTrackingCategoriesContactAccountingPeriod:
		return "tracking_categories,contact,accounting_period"
	case ExpensesRetrieveRequestExpandTrackingCategoriesContactCompany:
		return "tracking_categories,contact,company"
	case ExpensesRetrieveRequestExpandTrackingCategoriesContactCompanyAccountingPeriod:
		return "tracking_categories,contact,company,accounting_period"
	}
}

func (e ExpensesRetrieveRequestExpand) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", e.String())), nil
}

func (e *ExpensesRetrieveRequestExpand) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "account":
		value := ExpensesRetrieveRequestExpandAccount
		*e = value
	case "account,accounting_period":
		value := ExpensesRetrieveRequestExpandAccountAccountingPeriod
		*e = value
	case "account,company":
		value := ExpensesRetrieveRequestExpandAccountCompany
		*e = value
	case "account,company,accounting_period":
		value := ExpensesRetrieveRequestExpandAccountCompanyAccountingPeriod
		*e = value
	case "account,contact":
		value := ExpensesRetrieveRequestExpandAccountContact
		*e = value
	case "account,contact,accounting_period":
		value := ExpensesRetrieveRequestExpandAccountContactAccountingPeriod
		*e = value
	case "account,contact,company":
		value := ExpensesRetrieveRequestExpandAccountContactCompany
		*e = value
	case "account,contact,company,accounting_period":
		value := ExpensesRetrieveRequestExpandAccountContactCompanyAccountingPeriod
		*e = value
	case "accounting_period":
		value := ExpensesRetrieveRequestExpandAccountingPeriod
		*e = value
	case "company":
		value := ExpensesRetrieveRequestExpandCompany
		*e = value
	case "company,accounting_period":
		value := ExpensesRetrieveRequestExpandCompanyAccountingPeriod
		*e = value
	case "contact":
		value := ExpensesRetrieveRequestExpandContact
		*e = value
	case "contact,accounting_period":
		value := ExpensesRetrieveRequestExpandContactAccountingPeriod
		*e = value
	case "contact,company":
		value := ExpensesRetrieveRequestExpandContactCompany
		*e = value
	case "contact,company,accounting_period":
		value := ExpensesRetrieveRequestExpandContactCompanyAccountingPeriod
		*e = value
	case "tracking_categories":
		value := ExpensesRetrieveRequestExpandTrackingCategories
		*e = value
	case "tracking_categories,account":
		value := ExpensesRetrieveRequestExpandTrackingCategoriesAccount
		*e = value
	case "tracking_categories,account,accounting_period":
		value := ExpensesRetrieveRequestExpandTrackingCategoriesAccountAccountingPeriod
		*e = value
	case "tracking_categories,account,company":
		value := ExpensesRetrieveRequestExpandTrackingCategoriesAccountCompany
		*e = value
	case "tracking_categories,account,company,accounting_period":
		value := ExpensesRetrieveRequestExpandTrackingCategoriesAccountCompanyAccountingPeriod
		*e = value
	case "tracking_categories,account,contact":
		value := ExpensesRetrieveRequestExpandTrackingCategoriesAccountContact
		*e = value
	case "tracking_categories,account,contact,accounting_period":
		value := ExpensesRetrieveRequestExpandTrackingCategoriesAccountContactAccountingPeriod
		*e = value
	case "tracking_categories,account,contact,company":
		value := ExpensesRetrieveRequestExpandTrackingCategoriesAccountContactCompany
		*e = value
	case "tracking_categories,account,contact,company,accounting_period":
		value := ExpensesRetrieveRequestExpandTrackingCategoriesAccountContactCompanyAccountingPeriod
		*e = value
	case "tracking_categories,accounting_period":
		value := ExpensesRetrieveRequestExpandTrackingCategoriesAccountingPeriod
		*e = value
	case "tracking_categories,company":
		value := ExpensesRetrieveRequestExpandTrackingCategoriesCompany
		*e = value
	case "tracking_categories,company,accounting_period":
		value := ExpensesRetrieveRequestExpandTrackingCategoriesCompanyAccountingPeriod
		*e = value
	case "tracking_categories,contact":
		value := ExpensesRetrieveRequestExpandTrackingCategoriesContact
		*e = value
	case "tracking_categories,contact,accounting_period":
		value := ExpensesRetrieveRequestExpandTrackingCategoriesContactAccountingPeriod
		*e = value
	case "tracking_categories,contact,company":
		value := ExpensesRetrieveRequestExpandTrackingCategoriesContactCompany
		*e = value
	case "tracking_categories,contact,company,accounting_period":
		value := ExpensesRetrieveRequestExpandTrackingCategoriesContactCompanyAccountingPeriod
		*e = value
	}
	return nil
}

// # The IncomeStatement Object
// ### Description
// The `IncomeStatement` object is used to represent a company’s income, the cost of sales, operating expenses, and other non-operating expenses. The object also includes other important values like gross profit, gross operating profit, and net income. This represents a period of time (month, quarter, or year).
//
// ### Usage Example
// Fetch from the `GET IncomeStatement` endpoint and view a company's income statement for a given period.
type IncomeStatement struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The income statement's name.
	Name *string `json:"name,omitempty"`
	// The income statement's currency.
	//
	// * `XUA` - ADB Unit of Account
	// * `AFN` - Afghan Afghani
	// * `AFA` - Afghan Afghani (1927–2002)
	// * `ALL` - Albanian Lek
	// * `ALK` - Albanian Lek (1946–1965)
	// * `DZD` - Algerian Dinar
	// * `ADP` - Andorran Peseta
	// * `AOA` - Angolan Kwanza
	// * `AOK` - Angolan Kwanza (1977–1991)
	// * `AON` - Angolan New Kwanza (1990–2000)
	// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
	// * `ARA` - Argentine Austral
	// * `ARS` - Argentine Peso
	// * `ARM` - Argentine Peso (1881–1970)
	// * `ARP` - Argentine Peso (1983–1985)
	// * `ARL` - Argentine Peso Ley (1970–1983)
	// * `AMD` - Armenian Dram
	// * `AWG` - Aruban Florin
	// * `AUD` - Australian Dollar
	// * `ATS` - Austrian Schilling
	// * `AZN` - Azerbaijani Manat
	// * `AZM` - Azerbaijani Manat (1993–2006)
	// * `BSD` - Bahamian Dollar
	// * `BHD` - Bahraini Dinar
	// * `BDT` - Bangladeshi Taka
	// * `BBD` - Barbadian Dollar
	// * `BYN` - Belarusian Ruble
	// * `BYB` - Belarusian Ruble (1994–1999)
	// * `BYR` - Belarusian Ruble (2000–2016)
	// * `BEF` - Belgian Franc
	// * `BEC` - Belgian Franc (convertible)
	// * `BEL` - Belgian Franc (financial)
	// * `BZD` - Belize Dollar
	// * `BMD` - Bermudan Dollar
	// * `BTN` - Bhutanese Ngultrum
	// * `BOB` - Bolivian Boliviano
	// * `BOL` - Bolivian Boliviano (1863–1963)
	// * `BOV` - Bolivian Mvdol
	// * `BOP` - Bolivian Peso
	// * `BAM` - Bosnia-Herzegovina Convertible Mark
	// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
	// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
	// * `BWP` - Botswanan Pula
	// * `BRC` - Brazilian Cruzado (1986–1989)
	// * `BRZ` - Brazilian Cruzeiro (1942–1967)
	// * `BRE` - Brazilian Cruzeiro (1990–1993)
	// * `BRR` - Brazilian Cruzeiro (1993–1994)
	// * `BRN` - Brazilian New Cruzado (1989–1990)
	// * `BRB` - Brazilian New Cruzeiro (1967–1986)
	// * `BRL` - Brazilian Real
	// * `GBP` - British Pound
	// * `BND` - Brunei Dollar
	// * `BGL` - Bulgarian Hard Lev
	// * `BGN` - Bulgarian Lev
	// * `BGO` - Bulgarian Lev (1879–1952)
	// * `BGM` - Bulgarian Socialist Lev
	// * `BUK` - Burmese Kyat
	// * `BIF` - Burundian Franc
	// * `XPF` - CFP Franc
	// * `KHR` - Cambodian Riel
	// * `CAD` - Canadian Dollar
	// * `CVE` - Cape Verdean Escudo
	// * `KYD` - Cayman Islands Dollar
	// * `XAF` - Central African CFA Franc
	// * `CLE` - Chilean Escudo
	// * `CLP` - Chilean Peso
	// * `CLF` - Chilean Unit of Account (UF)
	// * `CNX` - Chinese People’s Bank Dollar
	// * `CNY` - Chinese Yuan
	// * `CNH` - Chinese Yuan (offshore)
	// * `COP` - Colombian Peso
	// * `COU` - Colombian Real Value Unit
	// * `KMF` - Comorian Franc
	// * `CDF` - Congolese Franc
	// * `CRC` - Costa Rican Colón
	// * `HRD` - Croatian Dinar
	// * `HRK` - Croatian Kuna
	// * `CUC` - Cuban Convertible Peso
	// * `CUP` - Cuban Peso
	// * `CYP` - Cypriot Pound
	// * `CZK` - Czech Koruna
	// * `CSK` - Czechoslovak Hard Koruna
	// * `DKK` - Danish Krone
	// * `DJF` - Djiboutian Franc
	// * `DOP` - Dominican Peso
	// * `NLG` - Dutch Guilder
	// * `XCD` - East Caribbean Dollar
	// * `DDM` - East German Mark
	// * `ECS` - Ecuadorian Sucre
	// * `ECV` - Ecuadorian Unit of Constant Value
	// * `EGP` - Egyptian Pound
	// * `GQE` - Equatorial Guinean Ekwele
	// * `ERN` - Eritrean Nakfa
	// * `EEK` - Estonian Kroon
	// * `ETB` - Ethiopian Birr
	// * `EUR` - Euro
	// * `XBA` - European Composite Unit
	// * `XEU` - European Currency Unit
	// * `XBB` - European Monetary Unit
	// * `XBC` - European Unit of Account (XBC)
	// * `XBD` - European Unit of Account (XBD)
	// * `FKP` - Falkland Islands Pound
	// * `FJD` - Fijian Dollar
	// * `FIM` - Finnish Markka
	// * `FRF` - French Franc
	// * `XFO` - French Gold Franc
	// * `XFU` - French UIC-Franc
	// * `GMD` - Gambian Dalasi
	// * `GEK` - Georgian Kupon Larit
	// * `GEL` - Georgian Lari
	// * `DEM` - German Mark
	// * `GHS` - Ghanaian Cedi
	// * `GHC` - Ghanaian Cedi (1979–2007)
	// * `GIP` - Gibraltar Pound
	// * `XAU` - Gold
	// * `GRD` - Greek Drachma
	// * `GTQ` - Guatemalan Quetzal
	// * `GWP` - Guinea-Bissau Peso
	// * `GNF` - Guinean Franc
	// * `GNS` - Guinean Syli
	// * `GYD` - Guyanaese Dollar
	// * `HTG` - Haitian Gourde
	// * `HNL` - Honduran Lempira
	// * `HKD` - Hong Kong Dollar
	// * `HUF` - Hungarian Forint
	// * `IMP` - IMP
	// * `ISK` - Icelandic Króna
	// * `ISJ` - Icelandic Króna (1918–1981)
	// * `INR` - Indian Rupee
	// * `IDR` - Indonesian Rupiah
	// * `IRR` - Iranian Rial
	// * `IQD` - Iraqi Dinar
	// * `IEP` - Irish Pound
	// * `ILS` - Israeli New Shekel
	// * `ILP` - Israeli Pound
	// * `ILR` - Israeli Shekel (1980–1985)
	// * `ITL` - Italian Lira
	// * `JMD` - Jamaican Dollar
	// * `JPY` - Japanese Yen
	// * `JOD` - Jordanian Dinar
	// * `KZT` - Kazakhstani Tenge
	// * `KES` - Kenyan Shilling
	// * `KWD` - Kuwaiti Dinar
	// * `KGS` - Kyrgystani Som
	// * `LAK` - Laotian Kip
	// * `LVL` - Latvian Lats
	// * `LVR` - Latvian Ruble
	// * `LBP` - Lebanese Pound
	// * `LSL` - Lesotho Loti
	// * `LRD` - Liberian Dollar
	// * `LYD` - Libyan Dinar
	// * `LTL` - Lithuanian Litas
	// * `LTT` - Lithuanian Talonas
	// * `LUL` - Luxembourg Financial Franc
	// * `LUC` - Luxembourgian Convertible Franc
	// * `LUF` - Luxembourgian Franc
	// * `MOP` - Macanese Pataca
	// * `MKD` - Macedonian Denar
	// * `MKN` - Macedonian Denar (1992–1993)
	// * `MGA` - Malagasy Ariary
	// * `MGF` - Malagasy Franc
	// * `MWK` - Malawian Kwacha
	// * `MYR` - Malaysian Ringgit
	// * `MVR` - Maldivian Rufiyaa
	// * `MVP` - Maldivian Rupee (1947–1981)
	// * `MLF` - Malian Franc
	// * `MTL` - Maltese Lira
	// * `MTP` - Maltese Pound
	// * `MRU` - Mauritanian Ouguiya
	// * `MRO` - Mauritanian Ouguiya (1973–2017)
	// * `MUR` - Mauritian Rupee
	// * `MXV` - Mexican Investment Unit
	// * `MXN` - Mexican Peso
	// * `MXP` - Mexican Silver Peso (1861–1992)
	// * `MDC` - Moldovan Cupon
	// * `MDL` - Moldovan Leu
	// * `MCF` - Monegasque Franc
	// * `MNT` - Mongolian Tugrik
	// * `MAD` - Moroccan Dirham
	// * `MAF` - Moroccan Franc
	// * `MZE` - Mozambican Escudo
	// * `MZN` - Mozambican Metical
	// * `MZM` - Mozambican Metical (1980–2006)
	// * `MMK` - Myanmar Kyat
	// * `NAD` - Namibian Dollar
	// * `NPR` - Nepalese Rupee
	// * `ANG` - Netherlands Antillean Guilder
	// * `TWD` - New Taiwan Dollar
	// * `NZD` - New Zealand Dollar
	// * `NIO` - Nicaraguan Córdoba
	// * `NIC` - Nicaraguan Córdoba (1988–1991)
	// * `NGN` - Nigerian Naira
	// * `KPW` - North Korean Won
	// * `NOK` - Norwegian Krone
	// * `OMR` - Omani Rial
	// * `PKR` - Pakistani Rupee
	// * `XPD` - Palladium
	// * `PAB` - Panamanian Balboa
	// * `PGK` - Papua New Guinean Kina
	// * `PYG` - Paraguayan Guarani
	// * `PEI` - Peruvian Inti
	// * `PEN` - Peruvian Sol
	// * `PES` - Peruvian Sol (1863–1965)
	// * `PHP` - Philippine Peso
	// * `XPT` - Platinum
	// * `PLN` - Polish Zloty
	// * `PLZ` - Polish Zloty (1950–1995)
	// * `PTE` - Portuguese Escudo
	// * `GWE` - Portuguese Guinea Escudo
	// * `QAR` - Qatari Rial
	// * `XRE` - RINET Funds
	// * `RHD` - Rhodesian Dollar
	// * `RON` - Romanian Leu
	// * `ROL` - Romanian Leu (1952–2006)
	// * `RUB` - Russian Ruble
	// * `RUR` - Russian Ruble (1991–1998)
	// * `RWF` - Rwandan Franc
	// * `SVC` - Salvadoran Colón
	// * `WST` - Samoan Tala
	// * `SAR` - Saudi Riyal
	// * `RSD` - Serbian Dinar
	// * `CSD` - Serbian Dinar (2002–2006)
	// * `SCR` - Seychellois Rupee
	// * `SLL` - Sierra Leonean Leone
	// * `XAG` - Silver
	// * `SGD` - Singapore Dollar
	// * `SKK` - Slovak Koruna
	// * `SIT` - Slovenian Tolar
	// * `SBD` - Solomon Islands Dollar
	// * `SOS` - Somali Shilling
	// * `ZAR` - South African Rand
	// * `ZAL` - South African Rand (financial)
	// * `KRH` - South Korean Hwan (1953–1962)
	// * `KRW` - South Korean Won
	// * `KRO` - South Korean Won (1945–1953)
	// * `SSP` - South Sudanese Pound
	// * `SUR` - Soviet Rouble
	// * `ESP` - Spanish Peseta
	// * `ESA` - Spanish Peseta (A account)
	// * `ESB` - Spanish Peseta (convertible account)
	// * `XDR` - Special Drawing Rights
	// * `LKR` - Sri Lankan Rupee
	// * `SHP` - St. Helena Pound
	// * `XSU` - Sucre
	// * `SDD` - Sudanese Dinar (1992–2007)
	// * `SDG` - Sudanese Pound
	// * `SDP` - Sudanese Pound (1957–1998)
	// * `SRD` - Surinamese Dollar
	// * `SRG` - Surinamese Guilder
	// * `SZL` - Swazi Lilangeni
	// * `SEK` - Swedish Krona
	// * `CHF` - Swiss Franc
	// * `SYP` - Syrian Pound
	// * `STN` - São Tomé & Príncipe Dobra
	// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
	// * `TVD` - TVD
	// * `TJR` - Tajikistani Ruble
	// * `TJS` - Tajikistani Somoni
	// * `TZS` - Tanzanian Shilling
	// * `XTS` - Testing Currency Code
	// * `THB` - Thai Baht
	// * `XXX` - The codes assigned for transactions where no currency is involved
	// * `TPE` - Timorese Escudo
	// * `TOP` - Tongan Paʻanga
	// * `TTD` - Trinidad & Tobago Dollar
	// * `TND` - Tunisian Dinar
	// * `TRY` - Turkish Lira
	// * `TRL` - Turkish Lira (1922–2005)
	// * `TMT` - Turkmenistani Manat
	// * `TMM` - Turkmenistani Manat (1993–2009)
	// * `USD` - US Dollar
	// * `USN` - US Dollar (Next day)
	// * `USS` - US Dollar (Same day)
	// * `UGX` - Ugandan Shilling
	// * `UGS` - Ugandan Shilling (1966–1987)
	// * `UAH` - Ukrainian Hryvnia
	// * `UAK` - Ukrainian Karbovanets
	// * `AED` - United Arab Emirates Dirham
	// * `UYW` - Uruguayan Nominal Wage Index Unit
	// * `UYU` - Uruguayan Peso
	// * `UYP` - Uruguayan Peso (1975–1993)
	// * `UYI` - Uruguayan Peso (Indexed Units)
	// * `UZS` - Uzbekistani Som
	// * `VUV` - Vanuatu Vatu
	// * `VES` - Venezuelan Bolívar
	// * `VEB` - Venezuelan Bolívar (1871–2008)
	// * `VEF` - Venezuelan Bolívar (2008–2018)
	// * `VND` - Vietnamese Dong
	// * `VNN` - Vietnamese Dong (1978–1985)
	// * `CHE` - WIR Euro
	// * `CHW` - WIR Franc
	// * `XOF` - West African CFA Franc
	// * `YDD` - Yemeni Dinar
	// * `YER` - Yemeni Rial
	// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
	// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
	// * `YUM` - Yugoslavian New Dinar (1994–2002)
	// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
	// * `ZWN` - ZWN
	// * `ZRN` - Zairean New Zaire (1993–1998)
	// * `ZRZ` - Zairean Zaire (1971–1993)
	// * `ZMW` - Zambian Kwacha
	// * `ZMK` - Zambian Kwacha (1968–2012)
	// * `ZWD` - Zimbabwean Dollar (1980–2008)
	// * `ZWR` - Zimbabwean Dollar (2008)
	// * `ZWL` - Zimbabwean Dollar (2009)
	Currency *IncomeStatementCurrency `json:"currency,omitempty"`
	// The company the income statement belongs to.
	Company *IncomeStatementCompany `json:"company,omitempty"`
	// The income statement's start period.
	StartPeriod *time.Time `json:"start_period,omitempty"`
	// The income statement's end period.
	EndPeriod   *time.Time    `json:"end_period,omitempty"`
	Income      []*ReportItem `json:"income,omitempty"`
	CostOfSales []*ReportItem `json:"cost_of_sales,omitempty"`
	// The revenue minus the cost of sale.
	GrossProfit       *float64      `json:"gross_profit,omitempty"`
	OperatingExpenses []*ReportItem `json:"operating_expenses,omitempty"`
	// The revenue minus the operating expenses.
	NetOperatingIncome   *float64      `json:"net_operating_income,omitempty"`
	NonOperatingExpenses []*ReportItem `json:"non_operating_expenses,omitempty"`
	// The gross profit minus the total expenses.
	NetIncome *float64 `json:"net_income,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted *bool      `json:"remote_was_deleted,omitempty"`
	CreatedAt        *time.Time `json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt    *time.Time     `json:"modified_at,omitempty"`
	FieldMappings map[string]any `json:"field_mappings,omitempty"`
	RemoteData    []*RemoteData  `json:"remote_data,omitempty"`
}

// The company the income statement belongs to.
type IncomeStatementCompany struct {
	typeName    string
	String      string
	CompanyInfo *CompanyInfo
}

func NewIncomeStatementCompanyFromString(value string) *IncomeStatementCompany {
	return &IncomeStatementCompany{typeName: "string", String: value}
}

func NewIncomeStatementCompanyFromCompanyInfo(value *CompanyInfo) *IncomeStatementCompany {
	return &IncomeStatementCompany{typeName: "companyInfo", CompanyInfo: value}
}

func (i *IncomeStatementCompany) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typeName = "string"
		i.String = valueString
		return nil
	}
	valueCompanyInfo := new(CompanyInfo)
	if err := json.Unmarshal(data, &valueCompanyInfo); err == nil {
		i.typeName = "companyInfo"
		i.CompanyInfo = valueCompanyInfo
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i IncomeStatementCompany) MarshalJSON() ([]byte, error) {
	switch i.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return json.Marshal(i.String)
	case "companyInfo":
		return json.Marshal(i.CompanyInfo)
	}
}

type IncomeStatementCompanyVisitor interface {
	VisitString(string) error
	VisitCompanyInfo(*CompanyInfo) error
}

func (i *IncomeStatementCompany) Accept(visitor IncomeStatementCompanyVisitor) error {
	switch i.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return visitor.VisitString(i.String)
	case "companyInfo":
		return visitor.VisitCompanyInfo(i.CompanyInfo)
	}
}

// The income statement's currency.
//
// * `XUA` - ADB Unit of Account
// * `AFN` - Afghan Afghani
// * `AFA` - Afghan Afghani (1927–2002)
// * `ALL` - Albanian Lek
// * `ALK` - Albanian Lek (1946–1965)
// * `DZD` - Algerian Dinar
// * `ADP` - Andorran Peseta
// * `AOA` - Angolan Kwanza
// * `AOK` - Angolan Kwanza (1977–1991)
// * `AON` - Angolan New Kwanza (1990–2000)
// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
// * `ARA` - Argentine Austral
// * `ARS` - Argentine Peso
// * `ARM` - Argentine Peso (1881–1970)
// * `ARP` - Argentine Peso (1983–1985)
// * `ARL` - Argentine Peso Ley (1970–1983)
// * `AMD` - Armenian Dram
// * `AWG` - Aruban Florin
// * `AUD` - Australian Dollar
// * `ATS` - Austrian Schilling
// * `AZN` - Azerbaijani Manat
// * `AZM` - Azerbaijani Manat (1993–2006)
// * `BSD` - Bahamian Dollar
// * `BHD` - Bahraini Dinar
// * `BDT` - Bangladeshi Taka
// * `BBD` - Barbadian Dollar
// * `BYN` - Belarusian Ruble
// * `BYB` - Belarusian Ruble (1994–1999)
// * `BYR` - Belarusian Ruble (2000–2016)
// * `BEF` - Belgian Franc
// * `BEC` - Belgian Franc (convertible)
// * `BEL` - Belgian Franc (financial)
// * `BZD` - Belize Dollar
// * `BMD` - Bermudan Dollar
// * `BTN` - Bhutanese Ngultrum
// * `BOB` - Bolivian Boliviano
// * `BOL` - Bolivian Boliviano (1863–1963)
// * `BOV` - Bolivian Mvdol
// * `BOP` - Bolivian Peso
// * `BAM` - Bosnia-Herzegovina Convertible Mark
// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
// * `BWP` - Botswanan Pula
// * `BRC` - Brazilian Cruzado (1986–1989)
// * `BRZ` - Brazilian Cruzeiro (1942–1967)
// * `BRE` - Brazilian Cruzeiro (1990–1993)
// * `BRR` - Brazilian Cruzeiro (1993–1994)
// * `BRN` - Brazilian New Cruzado (1989–1990)
// * `BRB` - Brazilian New Cruzeiro (1967–1986)
// * `BRL` - Brazilian Real
// * `GBP` - British Pound
// * `BND` - Brunei Dollar
// * `BGL` - Bulgarian Hard Lev
// * `BGN` - Bulgarian Lev
// * `BGO` - Bulgarian Lev (1879–1952)
// * `BGM` - Bulgarian Socialist Lev
// * `BUK` - Burmese Kyat
// * `BIF` - Burundian Franc
// * `XPF` - CFP Franc
// * `KHR` - Cambodian Riel
// * `CAD` - Canadian Dollar
// * `CVE` - Cape Verdean Escudo
// * `KYD` - Cayman Islands Dollar
// * `XAF` - Central African CFA Franc
// * `CLE` - Chilean Escudo
// * `CLP` - Chilean Peso
// * `CLF` - Chilean Unit of Account (UF)
// * `CNX` - Chinese People’s Bank Dollar
// * `CNY` - Chinese Yuan
// * `CNH` - Chinese Yuan (offshore)
// * `COP` - Colombian Peso
// * `COU` - Colombian Real Value Unit
// * `KMF` - Comorian Franc
// * `CDF` - Congolese Franc
// * `CRC` - Costa Rican Colón
// * `HRD` - Croatian Dinar
// * `HRK` - Croatian Kuna
// * `CUC` - Cuban Convertible Peso
// * `CUP` - Cuban Peso
// * `CYP` - Cypriot Pound
// * `CZK` - Czech Koruna
// * `CSK` - Czechoslovak Hard Koruna
// * `DKK` - Danish Krone
// * `DJF` - Djiboutian Franc
// * `DOP` - Dominican Peso
// * `NLG` - Dutch Guilder
// * `XCD` - East Caribbean Dollar
// * `DDM` - East German Mark
// * `ECS` - Ecuadorian Sucre
// * `ECV` - Ecuadorian Unit of Constant Value
// * `EGP` - Egyptian Pound
// * `GQE` - Equatorial Guinean Ekwele
// * `ERN` - Eritrean Nakfa
// * `EEK` - Estonian Kroon
// * `ETB` - Ethiopian Birr
// * `EUR` - Euro
// * `XBA` - European Composite Unit
// * `XEU` - European Currency Unit
// * `XBB` - European Monetary Unit
// * `XBC` - European Unit of Account (XBC)
// * `XBD` - European Unit of Account (XBD)
// * `FKP` - Falkland Islands Pound
// * `FJD` - Fijian Dollar
// * `FIM` - Finnish Markka
// * `FRF` - French Franc
// * `XFO` - French Gold Franc
// * `XFU` - French UIC-Franc
// * `GMD` - Gambian Dalasi
// * `GEK` - Georgian Kupon Larit
// * `GEL` - Georgian Lari
// * `DEM` - German Mark
// * `GHS` - Ghanaian Cedi
// * `GHC` - Ghanaian Cedi (1979–2007)
// * `GIP` - Gibraltar Pound
// * `XAU` - Gold
// * `GRD` - Greek Drachma
// * `GTQ` - Guatemalan Quetzal
// * `GWP` - Guinea-Bissau Peso
// * `GNF` - Guinean Franc
// * `GNS` - Guinean Syli
// * `GYD` - Guyanaese Dollar
// * `HTG` - Haitian Gourde
// * `HNL` - Honduran Lempira
// * `HKD` - Hong Kong Dollar
// * `HUF` - Hungarian Forint
// * `IMP` - IMP
// * `ISK` - Icelandic Króna
// * `ISJ` - Icelandic Króna (1918–1981)
// * `INR` - Indian Rupee
// * `IDR` - Indonesian Rupiah
// * `IRR` - Iranian Rial
// * `IQD` - Iraqi Dinar
// * `IEP` - Irish Pound
// * `ILS` - Israeli New Shekel
// * `ILP` - Israeli Pound
// * `ILR` - Israeli Shekel (1980–1985)
// * `ITL` - Italian Lira
// * `JMD` - Jamaican Dollar
// * `JPY` - Japanese Yen
// * `JOD` - Jordanian Dinar
// * `KZT` - Kazakhstani Tenge
// * `KES` - Kenyan Shilling
// * `KWD` - Kuwaiti Dinar
// * `KGS` - Kyrgystani Som
// * `LAK` - Laotian Kip
// * `LVL` - Latvian Lats
// * `LVR` - Latvian Ruble
// * `LBP` - Lebanese Pound
// * `LSL` - Lesotho Loti
// * `LRD` - Liberian Dollar
// * `LYD` - Libyan Dinar
// * `LTL` - Lithuanian Litas
// * `LTT` - Lithuanian Talonas
// * `LUL` - Luxembourg Financial Franc
// * `LUC` - Luxembourgian Convertible Franc
// * `LUF` - Luxembourgian Franc
// * `MOP` - Macanese Pataca
// * `MKD` - Macedonian Denar
// * `MKN` - Macedonian Denar (1992–1993)
// * `MGA` - Malagasy Ariary
// * `MGF` - Malagasy Franc
// * `MWK` - Malawian Kwacha
// * `MYR` - Malaysian Ringgit
// * `MVR` - Maldivian Rufiyaa
// * `MVP` - Maldivian Rupee (1947–1981)
// * `MLF` - Malian Franc
// * `MTL` - Maltese Lira
// * `MTP` - Maltese Pound
// * `MRU` - Mauritanian Ouguiya
// * `MRO` - Mauritanian Ouguiya (1973–2017)
// * `MUR` - Mauritian Rupee
// * `MXV` - Mexican Investment Unit
// * `MXN` - Mexican Peso
// * `MXP` - Mexican Silver Peso (1861–1992)
// * `MDC` - Moldovan Cupon
// * `MDL` - Moldovan Leu
// * `MCF` - Monegasque Franc
// * `MNT` - Mongolian Tugrik
// * `MAD` - Moroccan Dirham
// * `MAF` - Moroccan Franc
// * `MZE` - Mozambican Escudo
// * `MZN` - Mozambican Metical
// * `MZM` - Mozambican Metical (1980–2006)
// * `MMK` - Myanmar Kyat
// * `NAD` - Namibian Dollar
// * `NPR` - Nepalese Rupee
// * `ANG` - Netherlands Antillean Guilder
// * `TWD` - New Taiwan Dollar
// * `NZD` - New Zealand Dollar
// * `NIO` - Nicaraguan Córdoba
// * `NIC` - Nicaraguan Córdoba (1988–1991)
// * `NGN` - Nigerian Naira
// * `KPW` - North Korean Won
// * `NOK` - Norwegian Krone
// * `OMR` - Omani Rial
// * `PKR` - Pakistani Rupee
// * `XPD` - Palladium
// * `PAB` - Panamanian Balboa
// * `PGK` - Papua New Guinean Kina
// * `PYG` - Paraguayan Guarani
// * `PEI` - Peruvian Inti
// * `PEN` - Peruvian Sol
// * `PES` - Peruvian Sol (1863–1965)
// * `PHP` - Philippine Peso
// * `XPT` - Platinum
// * `PLN` - Polish Zloty
// * `PLZ` - Polish Zloty (1950–1995)
// * `PTE` - Portuguese Escudo
// * `GWE` - Portuguese Guinea Escudo
// * `QAR` - Qatari Rial
// * `XRE` - RINET Funds
// * `RHD` - Rhodesian Dollar
// * `RON` - Romanian Leu
// * `ROL` - Romanian Leu (1952–2006)
// * `RUB` - Russian Ruble
// * `RUR` - Russian Ruble (1991–1998)
// * `RWF` - Rwandan Franc
// * `SVC` - Salvadoran Colón
// * `WST` - Samoan Tala
// * `SAR` - Saudi Riyal
// * `RSD` - Serbian Dinar
// * `CSD` - Serbian Dinar (2002–2006)
// * `SCR` - Seychellois Rupee
// * `SLL` - Sierra Leonean Leone
// * `XAG` - Silver
// * `SGD` - Singapore Dollar
// * `SKK` - Slovak Koruna
// * `SIT` - Slovenian Tolar
// * `SBD` - Solomon Islands Dollar
// * `SOS` - Somali Shilling
// * `ZAR` - South African Rand
// * `ZAL` - South African Rand (financial)
// * `KRH` - South Korean Hwan (1953–1962)
// * `KRW` - South Korean Won
// * `KRO` - South Korean Won (1945–1953)
// * `SSP` - South Sudanese Pound
// * `SUR` - Soviet Rouble
// * `ESP` - Spanish Peseta
// * `ESA` - Spanish Peseta (A account)
// * `ESB` - Spanish Peseta (convertible account)
// * `XDR` - Special Drawing Rights
// * `LKR` - Sri Lankan Rupee
// * `SHP` - St. Helena Pound
// * `XSU` - Sucre
// * `SDD` - Sudanese Dinar (1992–2007)
// * `SDG` - Sudanese Pound
// * `SDP` - Sudanese Pound (1957–1998)
// * `SRD` - Surinamese Dollar
// * `SRG` - Surinamese Guilder
// * `SZL` - Swazi Lilangeni
// * `SEK` - Swedish Krona
// * `CHF` - Swiss Franc
// * `SYP` - Syrian Pound
// * `STN` - São Tomé & Príncipe Dobra
// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
// * `TVD` - TVD
// * `TJR` - Tajikistani Ruble
// * `TJS` - Tajikistani Somoni
// * `TZS` - Tanzanian Shilling
// * `XTS` - Testing Currency Code
// * `THB` - Thai Baht
// * `XXX` - The codes assigned for transactions where no currency is involved
// * `TPE` - Timorese Escudo
// * `TOP` - Tongan Paʻanga
// * `TTD` - Trinidad & Tobago Dollar
// * `TND` - Tunisian Dinar
// * `TRY` - Turkish Lira
// * `TRL` - Turkish Lira (1922–2005)
// * `TMT` - Turkmenistani Manat
// * `TMM` - Turkmenistani Manat (1993–2009)
// * `USD` - US Dollar
// * `USN` - US Dollar (Next day)
// * `USS` - US Dollar (Same day)
// * `UGX` - Ugandan Shilling
// * `UGS` - Ugandan Shilling (1966–1987)
// * `UAH` - Ukrainian Hryvnia
// * `UAK` - Ukrainian Karbovanets
// * `AED` - United Arab Emirates Dirham
// * `UYW` - Uruguayan Nominal Wage Index Unit
// * `UYU` - Uruguayan Peso
// * `UYP` - Uruguayan Peso (1975–1993)
// * `UYI` - Uruguayan Peso (Indexed Units)
// * `UZS` - Uzbekistani Som
// * `VUV` - Vanuatu Vatu
// * `VES` - Venezuelan Bolívar
// * `VEB` - Venezuelan Bolívar (1871–2008)
// * `VEF` - Venezuelan Bolívar (2008–2018)
// * `VND` - Vietnamese Dong
// * `VNN` - Vietnamese Dong (1978–1985)
// * `CHE` - WIR Euro
// * `CHW` - WIR Franc
// * `XOF` - West African CFA Franc
// * `YDD` - Yemeni Dinar
// * `YER` - Yemeni Rial
// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
// * `YUM` - Yugoslavian New Dinar (1994–2002)
// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
// * `ZWN` - ZWN
// * `ZRN` - Zairean New Zaire (1993–1998)
// * `ZRZ` - Zairean Zaire (1971–1993)
// * `ZMW` - Zambian Kwacha
// * `ZMK` - Zambian Kwacha (1968–2012)
// * `ZWD` - Zimbabwean Dollar (1980–2008)
// * `ZWR` - Zimbabwean Dollar (2008)
// * `ZWL` - Zimbabwean Dollar (2009)
type IncomeStatementCurrency struct {
	typeName     string
	CurrencyEnum CurrencyEnum
	String       string
}

func NewIncomeStatementCurrencyFromCurrencyEnum(value CurrencyEnum) *IncomeStatementCurrency {
	return &IncomeStatementCurrency{typeName: "currencyEnum", CurrencyEnum: value}
}

func NewIncomeStatementCurrencyFromString(value string) *IncomeStatementCurrency {
	return &IncomeStatementCurrency{typeName: "string", String: value}
}

func (i *IncomeStatementCurrency) UnmarshalJSON(data []byte) error {
	var valueCurrencyEnum CurrencyEnum
	if err := json.Unmarshal(data, &valueCurrencyEnum); err == nil {
		i.typeName = "currencyEnum"
		i.CurrencyEnum = valueCurrencyEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typeName = "string"
		i.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i IncomeStatementCurrency) MarshalJSON() ([]byte, error) {
	switch i.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "currencyEnum":
		return json.Marshal(i.CurrencyEnum)
	case "string":
		return json.Marshal(i.String)
	}
}

type IncomeStatementCurrencyVisitor interface {
	VisitCurrencyEnum(CurrencyEnum) error
	VisitString(string) error
}

func (i *IncomeStatementCurrency) Accept(visitor IncomeStatementCurrencyVisitor) error {
	switch i.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "currencyEnum":
		return visitor.VisitCurrencyEnum(i.CurrencyEnum)
	case "string":
		return visitor.VisitString(i.String)
	}
}

// # The Invoice Object
// ### Description
// The `Invoice` object represents an itemized record of goods and/or services sold to a customer.
//
// ### Usage Example
// Fetch from the `LIST Invoices` endpoint and view a company's invoices.
type Invoice struct {
	Id *string `json:"id,omitempty"`
	// Whether the invoice is an accounts receivable or accounts payable. If `type` is `accounts_payable`, the invoice is a bill. If `type` is `accounts_receivable`, it is an invoice.
	//
	// * `ACCOUNTS_RECEIVABLE` - ACCOUNTS_RECEIVABLE
	// * `ACCOUNTS_PAYABLE` - ACCOUNTS_PAYABLE
	Type *InvoiceType `json:"type,omitempty"`
	// The invoice's contact.
	Contact *InvoiceContact `json:"contact,omitempty"`
	// The invoice's number.
	Number *string `json:"number,omitempty"`
	// The invoice's issue date.
	IssueDate *time.Time `json:"issue_date,omitempty"`
	// The invoice's due date.
	DueDate *time.Time `json:"due_date,omitempty"`
	// The invoice's paid date.
	PaidOnDate *time.Time `json:"paid_on_date,omitempty"`
	// The invoice's private note.
	Memo *string `json:"memo,omitempty"`
	// The company the invoice belongs to.
	Company *InvoiceCompany `json:"company,omitempty"`
	// The invoice's currency.
	//
	// * `XUA` - ADB Unit of Account
	// * `AFN` - Afghan Afghani
	// * `AFA` - Afghan Afghani (1927–2002)
	// * `ALL` - Albanian Lek
	// * `ALK` - Albanian Lek (1946–1965)
	// * `DZD` - Algerian Dinar
	// * `ADP` - Andorran Peseta
	// * `AOA` - Angolan Kwanza
	// * `AOK` - Angolan Kwanza (1977–1991)
	// * `AON` - Angolan New Kwanza (1990–2000)
	// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
	// * `ARA` - Argentine Austral
	// * `ARS` - Argentine Peso
	// * `ARM` - Argentine Peso (1881–1970)
	// * `ARP` - Argentine Peso (1983–1985)
	// * `ARL` - Argentine Peso Ley (1970–1983)
	// * `AMD` - Armenian Dram
	// * `AWG` - Aruban Florin
	// * `AUD` - Australian Dollar
	// * `ATS` - Austrian Schilling
	// * `AZN` - Azerbaijani Manat
	// * `AZM` - Azerbaijani Manat (1993–2006)
	// * `BSD` - Bahamian Dollar
	// * `BHD` - Bahraini Dinar
	// * `BDT` - Bangladeshi Taka
	// * `BBD` - Barbadian Dollar
	// * `BYN` - Belarusian Ruble
	// * `BYB` - Belarusian Ruble (1994–1999)
	// * `BYR` - Belarusian Ruble (2000–2016)
	// * `BEF` - Belgian Franc
	// * `BEC` - Belgian Franc (convertible)
	// * `BEL` - Belgian Franc (financial)
	// * `BZD` - Belize Dollar
	// * `BMD` - Bermudan Dollar
	// * `BTN` - Bhutanese Ngultrum
	// * `BOB` - Bolivian Boliviano
	// * `BOL` - Bolivian Boliviano (1863–1963)
	// * `BOV` - Bolivian Mvdol
	// * `BOP` - Bolivian Peso
	// * `BAM` - Bosnia-Herzegovina Convertible Mark
	// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
	// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
	// * `BWP` - Botswanan Pula
	// * `BRC` - Brazilian Cruzado (1986–1989)
	// * `BRZ` - Brazilian Cruzeiro (1942–1967)
	// * `BRE` - Brazilian Cruzeiro (1990–1993)
	// * `BRR` - Brazilian Cruzeiro (1993–1994)
	// * `BRN` - Brazilian New Cruzado (1989–1990)
	// * `BRB` - Brazilian New Cruzeiro (1967–1986)
	// * `BRL` - Brazilian Real
	// * `GBP` - British Pound
	// * `BND` - Brunei Dollar
	// * `BGL` - Bulgarian Hard Lev
	// * `BGN` - Bulgarian Lev
	// * `BGO` - Bulgarian Lev (1879–1952)
	// * `BGM` - Bulgarian Socialist Lev
	// * `BUK` - Burmese Kyat
	// * `BIF` - Burundian Franc
	// * `XPF` - CFP Franc
	// * `KHR` - Cambodian Riel
	// * `CAD` - Canadian Dollar
	// * `CVE` - Cape Verdean Escudo
	// * `KYD` - Cayman Islands Dollar
	// * `XAF` - Central African CFA Franc
	// * `CLE` - Chilean Escudo
	// * `CLP` - Chilean Peso
	// * `CLF` - Chilean Unit of Account (UF)
	// * `CNX` - Chinese People’s Bank Dollar
	// * `CNY` - Chinese Yuan
	// * `CNH` - Chinese Yuan (offshore)
	// * `COP` - Colombian Peso
	// * `COU` - Colombian Real Value Unit
	// * `KMF` - Comorian Franc
	// * `CDF` - Congolese Franc
	// * `CRC` - Costa Rican Colón
	// * `HRD` - Croatian Dinar
	// * `HRK` - Croatian Kuna
	// * `CUC` - Cuban Convertible Peso
	// * `CUP` - Cuban Peso
	// * `CYP` - Cypriot Pound
	// * `CZK` - Czech Koruna
	// * `CSK` - Czechoslovak Hard Koruna
	// * `DKK` - Danish Krone
	// * `DJF` - Djiboutian Franc
	// * `DOP` - Dominican Peso
	// * `NLG` - Dutch Guilder
	// * `XCD` - East Caribbean Dollar
	// * `DDM` - East German Mark
	// * `ECS` - Ecuadorian Sucre
	// * `ECV` - Ecuadorian Unit of Constant Value
	// * `EGP` - Egyptian Pound
	// * `GQE` - Equatorial Guinean Ekwele
	// * `ERN` - Eritrean Nakfa
	// * `EEK` - Estonian Kroon
	// * `ETB` - Ethiopian Birr
	// * `EUR` - Euro
	// * `XBA` - European Composite Unit
	// * `XEU` - European Currency Unit
	// * `XBB` - European Monetary Unit
	// * `XBC` - European Unit of Account (XBC)
	// * `XBD` - European Unit of Account (XBD)
	// * `FKP` - Falkland Islands Pound
	// * `FJD` - Fijian Dollar
	// * `FIM` - Finnish Markka
	// * `FRF` - French Franc
	// * `XFO` - French Gold Franc
	// * `XFU` - French UIC-Franc
	// * `GMD` - Gambian Dalasi
	// * `GEK` - Georgian Kupon Larit
	// * `GEL` - Georgian Lari
	// * `DEM` - German Mark
	// * `GHS` - Ghanaian Cedi
	// * `GHC` - Ghanaian Cedi (1979–2007)
	// * `GIP` - Gibraltar Pound
	// * `XAU` - Gold
	// * `GRD` - Greek Drachma
	// * `GTQ` - Guatemalan Quetzal
	// * `GWP` - Guinea-Bissau Peso
	// * `GNF` - Guinean Franc
	// * `GNS` - Guinean Syli
	// * `GYD` - Guyanaese Dollar
	// * `HTG` - Haitian Gourde
	// * `HNL` - Honduran Lempira
	// * `HKD` - Hong Kong Dollar
	// * `HUF` - Hungarian Forint
	// * `IMP` - IMP
	// * `ISK` - Icelandic Króna
	// * `ISJ` - Icelandic Króna (1918–1981)
	// * `INR` - Indian Rupee
	// * `IDR` - Indonesian Rupiah
	// * `IRR` - Iranian Rial
	// * `IQD` - Iraqi Dinar
	// * `IEP` - Irish Pound
	// * `ILS` - Israeli New Shekel
	// * `ILP` - Israeli Pound
	// * `ILR` - Israeli Shekel (1980–1985)
	// * `ITL` - Italian Lira
	// * `JMD` - Jamaican Dollar
	// * `JPY` - Japanese Yen
	// * `JOD` - Jordanian Dinar
	// * `KZT` - Kazakhstani Tenge
	// * `KES` - Kenyan Shilling
	// * `KWD` - Kuwaiti Dinar
	// * `KGS` - Kyrgystani Som
	// * `LAK` - Laotian Kip
	// * `LVL` - Latvian Lats
	// * `LVR` - Latvian Ruble
	// * `LBP` - Lebanese Pound
	// * `LSL` - Lesotho Loti
	// * `LRD` - Liberian Dollar
	// * `LYD` - Libyan Dinar
	// * `LTL` - Lithuanian Litas
	// * `LTT` - Lithuanian Talonas
	// * `LUL` - Luxembourg Financial Franc
	// * `LUC` - Luxembourgian Convertible Franc
	// * `LUF` - Luxembourgian Franc
	// * `MOP` - Macanese Pataca
	// * `MKD` - Macedonian Denar
	// * `MKN` - Macedonian Denar (1992–1993)
	// * `MGA` - Malagasy Ariary
	// * `MGF` - Malagasy Franc
	// * `MWK` - Malawian Kwacha
	// * `MYR` - Malaysian Ringgit
	// * `MVR` - Maldivian Rufiyaa
	// * `MVP` - Maldivian Rupee (1947–1981)
	// * `MLF` - Malian Franc
	// * `MTL` - Maltese Lira
	// * `MTP` - Maltese Pound
	// * `MRU` - Mauritanian Ouguiya
	// * `MRO` - Mauritanian Ouguiya (1973–2017)
	// * `MUR` - Mauritian Rupee
	// * `MXV` - Mexican Investment Unit
	// * `MXN` - Mexican Peso
	// * `MXP` - Mexican Silver Peso (1861–1992)
	// * `MDC` - Moldovan Cupon
	// * `MDL` - Moldovan Leu
	// * `MCF` - Monegasque Franc
	// * `MNT` - Mongolian Tugrik
	// * `MAD` - Moroccan Dirham
	// * `MAF` - Moroccan Franc
	// * `MZE` - Mozambican Escudo
	// * `MZN` - Mozambican Metical
	// * `MZM` - Mozambican Metical (1980–2006)
	// * `MMK` - Myanmar Kyat
	// * `NAD` - Namibian Dollar
	// * `NPR` - Nepalese Rupee
	// * `ANG` - Netherlands Antillean Guilder
	// * `TWD` - New Taiwan Dollar
	// * `NZD` - New Zealand Dollar
	// * `NIO` - Nicaraguan Córdoba
	// * `NIC` - Nicaraguan Córdoba (1988–1991)
	// * `NGN` - Nigerian Naira
	// * `KPW` - North Korean Won
	// * `NOK` - Norwegian Krone
	// * `OMR` - Omani Rial
	// * `PKR` - Pakistani Rupee
	// * `XPD` - Palladium
	// * `PAB` - Panamanian Balboa
	// * `PGK` - Papua New Guinean Kina
	// * `PYG` - Paraguayan Guarani
	// * `PEI` - Peruvian Inti
	// * `PEN` - Peruvian Sol
	// * `PES` - Peruvian Sol (1863–1965)
	// * `PHP` - Philippine Peso
	// * `XPT` - Platinum
	// * `PLN` - Polish Zloty
	// * `PLZ` - Polish Zloty (1950–1995)
	// * `PTE` - Portuguese Escudo
	// * `GWE` - Portuguese Guinea Escudo
	// * `QAR` - Qatari Rial
	// * `XRE` - RINET Funds
	// * `RHD` - Rhodesian Dollar
	// * `RON` - Romanian Leu
	// * `ROL` - Romanian Leu (1952–2006)
	// * `RUB` - Russian Ruble
	// * `RUR` - Russian Ruble (1991–1998)
	// * `RWF` - Rwandan Franc
	// * `SVC` - Salvadoran Colón
	// * `WST` - Samoan Tala
	// * `SAR` - Saudi Riyal
	// * `RSD` - Serbian Dinar
	// * `CSD` - Serbian Dinar (2002–2006)
	// * `SCR` - Seychellois Rupee
	// * `SLL` - Sierra Leonean Leone
	// * `XAG` - Silver
	// * `SGD` - Singapore Dollar
	// * `SKK` - Slovak Koruna
	// * `SIT` - Slovenian Tolar
	// * `SBD` - Solomon Islands Dollar
	// * `SOS` - Somali Shilling
	// * `ZAR` - South African Rand
	// * `ZAL` - South African Rand (financial)
	// * `KRH` - South Korean Hwan (1953–1962)
	// * `KRW` - South Korean Won
	// * `KRO` - South Korean Won (1945–1953)
	// * `SSP` - South Sudanese Pound
	// * `SUR` - Soviet Rouble
	// * `ESP` - Spanish Peseta
	// * `ESA` - Spanish Peseta (A account)
	// * `ESB` - Spanish Peseta (convertible account)
	// * `XDR` - Special Drawing Rights
	// * `LKR` - Sri Lankan Rupee
	// * `SHP` - St. Helena Pound
	// * `XSU` - Sucre
	// * `SDD` - Sudanese Dinar (1992–2007)
	// * `SDG` - Sudanese Pound
	// * `SDP` - Sudanese Pound (1957–1998)
	// * `SRD` - Surinamese Dollar
	// * `SRG` - Surinamese Guilder
	// * `SZL` - Swazi Lilangeni
	// * `SEK` - Swedish Krona
	// * `CHF` - Swiss Franc
	// * `SYP` - Syrian Pound
	// * `STN` - São Tomé & Príncipe Dobra
	// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
	// * `TVD` - TVD
	// * `TJR` - Tajikistani Ruble
	// * `TJS` - Tajikistani Somoni
	// * `TZS` - Tanzanian Shilling
	// * `XTS` - Testing Currency Code
	// * `THB` - Thai Baht
	// * `XXX` - The codes assigned for transactions where no currency is involved
	// * `TPE` - Timorese Escudo
	// * `TOP` - Tongan Paʻanga
	// * `TTD` - Trinidad & Tobago Dollar
	// * `TND` - Tunisian Dinar
	// * `TRY` - Turkish Lira
	// * `TRL` - Turkish Lira (1922–2005)
	// * `TMT` - Turkmenistani Manat
	// * `TMM` - Turkmenistani Manat (1993–2009)
	// * `USD` - US Dollar
	// * `USN` - US Dollar (Next day)
	// * `USS` - US Dollar (Same day)
	// * `UGX` - Ugandan Shilling
	// * `UGS` - Ugandan Shilling (1966–1987)
	// * `UAH` - Ukrainian Hryvnia
	// * `UAK` - Ukrainian Karbovanets
	// * `AED` - United Arab Emirates Dirham
	// * `UYW` - Uruguayan Nominal Wage Index Unit
	// * `UYU` - Uruguayan Peso
	// * `UYP` - Uruguayan Peso (1975–1993)
	// * `UYI` - Uruguayan Peso (Indexed Units)
	// * `UZS` - Uzbekistani Som
	// * `VUV` - Vanuatu Vatu
	// * `VES` - Venezuelan Bolívar
	// * `VEB` - Venezuelan Bolívar (1871–2008)
	// * `VEF` - Venezuelan Bolívar (2008–2018)
	// * `VND` - Vietnamese Dong
	// * `VNN` - Vietnamese Dong (1978–1985)
	// * `CHE` - WIR Euro
	// * `CHW` - WIR Franc
	// * `XOF` - West African CFA Franc
	// * `YDD` - Yemeni Dinar
	// * `YER` - Yemeni Rial
	// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
	// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
	// * `YUM` - Yugoslavian New Dinar (1994–2002)
	// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
	// * `ZWN` - ZWN
	// * `ZRN` - Zairean New Zaire (1993–1998)
	// * `ZRZ` - Zairean Zaire (1971–1993)
	// * `ZMW` - Zambian Kwacha
	// * `ZMK` - Zambian Kwacha (1968–2012)
	// * `ZWD` - Zimbabwean Dollar (1980–2008)
	// * `ZWR` - Zimbabwean Dollar (2008)
	// * `ZWL` - Zimbabwean Dollar (2009)
	Currency *InvoiceCurrency `json:"currency,omitempty"`
	// The invoice's exchange rate.
	ExchangeRate *string `json:"exchange_rate,omitempty"`
	// The total discounts applied to the total cost.
	TotalDiscount *float64 `json:"total_discount,omitempty"`
	// The total amount being paid before taxes.
	SubTotal *float64 `json:"sub_total,omitempty"`
	// The status of the invoice.
	//
	// * `PAID` - PAID
	// * `DRAFT` - DRAFT
	// * `SUBMITTED` - SUBMITTED
	// * `PARTIALLY_PAID` - PARTIALLY_PAID
	// * `OPEN` - OPEN
	// * `VOID` - VOID
	Status *InvoiceStatus `json:"status,omitempty"`
	// The total amount being paid in taxes.
	TotalTaxAmount *float64 `json:"total_tax_amount,omitempty"`
	// The invoice's total amount.
	TotalAmount *float64 `json:"total_amount,omitempty"`
	// The invoice's remaining balance.
	Balance *float64 `json:"balance,omitempty"`
	// When the third party's invoice entry was updated.
	RemoteUpdatedAt    *time.Time                       `json:"remote_updated_at,omitempty"`
	TrackingCategories []*InvoiceTrackingCategoriesItem `json:"tracking_categories,omitempty"`
	// Array of `Payment` object IDs.
	Payments []*InvoicePaymentsItem `json:"payments,omitempty"`
	// A list of the Payment Applied to Lines common models related to a given Invoice, Credit Note, or Journal Entry.
	AppliedPayments  []*InvoiceAppliedPaymentsItem `json:"applied_payments,omitempty"`
	LineItems        []*InvoiceLineItem            `json:"line_items,omitempty"`
	RemoteWasDeleted *bool                         `json:"remote_was_deleted,omitempty"`
	// The accounting period that the Invoice was generated in.
	AccountingPeriod *InvoiceAccountingPeriod     `json:"accounting_period,omitempty"`
	PurchaseOrders   []*InvoicePurchaseOrdersItem `json:"purchase_orders,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId  *string    `json:"remote_id,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt    *time.Time     `json:"modified_at,omitempty"`
	FieldMappings map[string]any `json:"field_mappings,omitempty"`
	RemoteData    []*RemoteData  `json:"remote_data,omitempty"`
}

// The accounting period that the Invoice was generated in.
type InvoiceAccountingPeriod struct {
	typeName         string
	String           string
	AccountingPeriod *AccountingPeriod
}

func NewInvoiceAccountingPeriodFromString(value string) *InvoiceAccountingPeriod {
	return &InvoiceAccountingPeriod{typeName: "string", String: value}
}

func NewInvoiceAccountingPeriodFromAccountingPeriod(value *AccountingPeriod) *InvoiceAccountingPeriod {
	return &InvoiceAccountingPeriod{typeName: "accountingPeriod", AccountingPeriod: value}
}

func (i *InvoiceAccountingPeriod) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typeName = "string"
		i.String = valueString
		return nil
	}
	valueAccountingPeriod := new(AccountingPeriod)
	if err := json.Unmarshal(data, &valueAccountingPeriod); err == nil {
		i.typeName = "accountingPeriod"
		i.AccountingPeriod = valueAccountingPeriod
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i InvoiceAccountingPeriod) MarshalJSON() ([]byte, error) {
	switch i.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return json.Marshal(i.String)
	case "accountingPeriod":
		return json.Marshal(i.AccountingPeriod)
	}
}

type InvoiceAccountingPeriodVisitor interface {
	VisitString(string) error
	VisitAccountingPeriod(*AccountingPeriod) error
}

func (i *InvoiceAccountingPeriod) Accept(visitor InvoiceAccountingPeriodVisitor) error {
	switch i.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return visitor.VisitString(i.String)
	case "accountingPeriod":
		return visitor.VisitAccountingPeriod(i.AccountingPeriod)
	}
}

type InvoiceAppliedPaymentsItem struct {
	typeName        string
	String          string
	PaymentLineItem *PaymentLineItem
}

func NewInvoiceAppliedPaymentsItemFromString(value string) *InvoiceAppliedPaymentsItem {
	return &InvoiceAppliedPaymentsItem{typeName: "string", String: value}
}

func NewInvoiceAppliedPaymentsItemFromPaymentLineItem(value *PaymentLineItem) *InvoiceAppliedPaymentsItem {
	return &InvoiceAppliedPaymentsItem{typeName: "paymentLineItem", PaymentLineItem: value}
}

func (i *InvoiceAppliedPaymentsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typeName = "string"
		i.String = valueString
		return nil
	}
	valuePaymentLineItem := new(PaymentLineItem)
	if err := json.Unmarshal(data, &valuePaymentLineItem); err == nil {
		i.typeName = "paymentLineItem"
		i.PaymentLineItem = valuePaymentLineItem
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i InvoiceAppliedPaymentsItem) MarshalJSON() ([]byte, error) {
	switch i.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return json.Marshal(i.String)
	case "paymentLineItem":
		return json.Marshal(i.PaymentLineItem)
	}
}

type InvoiceAppliedPaymentsItemVisitor interface {
	VisitString(string) error
	VisitPaymentLineItem(*PaymentLineItem) error
}

func (i *InvoiceAppliedPaymentsItem) Accept(visitor InvoiceAppliedPaymentsItemVisitor) error {
	switch i.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return visitor.VisitString(i.String)
	case "paymentLineItem":
		return visitor.VisitPaymentLineItem(i.PaymentLineItem)
	}
}

// The company the invoice belongs to.
type InvoiceCompany struct {
	typeName    string
	String      string
	CompanyInfo *CompanyInfo
}

func NewInvoiceCompanyFromString(value string) *InvoiceCompany {
	return &InvoiceCompany{typeName: "string", String: value}
}

func NewInvoiceCompanyFromCompanyInfo(value *CompanyInfo) *InvoiceCompany {
	return &InvoiceCompany{typeName: "companyInfo", CompanyInfo: value}
}

func (i *InvoiceCompany) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typeName = "string"
		i.String = valueString
		return nil
	}
	valueCompanyInfo := new(CompanyInfo)
	if err := json.Unmarshal(data, &valueCompanyInfo); err == nil {
		i.typeName = "companyInfo"
		i.CompanyInfo = valueCompanyInfo
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i InvoiceCompany) MarshalJSON() ([]byte, error) {
	switch i.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return json.Marshal(i.String)
	case "companyInfo":
		return json.Marshal(i.CompanyInfo)
	}
}

type InvoiceCompanyVisitor interface {
	VisitString(string) error
	VisitCompanyInfo(*CompanyInfo) error
}

func (i *InvoiceCompany) Accept(visitor InvoiceCompanyVisitor) error {
	switch i.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return visitor.VisitString(i.String)
	case "companyInfo":
		return visitor.VisitCompanyInfo(i.CompanyInfo)
	}
}

// The invoice's contact.
type InvoiceContact struct {
	typeName string
	String   string
	Contact  *Contact
}

func NewInvoiceContactFromString(value string) *InvoiceContact {
	return &InvoiceContact{typeName: "string", String: value}
}

func NewInvoiceContactFromContact(value *Contact) *InvoiceContact {
	return &InvoiceContact{typeName: "contact", Contact: value}
}

func (i *InvoiceContact) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typeName = "string"
		i.String = valueString
		return nil
	}
	valueContact := new(Contact)
	if err := json.Unmarshal(data, &valueContact); err == nil {
		i.typeName = "contact"
		i.Contact = valueContact
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i InvoiceContact) MarshalJSON() ([]byte, error) {
	switch i.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return json.Marshal(i.String)
	case "contact":
		return json.Marshal(i.Contact)
	}
}

type InvoiceContactVisitor interface {
	VisitString(string) error
	VisitContact(*Contact) error
}

func (i *InvoiceContact) Accept(visitor InvoiceContactVisitor) error {
	switch i.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return visitor.VisitString(i.String)
	case "contact":
		return visitor.VisitContact(i.Contact)
	}
}

// The invoice's currency.
//
// * `XUA` - ADB Unit of Account
// * `AFN` - Afghan Afghani
// * `AFA` - Afghan Afghani (1927–2002)
// * `ALL` - Albanian Lek
// * `ALK` - Albanian Lek (1946–1965)
// * `DZD` - Algerian Dinar
// * `ADP` - Andorran Peseta
// * `AOA` - Angolan Kwanza
// * `AOK` - Angolan Kwanza (1977–1991)
// * `AON` - Angolan New Kwanza (1990–2000)
// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
// * `ARA` - Argentine Austral
// * `ARS` - Argentine Peso
// * `ARM` - Argentine Peso (1881–1970)
// * `ARP` - Argentine Peso (1983–1985)
// * `ARL` - Argentine Peso Ley (1970–1983)
// * `AMD` - Armenian Dram
// * `AWG` - Aruban Florin
// * `AUD` - Australian Dollar
// * `ATS` - Austrian Schilling
// * `AZN` - Azerbaijani Manat
// * `AZM` - Azerbaijani Manat (1993–2006)
// * `BSD` - Bahamian Dollar
// * `BHD` - Bahraini Dinar
// * `BDT` - Bangladeshi Taka
// * `BBD` - Barbadian Dollar
// * `BYN` - Belarusian Ruble
// * `BYB` - Belarusian Ruble (1994–1999)
// * `BYR` - Belarusian Ruble (2000–2016)
// * `BEF` - Belgian Franc
// * `BEC` - Belgian Franc (convertible)
// * `BEL` - Belgian Franc (financial)
// * `BZD` - Belize Dollar
// * `BMD` - Bermudan Dollar
// * `BTN` - Bhutanese Ngultrum
// * `BOB` - Bolivian Boliviano
// * `BOL` - Bolivian Boliviano (1863–1963)
// * `BOV` - Bolivian Mvdol
// * `BOP` - Bolivian Peso
// * `BAM` - Bosnia-Herzegovina Convertible Mark
// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
// * `BWP` - Botswanan Pula
// * `BRC` - Brazilian Cruzado (1986–1989)
// * `BRZ` - Brazilian Cruzeiro (1942–1967)
// * `BRE` - Brazilian Cruzeiro (1990–1993)
// * `BRR` - Brazilian Cruzeiro (1993–1994)
// * `BRN` - Brazilian New Cruzado (1989–1990)
// * `BRB` - Brazilian New Cruzeiro (1967–1986)
// * `BRL` - Brazilian Real
// * `GBP` - British Pound
// * `BND` - Brunei Dollar
// * `BGL` - Bulgarian Hard Lev
// * `BGN` - Bulgarian Lev
// * `BGO` - Bulgarian Lev (1879–1952)
// * `BGM` - Bulgarian Socialist Lev
// * `BUK` - Burmese Kyat
// * `BIF` - Burundian Franc
// * `XPF` - CFP Franc
// * `KHR` - Cambodian Riel
// * `CAD` - Canadian Dollar
// * `CVE` - Cape Verdean Escudo
// * `KYD` - Cayman Islands Dollar
// * `XAF` - Central African CFA Franc
// * `CLE` - Chilean Escudo
// * `CLP` - Chilean Peso
// * `CLF` - Chilean Unit of Account (UF)
// * `CNX` - Chinese People’s Bank Dollar
// * `CNY` - Chinese Yuan
// * `CNH` - Chinese Yuan (offshore)
// * `COP` - Colombian Peso
// * `COU` - Colombian Real Value Unit
// * `KMF` - Comorian Franc
// * `CDF` - Congolese Franc
// * `CRC` - Costa Rican Colón
// * `HRD` - Croatian Dinar
// * `HRK` - Croatian Kuna
// * `CUC` - Cuban Convertible Peso
// * `CUP` - Cuban Peso
// * `CYP` - Cypriot Pound
// * `CZK` - Czech Koruna
// * `CSK` - Czechoslovak Hard Koruna
// * `DKK` - Danish Krone
// * `DJF` - Djiboutian Franc
// * `DOP` - Dominican Peso
// * `NLG` - Dutch Guilder
// * `XCD` - East Caribbean Dollar
// * `DDM` - East German Mark
// * `ECS` - Ecuadorian Sucre
// * `ECV` - Ecuadorian Unit of Constant Value
// * `EGP` - Egyptian Pound
// * `GQE` - Equatorial Guinean Ekwele
// * `ERN` - Eritrean Nakfa
// * `EEK` - Estonian Kroon
// * `ETB` - Ethiopian Birr
// * `EUR` - Euro
// * `XBA` - European Composite Unit
// * `XEU` - European Currency Unit
// * `XBB` - European Monetary Unit
// * `XBC` - European Unit of Account (XBC)
// * `XBD` - European Unit of Account (XBD)
// * `FKP` - Falkland Islands Pound
// * `FJD` - Fijian Dollar
// * `FIM` - Finnish Markka
// * `FRF` - French Franc
// * `XFO` - French Gold Franc
// * `XFU` - French UIC-Franc
// * `GMD` - Gambian Dalasi
// * `GEK` - Georgian Kupon Larit
// * `GEL` - Georgian Lari
// * `DEM` - German Mark
// * `GHS` - Ghanaian Cedi
// * `GHC` - Ghanaian Cedi (1979–2007)
// * `GIP` - Gibraltar Pound
// * `XAU` - Gold
// * `GRD` - Greek Drachma
// * `GTQ` - Guatemalan Quetzal
// * `GWP` - Guinea-Bissau Peso
// * `GNF` - Guinean Franc
// * `GNS` - Guinean Syli
// * `GYD` - Guyanaese Dollar
// * `HTG` - Haitian Gourde
// * `HNL` - Honduran Lempira
// * `HKD` - Hong Kong Dollar
// * `HUF` - Hungarian Forint
// * `IMP` - IMP
// * `ISK` - Icelandic Króna
// * `ISJ` - Icelandic Króna (1918–1981)
// * `INR` - Indian Rupee
// * `IDR` - Indonesian Rupiah
// * `IRR` - Iranian Rial
// * `IQD` - Iraqi Dinar
// * `IEP` - Irish Pound
// * `ILS` - Israeli New Shekel
// * `ILP` - Israeli Pound
// * `ILR` - Israeli Shekel (1980–1985)
// * `ITL` - Italian Lira
// * `JMD` - Jamaican Dollar
// * `JPY` - Japanese Yen
// * `JOD` - Jordanian Dinar
// * `KZT` - Kazakhstani Tenge
// * `KES` - Kenyan Shilling
// * `KWD` - Kuwaiti Dinar
// * `KGS` - Kyrgystani Som
// * `LAK` - Laotian Kip
// * `LVL` - Latvian Lats
// * `LVR` - Latvian Ruble
// * `LBP` - Lebanese Pound
// * `LSL` - Lesotho Loti
// * `LRD` - Liberian Dollar
// * `LYD` - Libyan Dinar
// * `LTL` - Lithuanian Litas
// * `LTT` - Lithuanian Talonas
// * `LUL` - Luxembourg Financial Franc
// * `LUC` - Luxembourgian Convertible Franc
// * `LUF` - Luxembourgian Franc
// * `MOP` - Macanese Pataca
// * `MKD` - Macedonian Denar
// * `MKN` - Macedonian Denar (1992–1993)
// * `MGA` - Malagasy Ariary
// * `MGF` - Malagasy Franc
// * `MWK` - Malawian Kwacha
// * `MYR` - Malaysian Ringgit
// * `MVR` - Maldivian Rufiyaa
// * `MVP` - Maldivian Rupee (1947–1981)
// * `MLF` - Malian Franc
// * `MTL` - Maltese Lira
// * `MTP` - Maltese Pound
// * `MRU` - Mauritanian Ouguiya
// * `MRO` - Mauritanian Ouguiya (1973–2017)
// * `MUR` - Mauritian Rupee
// * `MXV` - Mexican Investment Unit
// * `MXN` - Mexican Peso
// * `MXP` - Mexican Silver Peso (1861–1992)
// * `MDC` - Moldovan Cupon
// * `MDL` - Moldovan Leu
// * `MCF` - Monegasque Franc
// * `MNT` - Mongolian Tugrik
// * `MAD` - Moroccan Dirham
// * `MAF` - Moroccan Franc
// * `MZE` - Mozambican Escudo
// * `MZN` - Mozambican Metical
// * `MZM` - Mozambican Metical (1980–2006)
// * `MMK` - Myanmar Kyat
// * `NAD` - Namibian Dollar
// * `NPR` - Nepalese Rupee
// * `ANG` - Netherlands Antillean Guilder
// * `TWD` - New Taiwan Dollar
// * `NZD` - New Zealand Dollar
// * `NIO` - Nicaraguan Córdoba
// * `NIC` - Nicaraguan Córdoba (1988–1991)
// * `NGN` - Nigerian Naira
// * `KPW` - North Korean Won
// * `NOK` - Norwegian Krone
// * `OMR` - Omani Rial
// * `PKR` - Pakistani Rupee
// * `XPD` - Palladium
// * `PAB` - Panamanian Balboa
// * `PGK` - Papua New Guinean Kina
// * `PYG` - Paraguayan Guarani
// * `PEI` - Peruvian Inti
// * `PEN` - Peruvian Sol
// * `PES` - Peruvian Sol (1863–1965)
// * `PHP` - Philippine Peso
// * `XPT` - Platinum
// * `PLN` - Polish Zloty
// * `PLZ` - Polish Zloty (1950–1995)
// * `PTE` - Portuguese Escudo
// * `GWE` - Portuguese Guinea Escudo
// * `QAR` - Qatari Rial
// * `XRE` - RINET Funds
// * `RHD` - Rhodesian Dollar
// * `RON` - Romanian Leu
// * `ROL` - Romanian Leu (1952–2006)
// * `RUB` - Russian Ruble
// * `RUR` - Russian Ruble (1991–1998)
// * `RWF` - Rwandan Franc
// * `SVC` - Salvadoran Colón
// * `WST` - Samoan Tala
// * `SAR` - Saudi Riyal
// * `RSD` - Serbian Dinar
// * `CSD` - Serbian Dinar (2002–2006)
// * `SCR` - Seychellois Rupee
// * `SLL` - Sierra Leonean Leone
// * `XAG` - Silver
// * `SGD` - Singapore Dollar
// * `SKK` - Slovak Koruna
// * `SIT` - Slovenian Tolar
// * `SBD` - Solomon Islands Dollar
// * `SOS` - Somali Shilling
// * `ZAR` - South African Rand
// * `ZAL` - South African Rand (financial)
// * `KRH` - South Korean Hwan (1953–1962)
// * `KRW` - South Korean Won
// * `KRO` - South Korean Won (1945–1953)
// * `SSP` - South Sudanese Pound
// * `SUR` - Soviet Rouble
// * `ESP` - Spanish Peseta
// * `ESA` - Spanish Peseta (A account)
// * `ESB` - Spanish Peseta (convertible account)
// * `XDR` - Special Drawing Rights
// * `LKR` - Sri Lankan Rupee
// * `SHP` - St. Helena Pound
// * `XSU` - Sucre
// * `SDD` - Sudanese Dinar (1992–2007)
// * `SDG` - Sudanese Pound
// * `SDP` - Sudanese Pound (1957–1998)
// * `SRD` - Surinamese Dollar
// * `SRG` - Surinamese Guilder
// * `SZL` - Swazi Lilangeni
// * `SEK` - Swedish Krona
// * `CHF` - Swiss Franc
// * `SYP` - Syrian Pound
// * `STN` - São Tomé & Príncipe Dobra
// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
// * `TVD` - TVD
// * `TJR` - Tajikistani Ruble
// * `TJS` - Tajikistani Somoni
// * `TZS` - Tanzanian Shilling
// * `XTS` - Testing Currency Code
// * `THB` - Thai Baht
// * `XXX` - The codes assigned for transactions where no currency is involved
// * `TPE` - Timorese Escudo
// * `TOP` - Tongan Paʻanga
// * `TTD` - Trinidad & Tobago Dollar
// * `TND` - Tunisian Dinar
// * `TRY` - Turkish Lira
// * `TRL` - Turkish Lira (1922–2005)
// * `TMT` - Turkmenistani Manat
// * `TMM` - Turkmenistani Manat (1993–2009)
// * `USD` - US Dollar
// * `USN` - US Dollar (Next day)
// * `USS` - US Dollar (Same day)
// * `UGX` - Ugandan Shilling
// * `UGS` - Ugandan Shilling (1966–1987)
// * `UAH` - Ukrainian Hryvnia
// * `UAK` - Ukrainian Karbovanets
// * `AED` - United Arab Emirates Dirham
// * `UYW` - Uruguayan Nominal Wage Index Unit
// * `UYU` - Uruguayan Peso
// * `UYP` - Uruguayan Peso (1975–1993)
// * `UYI` - Uruguayan Peso (Indexed Units)
// * `UZS` - Uzbekistani Som
// * `VUV` - Vanuatu Vatu
// * `VES` - Venezuelan Bolívar
// * `VEB` - Venezuelan Bolívar (1871–2008)
// * `VEF` - Venezuelan Bolívar (2008–2018)
// * `VND` - Vietnamese Dong
// * `VNN` - Vietnamese Dong (1978–1985)
// * `CHE` - WIR Euro
// * `CHW` - WIR Franc
// * `XOF` - West African CFA Franc
// * `YDD` - Yemeni Dinar
// * `YER` - Yemeni Rial
// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
// * `YUM` - Yugoslavian New Dinar (1994–2002)
// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
// * `ZWN` - ZWN
// * `ZRN` - Zairean New Zaire (1993–1998)
// * `ZRZ` - Zairean Zaire (1971–1993)
// * `ZMW` - Zambian Kwacha
// * `ZMK` - Zambian Kwacha (1968–2012)
// * `ZWD` - Zimbabwean Dollar (1980–2008)
// * `ZWR` - Zimbabwean Dollar (2008)
// * `ZWL` - Zimbabwean Dollar (2009)
type InvoiceCurrency struct {
	typeName     string
	CurrencyEnum CurrencyEnum
	String       string
}

func NewInvoiceCurrencyFromCurrencyEnum(value CurrencyEnum) *InvoiceCurrency {
	return &InvoiceCurrency{typeName: "currencyEnum", CurrencyEnum: value}
}

func NewInvoiceCurrencyFromString(value string) *InvoiceCurrency {
	return &InvoiceCurrency{typeName: "string", String: value}
}

func (i *InvoiceCurrency) UnmarshalJSON(data []byte) error {
	var valueCurrencyEnum CurrencyEnum
	if err := json.Unmarshal(data, &valueCurrencyEnum); err == nil {
		i.typeName = "currencyEnum"
		i.CurrencyEnum = valueCurrencyEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typeName = "string"
		i.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i InvoiceCurrency) MarshalJSON() ([]byte, error) {
	switch i.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "currencyEnum":
		return json.Marshal(i.CurrencyEnum)
	case "string":
		return json.Marshal(i.String)
	}
}

type InvoiceCurrencyVisitor interface {
	VisitCurrencyEnum(CurrencyEnum) error
	VisitString(string) error
}

func (i *InvoiceCurrency) Accept(visitor InvoiceCurrencyVisitor) error {
	switch i.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "currencyEnum":
		return visitor.VisitCurrencyEnum(i.CurrencyEnum)
	case "string":
		return visitor.VisitString(i.String)
	}
}

// # The InvoiceLineItem Object
// ### Description
// The `InvoiceLineItem` object represents an itemized record of goods and/or services sold to a customer.
//
// ### Usage Example
// Fetch from the `GET Invoice` endpoint and view the invoice's line items.
type InvoiceLineItem struct {
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The line item's description.
	Description *string `json:"description,omitempty"`
	// The line item's unit price.
	UnitPrice *float64 `json:"unit_price,omitempty"`
	// The line item's quantity.
	Quantity *float64 `json:"quantity,omitempty"`
	// The line item's total amount.
	TotalAmount *float64 `json:"total_amount,omitempty"`
	// The line item's currency.
	//
	// * `XUA` - ADB Unit of Account
	// * `AFN` - Afghan Afghani
	// * `AFA` - Afghan Afghani (1927–2002)
	// * `ALL` - Albanian Lek
	// * `ALK` - Albanian Lek (1946–1965)
	// * `DZD` - Algerian Dinar
	// * `ADP` - Andorran Peseta
	// * `AOA` - Angolan Kwanza
	// * `AOK` - Angolan Kwanza (1977–1991)
	// * `AON` - Angolan New Kwanza (1990–2000)
	// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
	// * `ARA` - Argentine Austral
	// * `ARS` - Argentine Peso
	// * `ARM` - Argentine Peso (1881–1970)
	// * `ARP` - Argentine Peso (1983–1985)
	// * `ARL` - Argentine Peso Ley (1970–1983)
	// * `AMD` - Armenian Dram
	// * `AWG` - Aruban Florin
	// * `AUD` - Australian Dollar
	// * `ATS` - Austrian Schilling
	// * `AZN` - Azerbaijani Manat
	// * `AZM` - Azerbaijani Manat (1993–2006)
	// * `BSD` - Bahamian Dollar
	// * `BHD` - Bahraini Dinar
	// * `BDT` - Bangladeshi Taka
	// * `BBD` - Barbadian Dollar
	// * `BYN` - Belarusian Ruble
	// * `BYB` - Belarusian Ruble (1994–1999)
	// * `BYR` - Belarusian Ruble (2000–2016)
	// * `BEF` - Belgian Franc
	// * `BEC` - Belgian Franc (convertible)
	// * `BEL` - Belgian Franc (financial)
	// * `BZD` - Belize Dollar
	// * `BMD` - Bermudan Dollar
	// * `BTN` - Bhutanese Ngultrum
	// * `BOB` - Bolivian Boliviano
	// * `BOL` - Bolivian Boliviano (1863–1963)
	// * `BOV` - Bolivian Mvdol
	// * `BOP` - Bolivian Peso
	// * `BAM` - Bosnia-Herzegovina Convertible Mark
	// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
	// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
	// * `BWP` - Botswanan Pula
	// * `BRC` - Brazilian Cruzado (1986–1989)
	// * `BRZ` - Brazilian Cruzeiro (1942–1967)
	// * `BRE` - Brazilian Cruzeiro (1990–1993)
	// * `BRR` - Brazilian Cruzeiro (1993–1994)
	// * `BRN` - Brazilian New Cruzado (1989–1990)
	// * `BRB` - Brazilian New Cruzeiro (1967–1986)
	// * `BRL` - Brazilian Real
	// * `GBP` - British Pound
	// * `BND` - Brunei Dollar
	// * `BGL` - Bulgarian Hard Lev
	// * `BGN` - Bulgarian Lev
	// * `BGO` - Bulgarian Lev (1879–1952)
	// * `BGM` - Bulgarian Socialist Lev
	// * `BUK` - Burmese Kyat
	// * `BIF` - Burundian Franc
	// * `XPF` - CFP Franc
	// * `KHR` - Cambodian Riel
	// * `CAD` - Canadian Dollar
	// * `CVE` - Cape Verdean Escudo
	// * `KYD` - Cayman Islands Dollar
	// * `XAF` - Central African CFA Franc
	// * `CLE` - Chilean Escudo
	// * `CLP` - Chilean Peso
	// * `CLF` - Chilean Unit of Account (UF)
	// * `CNX` - Chinese People’s Bank Dollar
	// * `CNY` - Chinese Yuan
	// * `CNH` - Chinese Yuan (offshore)
	// * `COP` - Colombian Peso
	// * `COU` - Colombian Real Value Unit
	// * `KMF` - Comorian Franc
	// * `CDF` - Congolese Franc
	// * `CRC` - Costa Rican Colón
	// * `HRD` - Croatian Dinar
	// * `HRK` - Croatian Kuna
	// * `CUC` - Cuban Convertible Peso
	// * `CUP` - Cuban Peso
	// * `CYP` - Cypriot Pound
	// * `CZK` - Czech Koruna
	// * `CSK` - Czechoslovak Hard Koruna
	// * `DKK` - Danish Krone
	// * `DJF` - Djiboutian Franc
	// * `DOP` - Dominican Peso
	// * `NLG` - Dutch Guilder
	// * `XCD` - East Caribbean Dollar
	// * `DDM` - East German Mark
	// * `ECS` - Ecuadorian Sucre
	// * `ECV` - Ecuadorian Unit of Constant Value
	// * `EGP` - Egyptian Pound
	// * `GQE` - Equatorial Guinean Ekwele
	// * `ERN` - Eritrean Nakfa
	// * `EEK` - Estonian Kroon
	// * `ETB` - Ethiopian Birr
	// * `EUR` - Euro
	// * `XBA` - European Composite Unit
	// * `XEU` - European Currency Unit
	// * `XBB` - European Monetary Unit
	// * `XBC` - European Unit of Account (XBC)
	// * `XBD` - European Unit of Account (XBD)
	// * `FKP` - Falkland Islands Pound
	// * `FJD` - Fijian Dollar
	// * `FIM` - Finnish Markka
	// * `FRF` - French Franc
	// * `XFO` - French Gold Franc
	// * `XFU` - French UIC-Franc
	// * `GMD` - Gambian Dalasi
	// * `GEK` - Georgian Kupon Larit
	// * `GEL` - Georgian Lari
	// * `DEM` - German Mark
	// * `GHS` - Ghanaian Cedi
	// * `GHC` - Ghanaian Cedi (1979–2007)
	// * `GIP` - Gibraltar Pound
	// * `XAU` - Gold
	// * `GRD` - Greek Drachma
	// * `GTQ` - Guatemalan Quetzal
	// * `GWP` - Guinea-Bissau Peso
	// * `GNF` - Guinean Franc
	// * `GNS` - Guinean Syli
	// * `GYD` - Guyanaese Dollar
	// * `HTG` - Haitian Gourde
	// * `HNL` - Honduran Lempira
	// * `HKD` - Hong Kong Dollar
	// * `HUF` - Hungarian Forint
	// * `IMP` - IMP
	// * `ISK` - Icelandic Króna
	// * `ISJ` - Icelandic Króna (1918–1981)
	// * `INR` - Indian Rupee
	// * `IDR` - Indonesian Rupiah
	// * `IRR` - Iranian Rial
	// * `IQD` - Iraqi Dinar
	// * `IEP` - Irish Pound
	// * `ILS` - Israeli New Shekel
	// * `ILP` - Israeli Pound
	// * `ILR` - Israeli Shekel (1980–1985)
	// * `ITL` - Italian Lira
	// * `JMD` - Jamaican Dollar
	// * `JPY` - Japanese Yen
	// * `JOD` - Jordanian Dinar
	// * `KZT` - Kazakhstani Tenge
	// * `KES` - Kenyan Shilling
	// * `KWD` - Kuwaiti Dinar
	// * `KGS` - Kyrgystani Som
	// * `LAK` - Laotian Kip
	// * `LVL` - Latvian Lats
	// * `LVR` - Latvian Ruble
	// * `LBP` - Lebanese Pound
	// * `LSL` - Lesotho Loti
	// * `LRD` - Liberian Dollar
	// * `LYD` - Libyan Dinar
	// * `LTL` - Lithuanian Litas
	// * `LTT` - Lithuanian Talonas
	// * `LUL` - Luxembourg Financial Franc
	// * `LUC` - Luxembourgian Convertible Franc
	// * `LUF` - Luxembourgian Franc
	// * `MOP` - Macanese Pataca
	// * `MKD` - Macedonian Denar
	// * `MKN` - Macedonian Denar (1992–1993)
	// * `MGA` - Malagasy Ariary
	// * `MGF` - Malagasy Franc
	// * `MWK` - Malawian Kwacha
	// * `MYR` - Malaysian Ringgit
	// * `MVR` - Maldivian Rufiyaa
	// * `MVP` - Maldivian Rupee (1947–1981)
	// * `MLF` - Malian Franc
	// * `MTL` - Maltese Lira
	// * `MTP` - Maltese Pound
	// * `MRU` - Mauritanian Ouguiya
	// * `MRO` - Mauritanian Ouguiya (1973–2017)
	// * `MUR` - Mauritian Rupee
	// * `MXV` - Mexican Investment Unit
	// * `MXN` - Mexican Peso
	// * `MXP` - Mexican Silver Peso (1861–1992)
	// * `MDC` - Moldovan Cupon
	// * `MDL` - Moldovan Leu
	// * `MCF` - Monegasque Franc
	// * `MNT` - Mongolian Tugrik
	// * `MAD` - Moroccan Dirham
	// * `MAF` - Moroccan Franc
	// * `MZE` - Mozambican Escudo
	// * `MZN` - Mozambican Metical
	// * `MZM` - Mozambican Metical (1980–2006)
	// * `MMK` - Myanmar Kyat
	// * `NAD` - Namibian Dollar
	// * `NPR` - Nepalese Rupee
	// * `ANG` - Netherlands Antillean Guilder
	// * `TWD` - New Taiwan Dollar
	// * `NZD` - New Zealand Dollar
	// * `NIO` - Nicaraguan Córdoba
	// * `NIC` - Nicaraguan Córdoba (1988–1991)
	// * `NGN` - Nigerian Naira
	// * `KPW` - North Korean Won
	// * `NOK` - Norwegian Krone
	// * `OMR` - Omani Rial
	// * `PKR` - Pakistani Rupee
	// * `XPD` - Palladium
	// * `PAB` - Panamanian Balboa
	// * `PGK` - Papua New Guinean Kina
	// * `PYG` - Paraguayan Guarani
	// * `PEI` - Peruvian Inti
	// * `PEN` - Peruvian Sol
	// * `PES` - Peruvian Sol (1863–1965)
	// * `PHP` - Philippine Peso
	// * `XPT` - Platinum
	// * `PLN` - Polish Zloty
	// * `PLZ` - Polish Zloty (1950–1995)
	// * `PTE` - Portuguese Escudo
	// * `GWE` - Portuguese Guinea Escudo
	// * `QAR` - Qatari Rial
	// * `XRE` - RINET Funds
	// * `RHD` - Rhodesian Dollar
	// * `RON` - Romanian Leu
	// * `ROL` - Romanian Leu (1952–2006)
	// * `RUB` - Russian Ruble
	// * `RUR` - Russian Ruble (1991–1998)
	// * `RWF` - Rwandan Franc
	// * `SVC` - Salvadoran Colón
	// * `WST` - Samoan Tala
	// * `SAR` - Saudi Riyal
	// * `RSD` - Serbian Dinar
	// * `CSD` - Serbian Dinar (2002–2006)
	// * `SCR` - Seychellois Rupee
	// * `SLL` - Sierra Leonean Leone
	// * `XAG` - Silver
	// * `SGD` - Singapore Dollar
	// * `SKK` - Slovak Koruna
	// * `SIT` - Slovenian Tolar
	// * `SBD` - Solomon Islands Dollar
	// * `SOS` - Somali Shilling
	// * `ZAR` - South African Rand
	// * `ZAL` - South African Rand (financial)
	// * `KRH` - South Korean Hwan (1953–1962)
	// * `KRW` - South Korean Won
	// * `KRO` - South Korean Won (1945–1953)
	// * `SSP` - South Sudanese Pound
	// * `SUR` - Soviet Rouble
	// * `ESP` - Spanish Peseta
	// * `ESA` - Spanish Peseta (A account)
	// * `ESB` - Spanish Peseta (convertible account)
	// * `XDR` - Special Drawing Rights
	// * `LKR` - Sri Lankan Rupee
	// * `SHP` - St. Helena Pound
	// * `XSU` - Sucre
	// * `SDD` - Sudanese Dinar (1992–2007)
	// * `SDG` - Sudanese Pound
	// * `SDP` - Sudanese Pound (1957–1998)
	// * `SRD` - Surinamese Dollar
	// * `SRG` - Surinamese Guilder
	// * `SZL` - Swazi Lilangeni
	// * `SEK` - Swedish Krona
	// * `CHF` - Swiss Franc
	// * `SYP` - Syrian Pound
	// * `STN` - São Tomé & Príncipe Dobra
	// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
	// * `TVD` - TVD
	// * `TJR` - Tajikistani Ruble
	// * `TJS` - Tajikistani Somoni
	// * `TZS` - Tanzanian Shilling
	// * `XTS` - Testing Currency Code
	// * `THB` - Thai Baht
	// * `XXX` - The codes assigned for transactions where no currency is involved
	// * `TPE` - Timorese Escudo
	// * `TOP` - Tongan Paʻanga
	// * `TTD` - Trinidad & Tobago Dollar
	// * `TND` - Tunisian Dinar
	// * `TRY` - Turkish Lira
	// * `TRL` - Turkish Lira (1922–2005)
	// * `TMT` - Turkmenistani Manat
	// * `TMM` - Turkmenistani Manat (1993–2009)
	// * `USD` - US Dollar
	// * `USN` - US Dollar (Next day)
	// * `USS` - US Dollar (Same day)
	// * `UGX` - Ugandan Shilling
	// * `UGS` - Ugandan Shilling (1966–1987)
	// * `UAH` - Ukrainian Hryvnia
	// * `UAK` - Ukrainian Karbovanets
	// * `AED` - United Arab Emirates Dirham
	// * `UYW` - Uruguayan Nominal Wage Index Unit
	// * `UYU` - Uruguayan Peso
	// * `UYP` - Uruguayan Peso (1975–1993)
	// * `UYI` - Uruguayan Peso (Indexed Units)
	// * `UZS` - Uzbekistani Som
	// * `VUV` - Vanuatu Vatu
	// * `VES` - Venezuelan Bolívar
	// * `VEB` - Venezuelan Bolívar (1871–2008)
	// * `VEF` - Venezuelan Bolívar (2008–2018)
	// * `VND` - Vietnamese Dong
	// * `VNN` - Vietnamese Dong (1978–1985)
	// * `CHE` - WIR Euro
	// * `CHW` - WIR Franc
	// * `XOF` - West African CFA Franc
	// * `YDD` - Yemeni Dinar
	// * `YER` - Yemeni Rial
	// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
	// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
	// * `YUM` - Yugoslavian New Dinar (1994–2002)
	// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
	// * `ZWN` - ZWN
	// * `ZRN` - Zairean New Zaire (1993–1998)
	// * `ZRZ` - Zairean Zaire (1971–1993)
	// * `ZMW` - Zambian Kwacha
	// * `ZMK` - Zambian Kwacha (1968–2012)
	// * `ZWD` - Zimbabwean Dollar (1980–2008)
	// * `ZWR` - Zimbabwean Dollar (2008)
	// * `ZWL` - Zimbabwean Dollar (2009)
	Currency *InvoiceLineItemCurrency `json:"currency,omitempty"`
	// The line item's exchange rate.
	ExchangeRate       *string                                  `json:"exchange_rate,omitempty"`
	Item               *InvoiceLineItemItem                     `json:"item,omitempty"`
	Account            *InvoiceLineItemAccount                  `json:"account,omitempty"`
	TrackingCategory   *InvoiceLineItemTrackingCategory         `json:"tracking_category,omitempty"`
	TrackingCategories []*InvoiceLineItemTrackingCategoriesItem `json:"tracking_categories,omitempty"`
	// The company the line item belongs to.
	Company *string `json:"company,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted *bool      `json:"remote_was_deleted,omitempty"`
	Id               *string    `json:"id,omitempty"`
	CreatedAt        *time.Time `json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt    *time.Time     `json:"modified_at,omitempty"`
	FieldMappings map[string]any `json:"field_mappings,omitempty"`
}

type InvoiceLineItemAccount struct {
	typeName string
	String   string
	Account  *Account
}

func NewInvoiceLineItemAccountFromString(value string) *InvoiceLineItemAccount {
	return &InvoiceLineItemAccount{typeName: "string", String: value}
}

func NewInvoiceLineItemAccountFromAccount(value *Account) *InvoiceLineItemAccount {
	return &InvoiceLineItemAccount{typeName: "account", Account: value}
}

func (i *InvoiceLineItemAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typeName = "string"
		i.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		i.typeName = "account"
		i.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i InvoiceLineItemAccount) MarshalJSON() ([]byte, error) {
	switch i.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return json.Marshal(i.String)
	case "account":
		return json.Marshal(i.Account)
	}
}

type InvoiceLineItemAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (i *InvoiceLineItemAccount) Accept(visitor InvoiceLineItemAccountVisitor) error {
	switch i.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return visitor.VisitString(i.String)
	case "account":
		return visitor.VisitAccount(i.Account)
	}
}

// The line item's currency.
//
// * `XUA` - ADB Unit of Account
// * `AFN` - Afghan Afghani
// * `AFA` - Afghan Afghani (1927–2002)
// * `ALL` - Albanian Lek
// * `ALK` - Albanian Lek (1946–1965)
// * `DZD` - Algerian Dinar
// * `ADP` - Andorran Peseta
// * `AOA` - Angolan Kwanza
// * `AOK` - Angolan Kwanza (1977–1991)
// * `AON` - Angolan New Kwanza (1990–2000)
// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
// * `ARA` - Argentine Austral
// * `ARS` - Argentine Peso
// * `ARM` - Argentine Peso (1881–1970)
// * `ARP` - Argentine Peso (1983–1985)
// * `ARL` - Argentine Peso Ley (1970–1983)
// * `AMD` - Armenian Dram
// * `AWG` - Aruban Florin
// * `AUD` - Australian Dollar
// * `ATS` - Austrian Schilling
// * `AZN` - Azerbaijani Manat
// * `AZM` - Azerbaijani Manat (1993–2006)
// * `BSD` - Bahamian Dollar
// * `BHD` - Bahraini Dinar
// * `BDT` - Bangladeshi Taka
// * `BBD` - Barbadian Dollar
// * `BYN` - Belarusian Ruble
// * `BYB` - Belarusian Ruble (1994–1999)
// * `BYR` - Belarusian Ruble (2000–2016)
// * `BEF` - Belgian Franc
// * `BEC` - Belgian Franc (convertible)
// * `BEL` - Belgian Franc (financial)
// * `BZD` - Belize Dollar
// * `BMD` - Bermudan Dollar
// * `BTN` - Bhutanese Ngultrum
// * `BOB` - Bolivian Boliviano
// * `BOL` - Bolivian Boliviano (1863–1963)
// * `BOV` - Bolivian Mvdol
// * `BOP` - Bolivian Peso
// * `BAM` - Bosnia-Herzegovina Convertible Mark
// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
// * `BWP` - Botswanan Pula
// * `BRC` - Brazilian Cruzado (1986–1989)
// * `BRZ` - Brazilian Cruzeiro (1942–1967)
// * `BRE` - Brazilian Cruzeiro (1990–1993)
// * `BRR` - Brazilian Cruzeiro (1993–1994)
// * `BRN` - Brazilian New Cruzado (1989–1990)
// * `BRB` - Brazilian New Cruzeiro (1967–1986)
// * `BRL` - Brazilian Real
// * `GBP` - British Pound
// * `BND` - Brunei Dollar
// * `BGL` - Bulgarian Hard Lev
// * `BGN` - Bulgarian Lev
// * `BGO` - Bulgarian Lev (1879–1952)
// * `BGM` - Bulgarian Socialist Lev
// * `BUK` - Burmese Kyat
// * `BIF` - Burundian Franc
// * `XPF` - CFP Franc
// * `KHR` - Cambodian Riel
// * `CAD` - Canadian Dollar
// * `CVE` - Cape Verdean Escudo
// * `KYD` - Cayman Islands Dollar
// * `XAF` - Central African CFA Franc
// * `CLE` - Chilean Escudo
// * `CLP` - Chilean Peso
// * `CLF` - Chilean Unit of Account (UF)
// * `CNX` - Chinese People’s Bank Dollar
// * `CNY` - Chinese Yuan
// * `CNH` - Chinese Yuan (offshore)
// * `COP` - Colombian Peso
// * `COU` - Colombian Real Value Unit
// * `KMF` - Comorian Franc
// * `CDF` - Congolese Franc
// * `CRC` - Costa Rican Colón
// * `HRD` - Croatian Dinar
// * `HRK` - Croatian Kuna
// * `CUC` - Cuban Convertible Peso
// * `CUP` - Cuban Peso
// * `CYP` - Cypriot Pound
// * `CZK` - Czech Koruna
// * `CSK` - Czechoslovak Hard Koruna
// * `DKK` - Danish Krone
// * `DJF` - Djiboutian Franc
// * `DOP` - Dominican Peso
// * `NLG` - Dutch Guilder
// * `XCD` - East Caribbean Dollar
// * `DDM` - East German Mark
// * `ECS` - Ecuadorian Sucre
// * `ECV` - Ecuadorian Unit of Constant Value
// * `EGP` - Egyptian Pound
// * `GQE` - Equatorial Guinean Ekwele
// * `ERN` - Eritrean Nakfa
// * `EEK` - Estonian Kroon
// * `ETB` - Ethiopian Birr
// * `EUR` - Euro
// * `XBA` - European Composite Unit
// * `XEU` - European Currency Unit
// * `XBB` - European Monetary Unit
// * `XBC` - European Unit of Account (XBC)
// * `XBD` - European Unit of Account (XBD)
// * `FKP` - Falkland Islands Pound
// * `FJD` - Fijian Dollar
// * `FIM` - Finnish Markka
// * `FRF` - French Franc
// * `XFO` - French Gold Franc
// * `XFU` - French UIC-Franc
// * `GMD` - Gambian Dalasi
// * `GEK` - Georgian Kupon Larit
// * `GEL` - Georgian Lari
// * `DEM` - German Mark
// * `GHS` - Ghanaian Cedi
// * `GHC` - Ghanaian Cedi (1979–2007)
// * `GIP` - Gibraltar Pound
// * `XAU` - Gold
// * `GRD` - Greek Drachma
// * `GTQ` - Guatemalan Quetzal
// * `GWP` - Guinea-Bissau Peso
// * `GNF` - Guinean Franc
// * `GNS` - Guinean Syli
// * `GYD` - Guyanaese Dollar
// * `HTG` - Haitian Gourde
// * `HNL` - Honduran Lempira
// * `HKD` - Hong Kong Dollar
// * `HUF` - Hungarian Forint
// * `IMP` - IMP
// * `ISK` - Icelandic Króna
// * `ISJ` - Icelandic Króna (1918–1981)
// * `INR` - Indian Rupee
// * `IDR` - Indonesian Rupiah
// * `IRR` - Iranian Rial
// * `IQD` - Iraqi Dinar
// * `IEP` - Irish Pound
// * `ILS` - Israeli New Shekel
// * `ILP` - Israeli Pound
// * `ILR` - Israeli Shekel (1980–1985)
// * `ITL` - Italian Lira
// * `JMD` - Jamaican Dollar
// * `JPY` - Japanese Yen
// * `JOD` - Jordanian Dinar
// * `KZT` - Kazakhstani Tenge
// * `KES` - Kenyan Shilling
// * `KWD` - Kuwaiti Dinar
// * `KGS` - Kyrgystani Som
// * `LAK` - Laotian Kip
// * `LVL` - Latvian Lats
// * `LVR` - Latvian Ruble
// * `LBP` - Lebanese Pound
// * `LSL` - Lesotho Loti
// * `LRD` - Liberian Dollar
// * `LYD` - Libyan Dinar
// * `LTL` - Lithuanian Litas
// * `LTT` - Lithuanian Talonas
// * `LUL` - Luxembourg Financial Franc
// * `LUC` - Luxembourgian Convertible Franc
// * `LUF` - Luxembourgian Franc
// * `MOP` - Macanese Pataca
// * `MKD` - Macedonian Denar
// * `MKN` - Macedonian Denar (1992–1993)
// * `MGA` - Malagasy Ariary
// * `MGF` - Malagasy Franc
// * `MWK` - Malawian Kwacha
// * `MYR` - Malaysian Ringgit
// * `MVR` - Maldivian Rufiyaa
// * `MVP` - Maldivian Rupee (1947–1981)
// * `MLF` - Malian Franc
// * `MTL` - Maltese Lira
// * `MTP` - Maltese Pound
// * `MRU` - Mauritanian Ouguiya
// * `MRO` - Mauritanian Ouguiya (1973–2017)
// * `MUR` - Mauritian Rupee
// * `MXV` - Mexican Investment Unit
// * `MXN` - Mexican Peso
// * `MXP` - Mexican Silver Peso (1861–1992)
// * `MDC` - Moldovan Cupon
// * `MDL` - Moldovan Leu
// * `MCF` - Monegasque Franc
// * `MNT` - Mongolian Tugrik
// * `MAD` - Moroccan Dirham
// * `MAF` - Moroccan Franc
// * `MZE` - Mozambican Escudo
// * `MZN` - Mozambican Metical
// * `MZM` - Mozambican Metical (1980–2006)
// * `MMK` - Myanmar Kyat
// * `NAD` - Namibian Dollar
// * `NPR` - Nepalese Rupee
// * `ANG` - Netherlands Antillean Guilder
// * `TWD` - New Taiwan Dollar
// * `NZD` - New Zealand Dollar
// * `NIO` - Nicaraguan Córdoba
// * `NIC` - Nicaraguan Córdoba (1988–1991)
// * `NGN` - Nigerian Naira
// * `KPW` - North Korean Won
// * `NOK` - Norwegian Krone
// * `OMR` - Omani Rial
// * `PKR` - Pakistani Rupee
// * `XPD` - Palladium
// * `PAB` - Panamanian Balboa
// * `PGK` - Papua New Guinean Kina
// * `PYG` - Paraguayan Guarani
// * `PEI` - Peruvian Inti
// * `PEN` - Peruvian Sol
// * `PES` - Peruvian Sol (1863–1965)
// * `PHP` - Philippine Peso
// * `XPT` - Platinum
// * `PLN` - Polish Zloty
// * `PLZ` - Polish Zloty (1950–1995)
// * `PTE` - Portuguese Escudo
// * `GWE` - Portuguese Guinea Escudo
// * `QAR` - Qatari Rial
// * `XRE` - RINET Funds
// * `RHD` - Rhodesian Dollar
// * `RON` - Romanian Leu
// * `ROL` - Romanian Leu (1952–2006)
// * `RUB` - Russian Ruble
// * `RUR` - Russian Ruble (1991–1998)
// * `RWF` - Rwandan Franc
// * `SVC` - Salvadoran Colón
// * `WST` - Samoan Tala
// * `SAR` - Saudi Riyal
// * `RSD` - Serbian Dinar
// * `CSD` - Serbian Dinar (2002–2006)
// * `SCR` - Seychellois Rupee
// * `SLL` - Sierra Leonean Leone
// * `XAG` - Silver
// * `SGD` - Singapore Dollar
// * `SKK` - Slovak Koruna
// * `SIT` - Slovenian Tolar
// * `SBD` - Solomon Islands Dollar
// * `SOS` - Somali Shilling
// * `ZAR` - South African Rand
// * `ZAL` - South African Rand (financial)
// * `KRH` - South Korean Hwan (1953–1962)
// * `KRW` - South Korean Won
// * `KRO` - South Korean Won (1945–1953)
// * `SSP` - South Sudanese Pound
// * `SUR` - Soviet Rouble
// * `ESP` - Spanish Peseta
// * `ESA` - Spanish Peseta (A account)
// * `ESB` - Spanish Peseta (convertible account)
// * `XDR` - Special Drawing Rights
// * `LKR` - Sri Lankan Rupee
// * `SHP` - St. Helena Pound
// * `XSU` - Sucre
// * `SDD` - Sudanese Dinar (1992–2007)
// * `SDG` - Sudanese Pound
// * `SDP` - Sudanese Pound (1957–1998)
// * `SRD` - Surinamese Dollar
// * `SRG` - Surinamese Guilder
// * `SZL` - Swazi Lilangeni
// * `SEK` - Swedish Krona
// * `CHF` - Swiss Franc
// * `SYP` - Syrian Pound
// * `STN` - São Tomé & Príncipe Dobra
// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
// * `TVD` - TVD
// * `TJR` - Tajikistani Ruble
// * `TJS` - Tajikistani Somoni
// * `TZS` - Tanzanian Shilling
// * `XTS` - Testing Currency Code
// * `THB` - Thai Baht
// * `XXX` - The codes assigned for transactions where no currency is involved
// * `TPE` - Timorese Escudo
// * `TOP` - Tongan Paʻanga
// * `TTD` - Trinidad & Tobago Dollar
// * `TND` - Tunisian Dinar
// * `TRY` - Turkish Lira
// * `TRL` - Turkish Lira (1922–2005)
// * `TMT` - Turkmenistani Manat
// * `TMM` - Turkmenistani Manat (1993–2009)
// * `USD` - US Dollar
// * `USN` - US Dollar (Next day)
// * `USS` - US Dollar (Same day)
// * `UGX` - Ugandan Shilling
// * `UGS` - Ugandan Shilling (1966–1987)
// * `UAH` - Ukrainian Hryvnia
// * `UAK` - Ukrainian Karbovanets
// * `AED` - United Arab Emirates Dirham
// * `UYW` - Uruguayan Nominal Wage Index Unit
// * `UYU` - Uruguayan Peso
// * `UYP` - Uruguayan Peso (1975–1993)
// * `UYI` - Uruguayan Peso (Indexed Units)
// * `UZS` - Uzbekistani Som
// * `VUV` - Vanuatu Vatu
// * `VES` - Venezuelan Bolívar
// * `VEB` - Venezuelan Bolívar (1871–2008)
// * `VEF` - Venezuelan Bolívar (2008–2018)
// * `VND` - Vietnamese Dong
// * `VNN` - Vietnamese Dong (1978–1985)
// * `CHE` - WIR Euro
// * `CHW` - WIR Franc
// * `XOF` - West African CFA Franc
// * `YDD` - Yemeni Dinar
// * `YER` - Yemeni Rial
// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
// * `YUM` - Yugoslavian New Dinar (1994–2002)
// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
// * `ZWN` - ZWN
// * `ZRN` - Zairean New Zaire (1993–1998)
// * `ZRZ` - Zairean Zaire (1971–1993)
// * `ZMW` - Zambian Kwacha
// * `ZMK` - Zambian Kwacha (1968–2012)
// * `ZWD` - Zimbabwean Dollar (1980–2008)
// * `ZWR` - Zimbabwean Dollar (2008)
// * `ZWL` - Zimbabwean Dollar (2009)
type InvoiceLineItemCurrency struct {
	typeName     string
	CurrencyEnum CurrencyEnum
	String       string
}

func NewInvoiceLineItemCurrencyFromCurrencyEnum(value CurrencyEnum) *InvoiceLineItemCurrency {
	return &InvoiceLineItemCurrency{typeName: "currencyEnum", CurrencyEnum: value}
}

func NewInvoiceLineItemCurrencyFromString(value string) *InvoiceLineItemCurrency {
	return &InvoiceLineItemCurrency{typeName: "string", String: value}
}

func (i *InvoiceLineItemCurrency) UnmarshalJSON(data []byte) error {
	var valueCurrencyEnum CurrencyEnum
	if err := json.Unmarshal(data, &valueCurrencyEnum); err == nil {
		i.typeName = "currencyEnum"
		i.CurrencyEnum = valueCurrencyEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typeName = "string"
		i.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i InvoiceLineItemCurrency) MarshalJSON() ([]byte, error) {
	switch i.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "currencyEnum":
		return json.Marshal(i.CurrencyEnum)
	case "string":
		return json.Marshal(i.String)
	}
}

type InvoiceLineItemCurrencyVisitor interface {
	VisitCurrencyEnum(CurrencyEnum) error
	VisitString(string) error
}

func (i *InvoiceLineItemCurrency) Accept(visitor InvoiceLineItemCurrencyVisitor) error {
	switch i.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "currencyEnum":
		return visitor.VisitCurrencyEnum(i.CurrencyEnum)
	case "string":
		return visitor.VisitString(i.String)
	}
}

type InvoiceLineItemItem struct {
	typeName string
	String   string
	Item     *Item
}

func NewInvoiceLineItemItemFromString(value string) *InvoiceLineItemItem {
	return &InvoiceLineItemItem{typeName: "string", String: value}
}

func NewInvoiceLineItemItemFromItem(value *Item) *InvoiceLineItemItem {
	return &InvoiceLineItemItem{typeName: "item", Item: value}
}

func (i *InvoiceLineItemItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typeName = "string"
		i.String = valueString
		return nil
	}
	valueItem := new(Item)
	if err := json.Unmarshal(data, &valueItem); err == nil {
		i.typeName = "item"
		i.Item = valueItem
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i InvoiceLineItemItem) MarshalJSON() ([]byte, error) {
	switch i.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return json.Marshal(i.String)
	case "item":
		return json.Marshal(i.Item)
	}
}

type InvoiceLineItemItemVisitor interface {
	VisitString(string) error
	VisitItem(*Item) error
}

func (i *InvoiceLineItemItem) Accept(visitor InvoiceLineItemItemVisitor) error {
	switch i.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return visitor.VisitString(i.String)
	case "item":
		return visitor.VisitItem(i.Item)
	}
}

// # The InvoiceLineItem Object
// ### Description
// The `InvoiceLineItem` object represents an itemized record of goods and/or services sold to a customer.
//
// ### Usage Example
// Fetch from the `GET Invoice` endpoint and view the invoice's line items.
type InvoiceLineItemRequest struct {
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The line item's description.
	Description *string `json:"description,omitempty"`
	// The line item's unit price.
	UnitPrice *float64 `json:"unit_price,omitempty"`
	// The line item's quantity.
	Quantity *float64 `json:"quantity,omitempty"`
	// The line item's total amount.
	TotalAmount *float64 `json:"total_amount,omitempty"`
	// The line item's currency.
	//
	// * `XUA` - ADB Unit of Account
	// * `AFN` - Afghan Afghani
	// * `AFA` - Afghan Afghani (1927–2002)
	// * `ALL` - Albanian Lek
	// * `ALK` - Albanian Lek (1946–1965)
	// * `DZD` - Algerian Dinar
	// * `ADP` - Andorran Peseta
	// * `AOA` - Angolan Kwanza
	// * `AOK` - Angolan Kwanza (1977–1991)
	// * `AON` - Angolan New Kwanza (1990–2000)
	// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
	// * `ARA` - Argentine Austral
	// * `ARS` - Argentine Peso
	// * `ARM` - Argentine Peso (1881–1970)
	// * `ARP` - Argentine Peso (1983–1985)
	// * `ARL` - Argentine Peso Ley (1970–1983)
	// * `AMD` - Armenian Dram
	// * `AWG` - Aruban Florin
	// * `AUD` - Australian Dollar
	// * `ATS` - Austrian Schilling
	// * `AZN` - Azerbaijani Manat
	// * `AZM` - Azerbaijani Manat (1993–2006)
	// * `BSD` - Bahamian Dollar
	// * `BHD` - Bahraini Dinar
	// * `BDT` - Bangladeshi Taka
	// * `BBD` - Barbadian Dollar
	// * `BYN` - Belarusian Ruble
	// * `BYB` - Belarusian Ruble (1994–1999)
	// * `BYR` - Belarusian Ruble (2000–2016)
	// * `BEF` - Belgian Franc
	// * `BEC` - Belgian Franc (convertible)
	// * `BEL` - Belgian Franc (financial)
	// * `BZD` - Belize Dollar
	// * `BMD` - Bermudan Dollar
	// * `BTN` - Bhutanese Ngultrum
	// * `BOB` - Bolivian Boliviano
	// * `BOL` - Bolivian Boliviano (1863–1963)
	// * `BOV` - Bolivian Mvdol
	// * `BOP` - Bolivian Peso
	// * `BAM` - Bosnia-Herzegovina Convertible Mark
	// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
	// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
	// * `BWP` - Botswanan Pula
	// * `BRC` - Brazilian Cruzado (1986–1989)
	// * `BRZ` - Brazilian Cruzeiro (1942–1967)
	// * `BRE` - Brazilian Cruzeiro (1990–1993)
	// * `BRR` - Brazilian Cruzeiro (1993–1994)
	// * `BRN` - Brazilian New Cruzado (1989–1990)
	// * `BRB` - Brazilian New Cruzeiro (1967–1986)
	// * `BRL` - Brazilian Real
	// * `GBP` - British Pound
	// * `BND` - Brunei Dollar
	// * `BGL` - Bulgarian Hard Lev
	// * `BGN` - Bulgarian Lev
	// * `BGO` - Bulgarian Lev (1879–1952)
	// * `BGM` - Bulgarian Socialist Lev
	// * `BUK` - Burmese Kyat
	// * `BIF` - Burundian Franc
	// * `XPF` - CFP Franc
	// * `KHR` - Cambodian Riel
	// * `CAD` - Canadian Dollar
	// * `CVE` - Cape Verdean Escudo
	// * `KYD` - Cayman Islands Dollar
	// * `XAF` - Central African CFA Franc
	// * `CLE` - Chilean Escudo
	// * `CLP` - Chilean Peso
	// * `CLF` - Chilean Unit of Account (UF)
	// * `CNX` - Chinese People’s Bank Dollar
	// * `CNY` - Chinese Yuan
	// * `CNH` - Chinese Yuan (offshore)
	// * `COP` - Colombian Peso
	// * `COU` - Colombian Real Value Unit
	// * `KMF` - Comorian Franc
	// * `CDF` - Congolese Franc
	// * `CRC` - Costa Rican Colón
	// * `HRD` - Croatian Dinar
	// * `HRK` - Croatian Kuna
	// * `CUC` - Cuban Convertible Peso
	// * `CUP` - Cuban Peso
	// * `CYP` - Cypriot Pound
	// * `CZK` - Czech Koruna
	// * `CSK` - Czechoslovak Hard Koruna
	// * `DKK` - Danish Krone
	// * `DJF` - Djiboutian Franc
	// * `DOP` - Dominican Peso
	// * `NLG` - Dutch Guilder
	// * `XCD` - East Caribbean Dollar
	// * `DDM` - East German Mark
	// * `ECS` - Ecuadorian Sucre
	// * `ECV` - Ecuadorian Unit of Constant Value
	// * `EGP` - Egyptian Pound
	// * `GQE` - Equatorial Guinean Ekwele
	// * `ERN` - Eritrean Nakfa
	// * `EEK` - Estonian Kroon
	// * `ETB` - Ethiopian Birr
	// * `EUR` - Euro
	// * `XBA` - European Composite Unit
	// * `XEU` - European Currency Unit
	// * `XBB` - European Monetary Unit
	// * `XBC` - European Unit of Account (XBC)
	// * `XBD` - European Unit of Account (XBD)
	// * `FKP` - Falkland Islands Pound
	// * `FJD` - Fijian Dollar
	// * `FIM` - Finnish Markka
	// * `FRF` - French Franc
	// * `XFO` - French Gold Franc
	// * `XFU` - French UIC-Franc
	// * `GMD` - Gambian Dalasi
	// * `GEK` - Georgian Kupon Larit
	// * `GEL` - Georgian Lari
	// * `DEM` - German Mark
	// * `GHS` - Ghanaian Cedi
	// * `GHC` - Ghanaian Cedi (1979–2007)
	// * `GIP` - Gibraltar Pound
	// * `XAU` - Gold
	// * `GRD` - Greek Drachma
	// * `GTQ` - Guatemalan Quetzal
	// * `GWP` - Guinea-Bissau Peso
	// * `GNF` - Guinean Franc
	// * `GNS` - Guinean Syli
	// * `GYD` - Guyanaese Dollar
	// * `HTG` - Haitian Gourde
	// * `HNL` - Honduran Lempira
	// * `HKD` - Hong Kong Dollar
	// * `HUF` - Hungarian Forint
	// * `IMP` - IMP
	// * `ISK` - Icelandic Króna
	// * `ISJ` - Icelandic Króna (1918–1981)
	// * `INR` - Indian Rupee
	// * `IDR` - Indonesian Rupiah
	// * `IRR` - Iranian Rial
	// * `IQD` - Iraqi Dinar
	// * `IEP` - Irish Pound
	// * `ILS` - Israeli New Shekel
	// * `ILP` - Israeli Pound
	// * `ILR` - Israeli Shekel (1980–1985)
	// * `ITL` - Italian Lira
	// * `JMD` - Jamaican Dollar
	// * `JPY` - Japanese Yen
	// * `JOD` - Jordanian Dinar
	// * `KZT` - Kazakhstani Tenge
	// * `KES` - Kenyan Shilling
	// * `KWD` - Kuwaiti Dinar
	// * `KGS` - Kyrgystani Som
	// * `LAK` - Laotian Kip
	// * `LVL` - Latvian Lats
	// * `LVR` - Latvian Ruble
	// * `LBP` - Lebanese Pound
	// * `LSL` - Lesotho Loti
	// * `LRD` - Liberian Dollar
	// * `LYD` - Libyan Dinar
	// * `LTL` - Lithuanian Litas
	// * `LTT` - Lithuanian Talonas
	// * `LUL` - Luxembourg Financial Franc
	// * `LUC` - Luxembourgian Convertible Franc
	// * `LUF` - Luxembourgian Franc
	// * `MOP` - Macanese Pataca
	// * `MKD` - Macedonian Denar
	// * `MKN` - Macedonian Denar (1992–1993)
	// * `MGA` - Malagasy Ariary
	// * `MGF` - Malagasy Franc
	// * `MWK` - Malawian Kwacha
	// * `MYR` - Malaysian Ringgit
	// * `MVR` - Maldivian Rufiyaa
	// * `MVP` - Maldivian Rupee (1947–1981)
	// * `MLF` - Malian Franc
	// * `MTL` - Maltese Lira
	// * `MTP` - Maltese Pound
	// * `MRU` - Mauritanian Ouguiya
	// * `MRO` - Mauritanian Ouguiya (1973–2017)
	// * `MUR` - Mauritian Rupee
	// * `MXV` - Mexican Investment Unit
	// * `MXN` - Mexican Peso
	// * `MXP` - Mexican Silver Peso (1861–1992)
	// * `MDC` - Moldovan Cupon
	// * `MDL` - Moldovan Leu
	// * `MCF` - Monegasque Franc
	// * `MNT` - Mongolian Tugrik
	// * `MAD` - Moroccan Dirham
	// * `MAF` - Moroccan Franc
	// * `MZE` - Mozambican Escudo
	// * `MZN` - Mozambican Metical
	// * `MZM` - Mozambican Metical (1980–2006)
	// * `MMK` - Myanmar Kyat
	// * `NAD` - Namibian Dollar
	// * `NPR` - Nepalese Rupee
	// * `ANG` - Netherlands Antillean Guilder
	// * `TWD` - New Taiwan Dollar
	// * `NZD` - New Zealand Dollar
	// * `NIO` - Nicaraguan Córdoba
	// * `NIC` - Nicaraguan Córdoba (1988–1991)
	// * `NGN` - Nigerian Naira
	// * `KPW` - North Korean Won
	// * `NOK` - Norwegian Krone
	// * `OMR` - Omani Rial
	// * `PKR` - Pakistani Rupee
	// * `XPD` - Palladium
	// * `PAB` - Panamanian Balboa
	// * `PGK` - Papua New Guinean Kina
	// * `PYG` - Paraguayan Guarani
	// * `PEI` - Peruvian Inti
	// * `PEN` - Peruvian Sol
	// * `PES` - Peruvian Sol (1863–1965)
	// * `PHP` - Philippine Peso
	// * `XPT` - Platinum
	// * `PLN` - Polish Zloty
	// * `PLZ` - Polish Zloty (1950–1995)
	// * `PTE` - Portuguese Escudo
	// * `GWE` - Portuguese Guinea Escudo
	// * `QAR` - Qatari Rial
	// * `XRE` - RINET Funds
	// * `RHD` - Rhodesian Dollar
	// * `RON` - Romanian Leu
	// * `ROL` - Romanian Leu (1952–2006)
	// * `RUB` - Russian Ruble
	// * `RUR` - Russian Ruble (1991–1998)
	// * `RWF` - Rwandan Franc
	// * `SVC` - Salvadoran Colón
	// * `WST` - Samoan Tala
	// * `SAR` - Saudi Riyal
	// * `RSD` - Serbian Dinar
	// * `CSD` - Serbian Dinar (2002–2006)
	// * `SCR` - Seychellois Rupee
	// * `SLL` - Sierra Leonean Leone
	// * `XAG` - Silver
	// * `SGD` - Singapore Dollar
	// * `SKK` - Slovak Koruna
	// * `SIT` - Slovenian Tolar
	// * `SBD` - Solomon Islands Dollar
	// * `SOS` - Somali Shilling
	// * `ZAR` - South African Rand
	// * `ZAL` - South African Rand (financial)
	// * `KRH` - South Korean Hwan (1953–1962)
	// * `KRW` - South Korean Won
	// * `KRO` - South Korean Won (1945–1953)
	// * `SSP` - South Sudanese Pound
	// * `SUR` - Soviet Rouble
	// * `ESP` - Spanish Peseta
	// * `ESA` - Spanish Peseta (A account)
	// * `ESB` - Spanish Peseta (convertible account)
	// * `XDR` - Special Drawing Rights
	// * `LKR` - Sri Lankan Rupee
	// * `SHP` - St. Helena Pound
	// * `XSU` - Sucre
	// * `SDD` - Sudanese Dinar (1992–2007)
	// * `SDG` - Sudanese Pound
	// * `SDP` - Sudanese Pound (1957–1998)
	// * `SRD` - Surinamese Dollar
	// * `SRG` - Surinamese Guilder
	// * `SZL` - Swazi Lilangeni
	// * `SEK` - Swedish Krona
	// * `CHF` - Swiss Franc
	// * `SYP` - Syrian Pound
	// * `STN` - São Tomé & Príncipe Dobra
	// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
	// * `TVD` - TVD
	// * `TJR` - Tajikistani Ruble
	// * `TJS` - Tajikistani Somoni
	// * `TZS` - Tanzanian Shilling
	// * `XTS` - Testing Currency Code
	// * `THB` - Thai Baht
	// * `XXX` - The codes assigned for transactions where no currency is involved
	// * `TPE` - Timorese Escudo
	// * `TOP` - Tongan Paʻanga
	// * `TTD` - Trinidad & Tobago Dollar
	// * `TND` - Tunisian Dinar
	// * `TRY` - Turkish Lira
	// * `TRL` - Turkish Lira (1922–2005)
	// * `TMT` - Turkmenistani Manat
	// * `TMM` - Turkmenistani Manat (1993–2009)
	// * `USD` - US Dollar
	// * `USN` - US Dollar (Next day)
	// * `USS` - US Dollar (Same day)
	// * `UGX` - Ugandan Shilling
	// * `UGS` - Ugandan Shilling (1966–1987)
	// * `UAH` - Ukrainian Hryvnia
	// * `UAK` - Ukrainian Karbovanets
	// * `AED` - United Arab Emirates Dirham
	// * `UYW` - Uruguayan Nominal Wage Index Unit
	// * `UYU` - Uruguayan Peso
	// * `UYP` - Uruguayan Peso (1975–1993)
	// * `UYI` - Uruguayan Peso (Indexed Units)
	// * `UZS` - Uzbekistani Som
	// * `VUV` - Vanuatu Vatu
	// * `VES` - Venezuelan Bolívar
	// * `VEB` - Venezuelan Bolívar (1871–2008)
	// * `VEF` - Venezuelan Bolívar (2008–2018)
	// * `VND` - Vietnamese Dong
	// * `VNN` - Vietnamese Dong (1978–1985)
	// * `CHE` - WIR Euro
	// * `CHW` - WIR Franc
	// * `XOF` - West African CFA Franc
	// * `YDD` - Yemeni Dinar
	// * `YER` - Yemeni Rial
	// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
	// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
	// * `YUM` - Yugoslavian New Dinar (1994–2002)
	// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
	// * `ZWN` - ZWN
	// * `ZRN` - Zairean New Zaire (1993–1998)
	// * `ZRZ` - Zairean Zaire (1971–1993)
	// * `ZMW` - Zambian Kwacha
	// * `ZMK` - Zambian Kwacha (1968–2012)
	// * `ZWD` - Zimbabwean Dollar (1980–2008)
	// * `ZWR` - Zimbabwean Dollar (2008)
	// * `ZWL` - Zimbabwean Dollar (2009)
	Currency *InvoiceLineItemRequestCurrency `json:"currency,omitempty"`
	// The line item's exchange rate.
	ExchangeRate       *string                                         `json:"exchange_rate,omitempty"`
	Item               *InvoiceLineItemRequestItem                     `json:"item,omitempty"`
	Account            *InvoiceLineItemRequestAccount                  `json:"account,omitempty"`
	TrackingCategory   *InvoiceLineItemRequestTrackingCategory         `json:"tracking_category,omitempty"`
	TrackingCategories []*InvoiceLineItemRequestTrackingCategoriesItem `json:"tracking_categories,omitempty"`
	// The company the line item belongs to.
	Company             *string        `json:"company,omitempty"`
	IntegrationParams   map[string]any `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]any `json:"linked_account_params,omitempty"`
}

type InvoiceLineItemRequestAccount struct {
	typeName string
	String   string
	Account  *Account
}

func NewInvoiceLineItemRequestAccountFromString(value string) *InvoiceLineItemRequestAccount {
	return &InvoiceLineItemRequestAccount{typeName: "string", String: value}
}

func NewInvoiceLineItemRequestAccountFromAccount(value *Account) *InvoiceLineItemRequestAccount {
	return &InvoiceLineItemRequestAccount{typeName: "account", Account: value}
}

func (i *InvoiceLineItemRequestAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typeName = "string"
		i.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		i.typeName = "account"
		i.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i InvoiceLineItemRequestAccount) MarshalJSON() ([]byte, error) {
	switch i.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return json.Marshal(i.String)
	case "account":
		return json.Marshal(i.Account)
	}
}

type InvoiceLineItemRequestAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (i *InvoiceLineItemRequestAccount) Accept(visitor InvoiceLineItemRequestAccountVisitor) error {
	switch i.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return visitor.VisitString(i.String)
	case "account":
		return visitor.VisitAccount(i.Account)
	}
}

// The line item's currency.
//
// * `XUA` - ADB Unit of Account
// * `AFN` - Afghan Afghani
// * `AFA` - Afghan Afghani (1927–2002)
// * `ALL` - Albanian Lek
// * `ALK` - Albanian Lek (1946–1965)
// * `DZD` - Algerian Dinar
// * `ADP` - Andorran Peseta
// * `AOA` - Angolan Kwanza
// * `AOK` - Angolan Kwanza (1977–1991)
// * `AON` - Angolan New Kwanza (1990–2000)
// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
// * `ARA` - Argentine Austral
// * `ARS` - Argentine Peso
// * `ARM` - Argentine Peso (1881–1970)
// * `ARP` - Argentine Peso (1983–1985)
// * `ARL` - Argentine Peso Ley (1970–1983)
// * `AMD` - Armenian Dram
// * `AWG` - Aruban Florin
// * `AUD` - Australian Dollar
// * `ATS` - Austrian Schilling
// * `AZN` - Azerbaijani Manat
// * `AZM` - Azerbaijani Manat (1993–2006)
// * `BSD` - Bahamian Dollar
// * `BHD` - Bahraini Dinar
// * `BDT` - Bangladeshi Taka
// * `BBD` - Barbadian Dollar
// * `BYN` - Belarusian Ruble
// * `BYB` - Belarusian Ruble (1994–1999)
// * `BYR` - Belarusian Ruble (2000–2016)
// * `BEF` - Belgian Franc
// * `BEC` - Belgian Franc (convertible)
// * `BEL` - Belgian Franc (financial)
// * `BZD` - Belize Dollar
// * `BMD` - Bermudan Dollar
// * `BTN` - Bhutanese Ngultrum
// * `BOB` - Bolivian Boliviano
// * `BOL` - Bolivian Boliviano (1863–1963)
// * `BOV` - Bolivian Mvdol
// * `BOP` - Bolivian Peso
// * `BAM` - Bosnia-Herzegovina Convertible Mark
// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
// * `BWP` - Botswanan Pula
// * `BRC` - Brazilian Cruzado (1986–1989)
// * `BRZ` - Brazilian Cruzeiro (1942–1967)
// * `BRE` - Brazilian Cruzeiro (1990–1993)
// * `BRR` - Brazilian Cruzeiro (1993–1994)
// * `BRN` - Brazilian New Cruzado (1989–1990)
// * `BRB` - Brazilian New Cruzeiro (1967–1986)
// * `BRL` - Brazilian Real
// * `GBP` - British Pound
// * `BND` - Brunei Dollar
// * `BGL` - Bulgarian Hard Lev
// * `BGN` - Bulgarian Lev
// * `BGO` - Bulgarian Lev (1879–1952)
// * `BGM` - Bulgarian Socialist Lev
// * `BUK` - Burmese Kyat
// * `BIF` - Burundian Franc
// * `XPF` - CFP Franc
// * `KHR` - Cambodian Riel
// * `CAD` - Canadian Dollar
// * `CVE` - Cape Verdean Escudo
// * `KYD` - Cayman Islands Dollar
// * `XAF` - Central African CFA Franc
// * `CLE` - Chilean Escudo
// * `CLP` - Chilean Peso
// * `CLF` - Chilean Unit of Account (UF)
// * `CNX` - Chinese People’s Bank Dollar
// * `CNY` - Chinese Yuan
// * `CNH` - Chinese Yuan (offshore)
// * `COP` - Colombian Peso
// * `COU` - Colombian Real Value Unit
// * `KMF` - Comorian Franc
// * `CDF` - Congolese Franc
// * `CRC` - Costa Rican Colón
// * `HRD` - Croatian Dinar
// * `HRK` - Croatian Kuna
// * `CUC` - Cuban Convertible Peso
// * `CUP` - Cuban Peso
// * `CYP` - Cypriot Pound
// * `CZK` - Czech Koruna
// * `CSK` - Czechoslovak Hard Koruna
// * `DKK` - Danish Krone
// * `DJF` - Djiboutian Franc
// * `DOP` - Dominican Peso
// * `NLG` - Dutch Guilder
// * `XCD` - East Caribbean Dollar
// * `DDM` - East German Mark
// * `ECS` - Ecuadorian Sucre
// * `ECV` - Ecuadorian Unit of Constant Value
// * `EGP` - Egyptian Pound
// * `GQE` - Equatorial Guinean Ekwele
// * `ERN` - Eritrean Nakfa
// * `EEK` - Estonian Kroon
// * `ETB` - Ethiopian Birr
// * `EUR` - Euro
// * `XBA` - European Composite Unit
// * `XEU` - European Currency Unit
// * `XBB` - European Monetary Unit
// * `XBC` - European Unit of Account (XBC)
// * `XBD` - European Unit of Account (XBD)
// * `FKP` - Falkland Islands Pound
// * `FJD` - Fijian Dollar
// * `FIM` - Finnish Markka
// * `FRF` - French Franc
// * `XFO` - French Gold Franc
// * `XFU` - French UIC-Franc
// * `GMD` - Gambian Dalasi
// * `GEK` - Georgian Kupon Larit
// * `GEL` - Georgian Lari
// * `DEM` - German Mark
// * `GHS` - Ghanaian Cedi
// * `GHC` - Ghanaian Cedi (1979–2007)
// * `GIP` - Gibraltar Pound
// * `XAU` - Gold
// * `GRD` - Greek Drachma
// * `GTQ` - Guatemalan Quetzal
// * `GWP` - Guinea-Bissau Peso
// * `GNF` - Guinean Franc
// * `GNS` - Guinean Syli
// * `GYD` - Guyanaese Dollar
// * `HTG` - Haitian Gourde
// * `HNL` - Honduran Lempira
// * `HKD` - Hong Kong Dollar
// * `HUF` - Hungarian Forint
// * `IMP` - IMP
// * `ISK` - Icelandic Króna
// * `ISJ` - Icelandic Króna (1918–1981)
// * `INR` - Indian Rupee
// * `IDR` - Indonesian Rupiah
// * `IRR` - Iranian Rial
// * `IQD` - Iraqi Dinar
// * `IEP` - Irish Pound
// * `ILS` - Israeli New Shekel
// * `ILP` - Israeli Pound
// * `ILR` - Israeli Shekel (1980–1985)
// * `ITL` - Italian Lira
// * `JMD` - Jamaican Dollar
// * `JPY` - Japanese Yen
// * `JOD` - Jordanian Dinar
// * `KZT` - Kazakhstani Tenge
// * `KES` - Kenyan Shilling
// * `KWD` - Kuwaiti Dinar
// * `KGS` - Kyrgystani Som
// * `LAK` - Laotian Kip
// * `LVL` - Latvian Lats
// * `LVR` - Latvian Ruble
// * `LBP` - Lebanese Pound
// * `LSL` - Lesotho Loti
// * `LRD` - Liberian Dollar
// * `LYD` - Libyan Dinar
// * `LTL` - Lithuanian Litas
// * `LTT` - Lithuanian Talonas
// * `LUL` - Luxembourg Financial Franc
// * `LUC` - Luxembourgian Convertible Franc
// * `LUF` - Luxembourgian Franc
// * `MOP` - Macanese Pataca
// * `MKD` - Macedonian Denar
// * `MKN` - Macedonian Denar (1992–1993)
// * `MGA` - Malagasy Ariary
// * `MGF` - Malagasy Franc
// * `MWK` - Malawian Kwacha
// * `MYR` - Malaysian Ringgit
// * `MVR` - Maldivian Rufiyaa
// * `MVP` - Maldivian Rupee (1947–1981)
// * `MLF` - Malian Franc
// * `MTL` - Maltese Lira
// * `MTP` - Maltese Pound
// * `MRU` - Mauritanian Ouguiya
// * `MRO` - Mauritanian Ouguiya (1973–2017)
// * `MUR` - Mauritian Rupee
// * `MXV` - Mexican Investment Unit
// * `MXN` - Mexican Peso
// * `MXP` - Mexican Silver Peso (1861–1992)
// * `MDC` - Moldovan Cupon
// * `MDL` - Moldovan Leu
// * `MCF` - Monegasque Franc
// * `MNT` - Mongolian Tugrik
// * `MAD` - Moroccan Dirham
// * `MAF` - Moroccan Franc
// * `MZE` - Mozambican Escudo
// * `MZN` - Mozambican Metical
// * `MZM` - Mozambican Metical (1980–2006)
// * `MMK` - Myanmar Kyat
// * `NAD` - Namibian Dollar
// * `NPR` - Nepalese Rupee
// * `ANG` - Netherlands Antillean Guilder
// * `TWD` - New Taiwan Dollar
// * `NZD` - New Zealand Dollar
// * `NIO` - Nicaraguan Córdoba
// * `NIC` - Nicaraguan Córdoba (1988–1991)
// * `NGN` - Nigerian Naira
// * `KPW` - North Korean Won
// * `NOK` - Norwegian Krone
// * `OMR` - Omani Rial
// * `PKR` - Pakistani Rupee
// * `XPD` - Palladium
// * `PAB` - Panamanian Balboa
// * `PGK` - Papua New Guinean Kina
// * `PYG` - Paraguayan Guarani
// * `PEI` - Peruvian Inti
// * `PEN` - Peruvian Sol
// * `PES` - Peruvian Sol (1863–1965)
// * `PHP` - Philippine Peso
// * `XPT` - Platinum
// * `PLN` - Polish Zloty
// * `PLZ` - Polish Zloty (1950–1995)
// * `PTE` - Portuguese Escudo
// * `GWE` - Portuguese Guinea Escudo
// * `QAR` - Qatari Rial
// * `XRE` - RINET Funds
// * `RHD` - Rhodesian Dollar
// * `RON` - Romanian Leu
// * `ROL` - Romanian Leu (1952–2006)
// * `RUB` - Russian Ruble
// * `RUR` - Russian Ruble (1991–1998)
// * `RWF` - Rwandan Franc
// * `SVC` - Salvadoran Colón
// * `WST` - Samoan Tala
// * `SAR` - Saudi Riyal
// * `RSD` - Serbian Dinar
// * `CSD` - Serbian Dinar (2002–2006)
// * `SCR` - Seychellois Rupee
// * `SLL` - Sierra Leonean Leone
// * `XAG` - Silver
// * `SGD` - Singapore Dollar
// * `SKK` - Slovak Koruna
// * `SIT` - Slovenian Tolar
// * `SBD` - Solomon Islands Dollar
// * `SOS` - Somali Shilling
// * `ZAR` - South African Rand
// * `ZAL` - South African Rand (financial)
// * `KRH` - South Korean Hwan (1953–1962)
// * `KRW` - South Korean Won
// * `KRO` - South Korean Won (1945–1953)
// * `SSP` - South Sudanese Pound
// * `SUR` - Soviet Rouble
// * `ESP` - Spanish Peseta
// * `ESA` - Spanish Peseta (A account)
// * `ESB` - Spanish Peseta (convertible account)
// * `XDR` - Special Drawing Rights
// * `LKR` - Sri Lankan Rupee
// * `SHP` - St. Helena Pound
// * `XSU` - Sucre
// * `SDD` - Sudanese Dinar (1992–2007)
// * `SDG` - Sudanese Pound
// * `SDP` - Sudanese Pound (1957–1998)
// * `SRD` - Surinamese Dollar
// * `SRG` - Surinamese Guilder
// * `SZL` - Swazi Lilangeni
// * `SEK` - Swedish Krona
// * `CHF` - Swiss Franc
// * `SYP` - Syrian Pound
// * `STN` - São Tomé & Príncipe Dobra
// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
// * `TVD` - TVD
// * `TJR` - Tajikistani Ruble
// * `TJS` - Tajikistani Somoni
// * `TZS` - Tanzanian Shilling
// * `XTS` - Testing Currency Code
// * `THB` - Thai Baht
// * `XXX` - The codes assigned for transactions where no currency is involved
// * `TPE` - Timorese Escudo
// * `TOP` - Tongan Paʻanga
// * `TTD` - Trinidad & Tobago Dollar
// * `TND` - Tunisian Dinar
// * `TRY` - Turkish Lira
// * `TRL` - Turkish Lira (1922–2005)
// * `TMT` - Turkmenistani Manat
// * `TMM` - Turkmenistani Manat (1993–2009)
// * `USD` - US Dollar
// * `USN` - US Dollar (Next day)
// * `USS` - US Dollar (Same day)
// * `UGX` - Ugandan Shilling
// * `UGS` - Ugandan Shilling (1966–1987)
// * `UAH` - Ukrainian Hryvnia
// * `UAK` - Ukrainian Karbovanets
// * `AED` - United Arab Emirates Dirham
// * `UYW` - Uruguayan Nominal Wage Index Unit
// * `UYU` - Uruguayan Peso
// * `UYP` - Uruguayan Peso (1975–1993)
// * `UYI` - Uruguayan Peso (Indexed Units)
// * `UZS` - Uzbekistani Som
// * `VUV` - Vanuatu Vatu
// * `VES` - Venezuelan Bolívar
// * `VEB` - Venezuelan Bolívar (1871–2008)
// * `VEF` - Venezuelan Bolívar (2008–2018)
// * `VND` - Vietnamese Dong
// * `VNN` - Vietnamese Dong (1978–1985)
// * `CHE` - WIR Euro
// * `CHW` - WIR Franc
// * `XOF` - West African CFA Franc
// * `YDD` - Yemeni Dinar
// * `YER` - Yemeni Rial
// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
// * `YUM` - Yugoslavian New Dinar (1994–2002)
// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
// * `ZWN` - ZWN
// * `ZRN` - Zairean New Zaire (1993–1998)
// * `ZRZ` - Zairean Zaire (1971–1993)
// * `ZMW` - Zambian Kwacha
// * `ZMK` - Zambian Kwacha (1968–2012)
// * `ZWD` - Zimbabwean Dollar (1980–2008)
// * `ZWR` - Zimbabwean Dollar (2008)
// * `ZWL` - Zimbabwean Dollar (2009)
type InvoiceLineItemRequestCurrency struct {
	typeName     string
	CurrencyEnum CurrencyEnum
	String       string
}

func NewInvoiceLineItemRequestCurrencyFromCurrencyEnum(value CurrencyEnum) *InvoiceLineItemRequestCurrency {
	return &InvoiceLineItemRequestCurrency{typeName: "currencyEnum", CurrencyEnum: value}
}

func NewInvoiceLineItemRequestCurrencyFromString(value string) *InvoiceLineItemRequestCurrency {
	return &InvoiceLineItemRequestCurrency{typeName: "string", String: value}
}

func (i *InvoiceLineItemRequestCurrency) UnmarshalJSON(data []byte) error {
	var valueCurrencyEnum CurrencyEnum
	if err := json.Unmarshal(data, &valueCurrencyEnum); err == nil {
		i.typeName = "currencyEnum"
		i.CurrencyEnum = valueCurrencyEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typeName = "string"
		i.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i InvoiceLineItemRequestCurrency) MarshalJSON() ([]byte, error) {
	switch i.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "currencyEnum":
		return json.Marshal(i.CurrencyEnum)
	case "string":
		return json.Marshal(i.String)
	}
}

type InvoiceLineItemRequestCurrencyVisitor interface {
	VisitCurrencyEnum(CurrencyEnum) error
	VisitString(string) error
}

func (i *InvoiceLineItemRequestCurrency) Accept(visitor InvoiceLineItemRequestCurrencyVisitor) error {
	switch i.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "currencyEnum":
		return visitor.VisitCurrencyEnum(i.CurrencyEnum)
	case "string":
		return visitor.VisitString(i.String)
	}
}

type InvoiceLineItemRequestItem struct {
	typeName string
	String   string
	Item     *Item
}

func NewInvoiceLineItemRequestItemFromString(value string) *InvoiceLineItemRequestItem {
	return &InvoiceLineItemRequestItem{typeName: "string", String: value}
}

func NewInvoiceLineItemRequestItemFromItem(value *Item) *InvoiceLineItemRequestItem {
	return &InvoiceLineItemRequestItem{typeName: "item", Item: value}
}

func (i *InvoiceLineItemRequestItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typeName = "string"
		i.String = valueString
		return nil
	}
	valueItem := new(Item)
	if err := json.Unmarshal(data, &valueItem); err == nil {
		i.typeName = "item"
		i.Item = valueItem
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i InvoiceLineItemRequestItem) MarshalJSON() ([]byte, error) {
	switch i.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return json.Marshal(i.String)
	case "item":
		return json.Marshal(i.Item)
	}
}

type InvoiceLineItemRequestItemVisitor interface {
	VisitString(string) error
	VisitItem(*Item) error
}

func (i *InvoiceLineItemRequestItem) Accept(visitor InvoiceLineItemRequestItemVisitor) error {
	switch i.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return visitor.VisitString(i.String)
	case "item":
		return visitor.VisitItem(i.Item)
	}
}

type InvoiceLineItemRequestTrackingCategoriesItem struct {
	typeName         string
	String           string
	TrackingCategory *TrackingCategory
}

func NewInvoiceLineItemRequestTrackingCategoriesItemFromString(value string) *InvoiceLineItemRequestTrackingCategoriesItem {
	return &InvoiceLineItemRequestTrackingCategoriesItem{typeName: "string", String: value}
}

func NewInvoiceLineItemRequestTrackingCategoriesItemFromTrackingCategory(value *TrackingCategory) *InvoiceLineItemRequestTrackingCategoriesItem {
	return &InvoiceLineItemRequestTrackingCategoriesItem{typeName: "trackingCategory", TrackingCategory: value}
}

func (i *InvoiceLineItemRequestTrackingCategoriesItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typeName = "string"
		i.String = valueString
		return nil
	}
	valueTrackingCategory := new(TrackingCategory)
	if err := json.Unmarshal(data, &valueTrackingCategory); err == nil {
		i.typeName = "trackingCategory"
		i.TrackingCategory = valueTrackingCategory
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i InvoiceLineItemRequestTrackingCategoriesItem) MarshalJSON() ([]byte, error) {
	switch i.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return json.Marshal(i.String)
	case "trackingCategory":
		return json.Marshal(i.TrackingCategory)
	}
}

type InvoiceLineItemRequestTrackingCategoriesItemVisitor interface {
	VisitString(string) error
	VisitTrackingCategory(*TrackingCategory) error
}

func (i *InvoiceLineItemRequestTrackingCategoriesItem) Accept(visitor InvoiceLineItemRequestTrackingCategoriesItemVisitor) error {
	switch i.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return visitor.VisitString(i.String)
	case "trackingCategory":
		return visitor.VisitTrackingCategory(i.TrackingCategory)
	}
}

type InvoiceLineItemRequestTrackingCategory struct {
	typeName         string
	String           string
	TrackingCategory *TrackingCategory
}

func NewInvoiceLineItemRequestTrackingCategoryFromString(value string) *InvoiceLineItemRequestTrackingCategory {
	return &InvoiceLineItemRequestTrackingCategory{typeName: "string", String: value}
}

func NewInvoiceLineItemRequestTrackingCategoryFromTrackingCategory(value *TrackingCategory) *InvoiceLineItemRequestTrackingCategory {
	return &InvoiceLineItemRequestTrackingCategory{typeName: "trackingCategory", TrackingCategory: value}
}

func (i *InvoiceLineItemRequestTrackingCategory) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typeName = "string"
		i.String = valueString
		return nil
	}
	valueTrackingCategory := new(TrackingCategory)
	if err := json.Unmarshal(data, &valueTrackingCategory); err == nil {
		i.typeName = "trackingCategory"
		i.TrackingCategory = valueTrackingCategory
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i InvoiceLineItemRequestTrackingCategory) MarshalJSON() ([]byte, error) {
	switch i.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return json.Marshal(i.String)
	case "trackingCategory":
		return json.Marshal(i.TrackingCategory)
	}
}

type InvoiceLineItemRequestTrackingCategoryVisitor interface {
	VisitString(string) error
	VisitTrackingCategory(*TrackingCategory) error
}

func (i *InvoiceLineItemRequestTrackingCategory) Accept(visitor InvoiceLineItemRequestTrackingCategoryVisitor) error {
	switch i.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return visitor.VisitString(i.String)
	case "trackingCategory":
		return visitor.VisitTrackingCategory(i.TrackingCategory)
	}
}

type InvoiceLineItemTrackingCategoriesItem struct {
	typeName         string
	String           string
	TrackingCategory *TrackingCategory
}

func NewInvoiceLineItemTrackingCategoriesItemFromString(value string) *InvoiceLineItemTrackingCategoriesItem {
	return &InvoiceLineItemTrackingCategoriesItem{typeName: "string", String: value}
}

func NewInvoiceLineItemTrackingCategoriesItemFromTrackingCategory(value *TrackingCategory) *InvoiceLineItemTrackingCategoriesItem {
	return &InvoiceLineItemTrackingCategoriesItem{typeName: "trackingCategory", TrackingCategory: value}
}

func (i *InvoiceLineItemTrackingCategoriesItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typeName = "string"
		i.String = valueString
		return nil
	}
	valueTrackingCategory := new(TrackingCategory)
	if err := json.Unmarshal(data, &valueTrackingCategory); err == nil {
		i.typeName = "trackingCategory"
		i.TrackingCategory = valueTrackingCategory
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i InvoiceLineItemTrackingCategoriesItem) MarshalJSON() ([]byte, error) {
	switch i.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return json.Marshal(i.String)
	case "trackingCategory":
		return json.Marshal(i.TrackingCategory)
	}
}

type InvoiceLineItemTrackingCategoriesItemVisitor interface {
	VisitString(string) error
	VisitTrackingCategory(*TrackingCategory) error
}

func (i *InvoiceLineItemTrackingCategoriesItem) Accept(visitor InvoiceLineItemTrackingCategoriesItemVisitor) error {
	switch i.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return visitor.VisitString(i.String)
	case "trackingCategory":
		return visitor.VisitTrackingCategory(i.TrackingCategory)
	}
}

type InvoiceLineItemTrackingCategory struct {
	typeName         string
	String           string
	TrackingCategory *TrackingCategory
}

func NewInvoiceLineItemTrackingCategoryFromString(value string) *InvoiceLineItemTrackingCategory {
	return &InvoiceLineItemTrackingCategory{typeName: "string", String: value}
}

func NewInvoiceLineItemTrackingCategoryFromTrackingCategory(value *TrackingCategory) *InvoiceLineItemTrackingCategory {
	return &InvoiceLineItemTrackingCategory{typeName: "trackingCategory", TrackingCategory: value}
}

func (i *InvoiceLineItemTrackingCategory) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typeName = "string"
		i.String = valueString
		return nil
	}
	valueTrackingCategory := new(TrackingCategory)
	if err := json.Unmarshal(data, &valueTrackingCategory); err == nil {
		i.typeName = "trackingCategory"
		i.TrackingCategory = valueTrackingCategory
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i InvoiceLineItemTrackingCategory) MarshalJSON() ([]byte, error) {
	switch i.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return json.Marshal(i.String)
	case "trackingCategory":
		return json.Marshal(i.TrackingCategory)
	}
}

type InvoiceLineItemTrackingCategoryVisitor interface {
	VisitString(string) error
	VisitTrackingCategory(*TrackingCategory) error
}

func (i *InvoiceLineItemTrackingCategory) Accept(visitor InvoiceLineItemTrackingCategoryVisitor) error {
	switch i.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return visitor.VisitString(i.String)
	case "trackingCategory":
		return visitor.VisitTrackingCategory(i.TrackingCategory)
	}
}

type InvoicePaymentsItem struct {
	typeName string
	String   string
	Payment  *Payment
}

func NewInvoicePaymentsItemFromString(value string) *InvoicePaymentsItem {
	return &InvoicePaymentsItem{typeName: "string", String: value}
}

func NewInvoicePaymentsItemFromPayment(value *Payment) *InvoicePaymentsItem {
	return &InvoicePaymentsItem{typeName: "payment", Payment: value}
}

func (i *InvoicePaymentsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typeName = "string"
		i.String = valueString
		return nil
	}
	valuePayment := new(Payment)
	if err := json.Unmarshal(data, &valuePayment); err == nil {
		i.typeName = "payment"
		i.Payment = valuePayment
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i InvoicePaymentsItem) MarshalJSON() ([]byte, error) {
	switch i.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return json.Marshal(i.String)
	case "payment":
		return json.Marshal(i.Payment)
	}
}

type InvoicePaymentsItemVisitor interface {
	VisitString(string) error
	VisitPayment(*Payment) error
}

func (i *InvoicePaymentsItem) Accept(visitor InvoicePaymentsItemVisitor) error {
	switch i.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return visitor.VisitString(i.String)
	case "payment":
		return visitor.VisitPayment(i.Payment)
	}
}

type InvoicePurchaseOrdersItem struct {
	typeName      string
	String        string
	PurchaseOrder *PurchaseOrder
}

func NewInvoicePurchaseOrdersItemFromString(value string) *InvoicePurchaseOrdersItem {
	return &InvoicePurchaseOrdersItem{typeName: "string", String: value}
}

func NewInvoicePurchaseOrdersItemFromPurchaseOrder(value *PurchaseOrder) *InvoicePurchaseOrdersItem {
	return &InvoicePurchaseOrdersItem{typeName: "purchaseOrder", PurchaseOrder: value}
}

func (i *InvoicePurchaseOrdersItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typeName = "string"
		i.String = valueString
		return nil
	}
	valuePurchaseOrder := new(PurchaseOrder)
	if err := json.Unmarshal(data, &valuePurchaseOrder); err == nil {
		i.typeName = "purchaseOrder"
		i.PurchaseOrder = valuePurchaseOrder
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i InvoicePurchaseOrdersItem) MarshalJSON() ([]byte, error) {
	switch i.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return json.Marshal(i.String)
	case "purchaseOrder":
		return json.Marshal(i.PurchaseOrder)
	}
}

type InvoicePurchaseOrdersItemVisitor interface {
	VisitString(string) error
	VisitPurchaseOrder(*PurchaseOrder) error
}

func (i *InvoicePurchaseOrdersItem) Accept(visitor InvoicePurchaseOrdersItemVisitor) error {
	switch i.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return visitor.VisitString(i.String)
	case "purchaseOrder":
		return visitor.VisitPurchaseOrder(i.PurchaseOrder)
	}
}

// # The Invoice Object
//
//	### Description
//	The `Invoice` object represents an itemized record of goods and/or services sold to a customer.
//
// If type = accounts_payable `Invoice` is a bill, if type = accounts_receivable it's an invoice.
//
//	### Usage Example
//	Fetch from the `LIST Invoices` endpoint and view a company's invoices.
type InvoiceRequest struct {
	// Whether the invoice is an accounts receivable or accounts payable. If `type` is `accounts_payable`, the invoice is a bill. If `type` is `accounts_receivable`, it is an invoice.
	//
	// * `ACCOUNTS_RECEIVABLE` - ACCOUNTS_RECEIVABLE
	// * `ACCOUNTS_PAYABLE` - ACCOUNTS_PAYABLE
	Type *InvoiceRequestType `json:"type,omitempty"`
	// The invoice's contact.
	Contact *InvoiceRequestContact `json:"contact,omitempty"`
	// The invoice's number.
	Number *string `json:"number,omitempty"`
	// The invoice's issue date.
	IssueDate *time.Time `json:"issue_date,omitempty"`
	// The invoice's due date.
	DueDate *time.Time `json:"due_date,omitempty"`
	// The invoice's paid date.
	PaidOnDate *time.Time `json:"paid_on_date,omitempty"`
	// The invoice's private note.
	Memo *string `json:"memo,omitempty"`
	// The status of the invoice.
	//
	// * `PAID` - PAID
	// * `DRAFT` - DRAFT
	// * `SUBMITTED` - SUBMITTED
	// * `PARTIALLY_PAID` - PARTIALLY_PAID
	// * `OPEN` - OPEN
	// * `VOID` - VOID
	Status *InvoiceRequestStatus `json:"status,omitempty"`
	// The company the invoice belongs to.
	Company *InvoiceRequestCompany `json:"company,omitempty"`
	// The invoice's currency.
	//
	// * `XUA` - ADB Unit of Account
	// * `AFN` - Afghan Afghani
	// * `AFA` - Afghan Afghani (1927–2002)
	// * `ALL` - Albanian Lek
	// * `ALK` - Albanian Lek (1946–1965)
	// * `DZD` - Algerian Dinar
	// * `ADP` - Andorran Peseta
	// * `AOA` - Angolan Kwanza
	// * `AOK` - Angolan Kwanza (1977–1991)
	// * `AON` - Angolan New Kwanza (1990–2000)
	// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
	// * `ARA` - Argentine Austral
	// * `ARS` - Argentine Peso
	// * `ARM` - Argentine Peso (1881–1970)
	// * `ARP` - Argentine Peso (1983–1985)
	// * `ARL` - Argentine Peso Ley (1970–1983)
	// * `AMD` - Armenian Dram
	// * `AWG` - Aruban Florin
	// * `AUD` - Australian Dollar
	// * `ATS` - Austrian Schilling
	// * `AZN` - Azerbaijani Manat
	// * `AZM` - Azerbaijani Manat (1993–2006)
	// * `BSD` - Bahamian Dollar
	// * `BHD` - Bahraini Dinar
	// * `BDT` - Bangladeshi Taka
	// * `BBD` - Barbadian Dollar
	// * `BYN` - Belarusian Ruble
	// * `BYB` - Belarusian Ruble (1994–1999)
	// * `BYR` - Belarusian Ruble (2000–2016)
	// * `BEF` - Belgian Franc
	// * `BEC` - Belgian Franc (convertible)
	// * `BEL` - Belgian Franc (financial)
	// * `BZD` - Belize Dollar
	// * `BMD` - Bermudan Dollar
	// * `BTN` - Bhutanese Ngultrum
	// * `BOB` - Bolivian Boliviano
	// * `BOL` - Bolivian Boliviano (1863–1963)
	// * `BOV` - Bolivian Mvdol
	// * `BOP` - Bolivian Peso
	// * `BAM` - Bosnia-Herzegovina Convertible Mark
	// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
	// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
	// * `BWP` - Botswanan Pula
	// * `BRC` - Brazilian Cruzado (1986–1989)
	// * `BRZ` - Brazilian Cruzeiro (1942–1967)
	// * `BRE` - Brazilian Cruzeiro (1990–1993)
	// * `BRR` - Brazilian Cruzeiro (1993–1994)
	// * `BRN` - Brazilian New Cruzado (1989–1990)
	// * `BRB` - Brazilian New Cruzeiro (1967–1986)
	// * `BRL` - Brazilian Real
	// * `GBP` - British Pound
	// * `BND` - Brunei Dollar
	// * `BGL` - Bulgarian Hard Lev
	// * `BGN` - Bulgarian Lev
	// * `BGO` - Bulgarian Lev (1879–1952)
	// * `BGM` - Bulgarian Socialist Lev
	// * `BUK` - Burmese Kyat
	// * `BIF` - Burundian Franc
	// * `XPF` - CFP Franc
	// * `KHR` - Cambodian Riel
	// * `CAD` - Canadian Dollar
	// * `CVE` - Cape Verdean Escudo
	// * `KYD` - Cayman Islands Dollar
	// * `XAF` - Central African CFA Franc
	// * `CLE` - Chilean Escudo
	// * `CLP` - Chilean Peso
	// * `CLF` - Chilean Unit of Account (UF)
	// * `CNX` - Chinese People’s Bank Dollar
	// * `CNY` - Chinese Yuan
	// * `CNH` - Chinese Yuan (offshore)
	// * `COP` - Colombian Peso
	// * `COU` - Colombian Real Value Unit
	// * `KMF` - Comorian Franc
	// * `CDF` - Congolese Franc
	// * `CRC` - Costa Rican Colón
	// * `HRD` - Croatian Dinar
	// * `HRK` - Croatian Kuna
	// * `CUC` - Cuban Convertible Peso
	// * `CUP` - Cuban Peso
	// * `CYP` - Cypriot Pound
	// * `CZK` - Czech Koruna
	// * `CSK` - Czechoslovak Hard Koruna
	// * `DKK` - Danish Krone
	// * `DJF` - Djiboutian Franc
	// * `DOP` - Dominican Peso
	// * `NLG` - Dutch Guilder
	// * `XCD` - East Caribbean Dollar
	// * `DDM` - East German Mark
	// * `ECS` - Ecuadorian Sucre
	// * `ECV` - Ecuadorian Unit of Constant Value
	// * `EGP` - Egyptian Pound
	// * `GQE` - Equatorial Guinean Ekwele
	// * `ERN` - Eritrean Nakfa
	// * `EEK` - Estonian Kroon
	// * `ETB` - Ethiopian Birr
	// * `EUR` - Euro
	// * `XBA` - European Composite Unit
	// * `XEU` - European Currency Unit
	// * `XBB` - European Monetary Unit
	// * `XBC` - European Unit of Account (XBC)
	// * `XBD` - European Unit of Account (XBD)
	// * `FKP` - Falkland Islands Pound
	// * `FJD` - Fijian Dollar
	// * `FIM` - Finnish Markka
	// * `FRF` - French Franc
	// * `XFO` - French Gold Franc
	// * `XFU` - French UIC-Franc
	// * `GMD` - Gambian Dalasi
	// * `GEK` - Georgian Kupon Larit
	// * `GEL` - Georgian Lari
	// * `DEM` - German Mark
	// * `GHS` - Ghanaian Cedi
	// * `GHC` - Ghanaian Cedi (1979–2007)
	// * `GIP` - Gibraltar Pound
	// * `XAU` - Gold
	// * `GRD` - Greek Drachma
	// * `GTQ` - Guatemalan Quetzal
	// * `GWP` - Guinea-Bissau Peso
	// * `GNF` - Guinean Franc
	// * `GNS` - Guinean Syli
	// * `GYD` - Guyanaese Dollar
	// * `HTG` - Haitian Gourde
	// * `HNL` - Honduran Lempira
	// * `HKD` - Hong Kong Dollar
	// * `HUF` - Hungarian Forint
	// * `IMP` - IMP
	// * `ISK` - Icelandic Króna
	// * `ISJ` - Icelandic Króna (1918–1981)
	// * `INR` - Indian Rupee
	// * `IDR` - Indonesian Rupiah
	// * `IRR` - Iranian Rial
	// * `IQD` - Iraqi Dinar
	// * `IEP` - Irish Pound
	// * `ILS` - Israeli New Shekel
	// * `ILP` - Israeli Pound
	// * `ILR` - Israeli Shekel (1980–1985)
	// * `ITL` - Italian Lira
	// * `JMD` - Jamaican Dollar
	// * `JPY` - Japanese Yen
	// * `JOD` - Jordanian Dinar
	// * `KZT` - Kazakhstani Tenge
	// * `KES` - Kenyan Shilling
	// * `KWD` - Kuwaiti Dinar
	// * `KGS` - Kyrgystani Som
	// * `LAK` - Laotian Kip
	// * `LVL` - Latvian Lats
	// * `LVR` - Latvian Ruble
	// * `LBP` - Lebanese Pound
	// * `LSL` - Lesotho Loti
	// * `LRD` - Liberian Dollar
	// * `LYD` - Libyan Dinar
	// * `LTL` - Lithuanian Litas
	// * `LTT` - Lithuanian Talonas
	// * `LUL` - Luxembourg Financial Franc
	// * `LUC` - Luxembourgian Convertible Franc
	// * `LUF` - Luxembourgian Franc
	// * `MOP` - Macanese Pataca
	// * `MKD` - Macedonian Denar
	// * `MKN` - Macedonian Denar (1992–1993)
	// * `MGA` - Malagasy Ariary
	// * `MGF` - Malagasy Franc
	// * `MWK` - Malawian Kwacha
	// * `MYR` - Malaysian Ringgit
	// * `MVR` - Maldivian Rufiyaa
	// * `MVP` - Maldivian Rupee (1947–1981)
	// * `MLF` - Malian Franc
	// * `MTL` - Maltese Lira
	// * `MTP` - Maltese Pound
	// * `MRU` - Mauritanian Ouguiya
	// * `MRO` - Mauritanian Ouguiya (1973–2017)
	// * `MUR` - Mauritian Rupee
	// * `MXV` - Mexican Investment Unit
	// * `MXN` - Mexican Peso
	// * `MXP` - Mexican Silver Peso (1861–1992)
	// * `MDC` - Moldovan Cupon
	// * `MDL` - Moldovan Leu
	// * `MCF` - Monegasque Franc
	// * `MNT` - Mongolian Tugrik
	// * `MAD` - Moroccan Dirham
	// * `MAF` - Moroccan Franc
	// * `MZE` - Mozambican Escudo
	// * `MZN` - Mozambican Metical
	// * `MZM` - Mozambican Metical (1980–2006)
	// * `MMK` - Myanmar Kyat
	// * `NAD` - Namibian Dollar
	// * `NPR` - Nepalese Rupee
	// * `ANG` - Netherlands Antillean Guilder
	// * `TWD` - New Taiwan Dollar
	// * `NZD` - New Zealand Dollar
	// * `NIO` - Nicaraguan Córdoba
	// * `NIC` - Nicaraguan Córdoba (1988–1991)
	// * `NGN` - Nigerian Naira
	// * `KPW` - North Korean Won
	// * `NOK` - Norwegian Krone
	// * `OMR` - Omani Rial
	// * `PKR` - Pakistani Rupee
	// * `XPD` - Palladium
	// * `PAB` - Panamanian Balboa
	// * `PGK` - Papua New Guinean Kina
	// * `PYG` - Paraguayan Guarani
	// * `PEI` - Peruvian Inti
	// * `PEN` - Peruvian Sol
	// * `PES` - Peruvian Sol (1863–1965)
	// * `PHP` - Philippine Peso
	// * `XPT` - Platinum
	// * `PLN` - Polish Zloty
	// * `PLZ` - Polish Zloty (1950–1995)
	// * `PTE` - Portuguese Escudo
	// * `GWE` - Portuguese Guinea Escudo
	// * `QAR` - Qatari Rial
	// * `XRE` - RINET Funds
	// * `RHD` - Rhodesian Dollar
	// * `RON` - Romanian Leu
	// * `ROL` - Romanian Leu (1952–2006)
	// * `RUB` - Russian Ruble
	// * `RUR` - Russian Ruble (1991–1998)
	// * `RWF` - Rwandan Franc
	// * `SVC` - Salvadoran Colón
	// * `WST` - Samoan Tala
	// * `SAR` - Saudi Riyal
	// * `RSD` - Serbian Dinar
	// * `CSD` - Serbian Dinar (2002–2006)
	// * `SCR` - Seychellois Rupee
	// * `SLL` - Sierra Leonean Leone
	// * `XAG` - Silver
	// * `SGD` - Singapore Dollar
	// * `SKK` - Slovak Koruna
	// * `SIT` - Slovenian Tolar
	// * `SBD` - Solomon Islands Dollar
	// * `SOS` - Somali Shilling
	// * `ZAR` - South African Rand
	// * `ZAL` - South African Rand (financial)
	// * `KRH` - South Korean Hwan (1953–1962)
	// * `KRW` - South Korean Won
	// * `KRO` - South Korean Won (1945–1953)
	// * `SSP` - South Sudanese Pound
	// * `SUR` - Soviet Rouble
	// * `ESP` - Spanish Peseta
	// * `ESA` - Spanish Peseta (A account)
	// * `ESB` - Spanish Peseta (convertible account)
	// * `XDR` - Special Drawing Rights
	// * `LKR` - Sri Lankan Rupee
	// * `SHP` - St. Helena Pound
	// * `XSU` - Sucre
	// * `SDD` - Sudanese Dinar (1992–2007)
	// * `SDG` - Sudanese Pound
	// * `SDP` - Sudanese Pound (1957–1998)
	// * `SRD` - Surinamese Dollar
	// * `SRG` - Surinamese Guilder
	// * `SZL` - Swazi Lilangeni
	// * `SEK` - Swedish Krona
	// * `CHF` - Swiss Franc
	// * `SYP` - Syrian Pound
	// * `STN` - São Tomé & Príncipe Dobra
	// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
	// * `TVD` - TVD
	// * `TJR` - Tajikistani Ruble
	// * `TJS` - Tajikistani Somoni
	// * `TZS` - Tanzanian Shilling
	// * `XTS` - Testing Currency Code
	// * `THB` - Thai Baht
	// * `XXX` - The codes assigned for transactions where no currency is involved
	// * `TPE` - Timorese Escudo
	// * `TOP` - Tongan Paʻanga
	// * `TTD` - Trinidad & Tobago Dollar
	// * `TND` - Tunisian Dinar
	// * `TRY` - Turkish Lira
	// * `TRL` - Turkish Lira (1922–2005)
	// * `TMT` - Turkmenistani Manat
	// * `TMM` - Turkmenistani Manat (1993–2009)
	// * `USD` - US Dollar
	// * `USN` - US Dollar (Next day)
	// * `USS` - US Dollar (Same day)
	// * `UGX` - Ugandan Shilling
	// * `UGS` - Ugandan Shilling (1966–1987)
	// * `UAH` - Ukrainian Hryvnia
	// * `UAK` - Ukrainian Karbovanets
	// * `AED` - United Arab Emirates Dirham
	// * `UYW` - Uruguayan Nominal Wage Index Unit
	// * `UYU` - Uruguayan Peso
	// * `UYP` - Uruguayan Peso (1975–1993)
	// * `UYI` - Uruguayan Peso (Indexed Units)
	// * `UZS` - Uzbekistani Som
	// * `VUV` - Vanuatu Vatu
	// * `VES` - Venezuelan Bolívar
	// * `VEB` - Venezuelan Bolívar (1871–2008)
	// * `VEF` - Venezuelan Bolívar (2008–2018)
	// * `VND` - Vietnamese Dong
	// * `VNN` - Vietnamese Dong (1978–1985)
	// * `CHE` - WIR Euro
	// * `CHW` - WIR Franc
	// * `XOF` - West African CFA Franc
	// * `YDD` - Yemeni Dinar
	// * `YER` - Yemeni Rial
	// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
	// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
	// * `YUM` - Yugoslavian New Dinar (1994–2002)
	// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
	// * `ZWN` - ZWN
	// * `ZRN` - Zairean New Zaire (1993–1998)
	// * `ZRZ` - Zairean Zaire (1971–1993)
	// * `ZMW` - Zambian Kwacha
	// * `ZMK` - Zambian Kwacha (1968–2012)
	// * `ZWD` - Zimbabwean Dollar (1980–2008)
	// * `ZWR` - Zimbabwean Dollar (2008)
	// * `ZWL` - Zimbabwean Dollar (2009)
	Currency *InvoiceRequestCurrency `json:"currency,omitempty"`
	// The invoice's exchange rate.
	ExchangeRate *string `json:"exchange_rate,omitempty"`
	// The total discounts applied to the total cost.
	TotalDiscount *float64 `json:"total_discount,omitempty"`
	// The total amount being paid before taxes.
	SubTotal *float64 `json:"sub_total,omitempty"`
	// The total amount being paid in taxes.
	TotalTaxAmount *float64 `json:"total_tax_amount,omitempty"`
	// The invoice's total amount.
	TotalAmount *float64 `json:"total_amount,omitempty"`
	// The invoice's remaining balance.
	Balance *float64 `json:"balance,omitempty"`
	// Array of `Payment` object IDs.
	Payments            []*InvoiceRequestPaymentsItem           `json:"payments,omitempty"`
	TrackingCategories  []*InvoiceRequestTrackingCategoriesItem `json:"tracking_categories,omitempty"`
	LineItems           []*InvoiceLineItemRequest               `json:"line_items,omitempty"`
	PurchaseOrders      []*InvoiceRequestPurchaseOrdersItem     `json:"purchase_orders,omitempty"`
	IntegrationParams   map[string]any                          `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]any                          `json:"linked_account_params,omitempty"`
}

// The company the invoice belongs to.
type InvoiceRequestCompany struct {
	typeName    string
	String      string
	CompanyInfo *CompanyInfo
}

func NewInvoiceRequestCompanyFromString(value string) *InvoiceRequestCompany {
	return &InvoiceRequestCompany{typeName: "string", String: value}
}

func NewInvoiceRequestCompanyFromCompanyInfo(value *CompanyInfo) *InvoiceRequestCompany {
	return &InvoiceRequestCompany{typeName: "companyInfo", CompanyInfo: value}
}

func (i *InvoiceRequestCompany) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typeName = "string"
		i.String = valueString
		return nil
	}
	valueCompanyInfo := new(CompanyInfo)
	if err := json.Unmarshal(data, &valueCompanyInfo); err == nil {
		i.typeName = "companyInfo"
		i.CompanyInfo = valueCompanyInfo
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i InvoiceRequestCompany) MarshalJSON() ([]byte, error) {
	switch i.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return json.Marshal(i.String)
	case "companyInfo":
		return json.Marshal(i.CompanyInfo)
	}
}

type InvoiceRequestCompanyVisitor interface {
	VisitString(string) error
	VisitCompanyInfo(*CompanyInfo) error
}

func (i *InvoiceRequestCompany) Accept(visitor InvoiceRequestCompanyVisitor) error {
	switch i.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return visitor.VisitString(i.String)
	case "companyInfo":
		return visitor.VisitCompanyInfo(i.CompanyInfo)
	}
}

// The invoice's contact.
type InvoiceRequestContact struct {
	typeName string
	String   string
	Contact  *Contact
}

func NewInvoiceRequestContactFromString(value string) *InvoiceRequestContact {
	return &InvoiceRequestContact{typeName: "string", String: value}
}

func NewInvoiceRequestContactFromContact(value *Contact) *InvoiceRequestContact {
	return &InvoiceRequestContact{typeName: "contact", Contact: value}
}

func (i *InvoiceRequestContact) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typeName = "string"
		i.String = valueString
		return nil
	}
	valueContact := new(Contact)
	if err := json.Unmarshal(data, &valueContact); err == nil {
		i.typeName = "contact"
		i.Contact = valueContact
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i InvoiceRequestContact) MarshalJSON() ([]byte, error) {
	switch i.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return json.Marshal(i.String)
	case "contact":
		return json.Marshal(i.Contact)
	}
}

type InvoiceRequestContactVisitor interface {
	VisitString(string) error
	VisitContact(*Contact) error
}

func (i *InvoiceRequestContact) Accept(visitor InvoiceRequestContactVisitor) error {
	switch i.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return visitor.VisitString(i.String)
	case "contact":
		return visitor.VisitContact(i.Contact)
	}
}

// The invoice's currency.
//
// * `XUA` - ADB Unit of Account
// * `AFN` - Afghan Afghani
// * `AFA` - Afghan Afghani (1927–2002)
// * `ALL` - Albanian Lek
// * `ALK` - Albanian Lek (1946–1965)
// * `DZD` - Algerian Dinar
// * `ADP` - Andorran Peseta
// * `AOA` - Angolan Kwanza
// * `AOK` - Angolan Kwanza (1977–1991)
// * `AON` - Angolan New Kwanza (1990–2000)
// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
// * `ARA` - Argentine Austral
// * `ARS` - Argentine Peso
// * `ARM` - Argentine Peso (1881–1970)
// * `ARP` - Argentine Peso (1983–1985)
// * `ARL` - Argentine Peso Ley (1970–1983)
// * `AMD` - Armenian Dram
// * `AWG` - Aruban Florin
// * `AUD` - Australian Dollar
// * `ATS` - Austrian Schilling
// * `AZN` - Azerbaijani Manat
// * `AZM` - Azerbaijani Manat (1993–2006)
// * `BSD` - Bahamian Dollar
// * `BHD` - Bahraini Dinar
// * `BDT` - Bangladeshi Taka
// * `BBD` - Barbadian Dollar
// * `BYN` - Belarusian Ruble
// * `BYB` - Belarusian Ruble (1994–1999)
// * `BYR` - Belarusian Ruble (2000–2016)
// * `BEF` - Belgian Franc
// * `BEC` - Belgian Franc (convertible)
// * `BEL` - Belgian Franc (financial)
// * `BZD` - Belize Dollar
// * `BMD` - Bermudan Dollar
// * `BTN` - Bhutanese Ngultrum
// * `BOB` - Bolivian Boliviano
// * `BOL` - Bolivian Boliviano (1863–1963)
// * `BOV` - Bolivian Mvdol
// * `BOP` - Bolivian Peso
// * `BAM` - Bosnia-Herzegovina Convertible Mark
// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
// * `BWP` - Botswanan Pula
// * `BRC` - Brazilian Cruzado (1986–1989)
// * `BRZ` - Brazilian Cruzeiro (1942–1967)
// * `BRE` - Brazilian Cruzeiro (1990–1993)
// * `BRR` - Brazilian Cruzeiro (1993–1994)
// * `BRN` - Brazilian New Cruzado (1989–1990)
// * `BRB` - Brazilian New Cruzeiro (1967–1986)
// * `BRL` - Brazilian Real
// * `GBP` - British Pound
// * `BND` - Brunei Dollar
// * `BGL` - Bulgarian Hard Lev
// * `BGN` - Bulgarian Lev
// * `BGO` - Bulgarian Lev (1879–1952)
// * `BGM` - Bulgarian Socialist Lev
// * `BUK` - Burmese Kyat
// * `BIF` - Burundian Franc
// * `XPF` - CFP Franc
// * `KHR` - Cambodian Riel
// * `CAD` - Canadian Dollar
// * `CVE` - Cape Verdean Escudo
// * `KYD` - Cayman Islands Dollar
// * `XAF` - Central African CFA Franc
// * `CLE` - Chilean Escudo
// * `CLP` - Chilean Peso
// * `CLF` - Chilean Unit of Account (UF)
// * `CNX` - Chinese People’s Bank Dollar
// * `CNY` - Chinese Yuan
// * `CNH` - Chinese Yuan (offshore)
// * `COP` - Colombian Peso
// * `COU` - Colombian Real Value Unit
// * `KMF` - Comorian Franc
// * `CDF` - Congolese Franc
// * `CRC` - Costa Rican Colón
// * `HRD` - Croatian Dinar
// * `HRK` - Croatian Kuna
// * `CUC` - Cuban Convertible Peso
// * `CUP` - Cuban Peso
// * `CYP` - Cypriot Pound
// * `CZK` - Czech Koruna
// * `CSK` - Czechoslovak Hard Koruna
// * `DKK` - Danish Krone
// * `DJF` - Djiboutian Franc
// * `DOP` - Dominican Peso
// * `NLG` - Dutch Guilder
// * `XCD` - East Caribbean Dollar
// * `DDM` - East German Mark
// * `ECS` - Ecuadorian Sucre
// * `ECV` - Ecuadorian Unit of Constant Value
// * `EGP` - Egyptian Pound
// * `GQE` - Equatorial Guinean Ekwele
// * `ERN` - Eritrean Nakfa
// * `EEK` - Estonian Kroon
// * `ETB` - Ethiopian Birr
// * `EUR` - Euro
// * `XBA` - European Composite Unit
// * `XEU` - European Currency Unit
// * `XBB` - European Monetary Unit
// * `XBC` - European Unit of Account (XBC)
// * `XBD` - European Unit of Account (XBD)
// * `FKP` - Falkland Islands Pound
// * `FJD` - Fijian Dollar
// * `FIM` - Finnish Markka
// * `FRF` - French Franc
// * `XFO` - French Gold Franc
// * `XFU` - French UIC-Franc
// * `GMD` - Gambian Dalasi
// * `GEK` - Georgian Kupon Larit
// * `GEL` - Georgian Lari
// * `DEM` - German Mark
// * `GHS` - Ghanaian Cedi
// * `GHC` - Ghanaian Cedi (1979–2007)
// * `GIP` - Gibraltar Pound
// * `XAU` - Gold
// * `GRD` - Greek Drachma
// * `GTQ` - Guatemalan Quetzal
// * `GWP` - Guinea-Bissau Peso
// * `GNF` - Guinean Franc
// * `GNS` - Guinean Syli
// * `GYD` - Guyanaese Dollar
// * `HTG` - Haitian Gourde
// * `HNL` - Honduran Lempira
// * `HKD` - Hong Kong Dollar
// * `HUF` - Hungarian Forint
// * `IMP` - IMP
// * `ISK` - Icelandic Króna
// * `ISJ` - Icelandic Króna (1918–1981)
// * `INR` - Indian Rupee
// * `IDR` - Indonesian Rupiah
// * `IRR` - Iranian Rial
// * `IQD` - Iraqi Dinar
// * `IEP` - Irish Pound
// * `ILS` - Israeli New Shekel
// * `ILP` - Israeli Pound
// * `ILR` - Israeli Shekel (1980–1985)
// * `ITL` - Italian Lira
// * `JMD` - Jamaican Dollar
// * `JPY` - Japanese Yen
// * `JOD` - Jordanian Dinar
// * `KZT` - Kazakhstani Tenge
// * `KES` - Kenyan Shilling
// * `KWD` - Kuwaiti Dinar
// * `KGS` - Kyrgystani Som
// * `LAK` - Laotian Kip
// * `LVL` - Latvian Lats
// * `LVR` - Latvian Ruble
// * `LBP` - Lebanese Pound
// * `LSL` - Lesotho Loti
// * `LRD` - Liberian Dollar
// * `LYD` - Libyan Dinar
// * `LTL` - Lithuanian Litas
// * `LTT` - Lithuanian Talonas
// * `LUL` - Luxembourg Financial Franc
// * `LUC` - Luxembourgian Convertible Franc
// * `LUF` - Luxembourgian Franc
// * `MOP` - Macanese Pataca
// * `MKD` - Macedonian Denar
// * `MKN` - Macedonian Denar (1992–1993)
// * `MGA` - Malagasy Ariary
// * `MGF` - Malagasy Franc
// * `MWK` - Malawian Kwacha
// * `MYR` - Malaysian Ringgit
// * `MVR` - Maldivian Rufiyaa
// * `MVP` - Maldivian Rupee (1947–1981)
// * `MLF` - Malian Franc
// * `MTL` - Maltese Lira
// * `MTP` - Maltese Pound
// * `MRU` - Mauritanian Ouguiya
// * `MRO` - Mauritanian Ouguiya (1973–2017)
// * `MUR` - Mauritian Rupee
// * `MXV` - Mexican Investment Unit
// * `MXN` - Mexican Peso
// * `MXP` - Mexican Silver Peso (1861–1992)
// * `MDC` - Moldovan Cupon
// * `MDL` - Moldovan Leu
// * `MCF` - Monegasque Franc
// * `MNT` - Mongolian Tugrik
// * `MAD` - Moroccan Dirham
// * `MAF` - Moroccan Franc
// * `MZE` - Mozambican Escudo
// * `MZN` - Mozambican Metical
// * `MZM` - Mozambican Metical (1980–2006)
// * `MMK` - Myanmar Kyat
// * `NAD` - Namibian Dollar
// * `NPR` - Nepalese Rupee
// * `ANG` - Netherlands Antillean Guilder
// * `TWD` - New Taiwan Dollar
// * `NZD` - New Zealand Dollar
// * `NIO` - Nicaraguan Córdoba
// * `NIC` - Nicaraguan Córdoba (1988–1991)
// * `NGN` - Nigerian Naira
// * `KPW` - North Korean Won
// * `NOK` - Norwegian Krone
// * `OMR` - Omani Rial
// * `PKR` - Pakistani Rupee
// * `XPD` - Palladium
// * `PAB` - Panamanian Balboa
// * `PGK` - Papua New Guinean Kina
// * `PYG` - Paraguayan Guarani
// * `PEI` - Peruvian Inti
// * `PEN` - Peruvian Sol
// * `PES` - Peruvian Sol (1863–1965)
// * `PHP` - Philippine Peso
// * `XPT` - Platinum
// * `PLN` - Polish Zloty
// * `PLZ` - Polish Zloty (1950–1995)
// * `PTE` - Portuguese Escudo
// * `GWE` - Portuguese Guinea Escudo
// * `QAR` - Qatari Rial
// * `XRE` - RINET Funds
// * `RHD` - Rhodesian Dollar
// * `RON` - Romanian Leu
// * `ROL` - Romanian Leu (1952–2006)
// * `RUB` - Russian Ruble
// * `RUR` - Russian Ruble (1991–1998)
// * `RWF` - Rwandan Franc
// * `SVC` - Salvadoran Colón
// * `WST` - Samoan Tala
// * `SAR` - Saudi Riyal
// * `RSD` - Serbian Dinar
// * `CSD` - Serbian Dinar (2002–2006)
// * `SCR` - Seychellois Rupee
// * `SLL` - Sierra Leonean Leone
// * `XAG` - Silver
// * `SGD` - Singapore Dollar
// * `SKK` - Slovak Koruna
// * `SIT` - Slovenian Tolar
// * `SBD` - Solomon Islands Dollar
// * `SOS` - Somali Shilling
// * `ZAR` - South African Rand
// * `ZAL` - South African Rand (financial)
// * `KRH` - South Korean Hwan (1953–1962)
// * `KRW` - South Korean Won
// * `KRO` - South Korean Won (1945–1953)
// * `SSP` - South Sudanese Pound
// * `SUR` - Soviet Rouble
// * `ESP` - Spanish Peseta
// * `ESA` - Spanish Peseta (A account)
// * `ESB` - Spanish Peseta (convertible account)
// * `XDR` - Special Drawing Rights
// * `LKR` - Sri Lankan Rupee
// * `SHP` - St. Helena Pound
// * `XSU` - Sucre
// * `SDD` - Sudanese Dinar (1992–2007)
// * `SDG` - Sudanese Pound
// * `SDP` - Sudanese Pound (1957–1998)
// * `SRD` - Surinamese Dollar
// * `SRG` - Surinamese Guilder
// * `SZL` - Swazi Lilangeni
// * `SEK` - Swedish Krona
// * `CHF` - Swiss Franc
// * `SYP` - Syrian Pound
// * `STN` - São Tomé & Príncipe Dobra
// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
// * `TVD` - TVD
// * `TJR` - Tajikistani Ruble
// * `TJS` - Tajikistani Somoni
// * `TZS` - Tanzanian Shilling
// * `XTS` - Testing Currency Code
// * `THB` - Thai Baht
// * `XXX` - The codes assigned for transactions where no currency is involved
// * `TPE` - Timorese Escudo
// * `TOP` - Tongan Paʻanga
// * `TTD` - Trinidad & Tobago Dollar
// * `TND` - Tunisian Dinar
// * `TRY` - Turkish Lira
// * `TRL` - Turkish Lira (1922–2005)
// * `TMT` - Turkmenistani Manat
// * `TMM` - Turkmenistani Manat (1993–2009)
// * `USD` - US Dollar
// * `USN` - US Dollar (Next day)
// * `USS` - US Dollar (Same day)
// * `UGX` - Ugandan Shilling
// * `UGS` - Ugandan Shilling (1966–1987)
// * `UAH` - Ukrainian Hryvnia
// * `UAK` - Ukrainian Karbovanets
// * `AED` - United Arab Emirates Dirham
// * `UYW` - Uruguayan Nominal Wage Index Unit
// * `UYU` - Uruguayan Peso
// * `UYP` - Uruguayan Peso (1975–1993)
// * `UYI` - Uruguayan Peso (Indexed Units)
// * `UZS` - Uzbekistani Som
// * `VUV` - Vanuatu Vatu
// * `VES` - Venezuelan Bolívar
// * `VEB` - Venezuelan Bolívar (1871–2008)
// * `VEF` - Venezuelan Bolívar (2008–2018)
// * `VND` - Vietnamese Dong
// * `VNN` - Vietnamese Dong (1978–1985)
// * `CHE` - WIR Euro
// * `CHW` - WIR Franc
// * `XOF` - West African CFA Franc
// * `YDD` - Yemeni Dinar
// * `YER` - Yemeni Rial
// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
// * `YUM` - Yugoslavian New Dinar (1994–2002)
// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
// * `ZWN` - ZWN
// * `ZRN` - Zairean New Zaire (1993–1998)
// * `ZRZ` - Zairean Zaire (1971–1993)
// * `ZMW` - Zambian Kwacha
// * `ZMK` - Zambian Kwacha (1968–2012)
// * `ZWD` - Zimbabwean Dollar (1980–2008)
// * `ZWR` - Zimbabwean Dollar (2008)
// * `ZWL` - Zimbabwean Dollar (2009)
type InvoiceRequestCurrency struct {
	typeName     string
	CurrencyEnum CurrencyEnum
	String       string
}

func NewInvoiceRequestCurrencyFromCurrencyEnum(value CurrencyEnum) *InvoiceRequestCurrency {
	return &InvoiceRequestCurrency{typeName: "currencyEnum", CurrencyEnum: value}
}

func NewInvoiceRequestCurrencyFromString(value string) *InvoiceRequestCurrency {
	return &InvoiceRequestCurrency{typeName: "string", String: value}
}

func (i *InvoiceRequestCurrency) UnmarshalJSON(data []byte) error {
	var valueCurrencyEnum CurrencyEnum
	if err := json.Unmarshal(data, &valueCurrencyEnum); err == nil {
		i.typeName = "currencyEnum"
		i.CurrencyEnum = valueCurrencyEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typeName = "string"
		i.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i InvoiceRequestCurrency) MarshalJSON() ([]byte, error) {
	switch i.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "currencyEnum":
		return json.Marshal(i.CurrencyEnum)
	case "string":
		return json.Marshal(i.String)
	}
}

type InvoiceRequestCurrencyVisitor interface {
	VisitCurrencyEnum(CurrencyEnum) error
	VisitString(string) error
}

func (i *InvoiceRequestCurrency) Accept(visitor InvoiceRequestCurrencyVisitor) error {
	switch i.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "currencyEnum":
		return visitor.VisitCurrencyEnum(i.CurrencyEnum)
	case "string":
		return visitor.VisitString(i.String)
	}
}

type InvoiceRequestPaymentsItem struct {
	typeName string
	String   string
	Payment  *Payment
}

func NewInvoiceRequestPaymentsItemFromString(value string) *InvoiceRequestPaymentsItem {
	return &InvoiceRequestPaymentsItem{typeName: "string", String: value}
}

func NewInvoiceRequestPaymentsItemFromPayment(value *Payment) *InvoiceRequestPaymentsItem {
	return &InvoiceRequestPaymentsItem{typeName: "payment", Payment: value}
}

func (i *InvoiceRequestPaymentsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typeName = "string"
		i.String = valueString
		return nil
	}
	valuePayment := new(Payment)
	if err := json.Unmarshal(data, &valuePayment); err == nil {
		i.typeName = "payment"
		i.Payment = valuePayment
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i InvoiceRequestPaymentsItem) MarshalJSON() ([]byte, error) {
	switch i.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return json.Marshal(i.String)
	case "payment":
		return json.Marshal(i.Payment)
	}
}

type InvoiceRequestPaymentsItemVisitor interface {
	VisitString(string) error
	VisitPayment(*Payment) error
}

func (i *InvoiceRequestPaymentsItem) Accept(visitor InvoiceRequestPaymentsItemVisitor) error {
	switch i.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return visitor.VisitString(i.String)
	case "payment":
		return visitor.VisitPayment(i.Payment)
	}
}

type InvoiceRequestPurchaseOrdersItem struct {
	typeName      string
	String        string
	PurchaseOrder *PurchaseOrder
}

func NewInvoiceRequestPurchaseOrdersItemFromString(value string) *InvoiceRequestPurchaseOrdersItem {
	return &InvoiceRequestPurchaseOrdersItem{typeName: "string", String: value}
}

func NewInvoiceRequestPurchaseOrdersItemFromPurchaseOrder(value *PurchaseOrder) *InvoiceRequestPurchaseOrdersItem {
	return &InvoiceRequestPurchaseOrdersItem{typeName: "purchaseOrder", PurchaseOrder: value}
}

func (i *InvoiceRequestPurchaseOrdersItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typeName = "string"
		i.String = valueString
		return nil
	}
	valuePurchaseOrder := new(PurchaseOrder)
	if err := json.Unmarshal(data, &valuePurchaseOrder); err == nil {
		i.typeName = "purchaseOrder"
		i.PurchaseOrder = valuePurchaseOrder
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i InvoiceRequestPurchaseOrdersItem) MarshalJSON() ([]byte, error) {
	switch i.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return json.Marshal(i.String)
	case "purchaseOrder":
		return json.Marshal(i.PurchaseOrder)
	}
}

type InvoiceRequestPurchaseOrdersItemVisitor interface {
	VisitString(string) error
	VisitPurchaseOrder(*PurchaseOrder) error
}

func (i *InvoiceRequestPurchaseOrdersItem) Accept(visitor InvoiceRequestPurchaseOrdersItemVisitor) error {
	switch i.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return visitor.VisitString(i.String)
	case "purchaseOrder":
		return visitor.VisitPurchaseOrder(i.PurchaseOrder)
	}
}

// The status of the invoice.
//
// * `PAID` - PAID
// * `DRAFT` - DRAFT
// * `SUBMITTED` - SUBMITTED
// * `PARTIALLY_PAID` - PARTIALLY_PAID
// * `OPEN` - OPEN
// * `VOID` - VOID
type InvoiceRequestStatus struct {
	typeName          string
	InvoiceStatusEnum InvoiceStatusEnum
	String            string
}

func NewInvoiceRequestStatusFromInvoiceStatusEnum(value InvoiceStatusEnum) *InvoiceRequestStatus {
	return &InvoiceRequestStatus{typeName: "invoiceStatusEnum", InvoiceStatusEnum: value}
}

func NewInvoiceRequestStatusFromString(value string) *InvoiceRequestStatus {
	return &InvoiceRequestStatus{typeName: "string", String: value}
}

func (i *InvoiceRequestStatus) UnmarshalJSON(data []byte) error {
	var valueInvoiceStatusEnum InvoiceStatusEnum
	if err := json.Unmarshal(data, &valueInvoiceStatusEnum); err == nil {
		i.typeName = "invoiceStatusEnum"
		i.InvoiceStatusEnum = valueInvoiceStatusEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typeName = "string"
		i.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i InvoiceRequestStatus) MarshalJSON() ([]byte, error) {
	switch i.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "invoiceStatusEnum":
		return json.Marshal(i.InvoiceStatusEnum)
	case "string":
		return json.Marshal(i.String)
	}
}

type InvoiceRequestStatusVisitor interface {
	VisitInvoiceStatusEnum(InvoiceStatusEnum) error
	VisitString(string) error
}

func (i *InvoiceRequestStatus) Accept(visitor InvoiceRequestStatusVisitor) error {
	switch i.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "invoiceStatusEnum":
		return visitor.VisitInvoiceStatusEnum(i.InvoiceStatusEnum)
	case "string":
		return visitor.VisitString(i.String)
	}
}

type InvoiceRequestTrackingCategoriesItem struct {
	typeName         string
	String           string
	TrackingCategory *TrackingCategory
}

func NewInvoiceRequestTrackingCategoriesItemFromString(value string) *InvoiceRequestTrackingCategoriesItem {
	return &InvoiceRequestTrackingCategoriesItem{typeName: "string", String: value}
}

func NewInvoiceRequestTrackingCategoriesItemFromTrackingCategory(value *TrackingCategory) *InvoiceRequestTrackingCategoriesItem {
	return &InvoiceRequestTrackingCategoriesItem{typeName: "trackingCategory", TrackingCategory: value}
}

func (i *InvoiceRequestTrackingCategoriesItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typeName = "string"
		i.String = valueString
		return nil
	}
	valueTrackingCategory := new(TrackingCategory)
	if err := json.Unmarshal(data, &valueTrackingCategory); err == nil {
		i.typeName = "trackingCategory"
		i.TrackingCategory = valueTrackingCategory
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i InvoiceRequestTrackingCategoriesItem) MarshalJSON() ([]byte, error) {
	switch i.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return json.Marshal(i.String)
	case "trackingCategory":
		return json.Marshal(i.TrackingCategory)
	}
}

type InvoiceRequestTrackingCategoriesItemVisitor interface {
	VisitString(string) error
	VisitTrackingCategory(*TrackingCategory) error
}

func (i *InvoiceRequestTrackingCategoriesItem) Accept(visitor InvoiceRequestTrackingCategoriesItemVisitor) error {
	switch i.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return visitor.VisitString(i.String)
	case "trackingCategory":
		return visitor.VisitTrackingCategory(i.TrackingCategory)
	}
}

// Whether the invoice is an accounts receivable or accounts payable. If `type` is `accounts_payable`, the invoice is a bill. If `type` is `accounts_receivable`, it is an invoice.
//
// * `ACCOUNTS_RECEIVABLE` - ACCOUNTS_RECEIVABLE
// * `ACCOUNTS_PAYABLE` - ACCOUNTS_PAYABLE
type InvoiceRequestType struct {
	typeName        string
	InvoiceTypeEnum InvoiceTypeEnum
	String          string
}

func NewInvoiceRequestTypeFromInvoiceTypeEnum(value InvoiceTypeEnum) *InvoiceRequestType {
	return &InvoiceRequestType{typeName: "invoiceTypeEnum", InvoiceTypeEnum: value}
}

func NewInvoiceRequestTypeFromString(value string) *InvoiceRequestType {
	return &InvoiceRequestType{typeName: "string", String: value}
}

func (i *InvoiceRequestType) UnmarshalJSON(data []byte) error {
	var valueInvoiceTypeEnum InvoiceTypeEnum
	if err := json.Unmarshal(data, &valueInvoiceTypeEnum); err == nil {
		i.typeName = "invoiceTypeEnum"
		i.InvoiceTypeEnum = valueInvoiceTypeEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typeName = "string"
		i.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i InvoiceRequestType) MarshalJSON() ([]byte, error) {
	switch i.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "invoiceTypeEnum":
		return json.Marshal(i.InvoiceTypeEnum)
	case "string":
		return json.Marshal(i.String)
	}
}

type InvoiceRequestTypeVisitor interface {
	VisitInvoiceTypeEnum(InvoiceTypeEnum) error
	VisitString(string) error
}

func (i *InvoiceRequestType) Accept(visitor InvoiceRequestTypeVisitor) error {
	switch i.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "invoiceTypeEnum":
		return visitor.VisitInvoiceTypeEnum(i.InvoiceTypeEnum)
	case "string":
		return visitor.VisitString(i.String)
	}
}

type InvoiceResponse struct {
	Model    *Invoice                    `json:"model,omitempty"`
	Warnings []*WarningValidationProblem `json:"warnings,omitempty"`
	Errors   []*ErrorValidationProblem   `json:"errors,omitempty"`
	Logs     []*DebugModeLog             `json:"logs,omitempty"`
}

// The status of the invoice.
//
// * `PAID` - PAID
// * `DRAFT` - DRAFT
// * `SUBMITTED` - SUBMITTED
// * `PARTIALLY_PAID` - PARTIALLY_PAID
// * `OPEN` - OPEN
// * `VOID` - VOID
type InvoiceStatus struct {
	typeName          string
	InvoiceStatusEnum InvoiceStatusEnum
	String            string
}

func NewInvoiceStatusFromInvoiceStatusEnum(value InvoiceStatusEnum) *InvoiceStatus {
	return &InvoiceStatus{typeName: "invoiceStatusEnum", InvoiceStatusEnum: value}
}

func NewInvoiceStatusFromString(value string) *InvoiceStatus {
	return &InvoiceStatus{typeName: "string", String: value}
}

func (i *InvoiceStatus) UnmarshalJSON(data []byte) error {
	var valueInvoiceStatusEnum InvoiceStatusEnum
	if err := json.Unmarshal(data, &valueInvoiceStatusEnum); err == nil {
		i.typeName = "invoiceStatusEnum"
		i.InvoiceStatusEnum = valueInvoiceStatusEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typeName = "string"
		i.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i InvoiceStatus) MarshalJSON() ([]byte, error) {
	switch i.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "invoiceStatusEnum":
		return json.Marshal(i.InvoiceStatusEnum)
	case "string":
		return json.Marshal(i.String)
	}
}

type InvoiceStatusVisitor interface {
	VisitInvoiceStatusEnum(InvoiceStatusEnum) error
	VisitString(string) error
}

func (i *InvoiceStatus) Accept(visitor InvoiceStatusVisitor) error {
	switch i.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "invoiceStatusEnum":
		return visitor.VisitInvoiceStatusEnum(i.InvoiceStatusEnum)
	case "string":
		return visitor.VisitString(i.String)
	}
}

// * `PAID` - PAID
// * `DRAFT` - DRAFT
// * `SUBMITTED` - SUBMITTED
// * `PARTIALLY_PAID` - PARTIALLY_PAID
// * `OPEN` - OPEN
// * `VOID` - VOID
type InvoiceStatusEnum uint

const (
	InvoiceStatusEnumPaid InvoiceStatusEnum = iota + 1
	InvoiceStatusEnumDraft
	InvoiceStatusEnumSubmitted
	InvoiceStatusEnumPartiallyPaid
	InvoiceStatusEnumOpen
	InvoiceStatusEnumVoid
)

func (i InvoiceStatusEnum) String() string {
	switch i {
	default:
		return strconv.Itoa(int(i))
	case InvoiceStatusEnumPaid:
		return "PAID"
	case InvoiceStatusEnumDraft:
		return "DRAFT"
	case InvoiceStatusEnumSubmitted:
		return "SUBMITTED"
	case InvoiceStatusEnumPartiallyPaid:
		return "PARTIALLY_PAID"
	case InvoiceStatusEnumOpen:
		return "OPEN"
	case InvoiceStatusEnumVoid:
		return "VOID"
	}
}

func (i InvoiceStatusEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", i.String())), nil
}

func (i *InvoiceStatusEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "PAID":
		value := InvoiceStatusEnumPaid
		*i = value
	case "DRAFT":
		value := InvoiceStatusEnumDraft
		*i = value
	case "SUBMITTED":
		value := InvoiceStatusEnumSubmitted
		*i = value
	case "PARTIALLY_PAID":
		value := InvoiceStatusEnumPartiallyPaid
		*i = value
	case "OPEN":
		value := InvoiceStatusEnumOpen
		*i = value
	case "VOID":
		value := InvoiceStatusEnumVoid
		*i = value
	}
	return nil
}

type InvoiceTrackingCategoriesItem struct {
	typeName         string
	String           string
	TrackingCategory *TrackingCategory
}

func NewInvoiceTrackingCategoriesItemFromString(value string) *InvoiceTrackingCategoriesItem {
	return &InvoiceTrackingCategoriesItem{typeName: "string", String: value}
}

func NewInvoiceTrackingCategoriesItemFromTrackingCategory(value *TrackingCategory) *InvoiceTrackingCategoriesItem {
	return &InvoiceTrackingCategoriesItem{typeName: "trackingCategory", TrackingCategory: value}
}

func (i *InvoiceTrackingCategoriesItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typeName = "string"
		i.String = valueString
		return nil
	}
	valueTrackingCategory := new(TrackingCategory)
	if err := json.Unmarshal(data, &valueTrackingCategory); err == nil {
		i.typeName = "trackingCategory"
		i.TrackingCategory = valueTrackingCategory
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i InvoiceTrackingCategoriesItem) MarshalJSON() ([]byte, error) {
	switch i.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return json.Marshal(i.String)
	case "trackingCategory":
		return json.Marshal(i.TrackingCategory)
	}
}

type InvoiceTrackingCategoriesItemVisitor interface {
	VisitString(string) error
	VisitTrackingCategory(*TrackingCategory) error
}

func (i *InvoiceTrackingCategoriesItem) Accept(visitor InvoiceTrackingCategoriesItemVisitor) error {
	switch i.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return visitor.VisitString(i.String)
	case "trackingCategory":
		return visitor.VisitTrackingCategory(i.TrackingCategory)
	}
}

// Whether the invoice is an accounts receivable or accounts payable. If `type` is `accounts_payable`, the invoice is a bill. If `type` is `accounts_receivable`, it is an invoice.
//
// * `ACCOUNTS_RECEIVABLE` - ACCOUNTS_RECEIVABLE
// * `ACCOUNTS_PAYABLE` - ACCOUNTS_PAYABLE
type InvoiceType struct {
	typeName        string
	InvoiceTypeEnum InvoiceTypeEnum
	String          string
}

func NewInvoiceTypeFromInvoiceTypeEnum(value InvoiceTypeEnum) *InvoiceType {
	return &InvoiceType{typeName: "invoiceTypeEnum", InvoiceTypeEnum: value}
}

func NewInvoiceTypeFromString(value string) *InvoiceType {
	return &InvoiceType{typeName: "string", String: value}
}

func (i *InvoiceType) UnmarshalJSON(data []byte) error {
	var valueInvoiceTypeEnum InvoiceTypeEnum
	if err := json.Unmarshal(data, &valueInvoiceTypeEnum); err == nil {
		i.typeName = "invoiceTypeEnum"
		i.InvoiceTypeEnum = valueInvoiceTypeEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typeName = "string"
		i.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i InvoiceType) MarshalJSON() ([]byte, error) {
	switch i.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "invoiceTypeEnum":
		return json.Marshal(i.InvoiceTypeEnum)
	case "string":
		return json.Marshal(i.String)
	}
}

type InvoiceTypeVisitor interface {
	VisitInvoiceTypeEnum(InvoiceTypeEnum) error
	VisitString(string) error
}

func (i *InvoiceType) Accept(visitor InvoiceTypeVisitor) error {
	switch i.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "invoiceTypeEnum":
		return visitor.VisitInvoiceTypeEnum(i.InvoiceTypeEnum)
	case "string":
		return visitor.VisitString(i.String)
	}
}

// * `ACCOUNTS_RECEIVABLE` - ACCOUNTS_RECEIVABLE
// * `ACCOUNTS_PAYABLE` - ACCOUNTS_PAYABLE
type InvoiceTypeEnum uint

const (
	InvoiceTypeEnumAccountsReceivable InvoiceTypeEnum = iota + 1
	InvoiceTypeEnumAccountsPayable
)

func (i InvoiceTypeEnum) String() string {
	switch i {
	default:
		return strconv.Itoa(int(i))
	case InvoiceTypeEnumAccountsReceivable:
		return "ACCOUNTS_RECEIVABLE"
	case InvoiceTypeEnumAccountsPayable:
		return "ACCOUNTS_PAYABLE"
	}
}

func (i InvoiceTypeEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", i.String())), nil
}

func (i *InvoiceTypeEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "ACCOUNTS_RECEIVABLE":
		value := InvoiceTypeEnumAccountsReceivable
		*i = value
	case "ACCOUNTS_PAYABLE":
		value := InvoiceTypeEnumAccountsPayable
		*i = value
	}
	return nil
}

type InvoicesListRequestExpand uint

const (
	InvoicesListRequestExpandAccountingPeriod InvoicesListRequestExpand = iota + 1
	InvoicesListRequestExpandAppliedPayments
	InvoicesListRequestExpandAppliedPaymentsAccountingPeriod
	InvoicesListRequestExpandAppliedPaymentsCompany
	InvoicesListRequestExpandAppliedPaymentsCompanyAccountingPeriod
	InvoicesListRequestExpandAppliedPaymentsContact
	InvoicesListRequestExpandAppliedPaymentsContactAccountingPeriod
	InvoicesListRequestExpandAppliedPaymentsContactCompany
	InvoicesListRequestExpandAppliedPaymentsContactCompanyAccountingPeriod
	InvoicesListRequestExpandAppliedPaymentsLineItems
	InvoicesListRequestExpandAppliedPaymentsLineItemsAccountingPeriod
	InvoicesListRequestExpandAppliedPaymentsLineItemsCompany
	InvoicesListRequestExpandAppliedPaymentsLineItemsCompanyAccountingPeriod
	InvoicesListRequestExpandAppliedPaymentsLineItemsContact
	InvoicesListRequestExpandAppliedPaymentsLineItemsContactAccountingPeriod
	InvoicesListRequestExpandAppliedPaymentsLineItemsContactCompany
	InvoicesListRequestExpandAppliedPaymentsLineItemsContactCompanyAccountingPeriod
	InvoicesListRequestExpandAppliedPaymentsLineItemsPurchaseOrders
	InvoicesListRequestExpandAppliedPaymentsLineItemsPurchaseOrdersAccountingPeriod
	InvoicesListRequestExpandAppliedPaymentsLineItemsPurchaseOrdersCompany
	InvoicesListRequestExpandAppliedPaymentsLineItemsPurchaseOrdersCompanyAccountingPeriod
	InvoicesListRequestExpandAppliedPaymentsLineItemsPurchaseOrdersContact
	InvoicesListRequestExpandAppliedPaymentsLineItemsPurchaseOrdersContactAccountingPeriod
	InvoicesListRequestExpandAppliedPaymentsLineItemsPurchaseOrdersContactCompany
	InvoicesListRequestExpandAppliedPaymentsLineItemsPurchaseOrdersContactCompanyAccountingPeriod
	InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategories
	InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesAccountingPeriod
	InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesCompany
	InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesCompanyAccountingPeriod
	InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContact
	InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContactAccountingPeriod
	InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContactCompany
	InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContactCompanyAccountingPeriod
	InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrders
	InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersAccountingPeriod
	InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersCompany
	InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod
	InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContact
	InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactAccountingPeriod
	InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactCompany
	InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod
	InvoicesListRequestExpandAppliedPaymentsPurchaseOrders
	InvoicesListRequestExpandAppliedPaymentsPurchaseOrdersAccountingPeriod
	InvoicesListRequestExpandAppliedPaymentsPurchaseOrdersCompany
	InvoicesListRequestExpandAppliedPaymentsPurchaseOrdersCompanyAccountingPeriod
	InvoicesListRequestExpandAppliedPaymentsPurchaseOrdersContact
	InvoicesListRequestExpandAppliedPaymentsPurchaseOrdersContactAccountingPeriod
	InvoicesListRequestExpandAppliedPaymentsPurchaseOrdersContactCompany
	InvoicesListRequestExpandAppliedPaymentsPurchaseOrdersContactCompanyAccountingPeriod
	InvoicesListRequestExpandAppliedPaymentsTrackingCategories
	InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesAccountingPeriod
	InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesCompany
	InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod
	InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesContact
	InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesContactAccountingPeriod
	InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesContactCompany
	InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesContactCompanyAccountingPeriod
	InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrders
	InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrdersAccountingPeriod
	InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrdersCompany
	InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod
	InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrdersContact
	InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrdersContactAccountingPeriod
	InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrdersContactCompany
	InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod
	InvoicesListRequestExpandCompany
	InvoicesListRequestExpandCompanyAccountingPeriod
	InvoicesListRequestExpandContact
	InvoicesListRequestExpandContactAccountingPeriod
	InvoicesListRequestExpandContactCompany
	InvoicesListRequestExpandContactCompanyAccountingPeriod
	InvoicesListRequestExpandLineItems
	InvoicesListRequestExpandLineItemsAccountingPeriod
	InvoicesListRequestExpandLineItemsCompany
	InvoicesListRequestExpandLineItemsCompanyAccountingPeriod
	InvoicesListRequestExpandLineItemsContact
	InvoicesListRequestExpandLineItemsContactAccountingPeriod
	InvoicesListRequestExpandLineItemsContactCompany
	InvoicesListRequestExpandLineItemsContactCompanyAccountingPeriod
	InvoicesListRequestExpandLineItemsPurchaseOrders
	InvoicesListRequestExpandLineItemsPurchaseOrdersAccountingPeriod
	InvoicesListRequestExpandLineItemsPurchaseOrdersCompany
	InvoicesListRequestExpandLineItemsPurchaseOrdersCompanyAccountingPeriod
	InvoicesListRequestExpandLineItemsPurchaseOrdersContact
	InvoicesListRequestExpandLineItemsPurchaseOrdersContactAccountingPeriod
	InvoicesListRequestExpandLineItemsPurchaseOrdersContactCompany
	InvoicesListRequestExpandLineItemsPurchaseOrdersContactCompanyAccountingPeriod
	InvoicesListRequestExpandLineItemsTrackingCategories
	InvoicesListRequestExpandLineItemsTrackingCategoriesAccountingPeriod
	InvoicesListRequestExpandLineItemsTrackingCategoriesCompany
	InvoicesListRequestExpandLineItemsTrackingCategoriesCompanyAccountingPeriod
	InvoicesListRequestExpandLineItemsTrackingCategoriesContact
	InvoicesListRequestExpandLineItemsTrackingCategoriesContactAccountingPeriod
	InvoicesListRequestExpandLineItemsTrackingCategoriesContactCompany
	InvoicesListRequestExpandLineItemsTrackingCategoriesContactCompanyAccountingPeriod
	InvoicesListRequestExpandLineItemsTrackingCategoriesPurchaseOrders
	InvoicesListRequestExpandLineItemsTrackingCategoriesPurchaseOrdersAccountingPeriod
	InvoicesListRequestExpandLineItemsTrackingCategoriesPurchaseOrdersCompany
	InvoicesListRequestExpandLineItemsTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod
	InvoicesListRequestExpandLineItemsTrackingCategoriesPurchaseOrdersContact
	InvoicesListRequestExpandLineItemsTrackingCategoriesPurchaseOrdersContactAccountingPeriod
	InvoicesListRequestExpandLineItemsTrackingCategoriesPurchaseOrdersContactCompany
	InvoicesListRequestExpandLineItemsTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod
	InvoicesListRequestExpandPayments
	InvoicesListRequestExpandPaymentsAccountingPeriod
	InvoicesListRequestExpandPaymentsAppliedPayments
	InvoicesListRequestExpandPaymentsAppliedPaymentsAccountingPeriod
	InvoicesListRequestExpandPaymentsAppliedPaymentsCompany
	InvoicesListRequestExpandPaymentsAppliedPaymentsCompanyAccountingPeriod
	InvoicesListRequestExpandPaymentsAppliedPaymentsContact
	InvoicesListRequestExpandPaymentsAppliedPaymentsContactAccountingPeriod
	InvoicesListRequestExpandPaymentsAppliedPaymentsContactCompany
	InvoicesListRequestExpandPaymentsAppliedPaymentsContactCompanyAccountingPeriod
	InvoicesListRequestExpandPaymentsAppliedPaymentsLineItems
	InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsAccountingPeriod
	InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsCompany
	InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsCompanyAccountingPeriod
	InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsContact
	InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsContactAccountingPeriod
	InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsContactCompany
	InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsContactCompanyAccountingPeriod
	InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrders
	InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrdersAccountingPeriod
	InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrdersCompany
	InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrdersCompanyAccountingPeriod
	InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrdersContact
	InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrdersContactAccountingPeriod
	InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrdersContactCompany
	InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrdersContactCompanyAccountingPeriod
	InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategories
	InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesAccountingPeriod
	InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesCompany
	InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesCompanyAccountingPeriod
	InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContact
	InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContactAccountingPeriod
	InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContactCompany
	InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContactCompanyAccountingPeriod
	InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrders
	InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersAccountingPeriod
	InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersCompany
	InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod
	InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContact
	InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactAccountingPeriod
	InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactCompany
	InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod
	InvoicesListRequestExpandPaymentsAppliedPaymentsPurchaseOrders
	InvoicesListRequestExpandPaymentsAppliedPaymentsPurchaseOrdersAccountingPeriod
	InvoicesListRequestExpandPaymentsAppliedPaymentsPurchaseOrdersCompany
	InvoicesListRequestExpandPaymentsAppliedPaymentsPurchaseOrdersCompanyAccountingPeriod
	InvoicesListRequestExpandPaymentsAppliedPaymentsPurchaseOrdersContact
	InvoicesListRequestExpandPaymentsAppliedPaymentsPurchaseOrdersContactAccountingPeriod
	InvoicesListRequestExpandPaymentsAppliedPaymentsPurchaseOrdersContactCompany
	InvoicesListRequestExpandPaymentsAppliedPaymentsPurchaseOrdersContactCompanyAccountingPeriod
	InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategories
	InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesAccountingPeriod
	InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesCompany
	InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod
	InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContact
	InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContactAccountingPeriod
	InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContactCompany
	InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContactCompanyAccountingPeriod
	InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrders
	InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrdersAccountingPeriod
	InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrdersCompany
	InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod
	InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrdersContact
	InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrdersContactAccountingPeriod
	InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrdersContactCompany
	InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod
	InvoicesListRequestExpandPaymentsCompany
	InvoicesListRequestExpandPaymentsCompanyAccountingPeriod
	InvoicesListRequestExpandPaymentsContact
	InvoicesListRequestExpandPaymentsContactAccountingPeriod
	InvoicesListRequestExpandPaymentsContactCompany
	InvoicesListRequestExpandPaymentsContactCompanyAccountingPeriod
	InvoicesListRequestExpandPaymentsLineItems
	InvoicesListRequestExpandPaymentsLineItemsAccountingPeriod
	InvoicesListRequestExpandPaymentsLineItemsCompany
	InvoicesListRequestExpandPaymentsLineItemsCompanyAccountingPeriod
	InvoicesListRequestExpandPaymentsLineItemsContact
	InvoicesListRequestExpandPaymentsLineItemsContactAccountingPeriod
	InvoicesListRequestExpandPaymentsLineItemsContactCompany
	InvoicesListRequestExpandPaymentsLineItemsContactCompanyAccountingPeriod
	InvoicesListRequestExpandPaymentsLineItemsPurchaseOrders
	InvoicesListRequestExpandPaymentsLineItemsPurchaseOrdersAccountingPeriod
	InvoicesListRequestExpandPaymentsLineItemsPurchaseOrdersCompany
	InvoicesListRequestExpandPaymentsLineItemsPurchaseOrdersCompanyAccountingPeriod
	InvoicesListRequestExpandPaymentsLineItemsPurchaseOrdersContact
	InvoicesListRequestExpandPaymentsLineItemsPurchaseOrdersContactAccountingPeriod
	InvoicesListRequestExpandPaymentsLineItemsPurchaseOrdersContactCompany
	InvoicesListRequestExpandPaymentsLineItemsPurchaseOrdersContactCompanyAccountingPeriod
	InvoicesListRequestExpandPaymentsLineItemsTrackingCategories
	InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesAccountingPeriod
	InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesCompany
	InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesCompanyAccountingPeriod
	InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesContact
	InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesContactAccountingPeriod
	InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesContactCompany
	InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesContactCompanyAccountingPeriod
	InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrders
	InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrdersAccountingPeriod
	InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrdersCompany
	InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod
	InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrdersContact
	InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactAccountingPeriod
	InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactCompany
	InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod
	InvoicesListRequestExpandPaymentsPurchaseOrders
	InvoicesListRequestExpandPaymentsPurchaseOrdersAccountingPeriod
	InvoicesListRequestExpandPaymentsPurchaseOrdersCompany
	InvoicesListRequestExpandPaymentsPurchaseOrdersCompanyAccountingPeriod
	InvoicesListRequestExpandPaymentsPurchaseOrdersContact
	InvoicesListRequestExpandPaymentsPurchaseOrdersContactAccountingPeriod
	InvoicesListRequestExpandPaymentsPurchaseOrdersContactCompany
	InvoicesListRequestExpandPaymentsPurchaseOrdersContactCompanyAccountingPeriod
	InvoicesListRequestExpandPaymentsTrackingCategories
	InvoicesListRequestExpandPaymentsTrackingCategoriesAccountingPeriod
	InvoicesListRequestExpandPaymentsTrackingCategoriesCompany
	InvoicesListRequestExpandPaymentsTrackingCategoriesCompanyAccountingPeriod
	InvoicesListRequestExpandPaymentsTrackingCategoriesContact
	InvoicesListRequestExpandPaymentsTrackingCategoriesContactAccountingPeriod
	InvoicesListRequestExpandPaymentsTrackingCategoriesContactCompany
	InvoicesListRequestExpandPaymentsTrackingCategoriesContactCompanyAccountingPeriod
	InvoicesListRequestExpandPaymentsTrackingCategoriesPurchaseOrders
	InvoicesListRequestExpandPaymentsTrackingCategoriesPurchaseOrdersAccountingPeriod
	InvoicesListRequestExpandPaymentsTrackingCategoriesPurchaseOrdersCompany
	InvoicesListRequestExpandPaymentsTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod
	InvoicesListRequestExpandPaymentsTrackingCategoriesPurchaseOrdersContact
	InvoicesListRequestExpandPaymentsTrackingCategoriesPurchaseOrdersContactAccountingPeriod
	InvoicesListRequestExpandPaymentsTrackingCategoriesPurchaseOrdersContactCompany
	InvoicesListRequestExpandPaymentsTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod
	InvoicesListRequestExpandPurchaseOrders
	InvoicesListRequestExpandPurchaseOrdersAccountingPeriod
	InvoicesListRequestExpandPurchaseOrdersCompany
	InvoicesListRequestExpandPurchaseOrdersCompanyAccountingPeriod
	InvoicesListRequestExpandPurchaseOrdersContact
	InvoicesListRequestExpandPurchaseOrdersContactAccountingPeriod
	InvoicesListRequestExpandPurchaseOrdersContactCompany
	InvoicesListRequestExpandPurchaseOrdersContactCompanyAccountingPeriod
	InvoicesListRequestExpandTrackingCategories
	InvoicesListRequestExpandTrackingCategoriesAccountingPeriod
	InvoicesListRequestExpandTrackingCategoriesCompany
	InvoicesListRequestExpandTrackingCategoriesCompanyAccountingPeriod
	InvoicesListRequestExpandTrackingCategoriesContact
	InvoicesListRequestExpandTrackingCategoriesContactAccountingPeriod
	InvoicesListRequestExpandTrackingCategoriesContactCompany
	InvoicesListRequestExpandTrackingCategoriesContactCompanyAccountingPeriod
	InvoicesListRequestExpandTrackingCategoriesPurchaseOrders
	InvoicesListRequestExpandTrackingCategoriesPurchaseOrdersAccountingPeriod
	InvoicesListRequestExpandTrackingCategoriesPurchaseOrdersCompany
	InvoicesListRequestExpandTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod
	InvoicesListRequestExpandTrackingCategoriesPurchaseOrdersContact
	InvoicesListRequestExpandTrackingCategoriesPurchaseOrdersContactAccountingPeriod
	InvoicesListRequestExpandTrackingCategoriesPurchaseOrdersContactCompany
	InvoicesListRequestExpandTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod
)

func (i InvoicesListRequestExpand) String() string {
	switch i {
	default:
		return strconv.Itoa(int(i))
	case InvoicesListRequestExpandAccountingPeriod:
		return "accounting_period"
	case InvoicesListRequestExpandAppliedPayments:
		return "applied_payments"
	case InvoicesListRequestExpandAppliedPaymentsAccountingPeriod:
		return "applied_payments,accounting_period"
	case InvoicesListRequestExpandAppliedPaymentsCompany:
		return "applied_payments,company"
	case InvoicesListRequestExpandAppliedPaymentsCompanyAccountingPeriod:
		return "applied_payments,company,accounting_period"
	case InvoicesListRequestExpandAppliedPaymentsContact:
		return "applied_payments,contact"
	case InvoicesListRequestExpandAppliedPaymentsContactAccountingPeriod:
		return "applied_payments,contact,accounting_period"
	case InvoicesListRequestExpandAppliedPaymentsContactCompany:
		return "applied_payments,contact,company"
	case InvoicesListRequestExpandAppliedPaymentsContactCompanyAccountingPeriod:
		return "applied_payments,contact,company,accounting_period"
	case InvoicesListRequestExpandAppliedPaymentsLineItems:
		return "applied_payments,line_items"
	case InvoicesListRequestExpandAppliedPaymentsLineItemsAccountingPeriod:
		return "applied_payments,line_items,accounting_period"
	case InvoicesListRequestExpandAppliedPaymentsLineItemsCompany:
		return "applied_payments,line_items,company"
	case InvoicesListRequestExpandAppliedPaymentsLineItemsCompanyAccountingPeriod:
		return "applied_payments,line_items,company,accounting_period"
	case InvoicesListRequestExpandAppliedPaymentsLineItemsContact:
		return "applied_payments,line_items,contact"
	case InvoicesListRequestExpandAppliedPaymentsLineItemsContactAccountingPeriod:
		return "applied_payments,line_items,contact,accounting_period"
	case InvoicesListRequestExpandAppliedPaymentsLineItemsContactCompany:
		return "applied_payments,line_items,contact,company"
	case InvoicesListRequestExpandAppliedPaymentsLineItemsContactCompanyAccountingPeriod:
		return "applied_payments,line_items,contact,company,accounting_period"
	case InvoicesListRequestExpandAppliedPaymentsLineItemsPurchaseOrders:
		return "applied_payments,line_items,purchase_orders"
	case InvoicesListRequestExpandAppliedPaymentsLineItemsPurchaseOrdersAccountingPeriod:
		return "applied_payments,line_items,purchase_orders,accounting_period"
	case InvoicesListRequestExpandAppliedPaymentsLineItemsPurchaseOrdersCompany:
		return "applied_payments,line_items,purchase_orders,company"
	case InvoicesListRequestExpandAppliedPaymentsLineItemsPurchaseOrdersCompanyAccountingPeriod:
		return "applied_payments,line_items,purchase_orders,company,accounting_period"
	case InvoicesListRequestExpandAppliedPaymentsLineItemsPurchaseOrdersContact:
		return "applied_payments,line_items,purchase_orders,contact"
	case InvoicesListRequestExpandAppliedPaymentsLineItemsPurchaseOrdersContactAccountingPeriod:
		return "applied_payments,line_items,purchase_orders,contact,accounting_period"
	case InvoicesListRequestExpandAppliedPaymentsLineItemsPurchaseOrdersContactCompany:
		return "applied_payments,line_items,purchase_orders,contact,company"
	case InvoicesListRequestExpandAppliedPaymentsLineItemsPurchaseOrdersContactCompanyAccountingPeriod:
		return "applied_payments,line_items,purchase_orders,contact,company,accounting_period"
	case InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategories:
		return "applied_payments,line_items,tracking_categories"
	case InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesAccountingPeriod:
		return "applied_payments,line_items,tracking_categories,accounting_period"
	case InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesCompany:
		return "applied_payments,line_items,tracking_categories,company"
	case InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesCompanyAccountingPeriod:
		return "applied_payments,line_items,tracking_categories,company,accounting_period"
	case InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContact:
		return "applied_payments,line_items,tracking_categories,contact"
	case InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContactAccountingPeriod:
		return "applied_payments,line_items,tracking_categories,contact,accounting_period"
	case InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContactCompany:
		return "applied_payments,line_items,tracking_categories,contact,company"
	case InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContactCompanyAccountingPeriod:
		return "applied_payments,line_items,tracking_categories,contact,company,accounting_period"
	case InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrders:
		return "applied_payments,line_items,tracking_categories,purchase_orders"
	case InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersAccountingPeriod:
		return "applied_payments,line_items,tracking_categories,purchase_orders,accounting_period"
	case InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersCompany:
		return "applied_payments,line_items,tracking_categories,purchase_orders,company"
	case InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod:
		return "applied_payments,line_items,tracking_categories,purchase_orders,company,accounting_period"
	case InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContact:
		return "applied_payments,line_items,tracking_categories,purchase_orders,contact"
	case InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactAccountingPeriod:
		return "applied_payments,line_items,tracking_categories,purchase_orders,contact,accounting_period"
	case InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactCompany:
		return "applied_payments,line_items,tracking_categories,purchase_orders,contact,company"
	case InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod:
		return "applied_payments,line_items,tracking_categories,purchase_orders,contact,company,accounting_period"
	case InvoicesListRequestExpandAppliedPaymentsPurchaseOrders:
		return "applied_payments,purchase_orders"
	case InvoicesListRequestExpandAppliedPaymentsPurchaseOrdersAccountingPeriod:
		return "applied_payments,purchase_orders,accounting_period"
	case InvoicesListRequestExpandAppliedPaymentsPurchaseOrdersCompany:
		return "applied_payments,purchase_orders,company"
	case InvoicesListRequestExpandAppliedPaymentsPurchaseOrdersCompanyAccountingPeriod:
		return "applied_payments,purchase_orders,company,accounting_period"
	case InvoicesListRequestExpandAppliedPaymentsPurchaseOrdersContact:
		return "applied_payments,purchase_orders,contact"
	case InvoicesListRequestExpandAppliedPaymentsPurchaseOrdersContactAccountingPeriod:
		return "applied_payments,purchase_orders,contact,accounting_period"
	case InvoicesListRequestExpandAppliedPaymentsPurchaseOrdersContactCompany:
		return "applied_payments,purchase_orders,contact,company"
	case InvoicesListRequestExpandAppliedPaymentsPurchaseOrdersContactCompanyAccountingPeriod:
		return "applied_payments,purchase_orders,contact,company,accounting_period"
	case InvoicesListRequestExpandAppliedPaymentsTrackingCategories:
		return "applied_payments,tracking_categories"
	case InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesAccountingPeriod:
		return "applied_payments,tracking_categories,accounting_period"
	case InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesCompany:
		return "applied_payments,tracking_categories,company"
	case InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod:
		return "applied_payments,tracking_categories,company,accounting_period"
	case InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesContact:
		return "applied_payments,tracking_categories,contact"
	case InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesContactAccountingPeriod:
		return "applied_payments,tracking_categories,contact,accounting_period"
	case InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesContactCompany:
		return "applied_payments,tracking_categories,contact,company"
	case InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesContactCompanyAccountingPeriod:
		return "applied_payments,tracking_categories,contact,company,accounting_period"
	case InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrders:
		return "applied_payments,tracking_categories,purchase_orders"
	case InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrdersAccountingPeriod:
		return "applied_payments,tracking_categories,purchase_orders,accounting_period"
	case InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrdersCompany:
		return "applied_payments,tracking_categories,purchase_orders,company"
	case InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod:
		return "applied_payments,tracking_categories,purchase_orders,company,accounting_period"
	case InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrdersContact:
		return "applied_payments,tracking_categories,purchase_orders,contact"
	case InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrdersContactAccountingPeriod:
		return "applied_payments,tracking_categories,purchase_orders,contact,accounting_period"
	case InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrdersContactCompany:
		return "applied_payments,tracking_categories,purchase_orders,contact,company"
	case InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod:
		return "applied_payments,tracking_categories,purchase_orders,contact,company,accounting_period"
	case InvoicesListRequestExpandCompany:
		return "company"
	case InvoicesListRequestExpandCompanyAccountingPeriod:
		return "company,accounting_period"
	case InvoicesListRequestExpandContact:
		return "contact"
	case InvoicesListRequestExpandContactAccountingPeriod:
		return "contact,accounting_period"
	case InvoicesListRequestExpandContactCompany:
		return "contact,company"
	case InvoicesListRequestExpandContactCompanyAccountingPeriod:
		return "contact,company,accounting_period"
	case InvoicesListRequestExpandLineItems:
		return "line_items"
	case InvoicesListRequestExpandLineItemsAccountingPeriod:
		return "line_items,accounting_period"
	case InvoicesListRequestExpandLineItemsCompany:
		return "line_items,company"
	case InvoicesListRequestExpandLineItemsCompanyAccountingPeriod:
		return "line_items,company,accounting_period"
	case InvoicesListRequestExpandLineItemsContact:
		return "line_items,contact"
	case InvoicesListRequestExpandLineItemsContactAccountingPeriod:
		return "line_items,contact,accounting_period"
	case InvoicesListRequestExpandLineItemsContactCompany:
		return "line_items,contact,company"
	case InvoicesListRequestExpandLineItemsContactCompanyAccountingPeriod:
		return "line_items,contact,company,accounting_period"
	case InvoicesListRequestExpandLineItemsPurchaseOrders:
		return "line_items,purchase_orders"
	case InvoicesListRequestExpandLineItemsPurchaseOrdersAccountingPeriod:
		return "line_items,purchase_orders,accounting_period"
	case InvoicesListRequestExpandLineItemsPurchaseOrdersCompany:
		return "line_items,purchase_orders,company"
	case InvoicesListRequestExpandLineItemsPurchaseOrdersCompanyAccountingPeriod:
		return "line_items,purchase_orders,company,accounting_period"
	case InvoicesListRequestExpandLineItemsPurchaseOrdersContact:
		return "line_items,purchase_orders,contact"
	case InvoicesListRequestExpandLineItemsPurchaseOrdersContactAccountingPeriod:
		return "line_items,purchase_orders,contact,accounting_period"
	case InvoicesListRequestExpandLineItemsPurchaseOrdersContactCompany:
		return "line_items,purchase_orders,contact,company"
	case InvoicesListRequestExpandLineItemsPurchaseOrdersContactCompanyAccountingPeriod:
		return "line_items,purchase_orders,contact,company,accounting_period"
	case InvoicesListRequestExpandLineItemsTrackingCategories:
		return "line_items,tracking_categories"
	case InvoicesListRequestExpandLineItemsTrackingCategoriesAccountingPeriod:
		return "line_items,tracking_categories,accounting_period"
	case InvoicesListRequestExpandLineItemsTrackingCategoriesCompany:
		return "line_items,tracking_categories,company"
	case InvoicesListRequestExpandLineItemsTrackingCategoriesCompanyAccountingPeriod:
		return "line_items,tracking_categories,company,accounting_period"
	case InvoicesListRequestExpandLineItemsTrackingCategoriesContact:
		return "line_items,tracking_categories,contact"
	case InvoicesListRequestExpandLineItemsTrackingCategoriesContactAccountingPeriod:
		return "line_items,tracking_categories,contact,accounting_period"
	case InvoicesListRequestExpandLineItemsTrackingCategoriesContactCompany:
		return "line_items,tracking_categories,contact,company"
	case InvoicesListRequestExpandLineItemsTrackingCategoriesContactCompanyAccountingPeriod:
		return "line_items,tracking_categories,contact,company,accounting_period"
	case InvoicesListRequestExpandLineItemsTrackingCategoriesPurchaseOrders:
		return "line_items,tracking_categories,purchase_orders"
	case InvoicesListRequestExpandLineItemsTrackingCategoriesPurchaseOrdersAccountingPeriod:
		return "line_items,tracking_categories,purchase_orders,accounting_period"
	case InvoicesListRequestExpandLineItemsTrackingCategoriesPurchaseOrdersCompany:
		return "line_items,tracking_categories,purchase_orders,company"
	case InvoicesListRequestExpandLineItemsTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod:
		return "line_items,tracking_categories,purchase_orders,company,accounting_period"
	case InvoicesListRequestExpandLineItemsTrackingCategoriesPurchaseOrdersContact:
		return "line_items,tracking_categories,purchase_orders,contact"
	case InvoicesListRequestExpandLineItemsTrackingCategoriesPurchaseOrdersContactAccountingPeriod:
		return "line_items,tracking_categories,purchase_orders,contact,accounting_period"
	case InvoicesListRequestExpandLineItemsTrackingCategoriesPurchaseOrdersContactCompany:
		return "line_items,tracking_categories,purchase_orders,contact,company"
	case InvoicesListRequestExpandLineItemsTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod:
		return "line_items,tracking_categories,purchase_orders,contact,company,accounting_period"
	case InvoicesListRequestExpandPayments:
		return "payments"
	case InvoicesListRequestExpandPaymentsAccountingPeriod:
		return "payments,accounting_period"
	case InvoicesListRequestExpandPaymentsAppliedPayments:
		return "payments,applied_payments"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsAccountingPeriod:
		return "payments,applied_payments,accounting_period"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsCompany:
		return "payments,applied_payments,company"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsCompanyAccountingPeriod:
		return "payments,applied_payments,company,accounting_period"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsContact:
		return "payments,applied_payments,contact"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsContactAccountingPeriod:
		return "payments,applied_payments,contact,accounting_period"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsContactCompany:
		return "payments,applied_payments,contact,company"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsContactCompanyAccountingPeriod:
		return "payments,applied_payments,contact,company,accounting_period"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsLineItems:
		return "payments,applied_payments,line_items"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsAccountingPeriod:
		return "payments,applied_payments,line_items,accounting_period"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsCompany:
		return "payments,applied_payments,line_items,company"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsCompanyAccountingPeriod:
		return "payments,applied_payments,line_items,company,accounting_period"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsContact:
		return "payments,applied_payments,line_items,contact"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsContactAccountingPeriod:
		return "payments,applied_payments,line_items,contact,accounting_period"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsContactCompany:
		return "payments,applied_payments,line_items,contact,company"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsContactCompanyAccountingPeriod:
		return "payments,applied_payments,line_items,contact,company,accounting_period"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrders:
		return "payments,applied_payments,line_items,purchase_orders"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrdersAccountingPeriod:
		return "payments,applied_payments,line_items,purchase_orders,accounting_period"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrdersCompany:
		return "payments,applied_payments,line_items,purchase_orders,company"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrdersCompanyAccountingPeriod:
		return "payments,applied_payments,line_items,purchase_orders,company,accounting_period"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrdersContact:
		return "payments,applied_payments,line_items,purchase_orders,contact"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrdersContactAccountingPeriod:
		return "payments,applied_payments,line_items,purchase_orders,contact,accounting_period"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrdersContactCompany:
		return "payments,applied_payments,line_items,purchase_orders,contact,company"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrdersContactCompanyAccountingPeriod:
		return "payments,applied_payments,line_items,purchase_orders,contact,company,accounting_period"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategories:
		return "payments,applied_payments,line_items,tracking_categories"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesAccountingPeriod:
		return "payments,applied_payments,line_items,tracking_categories,accounting_period"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesCompany:
		return "payments,applied_payments,line_items,tracking_categories,company"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesCompanyAccountingPeriod:
		return "payments,applied_payments,line_items,tracking_categories,company,accounting_period"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContact:
		return "payments,applied_payments,line_items,tracking_categories,contact"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContactAccountingPeriod:
		return "payments,applied_payments,line_items,tracking_categories,contact,accounting_period"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContactCompany:
		return "payments,applied_payments,line_items,tracking_categories,contact,company"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContactCompanyAccountingPeriod:
		return "payments,applied_payments,line_items,tracking_categories,contact,company,accounting_period"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrders:
		return "payments,applied_payments,line_items,tracking_categories,purchase_orders"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersAccountingPeriod:
		return "payments,applied_payments,line_items,tracking_categories,purchase_orders,accounting_period"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersCompany:
		return "payments,applied_payments,line_items,tracking_categories,purchase_orders,company"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod:
		return "payments,applied_payments,line_items,tracking_categories,purchase_orders,company,accounting_period"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContact:
		return "payments,applied_payments,line_items,tracking_categories,purchase_orders,contact"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactAccountingPeriod:
		return "payments,applied_payments,line_items,tracking_categories,purchase_orders,contact,accounting_period"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactCompany:
		return "payments,applied_payments,line_items,tracking_categories,purchase_orders,contact,company"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod:
		return "payments,applied_payments,line_items,tracking_categories,purchase_orders,contact,company,accounting_period"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsPurchaseOrders:
		return "payments,applied_payments,purchase_orders"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsPurchaseOrdersAccountingPeriod:
		return "payments,applied_payments,purchase_orders,accounting_period"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsPurchaseOrdersCompany:
		return "payments,applied_payments,purchase_orders,company"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsPurchaseOrdersCompanyAccountingPeriod:
		return "payments,applied_payments,purchase_orders,company,accounting_period"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsPurchaseOrdersContact:
		return "payments,applied_payments,purchase_orders,contact"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsPurchaseOrdersContactAccountingPeriod:
		return "payments,applied_payments,purchase_orders,contact,accounting_period"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsPurchaseOrdersContactCompany:
		return "payments,applied_payments,purchase_orders,contact,company"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsPurchaseOrdersContactCompanyAccountingPeriod:
		return "payments,applied_payments,purchase_orders,contact,company,accounting_period"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategories:
		return "payments,applied_payments,tracking_categories"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesAccountingPeriod:
		return "payments,applied_payments,tracking_categories,accounting_period"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesCompany:
		return "payments,applied_payments,tracking_categories,company"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod:
		return "payments,applied_payments,tracking_categories,company,accounting_period"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContact:
		return "payments,applied_payments,tracking_categories,contact"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContactAccountingPeriod:
		return "payments,applied_payments,tracking_categories,contact,accounting_period"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContactCompany:
		return "payments,applied_payments,tracking_categories,contact,company"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContactCompanyAccountingPeriod:
		return "payments,applied_payments,tracking_categories,contact,company,accounting_period"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrders:
		return "payments,applied_payments,tracking_categories,purchase_orders"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrdersAccountingPeriod:
		return "payments,applied_payments,tracking_categories,purchase_orders,accounting_period"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrdersCompany:
		return "payments,applied_payments,tracking_categories,purchase_orders,company"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod:
		return "payments,applied_payments,tracking_categories,purchase_orders,company,accounting_period"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrdersContact:
		return "payments,applied_payments,tracking_categories,purchase_orders,contact"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrdersContactAccountingPeriod:
		return "payments,applied_payments,tracking_categories,purchase_orders,contact,accounting_period"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrdersContactCompany:
		return "payments,applied_payments,tracking_categories,purchase_orders,contact,company"
	case InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod:
		return "payments,applied_payments,tracking_categories,purchase_orders,contact,company,accounting_period"
	case InvoicesListRequestExpandPaymentsCompany:
		return "payments,company"
	case InvoicesListRequestExpandPaymentsCompanyAccountingPeriod:
		return "payments,company,accounting_period"
	case InvoicesListRequestExpandPaymentsContact:
		return "payments,contact"
	case InvoicesListRequestExpandPaymentsContactAccountingPeriod:
		return "payments,contact,accounting_period"
	case InvoicesListRequestExpandPaymentsContactCompany:
		return "payments,contact,company"
	case InvoicesListRequestExpandPaymentsContactCompanyAccountingPeriod:
		return "payments,contact,company,accounting_period"
	case InvoicesListRequestExpandPaymentsLineItems:
		return "payments,line_items"
	case InvoicesListRequestExpandPaymentsLineItemsAccountingPeriod:
		return "payments,line_items,accounting_period"
	case InvoicesListRequestExpandPaymentsLineItemsCompany:
		return "payments,line_items,company"
	case InvoicesListRequestExpandPaymentsLineItemsCompanyAccountingPeriod:
		return "payments,line_items,company,accounting_period"
	case InvoicesListRequestExpandPaymentsLineItemsContact:
		return "payments,line_items,contact"
	case InvoicesListRequestExpandPaymentsLineItemsContactAccountingPeriod:
		return "payments,line_items,contact,accounting_period"
	case InvoicesListRequestExpandPaymentsLineItemsContactCompany:
		return "payments,line_items,contact,company"
	case InvoicesListRequestExpandPaymentsLineItemsContactCompanyAccountingPeriod:
		return "payments,line_items,contact,company,accounting_period"
	case InvoicesListRequestExpandPaymentsLineItemsPurchaseOrders:
		return "payments,line_items,purchase_orders"
	case InvoicesListRequestExpandPaymentsLineItemsPurchaseOrdersAccountingPeriod:
		return "payments,line_items,purchase_orders,accounting_period"
	case InvoicesListRequestExpandPaymentsLineItemsPurchaseOrdersCompany:
		return "payments,line_items,purchase_orders,company"
	case InvoicesListRequestExpandPaymentsLineItemsPurchaseOrdersCompanyAccountingPeriod:
		return "payments,line_items,purchase_orders,company,accounting_period"
	case InvoicesListRequestExpandPaymentsLineItemsPurchaseOrdersContact:
		return "payments,line_items,purchase_orders,contact"
	case InvoicesListRequestExpandPaymentsLineItemsPurchaseOrdersContactAccountingPeriod:
		return "payments,line_items,purchase_orders,contact,accounting_period"
	case InvoicesListRequestExpandPaymentsLineItemsPurchaseOrdersContactCompany:
		return "payments,line_items,purchase_orders,contact,company"
	case InvoicesListRequestExpandPaymentsLineItemsPurchaseOrdersContactCompanyAccountingPeriod:
		return "payments,line_items,purchase_orders,contact,company,accounting_period"
	case InvoicesListRequestExpandPaymentsLineItemsTrackingCategories:
		return "payments,line_items,tracking_categories"
	case InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesAccountingPeriod:
		return "payments,line_items,tracking_categories,accounting_period"
	case InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesCompany:
		return "payments,line_items,tracking_categories,company"
	case InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesCompanyAccountingPeriod:
		return "payments,line_items,tracking_categories,company,accounting_period"
	case InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesContact:
		return "payments,line_items,tracking_categories,contact"
	case InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesContactAccountingPeriod:
		return "payments,line_items,tracking_categories,contact,accounting_period"
	case InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesContactCompany:
		return "payments,line_items,tracking_categories,contact,company"
	case InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesContactCompanyAccountingPeriod:
		return "payments,line_items,tracking_categories,contact,company,accounting_period"
	case InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrders:
		return "payments,line_items,tracking_categories,purchase_orders"
	case InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrdersAccountingPeriod:
		return "payments,line_items,tracking_categories,purchase_orders,accounting_period"
	case InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrdersCompany:
		return "payments,line_items,tracking_categories,purchase_orders,company"
	case InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod:
		return "payments,line_items,tracking_categories,purchase_orders,company,accounting_period"
	case InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrdersContact:
		return "payments,line_items,tracking_categories,purchase_orders,contact"
	case InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactAccountingPeriod:
		return "payments,line_items,tracking_categories,purchase_orders,contact,accounting_period"
	case InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactCompany:
		return "payments,line_items,tracking_categories,purchase_orders,contact,company"
	case InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod:
		return "payments,line_items,tracking_categories,purchase_orders,contact,company,accounting_period"
	case InvoicesListRequestExpandPaymentsPurchaseOrders:
		return "payments,purchase_orders"
	case InvoicesListRequestExpandPaymentsPurchaseOrdersAccountingPeriod:
		return "payments,purchase_orders,accounting_period"
	case InvoicesListRequestExpandPaymentsPurchaseOrdersCompany:
		return "payments,purchase_orders,company"
	case InvoicesListRequestExpandPaymentsPurchaseOrdersCompanyAccountingPeriod:
		return "payments,purchase_orders,company,accounting_period"
	case InvoicesListRequestExpandPaymentsPurchaseOrdersContact:
		return "payments,purchase_orders,contact"
	case InvoicesListRequestExpandPaymentsPurchaseOrdersContactAccountingPeriod:
		return "payments,purchase_orders,contact,accounting_period"
	case InvoicesListRequestExpandPaymentsPurchaseOrdersContactCompany:
		return "payments,purchase_orders,contact,company"
	case InvoicesListRequestExpandPaymentsPurchaseOrdersContactCompanyAccountingPeriod:
		return "payments,purchase_orders,contact,company,accounting_period"
	case InvoicesListRequestExpandPaymentsTrackingCategories:
		return "payments,tracking_categories"
	case InvoicesListRequestExpandPaymentsTrackingCategoriesAccountingPeriod:
		return "payments,tracking_categories,accounting_period"
	case InvoicesListRequestExpandPaymentsTrackingCategoriesCompany:
		return "payments,tracking_categories,company"
	case InvoicesListRequestExpandPaymentsTrackingCategoriesCompanyAccountingPeriod:
		return "payments,tracking_categories,company,accounting_period"
	case InvoicesListRequestExpandPaymentsTrackingCategoriesContact:
		return "payments,tracking_categories,contact"
	case InvoicesListRequestExpandPaymentsTrackingCategoriesContactAccountingPeriod:
		return "payments,tracking_categories,contact,accounting_period"
	case InvoicesListRequestExpandPaymentsTrackingCategoriesContactCompany:
		return "payments,tracking_categories,contact,company"
	case InvoicesListRequestExpandPaymentsTrackingCategoriesContactCompanyAccountingPeriod:
		return "payments,tracking_categories,contact,company,accounting_period"
	case InvoicesListRequestExpandPaymentsTrackingCategoriesPurchaseOrders:
		return "payments,tracking_categories,purchase_orders"
	case InvoicesListRequestExpandPaymentsTrackingCategoriesPurchaseOrdersAccountingPeriod:
		return "payments,tracking_categories,purchase_orders,accounting_period"
	case InvoicesListRequestExpandPaymentsTrackingCategoriesPurchaseOrdersCompany:
		return "payments,tracking_categories,purchase_orders,company"
	case InvoicesListRequestExpandPaymentsTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod:
		return "payments,tracking_categories,purchase_orders,company,accounting_period"
	case InvoicesListRequestExpandPaymentsTrackingCategoriesPurchaseOrdersContact:
		return "payments,tracking_categories,purchase_orders,contact"
	case InvoicesListRequestExpandPaymentsTrackingCategoriesPurchaseOrdersContactAccountingPeriod:
		return "payments,tracking_categories,purchase_orders,contact,accounting_period"
	case InvoicesListRequestExpandPaymentsTrackingCategoriesPurchaseOrdersContactCompany:
		return "payments,tracking_categories,purchase_orders,contact,company"
	case InvoicesListRequestExpandPaymentsTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod:
		return "payments,tracking_categories,purchase_orders,contact,company,accounting_period"
	case InvoicesListRequestExpandPurchaseOrders:
		return "purchase_orders"
	case InvoicesListRequestExpandPurchaseOrdersAccountingPeriod:
		return "purchase_orders,accounting_period"
	case InvoicesListRequestExpandPurchaseOrdersCompany:
		return "purchase_orders,company"
	case InvoicesListRequestExpandPurchaseOrdersCompanyAccountingPeriod:
		return "purchase_orders,company,accounting_period"
	case InvoicesListRequestExpandPurchaseOrdersContact:
		return "purchase_orders,contact"
	case InvoicesListRequestExpandPurchaseOrdersContactAccountingPeriod:
		return "purchase_orders,contact,accounting_period"
	case InvoicesListRequestExpandPurchaseOrdersContactCompany:
		return "purchase_orders,contact,company"
	case InvoicesListRequestExpandPurchaseOrdersContactCompanyAccountingPeriod:
		return "purchase_orders,contact,company,accounting_period"
	case InvoicesListRequestExpandTrackingCategories:
		return "tracking_categories"
	case InvoicesListRequestExpandTrackingCategoriesAccountingPeriod:
		return "tracking_categories,accounting_period"
	case InvoicesListRequestExpandTrackingCategoriesCompany:
		return "tracking_categories,company"
	case InvoicesListRequestExpandTrackingCategoriesCompanyAccountingPeriod:
		return "tracking_categories,company,accounting_period"
	case InvoicesListRequestExpandTrackingCategoriesContact:
		return "tracking_categories,contact"
	case InvoicesListRequestExpandTrackingCategoriesContactAccountingPeriod:
		return "tracking_categories,contact,accounting_period"
	case InvoicesListRequestExpandTrackingCategoriesContactCompany:
		return "tracking_categories,contact,company"
	case InvoicesListRequestExpandTrackingCategoriesContactCompanyAccountingPeriod:
		return "tracking_categories,contact,company,accounting_period"
	case InvoicesListRequestExpandTrackingCategoriesPurchaseOrders:
		return "tracking_categories,purchase_orders"
	case InvoicesListRequestExpandTrackingCategoriesPurchaseOrdersAccountingPeriod:
		return "tracking_categories,purchase_orders,accounting_period"
	case InvoicesListRequestExpandTrackingCategoriesPurchaseOrdersCompany:
		return "tracking_categories,purchase_orders,company"
	case InvoicesListRequestExpandTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod:
		return "tracking_categories,purchase_orders,company,accounting_period"
	case InvoicesListRequestExpandTrackingCategoriesPurchaseOrdersContact:
		return "tracking_categories,purchase_orders,contact"
	case InvoicesListRequestExpandTrackingCategoriesPurchaseOrdersContactAccountingPeriod:
		return "tracking_categories,purchase_orders,contact,accounting_period"
	case InvoicesListRequestExpandTrackingCategoriesPurchaseOrdersContactCompany:
		return "tracking_categories,purchase_orders,contact,company"
	case InvoicesListRequestExpandTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod:
		return "tracking_categories,purchase_orders,contact,company,accounting_period"
	}
}

func (i InvoicesListRequestExpand) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", i.String())), nil
}

func (i *InvoicesListRequestExpand) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "accounting_period":
		value := InvoicesListRequestExpandAccountingPeriod
		*i = value
	case "applied_payments":
		value := InvoicesListRequestExpandAppliedPayments
		*i = value
	case "applied_payments,accounting_period":
		value := InvoicesListRequestExpandAppliedPaymentsAccountingPeriod
		*i = value
	case "applied_payments,company":
		value := InvoicesListRequestExpandAppliedPaymentsCompany
		*i = value
	case "applied_payments,company,accounting_period":
		value := InvoicesListRequestExpandAppliedPaymentsCompanyAccountingPeriod
		*i = value
	case "applied_payments,contact":
		value := InvoicesListRequestExpandAppliedPaymentsContact
		*i = value
	case "applied_payments,contact,accounting_period":
		value := InvoicesListRequestExpandAppliedPaymentsContactAccountingPeriod
		*i = value
	case "applied_payments,contact,company":
		value := InvoicesListRequestExpandAppliedPaymentsContactCompany
		*i = value
	case "applied_payments,contact,company,accounting_period":
		value := InvoicesListRequestExpandAppliedPaymentsContactCompanyAccountingPeriod
		*i = value
	case "applied_payments,line_items":
		value := InvoicesListRequestExpandAppliedPaymentsLineItems
		*i = value
	case "applied_payments,line_items,accounting_period":
		value := InvoicesListRequestExpandAppliedPaymentsLineItemsAccountingPeriod
		*i = value
	case "applied_payments,line_items,company":
		value := InvoicesListRequestExpandAppliedPaymentsLineItemsCompany
		*i = value
	case "applied_payments,line_items,company,accounting_period":
		value := InvoicesListRequestExpandAppliedPaymentsLineItemsCompanyAccountingPeriod
		*i = value
	case "applied_payments,line_items,contact":
		value := InvoicesListRequestExpandAppliedPaymentsLineItemsContact
		*i = value
	case "applied_payments,line_items,contact,accounting_period":
		value := InvoicesListRequestExpandAppliedPaymentsLineItemsContactAccountingPeriod
		*i = value
	case "applied_payments,line_items,contact,company":
		value := InvoicesListRequestExpandAppliedPaymentsLineItemsContactCompany
		*i = value
	case "applied_payments,line_items,contact,company,accounting_period":
		value := InvoicesListRequestExpandAppliedPaymentsLineItemsContactCompanyAccountingPeriod
		*i = value
	case "applied_payments,line_items,purchase_orders":
		value := InvoicesListRequestExpandAppliedPaymentsLineItemsPurchaseOrders
		*i = value
	case "applied_payments,line_items,purchase_orders,accounting_period":
		value := InvoicesListRequestExpandAppliedPaymentsLineItemsPurchaseOrdersAccountingPeriod
		*i = value
	case "applied_payments,line_items,purchase_orders,company":
		value := InvoicesListRequestExpandAppliedPaymentsLineItemsPurchaseOrdersCompany
		*i = value
	case "applied_payments,line_items,purchase_orders,company,accounting_period":
		value := InvoicesListRequestExpandAppliedPaymentsLineItemsPurchaseOrdersCompanyAccountingPeriod
		*i = value
	case "applied_payments,line_items,purchase_orders,contact":
		value := InvoicesListRequestExpandAppliedPaymentsLineItemsPurchaseOrdersContact
		*i = value
	case "applied_payments,line_items,purchase_orders,contact,accounting_period":
		value := InvoicesListRequestExpandAppliedPaymentsLineItemsPurchaseOrdersContactAccountingPeriod
		*i = value
	case "applied_payments,line_items,purchase_orders,contact,company":
		value := InvoicesListRequestExpandAppliedPaymentsLineItemsPurchaseOrdersContactCompany
		*i = value
	case "applied_payments,line_items,purchase_orders,contact,company,accounting_period":
		value := InvoicesListRequestExpandAppliedPaymentsLineItemsPurchaseOrdersContactCompanyAccountingPeriod
		*i = value
	case "applied_payments,line_items,tracking_categories":
		value := InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategories
		*i = value
	case "applied_payments,line_items,tracking_categories,accounting_period":
		value := InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesAccountingPeriod
		*i = value
	case "applied_payments,line_items,tracking_categories,company":
		value := InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesCompany
		*i = value
	case "applied_payments,line_items,tracking_categories,company,accounting_period":
		value := InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesCompanyAccountingPeriod
		*i = value
	case "applied_payments,line_items,tracking_categories,contact":
		value := InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContact
		*i = value
	case "applied_payments,line_items,tracking_categories,contact,accounting_period":
		value := InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContactAccountingPeriod
		*i = value
	case "applied_payments,line_items,tracking_categories,contact,company":
		value := InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContactCompany
		*i = value
	case "applied_payments,line_items,tracking_categories,contact,company,accounting_period":
		value := InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContactCompanyAccountingPeriod
		*i = value
	case "applied_payments,line_items,tracking_categories,purchase_orders":
		value := InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrders
		*i = value
	case "applied_payments,line_items,tracking_categories,purchase_orders,accounting_period":
		value := InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersAccountingPeriod
		*i = value
	case "applied_payments,line_items,tracking_categories,purchase_orders,company":
		value := InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersCompany
		*i = value
	case "applied_payments,line_items,tracking_categories,purchase_orders,company,accounting_period":
		value := InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod
		*i = value
	case "applied_payments,line_items,tracking_categories,purchase_orders,contact":
		value := InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContact
		*i = value
	case "applied_payments,line_items,tracking_categories,purchase_orders,contact,accounting_period":
		value := InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactAccountingPeriod
		*i = value
	case "applied_payments,line_items,tracking_categories,purchase_orders,contact,company":
		value := InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactCompany
		*i = value
	case "applied_payments,line_items,tracking_categories,purchase_orders,contact,company,accounting_period":
		value := InvoicesListRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod
		*i = value
	case "applied_payments,purchase_orders":
		value := InvoicesListRequestExpandAppliedPaymentsPurchaseOrders
		*i = value
	case "applied_payments,purchase_orders,accounting_period":
		value := InvoicesListRequestExpandAppliedPaymentsPurchaseOrdersAccountingPeriod
		*i = value
	case "applied_payments,purchase_orders,company":
		value := InvoicesListRequestExpandAppliedPaymentsPurchaseOrdersCompany
		*i = value
	case "applied_payments,purchase_orders,company,accounting_period":
		value := InvoicesListRequestExpandAppliedPaymentsPurchaseOrdersCompanyAccountingPeriod
		*i = value
	case "applied_payments,purchase_orders,contact":
		value := InvoicesListRequestExpandAppliedPaymentsPurchaseOrdersContact
		*i = value
	case "applied_payments,purchase_orders,contact,accounting_period":
		value := InvoicesListRequestExpandAppliedPaymentsPurchaseOrdersContactAccountingPeriod
		*i = value
	case "applied_payments,purchase_orders,contact,company":
		value := InvoicesListRequestExpandAppliedPaymentsPurchaseOrdersContactCompany
		*i = value
	case "applied_payments,purchase_orders,contact,company,accounting_period":
		value := InvoicesListRequestExpandAppliedPaymentsPurchaseOrdersContactCompanyAccountingPeriod
		*i = value
	case "applied_payments,tracking_categories":
		value := InvoicesListRequestExpandAppliedPaymentsTrackingCategories
		*i = value
	case "applied_payments,tracking_categories,accounting_period":
		value := InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesAccountingPeriod
		*i = value
	case "applied_payments,tracking_categories,company":
		value := InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesCompany
		*i = value
	case "applied_payments,tracking_categories,company,accounting_period":
		value := InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod
		*i = value
	case "applied_payments,tracking_categories,contact":
		value := InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesContact
		*i = value
	case "applied_payments,tracking_categories,contact,accounting_period":
		value := InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesContactAccountingPeriod
		*i = value
	case "applied_payments,tracking_categories,contact,company":
		value := InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesContactCompany
		*i = value
	case "applied_payments,tracking_categories,contact,company,accounting_period":
		value := InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesContactCompanyAccountingPeriod
		*i = value
	case "applied_payments,tracking_categories,purchase_orders":
		value := InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrders
		*i = value
	case "applied_payments,tracking_categories,purchase_orders,accounting_period":
		value := InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrdersAccountingPeriod
		*i = value
	case "applied_payments,tracking_categories,purchase_orders,company":
		value := InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrdersCompany
		*i = value
	case "applied_payments,tracking_categories,purchase_orders,company,accounting_period":
		value := InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod
		*i = value
	case "applied_payments,tracking_categories,purchase_orders,contact":
		value := InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrdersContact
		*i = value
	case "applied_payments,tracking_categories,purchase_orders,contact,accounting_period":
		value := InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrdersContactAccountingPeriod
		*i = value
	case "applied_payments,tracking_categories,purchase_orders,contact,company":
		value := InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrdersContactCompany
		*i = value
	case "applied_payments,tracking_categories,purchase_orders,contact,company,accounting_period":
		value := InvoicesListRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod
		*i = value
	case "company":
		value := InvoicesListRequestExpandCompany
		*i = value
	case "company,accounting_period":
		value := InvoicesListRequestExpandCompanyAccountingPeriod
		*i = value
	case "contact":
		value := InvoicesListRequestExpandContact
		*i = value
	case "contact,accounting_period":
		value := InvoicesListRequestExpandContactAccountingPeriod
		*i = value
	case "contact,company":
		value := InvoicesListRequestExpandContactCompany
		*i = value
	case "contact,company,accounting_period":
		value := InvoicesListRequestExpandContactCompanyAccountingPeriod
		*i = value
	case "line_items":
		value := InvoicesListRequestExpandLineItems
		*i = value
	case "line_items,accounting_period":
		value := InvoicesListRequestExpandLineItemsAccountingPeriod
		*i = value
	case "line_items,company":
		value := InvoicesListRequestExpandLineItemsCompany
		*i = value
	case "line_items,company,accounting_period":
		value := InvoicesListRequestExpandLineItemsCompanyAccountingPeriod
		*i = value
	case "line_items,contact":
		value := InvoicesListRequestExpandLineItemsContact
		*i = value
	case "line_items,contact,accounting_period":
		value := InvoicesListRequestExpandLineItemsContactAccountingPeriod
		*i = value
	case "line_items,contact,company":
		value := InvoicesListRequestExpandLineItemsContactCompany
		*i = value
	case "line_items,contact,company,accounting_period":
		value := InvoicesListRequestExpandLineItemsContactCompanyAccountingPeriod
		*i = value
	case "line_items,purchase_orders":
		value := InvoicesListRequestExpandLineItemsPurchaseOrders
		*i = value
	case "line_items,purchase_orders,accounting_period":
		value := InvoicesListRequestExpandLineItemsPurchaseOrdersAccountingPeriod
		*i = value
	case "line_items,purchase_orders,company":
		value := InvoicesListRequestExpandLineItemsPurchaseOrdersCompany
		*i = value
	case "line_items,purchase_orders,company,accounting_period":
		value := InvoicesListRequestExpandLineItemsPurchaseOrdersCompanyAccountingPeriod
		*i = value
	case "line_items,purchase_orders,contact":
		value := InvoicesListRequestExpandLineItemsPurchaseOrdersContact
		*i = value
	case "line_items,purchase_orders,contact,accounting_period":
		value := InvoicesListRequestExpandLineItemsPurchaseOrdersContactAccountingPeriod
		*i = value
	case "line_items,purchase_orders,contact,company":
		value := InvoicesListRequestExpandLineItemsPurchaseOrdersContactCompany
		*i = value
	case "line_items,purchase_orders,contact,company,accounting_period":
		value := InvoicesListRequestExpandLineItemsPurchaseOrdersContactCompanyAccountingPeriod
		*i = value
	case "line_items,tracking_categories":
		value := InvoicesListRequestExpandLineItemsTrackingCategories
		*i = value
	case "line_items,tracking_categories,accounting_period":
		value := InvoicesListRequestExpandLineItemsTrackingCategoriesAccountingPeriod
		*i = value
	case "line_items,tracking_categories,company":
		value := InvoicesListRequestExpandLineItemsTrackingCategoriesCompany
		*i = value
	case "line_items,tracking_categories,company,accounting_period":
		value := InvoicesListRequestExpandLineItemsTrackingCategoriesCompanyAccountingPeriod
		*i = value
	case "line_items,tracking_categories,contact":
		value := InvoicesListRequestExpandLineItemsTrackingCategoriesContact
		*i = value
	case "line_items,tracking_categories,contact,accounting_period":
		value := InvoicesListRequestExpandLineItemsTrackingCategoriesContactAccountingPeriod
		*i = value
	case "line_items,tracking_categories,contact,company":
		value := InvoicesListRequestExpandLineItemsTrackingCategoriesContactCompany
		*i = value
	case "line_items,tracking_categories,contact,company,accounting_period":
		value := InvoicesListRequestExpandLineItemsTrackingCategoriesContactCompanyAccountingPeriod
		*i = value
	case "line_items,tracking_categories,purchase_orders":
		value := InvoicesListRequestExpandLineItemsTrackingCategoriesPurchaseOrders
		*i = value
	case "line_items,tracking_categories,purchase_orders,accounting_period":
		value := InvoicesListRequestExpandLineItemsTrackingCategoriesPurchaseOrdersAccountingPeriod
		*i = value
	case "line_items,tracking_categories,purchase_orders,company":
		value := InvoicesListRequestExpandLineItemsTrackingCategoriesPurchaseOrdersCompany
		*i = value
	case "line_items,tracking_categories,purchase_orders,company,accounting_period":
		value := InvoicesListRequestExpandLineItemsTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod
		*i = value
	case "line_items,tracking_categories,purchase_orders,contact":
		value := InvoicesListRequestExpandLineItemsTrackingCategoriesPurchaseOrdersContact
		*i = value
	case "line_items,tracking_categories,purchase_orders,contact,accounting_period":
		value := InvoicesListRequestExpandLineItemsTrackingCategoriesPurchaseOrdersContactAccountingPeriod
		*i = value
	case "line_items,tracking_categories,purchase_orders,contact,company":
		value := InvoicesListRequestExpandLineItemsTrackingCategoriesPurchaseOrdersContactCompany
		*i = value
	case "line_items,tracking_categories,purchase_orders,contact,company,accounting_period":
		value := InvoicesListRequestExpandLineItemsTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod
		*i = value
	case "payments":
		value := InvoicesListRequestExpandPayments
		*i = value
	case "payments,accounting_period":
		value := InvoicesListRequestExpandPaymentsAccountingPeriod
		*i = value
	case "payments,applied_payments":
		value := InvoicesListRequestExpandPaymentsAppliedPayments
		*i = value
	case "payments,applied_payments,accounting_period":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsAccountingPeriod
		*i = value
	case "payments,applied_payments,company":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsCompany
		*i = value
	case "payments,applied_payments,company,accounting_period":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsCompanyAccountingPeriod
		*i = value
	case "payments,applied_payments,contact":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsContact
		*i = value
	case "payments,applied_payments,contact,accounting_period":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsContactAccountingPeriod
		*i = value
	case "payments,applied_payments,contact,company":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsContactCompany
		*i = value
	case "payments,applied_payments,contact,company,accounting_period":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsContactCompanyAccountingPeriod
		*i = value
	case "payments,applied_payments,line_items":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsLineItems
		*i = value
	case "payments,applied_payments,line_items,accounting_period":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsAccountingPeriod
		*i = value
	case "payments,applied_payments,line_items,company":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsCompany
		*i = value
	case "payments,applied_payments,line_items,company,accounting_period":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsCompanyAccountingPeriod
		*i = value
	case "payments,applied_payments,line_items,contact":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsContact
		*i = value
	case "payments,applied_payments,line_items,contact,accounting_period":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsContactAccountingPeriod
		*i = value
	case "payments,applied_payments,line_items,contact,company":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsContactCompany
		*i = value
	case "payments,applied_payments,line_items,contact,company,accounting_period":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsContactCompanyAccountingPeriod
		*i = value
	case "payments,applied_payments,line_items,purchase_orders":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrders
		*i = value
	case "payments,applied_payments,line_items,purchase_orders,accounting_period":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrdersAccountingPeriod
		*i = value
	case "payments,applied_payments,line_items,purchase_orders,company":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrdersCompany
		*i = value
	case "payments,applied_payments,line_items,purchase_orders,company,accounting_period":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrdersCompanyAccountingPeriod
		*i = value
	case "payments,applied_payments,line_items,purchase_orders,contact":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrdersContact
		*i = value
	case "payments,applied_payments,line_items,purchase_orders,contact,accounting_period":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrdersContactAccountingPeriod
		*i = value
	case "payments,applied_payments,line_items,purchase_orders,contact,company":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrdersContactCompany
		*i = value
	case "payments,applied_payments,line_items,purchase_orders,contact,company,accounting_period":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrdersContactCompanyAccountingPeriod
		*i = value
	case "payments,applied_payments,line_items,tracking_categories":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategories
		*i = value
	case "payments,applied_payments,line_items,tracking_categories,accounting_period":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesAccountingPeriod
		*i = value
	case "payments,applied_payments,line_items,tracking_categories,company":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesCompany
		*i = value
	case "payments,applied_payments,line_items,tracking_categories,company,accounting_period":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesCompanyAccountingPeriod
		*i = value
	case "payments,applied_payments,line_items,tracking_categories,contact":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContact
		*i = value
	case "payments,applied_payments,line_items,tracking_categories,contact,accounting_period":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContactAccountingPeriod
		*i = value
	case "payments,applied_payments,line_items,tracking_categories,contact,company":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContactCompany
		*i = value
	case "payments,applied_payments,line_items,tracking_categories,contact,company,accounting_period":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContactCompanyAccountingPeriod
		*i = value
	case "payments,applied_payments,line_items,tracking_categories,purchase_orders":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrders
		*i = value
	case "payments,applied_payments,line_items,tracking_categories,purchase_orders,accounting_period":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersAccountingPeriod
		*i = value
	case "payments,applied_payments,line_items,tracking_categories,purchase_orders,company":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersCompany
		*i = value
	case "payments,applied_payments,line_items,tracking_categories,purchase_orders,company,accounting_period":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod
		*i = value
	case "payments,applied_payments,line_items,tracking_categories,purchase_orders,contact":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContact
		*i = value
	case "payments,applied_payments,line_items,tracking_categories,purchase_orders,contact,accounting_period":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactAccountingPeriod
		*i = value
	case "payments,applied_payments,line_items,tracking_categories,purchase_orders,contact,company":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactCompany
		*i = value
	case "payments,applied_payments,line_items,tracking_categories,purchase_orders,contact,company,accounting_period":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod
		*i = value
	case "payments,applied_payments,purchase_orders":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsPurchaseOrders
		*i = value
	case "payments,applied_payments,purchase_orders,accounting_period":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsPurchaseOrdersAccountingPeriod
		*i = value
	case "payments,applied_payments,purchase_orders,company":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsPurchaseOrdersCompany
		*i = value
	case "payments,applied_payments,purchase_orders,company,accounting_period":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsPurchaseOrdersCompanyAccountingPeriod
		*i = value
	case "payments,applied_payments,purchase_orders,contact":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsPurchaseOrdersContact
		*i = value
	case "payments,applied_payments,purchase_orders,contact,accounting_period":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsPurchaseOrdersContactAccountingPeriod
		*i = value
	case "payments,applied_payments,purchase_orders,contact,company":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsPurchaseOrdersContactCompany
		*i = value
	case "payments,applied_payments,purchase_orders,contact,company,accounting_period":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsPurchaseOrdersContactCompanyAccountingPeriod
		*i = value
	case "payments,applied_payments,tracking_categories":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategories
		*i = value
	case "payments,applied_payments,tracking_categories,accounting_period":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesAccountingPeriod
		*i = value
	case "payments,applied_payments,tracking_categories,company":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesCompany
		*i = value
	case "payments,applied_payments,tracking_categories,company,accounting_period":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod
		*i = value
	case "payments,applied_payments,tracking_categories,contact":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContact
		*i = value
	case "payments,applied_payments,tracking_categories,contact,accounting_period":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContactAccountingPeriod
		*i = value
	case "payments,applied_payments,tracking_categories,contact,company":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContactCompany
		*i = value
	case "payments,applied_payments,tracking_categories,contact,company,accounting_period":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContactCompanyAccountingPeriod
		*i = value
	case "payments,applied_payments,tracking_categories,purchase_orders":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrders
		*i = value
	case "payments,applied_payments,tracking_categories,purchase_orders,accounting_period":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrdersAccountingPeriod
		*i = value
	case "payments,applied_payments,tracking_categories,purchase_orders,company":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrdersCompany
		*i = value
	case "payments,applied_payments,tracking_categories,purchase_orders,company,accounting_period":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod
		*i = value
	case "payments,applied_payments,tracking_categories,purchase_orders,contact":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrdersContact
		*i = value
	case "payments,applied_payments,tracking_categories,purchase_orders,contact,accounting_period":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrdersContactAccountingPeriod
		*i = value
	case "payments,applied_payments,tracking_categories,purchase_orders,contact,company":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrdersContactCompany
		*i = value
	case "payments,applied_payments,tracking_categories,purchase_orders,contact,company,accounting_period":
		value := InvoicesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod
		*i = value
	case "payments,company":
		value := InvoicesListRequestExpandPaymentsCompany
		*i = value
	case "payments,company,accounting_period":
		value := InvoicesListRequestExpandPaymentsCompanyAccountingPeriod
		*i = value
	case "payments,contact":
		value := InvoicesListRequestExpandPaymentsContact
		*i = value
	case "payments,contact,accounting_period":
		value := InvoicesListRequestExpandPaymentsContactAccountingPeriod
		*i = value
	case "payments,contact,company":
		value := InvoicesListRequestExpandPaymentsContactCompany
		*i = value
	case "payments,contact,company,accounting_period":
		value := InvoicesListRequestExpandPaymentsContactCompanyAccountingPeriod
		*i = value
	case "payments,line_items":
		value := InvoicesListRequestExpandPaymentsLineItems
		*i = value
	case "payments,line_items,accounting_period":
		value := InvoicesListRequestExpandPaymentsLineItemsAccountingPeriod
		*i = value
	case "payments,line_items,company":
		value := InvoicesListRequestExpandPaymentsLineItemsCompany
		*i = value
	case "payments,line_items,company,accounting_period":
		value := InvoicesListRequestExpandPaymentsLineItemsCompanyAccountingPeriod
		*i = value
	case "payments,line_items,contact":
		value := InvoicesListRequestExpandPaymentsLineItemsContact
		*i = value
	case "payments,line_items,contact,accounting_period":
		value := InvoicesListRequestExpandPaymentsLineItemsContactAccountingPeriod
		*i = value
	case "payments,line_items,contact,company":
		value := InvoicesListRequestExpandPaymentsLineItemsContactCompany
		*i = value
	case "payments,line_items,contact,company,accounting_period":
		value := InvoicesListRequestExpandPaymentsLineItemsContactCompanyAccountingPeriod
		*i = value
	case "payments,line_items,purchase_orders":
		value := InvoicesListRequestExpandPaymentsLineItemsPurchaseOrders
		*i = value
	case "payments,line_items,purchase_orders,accounting_period":
		value := InvoicesListRequestExpandPaymentsLineItemsPurchaseOrdersAccountingPeriod
		*i = value
	case "payments,line_items,purchase_orders,company":
		value := InvoicesListRequestExpandPaymentsLineItemsPurchaseOrdersCompany
		*i = value
	case "payments,line_items,purchase_orders,company,accounting_period":
		value := InvoicesListRequestExpandPaymentsLineItemsPurchaseOrdersCompanyAccountingPeriod
		*i = value
	case "payments,line_items,purchase_orders,contact":
		value := InvoicesListRequestExpandPaymentsLineItemsPurchaseOrdersContact
		*i = value
	case "payments,line_items,purchase_orders,contact,accounting_period":
		value := InvoicesListRequestExpandPaymentsLineItemsPurchaseOrdersContactAccountingPeriod
		*i = value
	case "payments,line_items,purchase_orders,contact,company":
		value := InvoicesListRequestExpandPaymentsLineItemsPurchaseOrdersContactCompany
		*i = value
	case "payments,line_items,purchase_orders,contact,company,accounting_period":
		value := InvoicesListRequestExpandPaymentsLineItemsPurchaseOrdersContactCompanyAccountingPeriod
		*i = value
	case "payments,line_items,tracking_categories":
		value := InvoicesListRequestExpandPaymentsLineItemsTrackingCategories
		*i = value
	case "payments,line_items,tracking_categories,accounting_period":
		value := InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesAccountingPeriod
		*i = value
	case "payments,line_items,tracking_categories,company":
		value := InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesCompany
		*i = value
	case "payments,line_items,tracking_categories,company,accounting_period":
		value := InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesCompanyAccountingPeriod
		*i = value
	case "payments,line_items,tracking_categories,contact":
		value := InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesContact
		*i = value
	case "payments,line_items,tracking_categories,contact,accounting_period":
		value := InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesContactAccountingPeriod
		*i = value
	case "payments,line_items,tracking_categories,contact,company":
		value := InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesContactCompany
		*i = value
	case "payments,line_items,tracking_categories,contact,company,accounting_period":
		value := InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesContactCompanyAccountingPeriod
		*i = value
	case "payments,line_items,tracking_categories,purchase_orders":
		value := InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrders
		*i = value
	case "payments,line_items,tracking_categories,purchase_orders,accounting_period":
		value := InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrdersAccountingPeriod
		*i = value
	case "payments,line_items,tracking_categories,purchase_orders,company":
		value := InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrdersCompany
		*i = value
	case "payments,line_items,tracking_categories,purchase_orders,company,accounting_period":
		value := InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod
		*i = value
	case "payments,line_items,tracking_categories,purchase_orders,contact":
		value := InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrdersContact
		*i = value
	case "payments,line_items,tracking_categories,purchase_orders,contact,accounting_period":
		value := InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactAccountingPeriod
		*i = value
	case "payments,line_items,tracking_categories,purchase_orders,contact,company":
		value := InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactCompany
		*i = value
	case "payments,line_items,tracking_categories,purchase_orders,contact,company,accounting_period":
		value := InvoicesListRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod
		*i = value
	case "payments,purchase_orders":
		value := InvoicesListRequestExpandPaymentsPurchaseOrders
		*i = value
	case "payments,purchase_orders,accounting_period":
		value := InvoicesListRequestExpandPaymentsPurchaseOrdersAccountingPeriod
		*i = value
	case "payments,purchase_orders,company":
		value := InvoicesListRequestExpandPaymentsPurchaseOrdersCompany
		*i = value
	case "payments,purchase_orders,company,accounting_period":
		value := InvoicesListRequestExpandPaymentsPurchaseOrdersCompanyAccountingPeriod
		*i = value
	case "payments,purchase_orders,contact":
		value := InvoicesListRequestExpandPaymentsPurchaseOrdersContact
		*i = value
	case "payments,purchase_orders,contact,accounting_period":
		value := InvoicesListRequestExpandPaymentsPurchaseOrdersContactAccountingPeriod
		*i = value
	case "payments,purchase_orders,contact,company":
		value := InvoicesListRequestExpandPaymentsPurchaseOrdersContactCompany
		*i = value
	case "payments,purchase_orders,contact,company,accounting_period":
		value := InvoicesListRequestExpandPaymentsPurchaseOrdersContactCompanyAccountingPeriod
		*i = value
	case "payments,tracking_categories":
		value := InvoicesListRequestExpandPaymentsTrackingCategories
		*i = value
	case "payments,tracking_categories,accounting_period":
		value := InvoicesListRequestExpandPaymentsTrackingCategoriesAccountingPeriod
		*i = value
	case "payments,tracking_categories,company":
		value := InvoicesListRequestExpandPaymentsTrackingCategoriesCompany
		*i = value
	case "payments,tracking_categories,company,accounting_period":
		value := InvoicesListRequestExpandPaymentsTrackingCategoriesCompanyAccountingPeriod
		*i = value
	case "payments,tracking_categories,contact":
		value := InvoicesListRequestExpandPaymentsTrackingCategoriesContact
		*i = value
	case "payments,tracking_categories,contact,accounting_period":
		value := InvoicesListRequestExpandPaymentsTrackingCategoriesContactAccountingPeriod
		*i = value
	case "payments,tracking_categories,contact,company":
		value := InvoicesListRequestExpandPaymentsTrackingCategoriesContactCompany
		*i = value
	case "payments,tracking_categories,contact,company,accounting_period":
		value := InvoicesListRequestExpandPaymentsTrackingCategoriesContactCompanyAccountingPeriod
		*i = value
	case "payments,tracking_categories,purchase_orders":
		value := InvoicesListRequestExpandPaymentsTrackingCategoriesPurchaseOrders
		*i = value
	case "payments,tracking_categories,purchase_orders,accounting_period":
		value := InvoicesListRequestExpandPaymentsTrackingCategoriesPurchaseOrdersAccountingPeriod
		*i = value
	case "payments,tracking_categories,purchase_orders,company":
		value := InvoicesListRequestExpandPaymentsTrackingCategoriesPurchaseOrdersCompany
		*i = value
	case "payments,tracking_categories,purchase_orders,company,accounting_period":
		value := InvoicesListRequestExpandPaymentsTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod
		*i = value
	case "payments,tracking_categories,purchase_orders,contact":
		value := InvoicesListRequestExpandPaymentsTrackingCategoriesPurchaseOrdersContact
		*i = value
	case "payments,tracking_categories,purchase_orders,contact,accounting_period":
		value := InvoicesListRequestExpandPaymentsTrackingCategoriesPurchaseOrdersContactAccountingPeriod
		*i = value
	case "payments,tracking_categories,purchase_orders,contact,company":
		value := InvoicesListRequestExpandPaymentsTrackingCategoriesPurchaseOrdersContactCompany
		*i = value
	case "payments,tracking_categories,purchase_orders,contact,company,accounting_period":
		value := InvoicesListRequestExpandPaymentsTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod
		*i = value
	case "purchase_orders":
		value := InvoicesListRequestExpandPurchaseOrders
		*i = value
	case "purchase_orders,accounting_period":
		value := InvoicesListRequestExpandPurchaseOrdersAccountingPeriod
		*i = value
	case "purchase_orders,company":
		value := InvoicesListRequestExpandPurchaseOrdersCompany
		*i = value
	case "purchase_orders,company,accounting_period":
		value := InvoicesListRequestExpandPurchaseOrdersCompanyAccountingPeriod
		*i = value
	case "purchase_orders,contact":
		value := InvoicesListRequestExpandPurchaseOrdersContact
		*i = value
	case "purchase_orders,contact,accounting_period":
		value := InvoicesListRequestExpandPurchaseOrdersContactAccountingPeriod
		*i = value
	case "purchase_orders,contact,company":
		value := InvoicesListRequestExpandPurchaseOrdersContactCompany
		*i = value
	case "purchase_orders,contact,company,accounting_period":
		value := InvoicesListRequestExpandPurchaseOrdersContactCompanyAccountingPeriod
		*i = value
	case "tracking_categories":
		value := InvoicesListRequestExpandTrackingCategories
		*i = value
	case "tracking_categories,accounting_period":
		value := InvoicesListRequestExpandTrackingCategoriesAccountingPeriod
		*i = value
	case "tracking_categories,company":
		value := InvoicesListRequestExpandTrackingCategoriesCompany
		*i = value
	case "tracking_categories,company,accounting_period":
		value := InvoicesListRequestExpandTrackingCategoriesCompanyAccountingPeriod
		*i = value
	case "tracking_categories,contact":
		value := InvoicesListRequestExpandTrackingCategoriesContact
		*i = value
	case "tracking_categories,contact,accounting_period":
		value := InvoicesListRequestExpandTrackingCategoriesContactAccountingPeriod
		*i = value
	case "tracking_categories,contact,company":
		value := InvoicesListRequestExpandTrackingCategoriesContactCompany
		*i = value
	case "tracking_categories,contact,company,accounting_period":
		value := InvoicesListRequestExpandTrackingCategoriesContactCompanyAccountingPeriod
		*i = value
	case "tracking_categories,purchase_orders":
		value := InvoicesListRequestExpandTrackingCategoriesPurchaseOrders
		*i = value
	case "tracking_categories,purchase_orders,accounting_period":
		value := InvoicesListRequestExpandTrackingCategoriesPurchaseOrdersAccountingPeriod
		*i = value
	case "tracking_categories,purchase_orders,company":
		value := InvoicesListRequestExpandTrackingCategoriesPurchaseOrdersCompany
		*i = value
	case "tracking_categories,purchase_orders,company,accounting_period":
		value := InvoicesListRequestExpandTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod
		*i = value
	case "tracking_categories,purchase_orders,contact":
		value := InvoicesListRequestExpandTrackingCategoriesPurchaseOrdersContact
		*i = value
	case "tracking_categories,purchase_orders,contact,accounting_period":
		value := InvoicesListRequestExpandTrackingCategoriesPurchaseOrdersContactAccountingPeriod
		*i = value
	case "tracking_categories,purchase_orders,contact,company":
		value := InvoicesListRequestExpandTrackingCategoriesPurchaseOrdersContactCompany
		*i = value
	case "tracking_categories,purchase_orders,contact,company,accounting_period":
		value := InvoicesListRequestExpandTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod
		*i = value
	}
	return nil
}

type InvoicesListRequestType uint

const (
	InvoicesListRequestTypeAccountsPayable InvoicesListRequestType = iota + 1
	InvoicesListRequestTypeAccountsReceivable
)

func (i InvoicesListRequestType) String() string {
	switch i {
	default:
		return strconv.Itoa(int(i))
	case InvoicesListRequestTypeAccountsPayable:
		return "ACCOUNTS_PAYABLE"
	case InvoicesListRequestTypeAccountsReceivable:
		return "ACCOUNTS_RECEIVABLE"
	}
}

func (i InvoicesListRequestType) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", i.String())), nil
}

func (i *InvoicesListRequestType) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "ACCOUNTS_PAYABLE":
		value := InvoicesListRequestTypeAccountsPayable
		*i = value
	case "ACCOUNTS_RECEIVABLE":
		value := InvoicesListRequestTypeAccountsReceivable
		*i = value
	}
	return nil
}

type InvoicesRetrieveRequestExpand uint

const (
	InvoicesRetrieveRequestExpandAccountingPeriod InvoicesRetrieveRequestExpand = iota + 1
	InvoicesRetrieveRequestExpandAppliedPayments
	InvoicesRetrieveRequestExpandAppliedPaymentsAccountingPeriod
	InvoicesRetrieveRequestExpandAppliedPaymentsCompany
	InvoicesRetrieveRequestExpandAppliedPaymentsCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandAppliedPaymentsContact
	InvoicesRetrieveRequestExpandAppliedPaymentsContactAccountingPeriod
	InvoicesRetrieveRequestExpandAppliedPaymentsContactCompany
	InvoicesRetrieveRequestExpandAppliedPaymentsContactCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandAppliedPaymentsLineItems
	InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsAccountingPeriod
	InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsCompany
	InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsContact
	InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsContactAccountingPeriod
	InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsContactCompany
	InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsContactCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsPurchaseOrders
	InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsPurchaseOrdersAccountingPeriod
	InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsPurchaseOrdersCompany
	InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsPurchaseOrdersCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsPurchaseOrdersContact
	InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsPurchaseOrdersContactAccountingPeriod
	InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsPurchaseOrdersContactCompany
	InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsPurchaseOrdersContactCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategories
	InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesAccountingPeriod
	InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesCompany
	InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContact
	InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContactAccountingPeriod
	InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContactCompany
	InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContactCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrders
	InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersAccountingPeriod
	InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersCompany
	InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContact
	InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactAccountingPeriod
	InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactCompany
	InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandAppliedPaymentsPurchaseOrders
	InvoicesRetrieveRequestExpandAppliedPaymentsPurchaseOrdersAccountingPeriod
	InvoicesRetrieveRequestExpandAppliedPaymentsPurchaseOrdersCompany
	InvoicesRetrieveRequestExpandAppliedPaymentsPurchaseOrdersCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandAppliedPaymentsPurchaseOrdersContact
	InvoicesRetrieveRequestExpandAppliedPaymentsPurchaseOrdersContactAccountingPeriod
	InvoicesRetrieveRequestExpandAppliedPaymentsPurchaseOrdersContactCompany
	InvoicesRetrieveRequestExpandAppliedPaymentsPurchaseOrdersContactCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategories
	InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesAccountingPeriod
	InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesCompany
	InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesContact
	InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesContactAccountingPeriod
	InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesContactCompany
	InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesContactCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrders
	InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrdersAccountingPeriod
	InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrdersCompany
	InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrdersContact
	InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrdersContactAccountingPeriod
	InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrdersContactCompany
	InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandCompany
	InvoicesRetrieveRequestExpandCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandContact
	InvoicesRetrieveRequestExpandContactAccountingPeriod
	InvoicesRetrieveRequestExpandContactCompany
	InvoicesRetrieveRequestExpandContactCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandLineItems
	InvoicesRetrieveRequestExpandLineItemsAccountingPeriod
	InvoicesRetrieveRequestExpandLineItemsCompany
	InvoicesRetrieveRequestExpandLineItemsCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandLineItemsContact
	InvoicesRetrieveRequestExpandLineItemsContactAccountingPeriod
	InvoicesRetrieveRequestExpandLineItemsContactCompany
	InvoicesRetrieveRequestExpandLineItemsContactCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandLineItemsPurchaseOrders
	InvoicesRetrieveRequestExpandLineItemsPurchaseOrdersAccountingPeriod
	InvoicesRetrieveRequestExpandLineItemsPurchaseOrdersCompany
	InvoicesRetrieveRequestExpandLineItemsPurchaseOrdersCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandLineItemsPurchaseOrdersContact
	InvoicesRetrieveRequestExpandLineItemsPurchaseOrdersContactAccountingPeriod
	InvoicesRetrieveRequestExpandLineItemsPurchaseOrdersContactCompany
	InvoicesRetrieveRequestExpandLineItemsPurchaseOrdersContactCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandLineItemsTrackingCategories
	InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesAccountingPeriod
	InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesCompany
	InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesContact
	InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesContactAccountingPeriod
	InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesContactCompany
	InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesContactCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesPurchaseOrders
	InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesPurchaseOrdersAccountingPeriod
	InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesPurchaseOrdersCompany
	InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesPurchaseOrdersContact
	InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesPurchaseOrdersContactAccountingPeriod
	InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesPurchaseOrdersContactCompany
	InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandPayments
	InvoicesRetrieveRequestExpandPaymentsAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsAppliedPayments
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsCompany
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsContact
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsContactAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsContactCompany
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsContactCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItems
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsCompany
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsContact
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsContactAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsContactCompany
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsContactCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrders
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrdersAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrdersCompany
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrdersCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrdersContact
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrdersContactAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrdersContactCompany
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrdersContactCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategories
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesCompany
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContact
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContactAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContactCompany
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContactCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrders
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersCompany
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContact
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactCompany
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsPurchaseOrders
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsPurchaseOrdersAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsPurchaseOrdersCompany
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsPurchaseOrdersCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsPurchaseOrdersContact
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsPurchaseOrdersContactAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsPurchaseOrdersContactCompany
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsPurchaseOrdersContactCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategories
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesCompany
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContact
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContactAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContactCompany
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContactCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrders
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrdersAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrdersCompany
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrdersContact
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrdersContactAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrdersContactCompany
	InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsCompany
	InvoicesRetrieveRequestExpandPaymentsCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsContact
	InvoicesRetrieveRequestExpandPaymentsContactAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsContactCompany
	InvoicesRetrieveRequestExpandPaymentsContactCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsLineItems
	InvoicesRetrieveRequestExpandPaymentsLineItemsAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsLineItemsCompany
	InvoicesRetrieveRequestExpandPaymentsLineItemsCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsLineItemsContact
	InvoicesRetrieveRequestExpandPaymentsLineItemsContactAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsLineItemsContactCompany
	InvoicesRetrieveRequestExpandPaymentsLineItemsContactCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsLineItemsPurchaseOrders
	InvoicesRetrieveRequestExpandPaymentsLineItemsPurchaseOrdersAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsLineItemsPurchaseOrdersCompany
	InvoicesRetrieveRequestExpandPaymentsLineItemsPurchaseOrdersCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsLineItemsPurchaseOrdersContact
	InvoicesRetrieveRequestExpandPaymentsLineItemsPurchaseOrdersContactAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsLineItemsPurchaseOrdersContactCompany
	InvoicesRetrieveRequestExpandPaymentsLineItemsPurchaseOrdersContactCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategories
	InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesCompany
	InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesContact
	InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesContactAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesContactCompany
	InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesContactCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrders
	InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrdersAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrdersCompany
	InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrdersContact
	InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactCompany
	InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsPurchaseOrders
	InvoicesRetrieveRequestExpandPaymentsPurchaseOrdersAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsPurchaseOrdersCompany
	InvoicesRetrieveRequestExpandPaymentsPurchaseOrdersCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsPurchaseOrdersContact
	InvoicesRetrieveRequestExpandPaymentsPurchaseOrdersContactAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsPurchaseOrdersContactCompany
	InvoicesRetrieveRequestExpandPaymentsPurchaseOrdersContactCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsTrackingCategories
	InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesCompany
	InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesContact
	InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesContactAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesContactCompany
	InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesContactCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesPurchaseOrders
	InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesPurchaseOrdersAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesPurchaseOrdersCompany
	InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesPurchaseOrdersContact
	InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesPurchaseOrdersContactAccountingPeriod
	InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesPurchaseOrdersContactCompany
	InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandPurchaseOrders
	InvoicesRetrieveRequestExpandPurchaseOrdersAccountingPeriod
	InvoicesRetrieveRequestExpandPurchaseOrdersCompany
	InvoicesRetrieveRequestExpandPurchaseOrdersCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandPurchaseOrdersContact
	InvoicesRetrieveRequestExpandPurchaseOrdersContactAccountingPeriod
	InvoicesRetrieveRequestExpandPurchaseOrdersContactCompany
	InvoicesRetrieveRequestExpandPurchaseOrdersContactCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandTrackingCategories
	InvoicesRetrieveRequestExpandTrackingCategoriesAccountingPeriod
	InvoicesRetrieveRequestExpandTrackingCategoriesCompany
	InvoicesRetrieveRequestExpandTrackingCategoriesCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandTrackingCategoriesContact
	InvoicesRetrieveRequestExpandTrackingCategoriesContactAccountingPeriod
	InvoicesRetrieveRequestExpandTrackingCategoriesContactCompany
	InvoicesRetrieveRequestExpandTrackingCategoriesContactCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandTrackingCategoriesPurchaseOrders
	InvoicesRetrieveRequestExpandTrackingCategoriesPurchaseOrdersAccountingPeriod
	InvoicesRetrieveRequestExpandTrackingCategoriesPurchaseOrdersCompany
	InvoicesRetrieveRequestExpandTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod
	InvoicesRetrieveRequestExpandTrackingCategoriesPurchaseOrdersContact
	InvoicesRetrieveRequestExpandTrackingCategoriesPurchaseOrdersContactAccountingPeriod
	InvoicesRetrieveRequestExpandTrackingCategoriesPurchaseOrdersContactCompany
	InvoicesRetrieveRequestExpandTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod
)

func (i InvoicesRetrieveRequestExpand) String() string {
	switch i {
	default:
		return strconv.Itoa(int(i))
	case InvoicesRetrieveRequestExpandAccountingPeriod:
		return "accounting_period"
	case InvoicesRetrieveRequestExpandAppliedPayments:
		return "applied_payments"
	case InvoicesRetrieveRequestExpandAppliedPaymentsAccountingPeriod:
		return "applied_payments,accounting_period"
	case InvoicesRetrieveRequestExpandAppliedPaymentsCompany:
		return "applied_payments,company"
	case InvoicesRetrieveRequestExpandAppliedPaymentsCompanyAccountingPeriod:
		return "applied_payments,company,accounting_period"
	case InvoicesRetrieveRequestExpandAppliedPaymentsContact:
		return "applied_payments,contact"
	case InvoicesRetrieveRequestExpandAppliedPaymentsContactAccountingPeriod:
		return "applied_payments,contact,accounting_period"
	case InvoicesRetrieveRequestExpandAppliedPaymentsContactCompany:
		return "applied_payments,contact,company"
	case InvoicesRetrieveRequestExpandAppliedPaymentsContactCompanyAccountingPeriod:
		return "applied_payments,contact,company,accounting_period"
	case InvoicesRetrieveRequestExpandAppliedPaymentsLineItems:
		return "applied_payments,line_items"
	case InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsAccountingPeriod:
		return "applied_payments,line_items,accounting_period"
	case InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsCompany:
		return "applied_payments,line_items,company"
	case InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsCompanyAccountingPeriod:
		return "applied_payments,line_items,company,accounting_period"
	case InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsContact:
		return "applied_payments,line_items,contact"
	case InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsContactAccountingPeriod:
		return "applied_payments,line_items,contact,accounting_period"
	case InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsContactCompany:
		return "applied_payments,line_items,contact,company"
	case InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsContactCompanyAccountingPeriod:
		return "applied_payments,line_items,contact,company,accounting_period"
	case InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsPurchaseOrders:
		return "applied_payments,line_items,purchase_orders"
	case InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsPurchaseOrdersAccountingPeriod:
		return "applied_payments,line_items,purchase_orders,accounting_period"
	case InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsPurchaseOrdersCompany:
		return "applied_payments,line_items,purchase_orders,company"
	case InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsPurchaseOrdersCompanyAccountingPeriod:
		return "applied_payments,line_items,purchase_orders,company,accounting_period"
	case InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsPurchaseOrdersContact:
		return "applied_payments,line_items,purchase_orders,contact"
	case InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsPurchaseOrdersContactAccountingPeriod:
		return "applied_payments,line_items,purchase_orders,contact,accounting_period"
	case InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsPurchaseOrdersContactCompany:
		return "applied_payments,line_items,purchase_orders,contact,company"
	case InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsPurchaseOrdersContactCompanyAccountingPeriod:
		return "applied_payments,line_items,purchase_orders,contact,company,accounting_period"
	case InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategories:
		return "applied_payments,line_items,tracking_categories"
	case InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesAccountingPeriod:
		return "applied_payments,line_items,tracking_categories,accounting_period"
	case InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesCompany:
		return "applied_payments,line_items,tracking_categories,company"
	case InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesCompanyAccountingPeriod:
		return "applied_payments,line_items,tracking_categories,company,accounting_period"
	case InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContact:
		return "applied_payments,line_items,tracking_categories,contact"
	case InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContactAccountingPeriod:
		return "applied_payments,line_items,tracking_categories,contact,accounting_period"
	case InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContactCompany:
		return "applied_payments,line_items,tracking_categories,contact,company"
	case InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContactCompanyAccountingPeriod:
		return "applied_payments,line_items,tracking_categories,contact,company,accounting_period"
	case InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrders:
		return "applied_payments,line_items,tracking_categories,purchase_orders"
	case InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersAccountingPeriod:
		return "applied_payments,line_items,tracking_categories,purchase_orders,accounting_period"
	case InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersCompany:
		return "applied_payments,line_items,tracking_categories,purchase_orders,company"
	case InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod:
		return "applied_payments,line_items,tracking_categories,purchase_orders,company,accounting_period"
	case InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContact:
		return "applied_payments,line_items,tracking_categories,purchase_orders,contact"
	case InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactAccountingPeriod:
		return "applied_payments,line_items,tracking_categories,purchase_orders,contact,accounting_period"
	case InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactCompany:
		return "applied_payments,line_items,tracking_categories,purchase_orders,contact,company"
	case InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod:
		return "applied_payments,line_items,tracking_categories,purchase_orders,contact,company,accounting_period"
	case InvoicesRetrieveRequestExpandAppliedPaymentsPurchaseOrders:
		return "applied_payments,purchase_orders"
	case InvoicesRetrieveRequestExpandAppliedPaymentsPurchaseOrdersAccountingPeriod:
		return "applied_payments,purchase_orders,accounting_period"
	case InvoicesRetrieveRequestExpandAppliedPaymentsPurchaseOrdersCompany:
		return "applied_payments,purchase_orders,company"
	case InvoicesRetrieveRequestExpandAppliedPaymentsPurchaseOrdersCompanyAccountingPeriod:
		return "applied_payments,purchase_orders,company,accounting_period"
	case InvoicesRetrieveRequestExpandAppliedPaymentsPurchaseOrdersContact:
		return "applied_payments,purchase_orders,contact"
	case InvoicesRetrieveRequestExpandAppliedPaymentsPurchaseOrdersContactAccountingPeriod:
		return "applied_payments,purchase_orders,contact,accounting_period"
	case InvoicesRetrieveRequestExpandAppliedPaymentsPurchaseOrdersContactCompany:
		return "applied_payments,purchase_orders,contact,company"
	case InvoicesRetrieveRequestExpandAppliedPaymentsPurchaseOrdersContactCompanyAccountingPeriod:
		return "applied_payments,purchase_orders,contact,company,accounting_period"
	case InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategories:
		return "applied_payments,tracking_categories"
	case InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesAccountingPeriod:
		return "applied_payments,tracking_categories,accounting_period"
	case InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesCompany:
		return "applied_payments,tracking_categories,company"
	case InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod:
		return "applied_payments,tracking_categories,company,accounting_period"
	case InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesContact:
		return "applied_payments,tracking_categories,contact"
	case InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesContactAccountingPeriod:
		return "applied_payments,tracking_categories,contact,accounting_period"
	case InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesContactCompany:
		return "applied_payments,tracking_categories,contact,company"
	case InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesContactCompanyAccountingPeriod:
		return "applied_payments,tracking_categories,contact,company,accounting_period"
	case InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrders:
		return "applied_payments,tracking_categories,purchase_orders"
	case InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrdersAccountingPeriod:
		return "applied_payments,tracking_categories,purchase_orders,accounting_period"
	case InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrdersCompany:
		return "applied_payments,tracking_categories,purchase_orders,company"
	case InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod:
		return "applied_payments,tracking_categories,purchase_orders,company,accounting_period"
	case InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrdersContact:
		return "applied_payments,tracking_categories,purchase_orders,contact"
	case InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrdersContactAccountingPeriod:
		return "applied_payments,tracking_categories,purchase_orders,contact,accounting_period"
	case InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrdersContactCompany:
		return "applied_payments,tracking_categories,purchase_orders,contact,company"
	case InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod:
		return "applied_payments,tracking_categories,purchase_orders,contact,company,accounting_period"
	case InvoicesRetrieveRequestExpandCompany:
		return "company"
	case InvoicesRetrieveRequestExpandCompanyAccountingPeriod:
		return "company,accounting_period"
	case InvoicesRetrieveRequestExpandContact:
		return "contact"
	case InvoicesRetrieveRequestExpandContactAccountingPeriod:
		return "contact,accounting_period"
	case InvoicesRetrieveRequestExpandContactCompany:
		return "contact,company"
	case InvoicesRetrieveRequestExpandContactCompanyAccountingPeriod:
		return "contact,company,accounting_period"
	case InvoicesRetrieveRequestExpandLineItems:
		return "line_items"
	case InvoicesRetrieveRequestExpandLineItemsAccountingPeriod:
		return "line_items,accounting_period"
	case InvoicesRetrieveRequestExpandLineItemsCompany:
		return "line_items,company"
	case InvoicesRetrieveRequestExpandLineItemsCompanyAccountingPeriod:
		return "line_items,company,accounting_period"
	case InvoicesRetrieveRequestExpandLineItemsContact:
		return "line_items,contact"
	case InvoicesRetrieveRequestExpandLineItemsContactAccountingPeriod:
		return "line_items,contact,accounting_period"
	case InvoicesRetrieveRequestExpandLineItemsContactCompany:
		return "line_items,contact,company"
	case InvoicesRetrieveRequestExpandLineItemsContactCompanyAccountingPeriod:
		return "line_items,contact,company,accounting_period"
	case InvoicesRetrieveRequestExpandLineItemsPurchaseOrders:
		return "line_items,purchase_orders"
	case InvoicesRetrieveRequestExpandLineItemsPurchaseOrdersAccountingPeriod:
		return "line_items,purchase_orders,accounting_period"
	case InvoicesRetrieveRequestExpandLineItemsPurchaseOrdersCompany:
		return "line_items,purchase_orders,company"
	case InvoicesRetrieveRequestExpandLineItemsPurchaseOrdersCompanyAccountingPeriod:
		return "line_items,purchase_orders,company,accounting_period"
	case InvoicesRetrieveRequestExpandLineItemsPurchaseOrdersContact:
		return "line_items,purchase_orders,contact"
	case InvoicesRetrieveRequestExpandLineItemsPurchaseOrdersContactAccountingPeriod:
		return "line_items,purchase_orders,contact,accounting_period"
	case InvoicesRetrieveRequestExpandLineItemsPurchaseOrdersContactCompany:
		return "line_items,purchase_orders,contact,company"
	case InvoicesRetrieveRequestExpandLineItemsPurchaseOrdersContactCompanyAccountingPeriod:
		return "line_items,purchase_orders,contact,company,accounting_period"
	case InvoicesRetrieveRequestExpandLineItemsTrackingCategories:
		return "line_items,tracking_categories"
	case InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesAccountingPeriod:
		return "line_items,tracking_categories,accounting_period"
	case InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesCompany:
		return "line_items,tracking_categories,company"
	case InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesCompanyAccountingPeriod:
		return "line_items,tracking_categories,company,accounting_period"
	case InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesContact:
		return "line_items,tracking_categories,contact"
	case InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesContactAccountingPeriod:
		return "line_items,tracking_categories,contact,accounting_period"
	case InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesContactCompany:
		return "line_items,tracking_categories,contact,company"
	case InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesContactCompanyAccountingPeriod:
		return "line_items,tracking_categories,contact,company,accounting_period"
	case InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesPurchaseOrders:
		return "line_items,tracking_categories,purchase_orders"
	case InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesPurchaseOrdersAccountingPeriod:
		return "line_items,tracking_categories,purchase_orders,accounting_period"
	case InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesPurchaseOrdersCompany:
		return "line_items,tracking_categories,purchase_orders,company"
	case InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod:
		return "line_items,tracking_categories,purchase_orders,company,accounting_period"
	case InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesPurchaseOrdersContact:
		return "line_items,tracking_categories,purchase_orders,contact"
	case InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesPurchaseOrdersContactAccountingPeriod:
		return "line_items,tracking_categories,purchase_orders,contact,accounting_period"
	case InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesPurchaseOrdersContactCompany:
		return "line_items,tracking_categories,purchase_orders,contact,company"
	case InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod:
		return "line_items,tracking_categories,purchase_orders,contact,company,accounting_period"
	case InvoicesRetrieveRequestExpandPayments:
		return "payments"
	case InvoicesRetrieveRequestExpandPaymentsAccountingPeriod:
		return "payments,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPayments:
		return "payments,applied_payments"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsAccountingPeriod:
		return "payments,applied_payments,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsCompany:
		return "payments,applied_payments,company"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsCompanyAccountingPeriod:
		return "payments,applied_payments,company,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsContact:
		return "payments,applied_payments,contact"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsContactAccountingPeriod:
		return "payments,applied_payments,contact,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsContactCompany:
		return "payments,applied_payments,contact,company"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsContactCompanyAccountingPeriod:
		return "payments,applied_payments,contact,company,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItems:
		return "payments,applied_payments,line_items"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsAccountingPeriod:
		return "payments,applied_payments,line_items,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsCompany:
		return "payments,applied_payments,line_items,company"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsCompanyAccountingPeriod:
		return "payments,applied_payments,line_items,company,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsContact:
		return "payments,applied_payments,line_items,contact"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsContactAccountingPeriod:
		return "payments,applied_payments,line_items,contact,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsContactCompany:
		return "payments,applied_payments,line_items,contact,company"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsContactCompanyAccountingPeriod:
		return "payments,applied_payments,line_items,contact,company,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrders:
		return "payments,applied_payments,line_items,purchase_orders"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrdersAccountingPeriod:
		return "payments,applied_payments,line_items,purchase_orders,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrdersCompany:
		return "payments,applied_payments,line_items,purchase_orders,company"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrdersCompanyAccountingPeriod:
		return "payments,applied_payments,line_items,purchase_orders,company,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrdersContact:
		return "payments,applied_payments,line_items,purchase_orders,contact"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrdersContactAccountingPeriod:
		return "payments,applied_payments,line_items,purchase_orders,contact,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrdersContactCompany:
		return "payments,applied_payments,line_items,purchase_orders,contact,company"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrdersContactCompanyAccountingPeriod:
		return "payments,applied_payments,line_items,purchase_orders,contact,company,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategories:
		return "payments,applied_payments,line_items,tracking_categories"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesAccountingPeriod:
		return "payments,applied_payments,line_items,tracking_categories,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesCompany:
		return "payments,applied_payments,line_items,tracking_categories,company"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesCompanyAccountingPeriod:
		return "payments,applied_payments,line_items,tracking_categories,company,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContact:
		return "payments,applied_payments,line_items,tracking_categories,contact"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContactAccountingPeriod:
		return "payments,applied_payments,line_items,tracking_categories,contact,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContactCompany:
		return "payments,applied_payments,line_items,tracking_categories,contact,company"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContactCompanyAccountingPeriod:
		return "payments,applied_payments,line_items,tracking_categories,contact,company,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrders:
		return "payments,applied_payments,line_items,tracking_categories,purchase_orders"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersAccountingPeriod:
		return "payments,applied_payments,line_items,tracking_categories,purchase_orders,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersCompany:
		return "payments,applied_payments,line_items,tracking_categories,purchase_orders,company"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod:
		return "payments,applied_payments,line_items,tracking_categories,purchase_orders,company,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContact:
		return "payments,applied_payments,line_items,tracking_categories,purchase_orders,contact"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactAccountingPeriod:
		return "payments,applied_payments,line_items,tracking_categories,purchase_orders,contact,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactCompany:
		return "payments,applied_payments,line_items,tracking_categories,purchase_orders,contact,company"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod:
		return "payments,applied_payments,line_items,tracking_categories,purchase_orders,contact,company,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsPurchaseOrders:
		return "payments,applied_payments,purchase_orders"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsPurchaseOrdersAccountingPeriod:
		return "payments,applied_payments,purchase_orders,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsPurchaseOrdersCompany:
		return "payments,applied_payments,purchase_orders,company"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsPurchaseOrdersCompanyAccountingPeriod:
		return "payments,applied_payments,purchase_orders,company,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsPurchaseOrdersContact:
		return "payments,applied_payments,purchase_orders,contact"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsPurchaseOrdersContactAccountingPeriod:
		return "payments,applied_payments,purchase_orders,contact,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsPurchaseOrdersContactCompany:
		return "payments,applied_payments,purchase_orders,contact,company"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsPurchaseOrdersContactCompanyAccountingPeriod:
		return "payments,applied_payments,purchase_orders,contact,company,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategories:
		return "payments,applied_payments,tracking_categories"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesAccountingPeriod:
		return "payments,applied_payments,tracking_categories,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesCompany:
		return "payments,applied_payments,tracking_categories,company"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod:
		return "payments,applied_payments,tracking_categories,company,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContact:
		return "payments,applied_payments,tracking_categories,contact"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContactAccountingPeriod:
		return "payments,applied_payments,tracking_categories,contact,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContactCompany:
		return "payments,applied_payments,tracking_categories,contact,company"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContactCompanyAccountingPeriod:
		return "payments,applied_payments,tracking_categories,contact,company,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrders:
		return "payments,applied_payments,tracking_categories,purchase_orders"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrdersAccountingPeriod:
		return "payments,applied_payments,tracking_categories,purchase_orders,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrdersCompany:
		return "payments,applied_payments,tracking_categories,purchase_orders,company"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod:
		return "payments,applied_payments,tracking_categories,purchase_orders,company,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrdersContact:
		return "payments,applied_payments,tracking_categories,purchase_orders,contact"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrdersContactAccountingPeriod:
		return "payments,applied_payments,tracking_categories,purchase_orders,contact,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrdersContactCompany:
		return "payments,applied_payments,tracking_categories,purchase_orders,contact,company"
	case InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod:
		return "payments,applied_payments,tracking_categories,purchase_orders,contact,company,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsCompany:
		return "payments,company"
	case InvoicesRetrieveRequestExpandPaymentsCompanyAccountingPeriod:
		return "payments,company,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsContact:
		return "payments,contact"
	case InvoicesRetrieveRequestExpandPaymentsContactAccountingPeriod:
		return "payments,contact,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsContactCompany:
		return "payments,contact,company"
	case InvoicesRetrieveRequestExpandPaymentsContactCompanyAccountingPeriod:
		return "payments,contact,company,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsLineItems:
		return "payments,line_items"
	case InvoicesRetrieveRequestExpandPaymentsLineItemsAccountingPeriod:
		return "payments,line_items,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsLineItemsCompany:
		return "payments,line_items,company"
	case InvoicesRetrieveRequestExpandPaymentsLineItemsCompanyAccountingPeriod:
		return "payments,line_items,company,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsLineItemsContact:
		return "payments,line_items,contact"
	case InvoicesRetrieveRequestExpandPaymentsLineItemsContactAccountingPeriod:
		return "payments,line_items,contact,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsLineItemsContactCompany:
		return "payments,line_items,contact,company"
	case InvoicesRetrieveRequestExpandPaymentsLineItemsContactCompanyAccountingPeriod:
		return "payments,line_items,contact,company,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsLineItemsPurchaseOrders:
		return "payments,line_items,purchase_orders"
	case InvoicesRetrieveRequestExpandPaymentsLineItemsPurchaseOrdersAccountingPeriod:
		return "payments,line_items,purchase_orders,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsLineItemsPurchaseOrdersCompany:
		return "payments,line_items,purchase_orders,company"
	case InvoicesRetrieveRequestExpandPaymentsLineItemsPurchaseOrdersCompanyAccountingPeriod:
		return "payments,line_items,purchase_orders,company,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsLineItemsPurchaseOrdersContact:
		return "payments,line_items,purchase_orders,contact"
	case InvoicesRetrieveRequestExpandPaymentsLineItemsPurchaseOrdersContactAccountingPeriod:
		return "payments,line_items,purchase_orders,contact,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsLineItemsPurchaseOrdersContactCompany:
		return "payments,line_items,purchase_orders,contact,company"
	case InvoicesRetrieveRequestExpandPaymentsLineItemsPurchaseOrdersContactCompanyAccountingPeriod:
		return "payments,line_items,purchase_orders,contact,company,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategories:
		return "payments,line_items,tracking_categories"
	case InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesAccountingPeriod:
		return "payments,line_items,tracking_categories,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesCompany:
		return "payments,line_items,tracking_categories,company"
	case InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesCompanyAccountingPeriod:
		return "payments,line_items,tracking_categories,company,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesContact:
		return "payments,line_items,tracking_categories,contact"
	case InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesContactAccountingPeriod:
		return "payments,line_items,tracking_categories,contact,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesContactCompany:
		return "payments,line_items,tracking_categories,contact,company"
	case InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesContactCompanyAccountingPeriod:
		return "payments,line_items,tracking_categories,contact,company,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrders:
		return "payments,line_items,tracking_categories,purchase_orders"
	case InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrdersAccountingPeriod:
		return "payments,line_items,tracking_categories,purchase_orders,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrdersCompany:
		return "payments,line_items,tracking_categories,purchase_orders,company"
	case InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod:
		return "payments,line_items,tracking_categories,purchase_orders,company,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrdersContact:
		return "payments,line_items,tracking_categories,purchase_orders,contact"
	case InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactAccountingPeriod:
		return "payments,line_items,tracking_categories,purchase_orders,contact,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactCompany:
		return "payments,line_items,tracking_categories,purchase_orders,contact,company"
	case InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod:
		return "payments,line_items,tracking_categories,purchase_orders,contact,company,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsPurchaseOrders:
		return "payments,purchase_orders"
	case InvoicesRetrieveRequestExpandPaymentsPurchaseOrdersAccountingPeriod:
		return "payments,purchase_orders,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsPurchaseOrdersCompany:
		return "payments,purchase_orders,company"
	case InvoicesRetrieveRequestExpandPaymentsPurchaseOrdersCompanyAccountingPeriod:
		return "payments,purchase_orders,company,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsPurchaseOrdersContact:
		return "payments,purchase_orders,contact"
	case InvoicesRetrieveRequestExpandPaymentsPurchaseOrdersContactAccountingPeriod:
		return "payments,purchase_orders,contact,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsPurchaseOrdersContactCompany:
		return "payments,purchase_orders,contact,company"
	case InvoicesRetrieveRequestExpandPaymentsPurchaseOrdersContactCompanyAccountingPeriod:
		return "payments,purchase_orders,contact,company,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsTrackingCategories:
		return "payments,tracking_categories"
	case InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesAccountingPeriod:
		return "payments,tracking_categories,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesCompany:
		return "payments,tracking_categories,company"
	case InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesCompanyAccountingPeriod:
		return "payments,tracking_categories,company,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesContact:
		return "payments,tracking_categories,contact"
	case InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesContactAccountingPeriod:
		return "payments,tracking_categories,contact,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesContactCompany:
		return "payments,tracking_categories,contact,company"
	case InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesContactCompanyAccountingPeriod:
		return "payments,tracking_categories,contact,company,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesPurchaseOrders:
		return "payments,tracking_categories,purchase_orders"
	case InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesPurchaseOrdersAccountingPeriod:
		return "payments,tracking_categories,purchase_orders,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesPurchaseOrdersCompany:
		return "payments,tracking_categories,purchase_orders,company"
	case InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod:
		return "payments,tracking_categories,purchase_orders,company,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesPurchaseOrdersContact:
		return "payments,tracking_categories,purchase_orders,contact"
	case InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesPurchaseOrdersContactAccountingPeriod:
		return "payments,tracking_categories,purchase_orders,contact,accounting_period"
	case InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesPurchaseOrdersContactCompany:
		return "payments,tracking_categories,purchase_orders,contact,company"
	case InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod:
		return "payments,tracking_categories,purchase_orders,contact,company,accounting_period"
	case InvoicesRetrieveRequestExpandPurchaseOrders:
		return "purchase_orders"
	case InvoicesRetrieveRequestExpandPurchaseOrdersAccountingPeriod:
		return "purchase_orders,accounting_period"
	case InvoicesRetrieveRequestExpandPurchaseOrdersCompany:
		return "purchase_orders,company"
	case InvoicesRetrieveRequestExpandPurchaseOrdersCompanyAccountingPeriod:
		return "purchase_orders,company,accounting_period"
	case InvoicesRetrieveRequestExpandPurchaseOrdersContact:
		return "purchase_orders,contact"
	case InvoicesRetrieveRequestExpandPurchaseOrdersContactAccountingPeriod:
		return "purchase_orders,contact,accounting_period"
	case InvoicesRetrieveRequestExpandPurchaseOrdersContactCompany:
		return "purchase_orders,contact,company"
	case InvoicesRetrieveRequestExpandPurchaseOrdersContactCompanyAccountingPeriod:
		return "purchase_orders,contact,company,accounting_period"
	case InvoicesRetrieveRequestExpandTrackingCategories:
		return "tracking_categories"
	case InvoicesRetrieveRequestExpandTrackingCategoriesAccountingPeriod:
		return "tracking_categories,accounting_period"
	case InvoicesRetrieveRequestExpandTrackingCategoriesCompany:
		return "tracking_categories,company"
	case InvoicesRetrieveRequestExpandTrackingCategoriesCompanyAccountingPeriod:
		return "tracking_categories,company,accounting_period"
	case InvoicesRetrieveRequestExpandTrackingCategoriesContact:
		return "tracking_categories,contact"
	case InvoicesRetrieveRequestExpandTrackingCategoriesContactAccountingPeriod:
		return "tracking_categories,contact,accounting_period"
	case InvoicesRetrieveRequestExpandTrackingCategoriesContactCompany:
		return "tracking_categories,contact,company"
	case InvoicesRetrieveRequestExpandTrackingCategoriesContactCompanyAccountingPeriod:
		return "tracking_categories,contact,company,accounting_period"
	case InvoicesRetrieveRequestExpandTrackingCategoriesPurchaseOrders:
		return "tracking_categories,purchase_orders"
	case InvoicesRetrieveRequestExpandTrackingCategoriesPurchaseOrdersAccountingPeriod:
		return "tracking_categories,purchase_orders,accounting_period"
	case InvoicesRetrieveRequestExpandTrackingCategoriesPurchaseOrdersCompany:
		return "tracking_categories,purchase_orders,company"
	case InvoicesRetrieveRequestExpandTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod:
		return "tracking_categories,purchase_orders,company,accounting_period"
	case InvoicesRetrieveRequestExpandTrackingCategoriesPurchaseOrdersContact:
		return "tracking_categories,purchase_orders,contact"
	case InvoicesRetrieveRequestExpandTrackingCategoriesPurchaseOrdersContactAccountingPeriod:
		return "tracking_categories,purchase_orders,contact,accounting_period"
	case InvoicesRetrieveRequestExpandTrackingCategoriesPurchaseOrdersContactCompany:
		return "tracking_categories,purchase_orders,contact,company"
	case InvoicesRetrieveRequestExpandTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod:
		return "tracking_categories,purchase_orders,contact,company,accounting_period"
	}
}

func (i InvoicesRetrieveRequestExpand) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", i.String())), nil
}

func (i *InvoicesRetrieveRequestExpand) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "accounting_period":
		value := InvoicesRetrieveRequestExpandAccountingPeriod
		*i = value
	case "applied_payments":
		value := InvoicesRetrieveRequestExpandAppliedPayments
		*i = value
	case "applied_payments,accounting_period":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsAccountingPeriod
		*i = value
	case "applied_payments,company":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsCompany
		*i = value
	case "applied_payments,company,accounting_period":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsCompanyAccountingPeriod
		*i = value
	case "applied_payments,contact":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsContact
		*i = value
	case "applied_payments,contact,accounting_period":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsContactAccountingPeriod
		*i = value
	case "applied_payments,contact,company":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsContactCompany
		*i = value
	case "applied_payments,contact,company,accounting_period":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsContactCompanyAccountingPeriod
		*i = value
	case "applied_payments,line_items":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsLineItems
		*i = value
	case "applied_payments,line_items,accounting_period":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsAccountingPeriod
		*i = value
	case "applied_payments,line_items,company":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsCompany
		*i = value
	case "applied_payments,line_items,company,accounting_period":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsCompanyAccountingPeriod
		*i = value
	case "applied_payments,line_items,contact":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsContact
		*i = value
	case "applied_payments,line_items,contact,accounting_period":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsContactAccountingPeriod
		*i = value
	case "applied_payments,line_items,contact,company":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsContactCompany
		*i = value
	case "applied_payments,line_items,contact,company,accounting_period":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsContactCompanyAccountingPeriod
		*i = value
	case "applied_payments,line_items,purchase_orders":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsPurchaseOrders
		*i = value
	case "applied_payments,line_items,purchase_orders,accounting_period":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsPurchaseOrdersAccountingPeriod
		*i = value
	case "applied_payments,line_items,purchase_orders,company":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsPurchaseOrdersCompany
		*i = value
	case "applied_payments,line_items,purchase_orders,company,accounting_period":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsPurchaseOrdersCompanyAccountingPeriod
		*i = value
	case "applied_payments,line_items,purchase_orders,contact":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsPurchaseOrdersContact
		*i = value
	case "applied_payments,line_items,purchase_orders,contact,accounting_period":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsPurchaseOrdersContactAccountingPeriod
		*i = value
	case "applied_payments,line_items,purchase_orders,contact,company":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsPurchaseOrdersContactCompany
		*i = value
	case "applied_payments,line_items,purchase_orders,contact,company,accounting_period":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsPurchaseOrdersContactCompanyAccountingPeriod
		*i = value
	case "applied_payments,line_items,tracking_categories":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategories
		*i = value
	case "applied_payments,line_items,tracking_categories,accounting_period":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesAccountingPeriod
		*i = value
	case "applied_payments,line_items,tracking_categories,company":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesCompany
		*i = value
	case "applied_payments,line_items,tracking_categories,company,accounting_period":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesCompanyAccountingPeriod
		*i = value
	case "applied_payments,line_items,tracking_categories,contact":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContact
		*i = value
	case "applied_payments,line_items,tracking_categories,contact,accounting_period":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContactAccountingPeriod
		*i = value
	case "applied_payments,line_items,tracking_categories,contact,company":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContactCompany
		*i = value
	case "applied_payments,line_items,tracking_categories,contact,company,accounting_period":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesContactCompanyAccountingPeriod
		*i = value
	case "applied_payments,line_items,tracking_categories,purchase_orders":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrders
		*i = value
	case "applied_payments,line_items,tracking_categories,purchase_orders,accounting_period":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersAccountingPeriod
		*i = value
	case "applied_payments,line_items,tracking_categories,purchase_orders,company":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersCompany
		*i = value
	case "applied_payments,line_items,tracking_categories,purchase_orders,company,accounting_period":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod
		*i = value
	case "applied_payments,line_items,tracking_categories,purchase_orders,contact":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContact
		*i = value
	case "applied_payments,line_items,tracking_categories,purchase_orders,contact,accounting_period":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactAccountingPeriod
		*i = value
	case "applied_payments,line_items,tracking_categories,purchase_orders,contact,company":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactCompany
		*i = value
	case "applied_payments,line_items,tracking_categories,purchase_orders,contact,company,accounting_period":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod
		*i = value
	case "applied_payments,purchase_orders":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsPurchaseOrders
		*i = value
	case "applied_payments,purchase_orders,accounting_period":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsPurchaseOrdersAccountingPeriod
		*i = value
	case "applied_payments,purchase_orders,company":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsPurchaseOrdersCompany
		*i = value
	case "applied_payments,purchase_orders,company,accounting_period":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsPurchaseOrdersCompanyAccountingPeriod
		*i = value
	case "applied_payments,purchase_orders,contact":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsPurchaseOrdersContact
		*i = value
	case "applied_payments,purchase_orders,contact,accounting_period":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsPurchaseOrdersContactAccountingPeriod
		*i = value
	case "applied_payments,purchase_orders,contact,company":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsPurchaseOrdersContactCompany
		*i = value
	case "applied_payments,purchase_orders,contact,company,accounting_period":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsPurchaseOrdersContactCompanyAccountingPeriod
		*i = value
	case "applied_payments,tracking_categories":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategories
		*i = value
	case "applied_payments,tracking_categories,accounting_period":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesAccountingPeriod
		*i = value
	case "applied_payments,tracking_categories,company":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesCompany
		*i = value
	case "applied_payments,tracking_categories,company,accounting_period":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod
		*i = value
	case "applied_payments,tracking_categories,contact":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesContact
		*i = value
	case "applied_payments,tracking_categories,contact,accounting_period":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesContactAccountingPeriod
		*i = value
	case "applied_payments,tracking_categories,contact,company":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesContactCompany
		*i = value
	case "applied_payments,tracking_categories,contact,company,accounting_period":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesContactCompanyAccountingPeriod
		*i = value
	case "applied_payments,tracking_categories,purchase_orders":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrders
		*i = value
	case "applied_payments,tracking_categories,purchase_orders,accounting_period":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrdersAccountingPeriod
		*i = value
	case "applied_payments,tracking_categories,purchase_orders,company":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrdersCompany
		*i = value
	case "applied_payments,tracking_categories,purchase_orders,company,accounting_period":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod
		*i = value
	case "applied_payments,tracking_categories,purchase_orders,contact":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrdersContact
		*i = value
	case "applied_payments,tracking_categories,purchase_orders,contact,accounting_period":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrdersContactAccountingPeriod
		*i = value
	case "applied_payments,tracking_categories,purchase_orders,contact,company":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrdersContactCompany
		*i = value
	case "applied_payments,tracking_categories,purchase_orders,contact,company,accounting_period":
		value := InvoicesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod
		*i = value
	case "company":
		value := InvoicesRetrieveRequestExpandCompany
		*i = value
	case "company,accounting_period":
		value := InvoicesRetrieveRequestExpandCompanyAccountingPeriod
		*i = value
	case "contact":
		value := InvoicesRetrieveRequestExpandContact
		*i = value
	case "contact,accounting_period":
		value := InvoicesRetrieveRequestExpandContactAccountingPeriod
		*i = value
	case "contact,company":
		value := InvoicesRetrieveRequestExpandContactCompany
		*i = value
	case "contact,company,accounting_period":
		value := InvoicesRetrieveRequestExpandContactCompanyAccountingPeriod
		*i = value
	case "line_items":
		value := InvoicesRetrieveRequestExpandLineItems
		*i = value
	case "line_items,accounting_period":
		value := InvoicesRetrieveRequestExpandLineItemsAccountingPeriod
		*i = value
	case "line_items,company":
		value := InvoicesRetrieveRequestExpandLineItemsCompany
		*i = value
	case "line_items,company,accounting_period":
		value := InvoicesRetrieveRequestExpandLineItemsCompanyAccountingPeriod
		*i = value
	case "line_items,contact":
		value := InvoicesRetrieveRequestExpandLineItemsContact
		*i = value
	case "line_items,contact,accounting_period":
		value := InvoicesRetrieveRequestExpandLineItemsContactAccountingPeriod
		*i = value
	case "line_items,contact,company":
		value := InvoicesRetrieveRequestExpandLineItemsContactCompany
		*i = value
	case "line_items,contact,company,accounting_period":
		value := InvoicesRetrieveRequestExpandLineItemsContactCompanyAccountingPeriod
		*i = value
	case "line_items,purchase_orders":
		value := InvoicesRetrieveRequestExpandLineItemsPurchaseOrders
		*i = value
	case "line_items,purchase_orders,accounting_period":
		value := InvoicesRetrieveRequestExpandLineItemsPurchaseOrdersAccountingPeriod
		*i = value
	case "line_items,purchase_orders,company":
		value := InvoicesRetrieveRequestExpandLineItemsPurchaseOrdersCompany
		*i = value
	case "line_items,purchase_orders,company,accounting_period":
		value := InvoicesRetrieveRequestExpandLineItemsPurchaseOrdersCompanyAccountingPeriod
		*i = value
	case "line_items,purchase_orders,contact":
		value := InvoicesRetrieveRequestExpandLineItemsPurchaseOrdersContact
		*i = value
	case "line_items,purchase_orders,contact,accounting_period":
		value := InvoicesRetrieveRequestExpandLineItemsPurchaseOrdersContactAccountingPeriod
		*i = value
	case "line_items,purchase_orders,contact,company":
		value := InvoicesRetrieveRequestExpandLineItemsPurchaseOrdersContactCompany
		*i = value
	case "line_items,purchase_orders,contact,company,accounting_period":
		value := InvoicesRetrieveRequestExpandLineItemsPurchaseOrdersContactCompanyAccountingPeriod
		*i = value
	case "line_items,tracking_categories":
		value := InvoicesRetrieveRequestExpandLineItemsTrackingCategories
		*i = value
	case "line_items,tracking_categories,accounting_period":
		value := InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesAccountingPeriod
		*i = value
	case "line_items,tracking_categories,company":
		value := InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesCompany
		*i = value
	case "line_items,tracking_categories,company,accounting_period":
		value := InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesCompanyAccountingPeriod
		*i = value
	case "line_items,tracking_categories,contact":
		value := InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesContact
		*i = value
	case "line_items,tracking_categories,contact,accounting_period":
		value := InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesContactAccountingPeriod
		*i = value
	case "line_items,tracking_categories,contact,company":
		value := InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesContactCompany
		*i = value
	case "line_items,tracking_categories,contact,company,accounting_period":
		value := InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesContactCompanyAccountingPeriod
		*i = value
	case "line_items,tracking_categories,purchase_orders":
		value := InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesPurchaseOrders
		*i = value
	case "line_items,tracking_categories,purchase_orders,accounting_period":
		value := InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesPurchaseOrdersAccountingPeriod
		*i = value
	case "line_items,tracking_categories,purchase_orders,company":
		value := InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesPurchaseOrdersCompany
		*i = value
	case "line_items,tracking_categories,purchase_orders,company,accounting_period":
		value := InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod
		*i = value
	case "line_items,tracking_categories,purchase_orders,contact":
		value := InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesPurchaseOrdersContact
		*i = value
	case "line_items,tracking_categories,purchase_orders,contact,accounting_period":
		value := InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesPurchaseOrdersContactAccountingPeriod
		*i = value
	case "line_items,tracking_categories,purchase_orders,contact,company":
		value := InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesPurchaseOrdersContactCompany
		*i = value
	case "line_items,tracking_categories,purchase_orders,contact,company,accounting_period":
		value := InvoicesRetrieveRequestExpandLineItemsTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod
		*i = value
	case "payments":
		value := InvoicesRetrieveRequestExpandPayments
		*i = value
	case "payments,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsAccountingPeriod
		*i = value
	case "payments,applied_payments":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPayments
		*i = value
	case "payments,applied_payments,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsAccountingPeriod
		*i = value
	case "payments,applied_payments,company":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsCompany
		*i = value
	case "payments,applied_payments,company,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsCompanyAccountingPeriod
		*i = value
	case "payments,applied_payments,contact":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsContact
		*i = value
	case "payments,applied_payments,contact,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsContactAccountingPeriod
		*i = value
	case "payments,applied_payments,contact,company":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsContactCompany
		*i = value
	case "payments,applied_payments,contact,company,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsContactCompanyAccountingPeriod
		*i = value
	case "payments,applied_payments,line_items":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItems
		*i = value
	case "payments,applied_payments,line_items,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsAccountingPeriod
		*i = value
	case "payments,applied_payments,line_items,company":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsCompany
		*i = value
	case "payments,applied_payments,line_items,company,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsCompanyAccountingPeriod
		*i = value
	case "payments,applied_payments,line_items,contact":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsContact
		*i = value
	case "payments,applied_payments,line_items,contact,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsContactAccountingPeriod
		*i = value
	case "payments,applied_payments,line_items,contact,company":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsContactCompany
		*i = value
	case "payments,applied_payments,line_items,contact,company,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsContactCompanyAccountingPeriod
		*i = value
	case "payments,applied_payments,line_items,purchase_orders":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrders
		*i = value
	case "payments,applied_payments,line_items,purchase_orders,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrdersAccountingPeriod
		*i = value
	case "payments,applied_payments,line_items,purchase_orders,company":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrdersCompany
		*i = value
	case "payments,applied_payments,line_items,purchase_orders,company,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrdersCompanyAccountingPeriod
		*i = value
	case "payments,applied_payments,line_items,purchase_orders,contact":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrdersContact
		*i = value
	case "payments,applied_payments,line_items,purchase_orders,contact,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrdersContactAccountingPeriod
		*i = value
	case "payments,applied_payments,line_items,purchase_orders,contact,company":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrdersContactCompany
		*i = value
	case "payments,applied_payments,line_items,purchase_orders,contact,company,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsPurchaseOrdersContactCompanyAccountingPeriod
		*i = value
	case "payments,applied_payments,line_items,tracking_categories":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategories
		*i = value
	case "payments,applied_payments,line_items,tracking_categories,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesAccountingPeriod
		*i = value
	case "payments,applied_payments,line_items,tracking_categories,company":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesCompany
		*i = value
	case "payments,applied_payments,line_items,tracking_categories,company,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesCompanyAccountingPeriod
		*i = value
	case "payments,applied_payments,line_items,tracking_categories,contact":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContact
		*i = value
	case "payments,applied_payments,line_items,tracking_categories,contact,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContactAccountingPeriod
		*i = value
	case "payments,applied_payments,line_items,tracking_categories,contact,company":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContactCompany
		*i = value
	case "payments,applied_payments,line_items,tracking_categories,contact,company,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesContactCompanyAccountingPeriod
		*i = value
	case "payments,applied_payments,line_items,tracking_categories,purchase_orders":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrders
		*i = value
	case "payments,applied_payments,line_items,tracking_categories,purchase_orders,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersAccountingPeriod
		*i = value
	case "payments,applied_payments,line_items,tracking_categories,purchase_orders,company":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersCompany
		*i = value
	case "payments,applied_payments,line_items,tracking_categories,purchase_orders,company,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod
		*i = value
	case "payments,applied_payments,line_items,tracking_categories,purchase_orders,contact":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContact
		*i = value
	case "payments,applied_payments,line_items,tracking_categories,purchase_orders,contact,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactAccountingPeriod
		*i = value
	case "payments,applied_payments,line_items,tracking_categories,purchase_orders,contact,company":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactCompany
		*i = value
	case "payments,applied_payments,line_items,tracking_categories,purchase_orders,contact,company,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod
		*i = value
	case "payments,applied_payments,purchase_orders":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsPurchaseOrders
		*i = value
	case "payments,applied_payments,purchase_orders,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsPurchaseOrdersAccountingPeriod
		*i = value
	case "payments,applied_payments,purchase_orders,company":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsPurchaseOrdersCompany
		*i = value
	case "payments,applied_payments,purchase_orders,company,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsPurchaseOrdersCompanyAccountingPeriod
		*i = value
	case "payments,applied_payments,purchase_orders,contact":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsPurchaseOrdersContact
		*i = value
	case "payments,applied_payments,purchase_orders,contact,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsPurchaseOrdersContactAccountingPeriod
		*i = value
	case "payments,applied_payments,purchase_orders,contact,company":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsPurchaseOrdersContactCompany
		*i = value
	case "payments,applied_payments,purchase_orders,contact,company,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsPurchaseOrdersContactCompanyAccountingPeriod
		*i = value
	case "payments,applied_payments,tracking_categories":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategories
		*i = value
	case "payments,applied_payments,tracking_categories,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesAccountingPeriod
		*i = value
	case "payments,applied_payments,tracking_categories,company":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesCompany
		*i = value
	case "payments,applied_payments,tracking_categories,company,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod
		*i = value
	case "payments,applied_payments,tracking_categories,contact":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContact
		*i = value
	case "payments,applied_payments,tracking_categories,contact,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContactAccountingPeriod
		*i = value
	case "payments,applied_payments,tracking_categories,contact,company":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContactCompany
		*i = value
	case "payments,applied_payments,tracking_categories,contact,company,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesContactCompanyAccountingPeriod
		*i = value
	case "payments,applied_payments,tracking_categories,purchase_orders":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrders
		*i = value
	case "payments,applied_payments,tracking_categories,purchase_orders,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrdersAccountingPeriod
		*i = value
	case "payments,applied_payments,tracking_categories,purchase_orders,company":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrdersCompany
		*i = value
	case "payments,applied_payments,tracking_categories,purchase_orders,company,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod
		*i = value
	case "payments,applied_payments,tracking_categories,purchase_orders,contact":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrdersContact
		*i = value
	case "payments,applied_payments,tracking_categories,purchase_orders,contact,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrdersContactAccountingPeriod
		*i = value
	case "payments,applied_payments,tracking_categories,purchase_orders,contact,company":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrdersContactCompany
		*i = value
	case "payments,applied_payments,tracking_categories,purchase_orders,contact,company,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod
		*i = value
	case "payments,company":
		value := InvoicesRetrieveRequestExpandPaymentsCompany
		*i = value
	case "payments,company,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsCompanyAccountingPeriod
		*i = value
	case "payments,contact":
		value := InvoicesRetrieveRequestExpandPaymentsContact
		*i = value
	case "payments,contact,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsContactAccountingPeriod
		*i = value
	case "payments,contact,company":
		value := InvoicesRetrieveRequestExpandPaymentsContactCompany
		*i = value
	case "payments,contact,company,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsContactCompanyAccountingPeriod
		*i = value
	case "payments,line_items":
		value := InvoicesRetrieveRequestExpandPaymentsLineItems
		*i = value
	case "payments,line_items,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsLineItemsAccountingPeriod
		*i = value
	case "payments,line_items,company":
		value := InvoicesRetrieveRequestExpandPaymentsLineItemsCompany
		*i = value
	case "payments,line_items,company,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsLineItemsCompanyAccountingPeriod
		*i = value
	case "payments,line_items,contact":
		value := InvoicesRetrieveRequestExpandPaymentsLineItemsContact
		*i = value
	case "payments,line_items,contact,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsLineItemsContactAccountingPeriod
		*i = value
	case "payments,line_items,contact,company":
		value := InvoicesRetrieveRequestExpandPaymentsLineItemsContactCompany
		*i = value
	case "payments,line_items,contact,company,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsLineItemsContactCompanyAccountingPeriod
		*i = value
	case "payments,line_items,purchase_orders":
		value := InvoicesRetrieveRequestExpandPaymentsLineItemsPurchaseOrders
		*i = value
	case "payments,line_items,purchase_orders,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsLineItemsPurchaseOrdersAccountingPeriod
		*i = value
	case "payments,line_items,purchase_orders,company":
		value := InvoicesRetrieveRequestExpandPaymentsLineItemsPurchaseOrdersCompany
		*i = value
	case "payments,line_items,purchase_orders,company,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsLineItemsPurchaseOrdersCompanyAccountingPeriod
		*i = value
	case "payments,line_items,purchase_orders,contact":
		value := InvoicesRetrieveRequestExpandPaymentsLineItemsPurchaseOrdersContact
		*i = value
	case "payments,line_items,purchase_orders,contact,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsLineItemsPurchaseOrdersContactAccountingPeriod
		*i = value
	case "payments,line_items,purchase_orders,contact,company":
		value := InvoicesRetrieveRequestExpandPaymentsLineItemsPurchaseOrdersContactCompany
		*i = value
	case "payments,line_items,purchase_orders,contact,company,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsLineItemsPurchaseOrdersContactCompanyAccountingPeriod
		*i = value
	case "payments,line_items,tracking_categories":
		value := InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategories
		*i = value
	case "payments,line_items,tracking_categories,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesAccountingPeriod
		*i = value
	case "payments,line_items,tracking_categories,company":
		value := InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesCompany
		*i = value
	case "payments,line_items,tracking_categories,company,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesCompanyAccountingPeriod
		*i = value
	case "payments,line_items,tracking_categories,contact":
		value := InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesContact
		*i = value
	case "payments,line_items,tracking_categories,contact,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesContactAccountingPeriod
		*i = value
	case "payments,line_items,tracking_categories,contact,company":
		value := InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesContactCompany
		*i = value
	case "payments,line_items,tracking_categories,contact,company,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesContactCompanyAccountingPeriod
		*i = value
	case "payments,line_items,tracking_categories,purchase_orders":
		value := InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrders
		*i = value
	case "payments,line_items,tracking_categories,purchase_orders,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrdersAccountingPeriod
		*i = value
	case "payments,line_items,tracking_categories,purchase_orders,company":
		value := InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrdersCompany
		*i = value
	case "payments,line_items,tracking_categories,purchase_orders,company,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod
		*i = value
	case "payments,line_items,tracking_categories,purchase_orders,contact":
		value := InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrdersContact
		*i = value
	case "payments,line_items,tracking_categories,purchase_orders,contact,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactAccountingPeriod
		*i = value
	case "payments,line_items,tracking_categories,purchase_orders,contact,company":
		value := InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactCompany
		*i = value
	case "payments,line_items,tracking_categories,purchase_orders,contact,company,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsLineItemsTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod
		*i = value
	case "payments,purchase_orders":
		value := InvoicesRetrieveRequestExpandPaymentsPurchaseOrders
		*i = value
	case "payments,purchase_orders,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsPurchaseOrdersAccountingPeriod
		*i = value
	case "payments,purchase_orders,company":
		value := InvoicesRetrieveRequestExpandPaymentsPurchaseOrdersCompany
		*i = value
	case "payments,purchase_orders,company,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsPurchaseOrdersCompanyAccountingPeriod
		*i = value
	case "payments,purchase_orders,contact":
		value := InvoicesRetrieveRequestExpandPaymentsPurchaseOrdersContact
		*i = value
	case "payments,purchase_orders,contact,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsPurchaseOrdersContactAccountingPeriod
		*i = value
	case "payments,purchase_orders,contact,company":
		value := InvoicesRetrieveRequestExpandPaymentsPurchaseOrdersContactCompany
		*i = value
	case "payments,purchase_orders,contact,company,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsPurchaseOrdersContactCompanyAccountingPeriod
		*i = value
	case "payments,tracking_categories":
		value := InvoicesRetrieveRequestExpandPaymentsTrackingCategories
		*i = value
	case "payments,tracking_categories,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesAccountingPeriod
		*i = value
	case "payments,tracking_categories,company":
		value := InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesCompany
		*i = value
	case "payments,tracking_categories,company,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesCompanyAccountingPeriod
		*i = value
	case "payments,tracking_categories,contact":
		value := InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesContact
		*i = value
	case "payments,tracking_categories,contact,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesContactAccountingPeriod
		*i = value
	case "payments,tracking_categories,contact,company":
		value := InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesContactCompany
		*i = value
	case "payments,tracking_categories,contact,company,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesContactCompanyAccountingPeriod
		*i = value
	case "payments,tracking_categories,purchase_orders":
		value := InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesPurchaseOrders
		*i = value
	case "payments,tracking_categories,purchase_orders,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesPurchaseOrdersAccountingPeriod
		*i = value
	case "payments,tracking_categories,purchase_orders,company":
		value := InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesPurchaseOrdersCompany
		*i = value
	case "payments,tracking_categories,purchase_orders,company,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod
		*i = value
	case "payments,tracking_categories,purchase_orders,contact":
		value := InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesPurchaseOrdersContact
		*i = value
	case "payments,tracking_categories,purchase_orders,contact,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesPurchaseOrdersContactAccountingPeriod
		*i = value
	case "payments,tracking_categories,purchase_orders,contact,company":
		value := InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesPurchaseOrdersContactCompany
		*i = value
	case "payments,tracking_categories,purchase_orders,contact,company,accounting_period":
		value := InvoicesRetrieveRequestExpandPaymentsTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod
		*i = value
	case "purchase_orders":
		value := InvoicesRetrieveRequestExpandPurchaseOrders
		*i = value
	case "purchase_orders,accounting_period":
		value := InvoicesRetrieveRequestExpandPurchaseOrdersAccountingPeriod
		*i = value
	case "purchase_orders,company":
		value := InvoicesRetrieveRequestExpandPurchaseOrdersCompany
		*i = value
	case "purchase_orders,company,accounting_period":
		value := InvoicesRetrieveRequestExpandPurchaseOrdersCompanyAccountingPeriod
		*i = value
	case "purchase_orders,contact":
		value := InvoicesRetrieveRequestExpandPurchaseOrdersContact
		*i = value
	case "purchase_orders,contact,accounting_period":
		value := InvoicesRetrieveRequestExpandPurchaseOrdersContactAccountingPeriod
		*i = value
	case "purchase_orders,contact,company":
		value := InvoicesRetrieveRequestExpandPurchaseOrdersContactCompany
		*i = value
	case "purchase_orders,contact,company,accounting_period":
		value := InvoicesRetrieveRequestExpandPurchaseOrdersContactCompanyAccountingPeriod
		*i = value
	case "tracking_categories":
		value := InvoicesRetrieveRequestExpandTrackingCategories
		*i = value
	case "tracking_categories,accounting_period":
		value := InvoicesRetrieveRequestExpandTrackingCategoriesAccountingPeriod
		*i = value
	case "tracking_categories,company":
		value := InvoicesRetrieveRequestExpandTrackingCategoriesCompany
		*i = value
	case "tracking_categories,company,accounting_period":
		value := InvoicesRetrieveRequestExpandTrackingCategoriesCompanyAccountingPeriod
		*i = value
	case "tracking_categories,contact":
		value := InvoicesRetrieveRequestExpandTrackingCategoriesContact
		*i = value
	case "tracking_categories,contact,accounting_period":
		value := InvoicesRetrieveRequestExpandTrackingCategoriesContactAccountingPeriod
		*i = value
	case "tracking_categories,contact,company":
		value := InvoicesRetrieveRequestExpandTrackingCategoriesContactCompany
		*i = value
	case "tracking_categories,contact,company,accounting_period":
		value := InvoicesRetrieveRequestExpandTrackingCategoriesContactCompanyAccountingPeriod
		*i = value
	case "tracking_categories,purchase_orders":
		value := InvoicesRetrieveRequestExpandTrackingCategoriesPurchaseOrders
		*i = value
	case "tracking_categories,purchase_orders,accounting_period":
		value := InvoicesRetrieveRequestExpandTrackingCategoriesPurchaseOrdersAccountingPeriod
		*i = value
	case "tracking_categories,purchase_orders,company":
		value := InvoicesRetrieveRequestExpandTrackingCategoriesPurchaseOrdersCompany
		*i = value
	case "tracking_categories,purchase_orders,company,accounting_period":
		value := InvoicesRetrieveRequestExpandTrackingCategoriesPurchaseOrdersCompanyAccountingPeriod
		*i = value
	case "tracking_categories,purchase_orders,contact":
		value := InvoicesRetrieveRequestExpandTrackingCategoriesPurchaseOrdersContact
		*i = value
	case "tracking_categories,purchase_orders,contact,accounting_period":
		value := InvoicesRetrieveRequestExpandTrackingCategoriesPurchaseOrdersContactAccountingPeriod
		*i = value
	case "tracking_categories,purchase_orders,contact,company":
		value := InvoicesRetrieveRequestExpandTrackingCategoriesPurchaseOrdersContactCompany
		*i = value
	case "tracking_categories,purchase_orders,contact,company,accounting_period":
		value := InvoicesRetrieveRequestExpandTrackingCategoriesPurchaseOrdersContactCompanyAccountingPeriod
		*i = value
	}
	return nil
}

type Issue struct {
	Id *string `json:"id,omitempty"`
	// Status of the issue. Options: ('ONGOING', 'RESOLVED')
	//
	// * `ONGOING` - ONGOING
	// * `RESOLVED` - RESOLVED
	Status            *IssueStatus   `json:"status,omitempty"`
	ErrorDescription  string         `json:"error_description"`
	EndUser           map[string]any `json:"end_user,omitempty"`
	FirstIncidentTime *time.Time     `json:"first_incident_time,omitempty"`
	LastIncidentTime  *time.Time     `json:"last_incident_time,omitempty"`
	IsMuted           *bool          `json:"is_muted,omitempty"`
	ErrorDetails      []string       `json:"error_details,omitempty"`
}

// Status of the issue. Options: ('ONGOING', 'RESOLVED')
//
// * `ONGOING` - ONGOING
// * `RESOLVED` - RESOLVED
type IssueStatus struct {
	typeName        string
	IssueStatusEnum IssueStatusEnum
	String          string
}

func NewIssueStatusFromIssueStatusEnum(value IssueStatusEnum) *IssueStatus {
	return &IssueStatus{typeName: "issueStatusEnum", IssueStatusEnum: value}
}

func NewIssueStatusFromString(value string) *IssueStatus {
	return &IssueStatus{typeName: "string", String: value}
}

func (i *IssueStatus) UnmarshalJSON(data []byte) error {
	var valueIssueStatusEnum IssueStatusEnum
	if err := json.Unmarshal(data, &valueIssueStatusEnum); err == nil {
		i.typeName = "issueStatusEnum"
		i.IssueStatusEnum = valueIssueStatusEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typeName = "string"
		i.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i IssueStatus) MarshalJSON() ([]byte, error) {
	switch i.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "issueStatusEnum":
		return json.Marshal(i.IssueStatusEnum)
	case "string":
		return json.Marshal(i.String)
	}
}

type IssueStatusVisitor interface {
	VisitIssueStatusEnum(IssueStatusEnum) error
	VisitString(string) error
}

func (i *IssueStatus) Accept(visitor IssueStatusVisitor) error {
	switch i.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "issueStatusEnum":
		return visitor.VisitIssueStatusEnum(i.IssueStatusEnum)
	case "string":
		return visitor.VisitString(i.String)
	}
}

// * `ONGOING` - ONGOING
// * `RESOLVED` - RESOLVED
type IssueStatusEnum uint

const (
	IssueStatusEnumOngoing IssueStatusEnum = iota + 1
	IssueStatusEnumResolved
)

func (i IssueStatusEnum) String() string {
	switch i {
	default:
		return strconv.Itoa(int(i))
	case IssueStatusEnumOngoing:
		return "ONGOING"
	case IssueStatusEnumResolved:
		return "RESOLVED"
	}
}

func (i IssueStatusEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", i.String())), nil
}

func (i *IssueStatusEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "ONGOING":
		value := IssueStatusEnumOngoing
		*i = value
	case "RESOLVED":
		value := IssueStatusEnumResolved
		*i = value
	}
	return nil
}

type IssuesListRequestStatus uint

const (
	IssuesListRequestStatusOngoing IssuesListRequestStatus = iota + 1
	IssuesListRequestStatusResolved
)

func (i IssuesListRequestStatus) String() string {
	switch i {
	default:
		return strconv.Itoa(int(i))
	case IssuesListRequestStatusOngoing:
		return "ONGOING"
	case IssuesListRequestStatusResolved:
		return "RESOLVED"
	}
}

func (i IssuesListRequestStatus) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", i.String())), nil
}

func (i *IssuesListRequestStatus) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "ONGOING":
		value := IssuesListRequestStatusOngoing
		*i = value
	case "RESOLVED":
		value := IssuesListRequestStatusResolved
		*i = value
	}
	return nil
}

// # The Item Object
// ### Description
// The `Item` object refers to the goods involved in a transaction.
//
// ### Usage Example
// Fetch from the `LIST Items` endpoint and view a company's items.
type Item struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The item's name.
	Name *string `json:"name,omitempty"`
	// The item's status.
	//
	// * `ACTIVE` - ACTIVE
	// * `ARCHIVED` - ARCHIVED
	Status *ItemStatus `json:"status,omitempty"`
	// The item's unit price.
	UnitPrice *float64 `json:"unit_price,omitempty"`
	// The price at which the item is purchased from a vendor.
	PurchasePrice *float64 `json:"purchase_price,omitempty"`
	// References the default account used to record a purchase of the item.
	PurchaseAccount *ItemPurchaseAccount `json:"purchase_account,omitempty"`
	// References the default account used to record a sale.
	SalesAccount *ItemSalesAccount `json:"sales_account,omitempty"`
	// The company the item belongs to.
	Company *ItemCompany `json:"company,omitempty"`
	// When the third party's item note was updated.
	RemoteUpdatedAt *time.Time `json:"remote_updated_at,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted *bool      `json:"remote_was_deleted,omitempty"`
	CreatedAt        *time.Time `json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt    *time.Time     `json:"modified_at,omitempty"`
	FieldMappings map[string]any `json:"field_mappings,omitempty"`
	RemoteData    []*RemoteData  `json:"remote_data,omitempty"`
}

// The company the item belongs to.
type ItemCompany struct {
	typeName    string
	String      string
	CompanyInfo *CompanyInfo
}

func NewItemCompanyFromString(value string) *ItemCompany {
	return &ItemCompany{typeName: "string", String: value}
}

func NewItemCompanyFromCompanyInfo(value *CompanyInfo) *ItemCompany {
	return &ItemCompany{typeName: "companyInfo", CompanyInfo: value}
}

func (i *ItemCompany) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typeName = "string"
		i.String = valueString
		return nil
	}
	valueCompanyInfo := new(CompanyInfo)
	if err := json.Unmarshal(data, &valueCompanyInfo); err == nil {
		i.typeName = "companyInfo"
		i.CompanyInfo = valueCompanyInfo
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i ItemCompany) MarshalJSON() ([]byte, error) {
	switch i.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return json.Marshal(i.String)
	case "companyInfo":
		return json.Marshal(i.CompanyInfo)
	}
}

type ItemCompanyVisitor interface {
	VisitString(string) error
	VisitCompanyInfo(*CompanyInfo) error
}

func (i *ItemCompany) Accept(visitor ItemCompanyVisitor) error {
	switch i.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return visitor.VisitString(i.String)
	case "companyInfo":
		return visitor.VisitCompanyInfo(i.CompanyInfo)
	}
}

// References the default account used to record a purchase of the item.
type ItemPurchaseAccount struct {
	typeName string
	String   string
	Account  *Account
}

func NewItemPurchaseAccountFromString(value string) *ItemPurchaseAccount {
	return &ItemPurchaseAccount{typeName: "string", String: value}
}

func NewItemPurchaseAccountFromAccount(value *Account) *ItemPurchaseAccount {
	return &ItemPurchaseAccount{typeName: "account", Account: value}
}

func (i *ItemPurchaseAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typeName = "string"
		i.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		i.typeName = "account"
		i.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i ItemPurchaseAccount) MarshalJSON() ([]byte, error) {
	switch i.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return json.Marshal(i.String)
	case "account":
		return json.Marshal(i.Account)
	}
}

type ItemPurchaseAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (i *ItemPurchaseAccount) Accept(visitor ItemPurchaseAccountVisitor) error {
	switch i.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return visitor.VisitString(i.String)
	case "account":
		return visitor.VisitAccount(i.Account)
	}
}

// References the default account used to record a sale.
type ItemSalesAccount struct {
	typeName string
	String   string
	Account  *Account
}

func NewItemSalesAccountFromString(value string) *ItemSalesAccount {
	return &ItemSalesAccount{typeName: "string", String: value}
}

func NewItemSalesAccountFromAccount(value *Account) *ItemSalesAccount {
	return &ItemSalesAccount{typeName: "account", Account: value}
}

func (i *ItemSalesAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typeName = "string"
		i.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		i.typeName = "account"
		i.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i ItemSalesAccount) MarshalJSON() ([]byte, error) {
	switch i.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return json.Marshal(i.String)
	case "account":
		return json.Marshal(i.Account)
	}
}

type ItemSalesAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (i *ItemSalesAccount) Accept(visitor ItemSalesAccountVisitor) error {
	switch i.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "string":
		return visitor.VisitString(i.String)
	case "account":
		return visitor.VisitAccount(i.Account)
	}
}

// The item's status.
//
// * `ACTIVE` - ACTIVE
// * `ARCHIVED` - ARCHIVED
type ItemStatus struct {
	typeName      string
	Status7D1Enum Status7D1Enum
	String        string
}

func NewItemStatusFromStatus7D1Enum(value Status7D1Enum) *ItemStatus {
	return &ItemStatus{typeName: "status7D1Enum", Status7D1Enum: value}
}

func NewItemStatusFromString(value string) *ItemStatus {
	return &ItemStatus{typeName: "string", String: value}
}

func (i *ItemStatus) UnmarshalJSON(data []byte) error {
	var valueStatus7D1Enum Status7D1Enum
	if err := json.Unmarshal(data, &valueStatus7D1Enum); err == nil {
		i.typeName = "status7D1Enum"
		i.Status7D1Enum = valueStatus7D1Enum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typeName = "string"
		i.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i ItemStatus) MarshalJSON() ([]byte, error) {
	switch i.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "status7D1Enum":
		return json.Marshal(i.Status7D1Enum)
	case "string":
		return json.Marshal(i.String)
	}
}

type ItemStatusVisitor interface {
	VisitStatus7D1Enum(Status7D1Enum) error
	VisitString(string) error
}

func (i *ItemStatus) Accept(visitor ItemStatusVisitor) error {
	switch i.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "status7D1Enum":
		return visitor.VisitStatus7D1Enum(i.Status7D1Enum)
	case "string":
		return visitor.VisitString(i.String)
	}
}

type ItemsListRequestExpand uint

const (
	ItemsListRequestExpandCompany ItemsListRequestExpand = iota + 1
	ItemsListRequestExpandPurchaseAccount
	ItemsListRequestExpandPurchaseAccountCompany
	ItemsListRequestExpandPurchaseAccountSalesAccount
	ItemsListRequestExpandPurchaseAccountSalesAccountCompany
	ItemsListRequestExpandSalesAccount
	ItemsListRequestExpandSalesAccountCompany
)

func (i ItemsListRequestExpand) String() string {
	switch i {
	default:
		return strconv.Itoa(int(i))
	case ItemsListRequestExpandCompany:
		return "company"
	case ItemsListRequestExpandPurchaseAccount:
		return "purchase_account"
	case ItemsListRequestExpandPurchaseAccountCompany:
		return "purchase_account,company"
	case ItemsListRequestExpandPurchaseAccountSalesAccount:
		return "purchase_account,sales_account"
	case ItemsListRequestExpandPurchaseAccountSalesAccountCompany:
		return "purchase_account,sales_account,company"
	case ItemsListRequestExpandSalesAccount:
		return "sales_account"
	case ItemsListRequestExpandSalesAccountCompany:
		return "sales_account,company"
	}
}

func (i ItemsListRequestExpand) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", i.String())), nil
}

func (i *ItemsListRequestExpand) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "company":
		value := ItemsListRequestExpandCompany
		*i = value
	case "purchase_account":
		value := ItemsListRequestExpandPurchaseAccount
		*i = value
	case "purchase_account,company":
		value := ItemsListRequestExpandPurchaseAccountCompany
		*i = value
	case "purchase_account,sales_account":
		value := ItemsListRequestExpandPurchaseAccountSalesAccount
		*i = value
	case "purchase_account,sales_account,company":
		value := ItemsListRequestExpandPurchaseAccountSalesAccountCompany
		*i = value
	case "sales_account":
		value := ItemsListRequestExpandSalesAccount
		*i = value
	case "sales_account,company":
		value := ItemsListRequestExpandSalesAccountCompany
		*i = value
	}
	return nil
}

type ItemsRetrieveRequestExpand uint

const (
	ItemsRetrieveRequestExpandCompany ItemsRetrieveRequestExpand = iota + 1
	ItemsRetrieveRequestExpandPurchaseAccount
	ItemsRetrieveRequestExpandPurchaseAccountCompany
	ItemsRetrieveRequestExpandPurchaseAccountSalesAccount
	ItemsRetrieveRequestExpandPurchaseAccountSalesAccountCompany
	ItemsRetrieveRequestExpandSalesAccount
	ItemsRetrieveRequestExpandSalesAccountCompany
)

func (i ItemsRetrieveRequestExpand) String() string {
	switch i {
	default:
		return strconv.Itoa(int(i))
	case ItemsRetrieveRequestExpandCompany:
		return "company"
	case ItemsRetrieveRequestExpandPurchaseAccount:
		return "purchase_account"
	case ItemsRetrieveRequestExpandPurchaseAccountCompany:
		return "purchase_account,company"
	case ItemsRetrieveRequestExpandPurchaseAccountSalesAccount:
		return "purchase_account,sales_account"
	case ItemsRetrieveRequestExpandPurchaseAccountSalesAccountCompany:
		return "purchase_account,sales_account,company"
	case ItemsRetrieveRequestExpandSalesAccount:
		return "sales_account"
	case ItemsRetrieveRequestExpandSalesAccountCompany:
		return "sales_account,company"
	}
}

func (i ItemsRetrieveRequestExpand) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", i.String())), nil
}

func (i *ItemsRetrieveRequestExpand) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "company":
		value := ItemsRetrieveRequestExpandCompany
		*i = value
	case "purchase_account":
		value := ItemsRetrieveRequestExpandPurchaseAccount
		*i = value
	case "purchase_account,company":
		value := ItemsRetrieveRequestExpandPurchaseAccountCompany
		*i = value
	case "purchase_account,sales_account":
		value := ItemsRetrieveRequestExpandPurchaseAccountSalesAccount
		*i = value
	case "purchase_account,sales_account,company":
		value := ItemsRetrieveRequestExpandPurchaseAccountSalesAccountCompany
		*i = value
	case "sales_account":
		value := ItemsRetrieveRequestExpandSalesAccount
		*i = value
	case "sales_account,company":
		value := ItemsRetrieveRequestExpandSalesAccountCompany
		*i = value
	}
	return nil
}

type JournalEntriesListRequestExpand uint

const (
	JournalEntriesListRequestExpandAccountingPeriod JournalEntriesListRequestExpand = iota + 1
	JournalEntriesListRequestExpandAppliedPayments
	JournalEntriesListRequestExpandAppliedPaymentsAccountingPeriod
	JournalEntriesListRequestExpandAppliedPaymentsCompany
	JournalEntriesListRequestExpandAppliedPaymentsCompanyAccountingPeriod
	JournalEntriesListRequestExpandAppliedPaymentsTrackingCategories
	JournalEntriesListRequestExpandAppliedPaymentsTrackingCategoriesAccountingPeriod
	JournalEntriesListRequestExpandAppliedPaymentsTrackingCategoriesCompany
	JournalEntriesListRequestExpandAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod
	JournalEntriesListRequestExpandCompany
	JournalEntriesListRequestExpandCompanyAccountingPeriod
	JournalEntriesListRequestExpandLines
	JournalEntriesListRequestExpandLinesAccountingPeriod
	JournalEntriesListRequestExpandLinesAppliedPayments
	JournalEntriesListRequestExpandLinesAppliedPaymentsAccountingPeriod
	JournalEntriesListRequestExpandLinesAppliedPaymentsCompany
	JournalEntriesListRequestExpandLinesAppliedPaymentsCompanyAccountingPeriod
	JournalEntriesListRequestExpandLinesAppliedPaymentsTrackingCategories
	JournalEntriesListRequestExpandLinesAppliedPaymentsTrackingCategoriesAccountingPeriod
	JournalEntriesListRequestExpandLinesAppliedPaymentsTrackingCategoriesCompany
	JournalEntriesListRequestExpandLinesAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod
	JournalEntriesListRequestExpandLinesCompany
	JournalEntriesListRequestExpandLinesCompanyAccountingPeriod
	JournalEntriesListRequestExpandLinesPayments
	JournalEntriesListRequestExpandLinesPaymentsAccountingPeriod
	JournalEntriesListRequestExpandLinesPaymentsAppliedPayments
	JournalEntriesListRequestExpandLinesPaymentsAppliedPaymentsAccountingPeriod
	JournalEntriesListRequestExpandLinesPaymentsAppliedPaymentsCompany
	JournalEntriesListRequestExpandLinesPaymentsAppliedPaymentsCompanyAccountingPeriod
	JournalEntriesListRequestExpandLinesPaymentsAppliedPaymentsTrackingCategories
	JournalEntriesListRequestExpandLinesPaymentsAppliedPaymentsTrackingCategoriesAccountingPeriod
	JournalEntriesListRequestExpandLinesPaymentsAppliedPaymentsTrackingCategoriesCompany
	JournalEntriesListRequestExpandLinesPaymentsAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod
	JournalEntriesListRequestExpandLinesPaymentsCompany
	JournalEntriesListRequestExpandLinesPaymentsCompanyAccountingPeriod
	JournalEntriesListRequestExpandLinesPaymentsTrackingCategories
	JournalEntriesListRequestExpandLinesPaymentsTrackingCategoriesAccountingPeriod
	JournalEntriesListRequestExpandLinesPaymentsTrackingCategoriesCompany
	JournalEntriesListRequestExpandLinesPaymentsTrackingCategoriesCompanyAccountingPeriod
	JournalEntriesListRequestExpandLinesTrackingCategories
	JournalEntriesListRequestExpandLinesTrackingCategoriesAccountingPeriod
	JournalEntriesListRequestExpandLinesTrackingCategoriesCompany
	JournalEntriesListRequestExpandLinesTrackingCategoriesCompanyAccountingPeriod
	JournalEntriesListRequestExpandPayments
	JournalEntriesListRequestExpandPaymentsAccountingPeriod
	JournalEntriesListRequestExpandPaymentsAppliedPayments
	JournalEntriesListRequestExpandPaymentsAppliedPaymentsAccountingPeriod
	JournalEntriesListRequestExpandPaymentsAppliedPaymentsCompany
	JournalEntriesListRequestExpandPaymentsAppliedPaymentsCompanyAccountingPeriod
	JournalEntriesListRequestExpandPaymentsAppliedPaymentsTrackingCategories
	JournalEntriesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesAccountingPeriod
	JournalEntriesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesCompany
	JournalEntriesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod
	JournalEntriesListRequestExpandPaymentsCompany
	JournalEntriesListRequestExpandPaymentsCompanyAccountingPeriod
	JournalEntriesListRequestExpandPaymentsTrackingCategories
	JournalEntriesListRequestExpandPaymentsTrackingCategoriesAccountingPeriod
	JournalEntriesListRequestExpandPaymentsTrackingCategoriesCompany
	JournalEntriesListRequestExpandPaymentsTrackingCategoriesCompanyAccountingPeriod
	JournalEntriesListRequestExpandTrackingCategories
	JournalEntriesListRequestExpandTrackingCategoriesAccountingPeriod
	JournalEntriesListRequestExpandTrackingCategoriesCompany
	JournalEntriesListRequestExpandTrackingCategoriesCompanyAccountingPeriod
)

func (j JournalEntriesListRequestExpand) String() string {
	switch j {
	default:
		return strconv.Itoa(int(j))
	case JournalEntriesListRequestExpandAccountingPeriod:
		return "accounting_period"
	case JournalEntriesListRequestExpandAppliedPayments:
		return "applied_payments"
	case JournalEntriesListRequestExpandAppliedPaymentsAccountingPeriod:
		return "applied_payments,accounting_period"
	case JournalEntriesListRequestExpandAppliedPaymentsCompany:
		return "applied_payments,company"
	case JournalEntriesListRequestExpandAppliedPaymentsCompanyAccountingPeriod:
		return "applied_payments,company,accounting_period"
	case JournalEntriesListRequestExpandAppliedPaymentsTrackingCategories:
		return "applied_payments,tracking_categories"
	case JournalEntriesListRequestExpandAppliedPaymentsTrackingCategoriesAccountingPeriod:
		return "applied_payments,tracking_categories,accounting_period"
	case JournalEntriesListRequestExpandAppliedPaymentsTrackingCategoriesCompany:
		return "applied_payments,tracking_categories,company"
	case JournalEntriesListRequestExpandAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod:
		return "applied_payments,tracking_categories,company,accounting_period"
	case JournalEntriesListRequestExpandCompany:
		return "company"
	case JournalEntriesListRequestExpandCompanyAccountingPeriod:
		return "company,accounting_period"
	case JournalEntriesListRequestExpandLines:
		return "lines"
	case JournalEntriesListRequestExpandLinesAccountingPeriod:
		return "lines,accounting_period"
	case JournalEntriesListRequestExpandLinesAppliedPayments:
		return "lines,applied_payments"
	case JournalEntriesListRequestExpandLinesAppliedPaymentsAccountingPeriod:
		return "lines,applied_payments,accounting_period"
	case JournalEntriesListRequestExpandLinesAppliedPaymentsCompany:
		return "lines,applied_payments,company"
	case JournalEntriesListRequestExpandLinesAppliedPaymentsCompanyAccountingPeriod:
		return "lines,applied_payments,company,accounting_period"
	case JournalEntriesListRequestExpandLinesAppliedPaymentsTrackingCategories:
		return "lines,applied_payments,tracking_categories"
	case JournalEntriesListRequestExpandLinesAppliedPaymentsTrackingCategoriesAccountingPeriod:
		return "lines,applied_payments,tracking_categories,accounting_period"
	case JournalEntriesListRequestExpandLinesAppliedPaymentsTrackingCategoriesCompany:
		return "lines,applied_payments,tracking_categories,company"
	case JournalEntriesListRequestExpandLinesAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod:
		return "lines,applied_payments,tracking_categories,company,accounting_period"
	case JournalEntriesListRequestExpandLinesCompany:
		return "lines,company"
	case JournalEntriesListRequestExpandLinesCompanyAccountingPeriod:
		return "lines,company,accounting_period"
	case JournalEntriesListRequestExpandLinesPayments:
		return "lines,payments"
	case JournalEntriesListRequestExpandLinesPaymentsAccountingPeriod:
		return "lines,payments,accounting_period"
	case JournalEntriesListRequestExpandLinesPaymentsAppliedPayments:
		return "lines,payments,applied_payments"
	case JournalEntriesListRequestExpandLinesPaymentsAppliedPaymentsAccountingPeriod:
		return "lines,payments,applied_payments,accounting_period"
	case JournalEntriesListRequestExpandLinesPaymentsAppliedPaymentsCompany:
		return "lines,payments,applied_payments,company"
	case JournalEntriesListRequestExpandLinesPaymentsAppliedPaymentsCompanyAccountingPeriod:
		return "lines,payments,applied_payments,company,accounting_period"
	case JournalEntriesListRequestExpandLinesPaymentsAppliedPaymentsTrackingCategories:
		return "lines,payments,applied_payments,tracking_categories"
	case JournalEntriesListRequestExpandLinesPaymentsAppliedPaymentsTrackingCategoriesAccountingPeriod:
		return "lines,payments,applied_payments,tracking_categories,accounting_period"
	case JournalEntriesListRequestExpandLinesPaymentsAppliedPaymentsTrackingCategoriesCompany:
		return "lines,payments,applied_payments,tracking_categories,company"
	case JournalEntriesListRequestExpandLinesPaymentsAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod:
		return "lines,payments,applied_payments,tracking_categories,company,accounting_period"
	case JournalEntriesListRequestExpandLinesPaymentsCompany:
		return "lines,payments,company"
	case JournalEntriesListRequestExpandLinesPaymentsCompanyAccountingPeriod:
		return "lines,payments,company,accounting_period"
	case JournalEntriesListRequestExpandLinesPaymentsTrackingCategories:
		return "lines,payments,tracking_categories"
	case JournalEntriesListRequestExpandLinesPaymentsTrackingCategoriesAccountingPeriod:
		return "lines,payments,tracking_categories,accounting_period"
	case JournalEntriesListRequestExpandLinesPaymentsTrackingCategoriesCompany:
		return "lines,payments,tracking_categories,company"
	case JournalEntriesListRequestExpandLinesPaymentsTrackingCategoriesCompanyAccountingPeriod:
		return "lines,payments,tracking_categories,company,accounting_period"
	case JournalEntriesListRequestExpandLinesTrackingCategories:
		return "lines,tracking_categories"
	case JournalEntriesListRequestExpandLinesTrackingCategoriesAccountingPeriod:
		return "lines,tracking_categories,accounting_period"
	case JournalEntriesListRequestExpandLinesTrackingCategoriesCompany:
		return "lines,tracking_categories,company"
	case JournalEntriesListRequestExpandLinesTrackingCategoriesCompanyAccountingPeriod:
		return "lines,tracking_categories,company,accounting_period"
	case JournalEntriesListRequestExpandPayments:
		return "payments"
	case JournalEntriesListRequestExpandPaymentsAccountingPeriod:
		return "payments,accounting_period"
	case JournalEntriesListRequestExpandPaymentsAppliedPayments:
		return "payments,applied_payments"
	case JournalEntriesListRequestExpandPaymentsAppliedPaymentsAccountingPeriod:
		return "payments,applied_payments,accounting_period"
	case JournalEntriesListRequestExpandPaymentsAppliedPaymentsCompany:
		return "payments,applied_payments,company"
	case JournalEntriesListRequestExpandPaymentsAppliedPaymentsCompanyAccountingPeriod:
		return "payments,applied_payments,company,accounting_period"
	case JournalEntriesListRequestExpandPaymentsAppliedPaymentsTrackingCategories:
		return "payments,applied_payments,tracking_categories"
	case JournalEntriesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesAccountingPeriod:
		return "payments,applied_payments,tracking_categories,accounting_period"
	case JournalEntriesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesCompany:
		return "payments,applied_payments,tracking_categories,company"
	case JournalEntriesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod:
		return "payments,applied_payments,tracking_categories,company,accounting_period"
	case JournalEntriesListRequestExpandPaymentsCompany:
		return "payments,company"
	case JournalEntriesListRequestExpandPaymentsCompanyAccountingPeriod:
		return "payments,company,accounting_period"
	case JournalEntriesListRequestExpandPaymentsTrackingCategories:
		return "payments,tracking_categories"
	case JournalEntriesListRequestExpandPaymentsTrackingCategoriesAccountingPeriod:
		return "payments,tracking_categories,accounting_period"
	case JournalEntriesListRequestExpandPaymentsTrackingCategoriesCompany:
		return "payments,tracking_categories,company"
	case JournalEntriesListRequestExpandPaymentsTrackingCategoriesCompanyAccountingPeriod:
		return "payments,tracking_categories,company,accounting_period"
	case JournalEntriesListRequestExpandTrackingCategories:
		return "tracking_categories"
	case JournalEntriesListRequestExpandTrackingCategoriesAccountingPeriod:
		return "tracking_categories,accounting_period"
	case JournalEntriesListRequestExpandTrackingCategoriesCompany:
		return "tracking_categories,company"
	case JournalEntriesListRequestExpandTrackingCategoriesCompanyAccountingPeriod:
		return "tracking_categories,company,accounting_period"
	}
}

func (j JournalEntriesListRequestExpand) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", j.String())), nil
}

func (j *JournalEntriesListRequestExpand) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "accounting_period":
		value := JournalEntriesListRequestExpandAccountingPeriod
		*j = value
	case "applied_payments":
		value := JournalEntriesListRequestExpandAppliedPayments
		*j = value
	case "applied_payments,accounting_period":
		value := JournalEntriesListRequestExpandAppliedPaymentsAccountingPeriod
		*j = value
	case "applied_payments,company":
		value := JournalEntriesListRequestExpandAppliedPaymentsCompany
		*j = value
	case "applied_payments,company,accounting_period":
		value := JournalEntriesListRequestExpandAppliedPaymentsCompanyAccountingPeriod
		*j = value
	case "applied_payments,tracking_categories":
		value := JournalEntriesListRequestExpandAppliedPaymentsTrackingCategories
		*j = value
	case "applied_payments,tracking_categories,accounting_period":
		value := JournalEntriesListRequestExpandAppliedPaymentsTrackingCategoriesAccountingPeriod
		*j = value
	case "applied_payments,tracking_categories,company":
		value := JournalEntriesListRequestExpandAppliedPaymentsTrackingCategoriesCompany
		*j = value
	case "applied_payments,tracking_categories,company,accounting_period":
		value := JournalEntriesListRequestExpandAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod
		*j = value
	case "company":
		value := JournalEntriesListRequestExpandCompany
		*j = value
	case "company,accounting_period":
		value := JournalEntriesListRequestExpandCompanyAccountingPeriod
		*j = value
	case "lines":
		value := JournalEntriesListRequestExpandLines
		*j = value
	case "lines,accounting_period":
		value := JournalEntriesListRequestExpandLinesAccountingPeriod
		*j = value
	case "lines,applied_payments":
		value := JournalEntriesListRequestExpandLinesAppliedPayments
		*j = value
	case "lines,applied_payments,accounting_period":
		value := JournalEntriesListRequestExpandLinesAppliedPaymentsAccountingPeriod
		*j = value
	case "lines,applied_payments,company":
		value := JournalEntriesListRequestExpandLinesAppliedPaymentsCompany
		*j = value
	case "lines,applied_payments,company,accounting_period":
		value := JournalEntriesListRequestExpandLinesAppliedPaymentsCompanyAccountingPeriod
		*j = value
	case "lines,applied_payments,tracking_categories":
		value := JournalEntriesListRequestExpandLinesAppliedPaymentsTrackingCategories
		*j = value
	case "lines,applied_payments,tracking_categories,accounting_period":
		value := JournalEntriesListRequestExpandLinesAppliedPaymentsTrackingCategoriesAccountingPeriod
		*j = value
	case "lines,applied_payments,tracking_categories,company":
		value := JournalEntriesListRequestExpandLinesAppliedPaymentsTrackingCategoriesCompany
		*j = value
	case "lines,applied_payments,tracking_categories,company,accounting_period":
		value := JournalEntriesListRequestExpandLinesAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod
		*j = value
	case "lines,company":
		value := JournalEntriesListRequestExpandLinesCompany
		*j = value
	case "lines,company,accounting_period":
		value := JournalEntriesListRequestExpandLinesCompanyAccountingPeriod
		*j = value
	case "lines,payments":
		value := JournalEntriesListRequestExpandLinesPayments
		*j = value
	case "lines,payments,accounting_period":
		value := JournalEntriesListRequestExpandLinesPaymentsAccountingPeriod
		*j = value
	case "lines,payments,applied_payments":
		value := JournalEntriesListRequestExpandLinesPaymentsAppliedPayments
		*j = value
	case "lines,payments,applied_payments,accounting_period":
		value := JournalEntriesListRequestExpandLinesPaymentsAppliedPaymentsAccountingPeriod
		*j = value
	case "lines,payments,applied_payments,company":
		value := JournalEntriesListRequestExpandLinesPaymentsAppliedPaymentsCompany
		*j = value
	case "lines,payments,applied_payments,company,accounting_period":
		value := JournalEntriesListRequestExpandLinesPaymentsAppliedPaymentsCompanyAccountingPeriod
		*j = value
	case "lines,payments,applied_payments,tracking_categories":
		value := JournalEntriesListRequestExpandLinesPaymentsAppliedPaymentsTrackingCategories
		*j = value
	case "lines,payments,applied_payments,tracking_categories,accounting_period":
		value := JournalEntriesListRequestExpandLinesPaymentsAppliedPaymentsTrackingCategoriesAccountingPeriod
		*j = value
	case "lines,payments,applied_payments,tracking_categories,company":
		value := JournalEntriesListRequestExpandLinesPaymentsAppliedPaymentsTrackingCategoriesCompany
		*j = value
	case "lines,payments,applied_payments,tracking_categories,company,accounting_period":
		value := JournalEntriesListRequestExpandLinesPaymentsAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod
		*j = value
	case "lines,payments,company":
		value := JournalEntriesListRequestExpandLinesPaymentsCompany
		*j = value
	case "lines,payments,company,accounting_period":
		value := JournalEntriesListRequestExpandLinesPaymentsCompanyAccountingPeriod
		*j = value
	case "lines,payments,tracking_categories":
		value := JournalEntriesListRequestExpandLinesPaymentsTrackingCategories
		*j = value
	case "lines,payments,tracking_categories,accounting_period":
		value := JournalEntriesListRequestExpandLinesPaymentsTrackingCategoriesAccountingPeriod
		*j = value
	case "lines,payments,tracking_categories,company":
		value := JournalEntriesListRequestExpandLinesPaymentsTrackingCategoriesCompany
		*j = value
	case "lines,payments,tracking_categories,company,accounting_period":
		value := JournalEntriesListRequestExpandLinesPaymentsTrackingCategoriesCompanyAccountingPeriod
		*j = value
	case "lines,tracking_categories":
		value := JournalEntriesListRequestExpandLinesTrackingCategories
		*j = value
	case "lines,tracking_categories,accounting_period":
		value := JournalEntriesListRequestExpandLinesTrackingCategoriesAccountingPeriod
		*j = value
	case "lines,tracking_categories,company":
		value := JournalEntriesListRequestExpandLinesTrackingCategoriesCompany
		*j = value
	case "lines,tracking_categories,company,accounting_period":
		value := JournalEntriesListRequestExpandLinesTrackingCategoriesCompanyAccountingPeriod
		*j = value
	case "payments":
		value := JournalEntriesListRequestExpandPayments
		*j = value
	case "payments,accounting_period":
		value := JournalEntriesListRequestExpandPaymentsAccountingPeriod
		*j = value
	case "payments,applied_payments":
		value := JournalEntriesListRequestExpandPaymentsAppliedPayments
		*j = value
	case "payments,applied_payments,accounting_period":
		value := JournalEntriesListRequestExpandPaymentsAppliedPaymentsAccountingPeriod
		*j = value
	case "payments,applied_payments,company":
		value := JournalEntriesListRequestExpandPaymentsAppliedPaymentsCompany
		*j = value
	case "payments,applied_payments,company,accounting_period":
		value := JournalEntriesListRequestExpandPaymentsAppliedPaymentsCompanyAccountingPeriod
		*j = value
	case "payments,applied_payments,tracking_categories":
		value := JournalEntriesListRequestExpandPaymentsAppliedPaymentsTrackingCategories
		*j = value
	case "payments,applied_payments,tracking_categories,accounting_period":
		value := JournalEntriesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesAccountingPeriod
		*j = value
	case "payments,applied_payments,tracking_categories,company":
		value := JournalEntriesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesCompany
		*j = value
	case "payments,applied_payments,tracking_categories,company,accounting_period":
		value := JournalEntriesListRequestExpandPaymentsAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod
		*j = value
	case "payments,company":
		value := JournalEntriesListRequestExpandPaymentsCompany
		*j = value
	case "payments,company,accounting_period":
		value := JournalEntriesListRequestExpandPaymentsCompanyAccountingPeriod
		*j = value
	case "payments,tracking_categories":
		value := JournalEntriesListRequestExpandPaymentsTrackingCategories
		*j = value
	case "payments,tracking_categories,accounting_period":
		value := JournalEntriesListRequestExpandPaymentsTrackingCategoriesAccountingPeriod
		*j = value
	case "payments,tracking_categories,company":
		value := JournalEntriesListRequestExpandPaymentsTrackingCategoriesCompany
		*j = value
	case "payments,tracking_categories,company,accounting_period":
		value := JournalEntriesListRequestExpandPaymentsTrackingCategoriesCompanyAccountingPeriod
		*j = value
	case "tracking_categories":
		value := JournalEntriesListRequestExpandTrackingCategories
		*j = value
	case "tracking_categories,accounting_period":
		value := JournalEntriesListRequestExpandTrackingCategoriesAccountingPeriod
		*j = value
	case "tracking_categories,company":
		value := JournalEntriesListRequestExpandTrackingCategoriesCompany
		*j = value
	case "tracking_categories,company,accounting_period":
		value := JournalEntriesListRequestExpandTrackingCategoriesCompanyAccountingPeriod
		*j = value
	}
	return nil
}

type JournalEntriesRetrieveRequestExpand uint

const (
	JournalEntriesRetrieveRequestExpandAccountingPeriod JournalEntriesRetrieveRequestExpand = iota + 1
	JournalEntriesRetrieveRequestExpandAppliedPayments
	JournalEntriesRetrieveRequestExpandAppliedPaymentsAccountingPeriod
	JournalEntriesRetrieveRequestExpandAppliedPaymentsCompany
	JournalEntriesRetrieveRequestExpandAppliedPaymentsCompanyAccountingPeriod
	JournalEntriesRetrieveRequestExpandAppliedPaymentsTrackingCategories
	JournalEntriesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesAccountingPeriod
	JournalEntriesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesCompany
	JournalEntriesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod
	JournalEntriesRetrieveRequestExpandCompany
	JournalEntriesRetrieveRequestExpandCompanyAccountingPeriod
	JournalEntriesRetrieveRequestExpandLines
	JournalEntriesRetrieveRequestExpandLinesAccountingPeriod
	JournalEntriesRetrieveRequestExpandLinesAppliedPayments
	JournalEntriesRetrieveRequestExpandLinesAppliedPaymentsAccountingPeriod
	JournalEntriesRetrieveRequestExpandLinesAppliedPaymentsCompany
	JournalEntriesRetrieveRequestExpandLinesAppliedPaymentsCompanyAccountingPeriod
	JournalEntriesRetrieveRequestExpandLinesAppliedPaymentsTrackingCategories
	JournalEntriesRetrieveRequestExpandLinesAppliedPaymentsTrackingCategoriesAccountingPeriod
	JournalEntriesRetrieveRequestExpandLinesAppliedPaymentsTrackingCategoriesCompany
	JournalEntriesRetrieveRequestExpandLinesAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod
	JournalEntriesRetrieveRequestExpandLinesCompany
	JournalEntriesRetrieveRequestExpandLinesCompanyAccountingPeriod
	JournalEntriesRetrieveRequestExpandLinesPayments
	JournalEntriesRetrieveRequestExpandLinesPaymentsAccountingPeriod
	JournalEntriesRetrieveRequestExpandLinesPaymentsAppliedPayments
	JournalEntriesRetrieveRequestExpandLinesPaymentsAppliedPaymentsAccountingPeriod
	JournalEntriesRetrieveRequestExpandLinesPaymentsAppliedPaymentsCompany
	JournalEntriesRetrieveRequestExpandLinesPaymentsAppliedPaymentsCompanyAccountingPeriod
	JournalEntriesRetrieveRequestExpandLinesPaymentsAppliedPaymentsTrackingCategories
	JournalEntriesRetrieveRequestExpandLinesPaymentsAppliedPaymentsTrackingCategoriesAccountingPeriod
	JournalEntriesRetrieveRequestExpandLinesPaymentsAppliedPaymentsTrackingCategoriesCompany
	JournalEntriesRetrieveRequestExpandLinesPaymentsAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod
	JournalEntriesRetrieveRequestExpandLinesPaymentsCompany
	JournalEntriesRetrieveRequestExpandLinesPaymentsCompanyAccountingPeriod
	JournalEntriesRetrieveRequestExpandLinesPaymentsTrackingCategories
	JournalEntriesRetrieveRequestExpandLinesPaymentsTrackingCategoriesAccountingPeriod
	JournalEntriesRetrieveRequestExpandLinesPaymentsTrackingCategoriesCompany
	JournalEntriesRetrieveRequestExpandLinesPaymentsTrackingCategoriesCompanyAccountingPeriod
	JournalEntriesRetrieveRequestExpandLinesTrackingCategories
	JournalEntriesRetrieveRequestExpandLinesTrackingCategoriesAccountingPeriod
	JournalEntriesRetrieveRequestExpandLinesTrackingCategoriesCompany
	JournalEntriesRetrieveRequestExpandLinesTrackingCategoriesCompanyAccountingPeriod
	JournalEntriesRetrieveRequestExpandPayments
	JournalEntriesRetrieveRequestExpandPaymentsAccountingPeriod
	JournalEntriesRetrieveRequestExpandPaymentsAppliedPayments
	JournalEntriesRetrieveRequestExpandPaymentsAppliedPaymentsAccountingPeriod
	JournalEntriesRetrieveRequestExpandPaymentsAppliedPaymentsCompany
	JournalEntriesRetrieveRequestExpandPaymentsAppliedPaymentsCompanyAccountingPeriod
	JournalEntriesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategories
	JournalEntriesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesAccountingPeriod
	JournalEntriesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesCompany
	JournalEntriesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod
	JournalEntriesRetrieveRequestExpandPaymentsCompany
	JournalEntriesRetrieveRequestExpandPaymentsCompanyAccountingPeriod
	JournalEntriesRetrieveRequestExpandPaymentsTrackingCategories
	JournalEntriesRetrieveRequestExpandPaymentsTrackingCategoriesAccountingPeriod
	JournalEntriesRetrieveRequestExpandPaymentsTrackingCategoriesCompany
	JournalEntriesRetrieveRequestExpandPaymentsTrackingCategoriesCompanyAccountingPeriod
	JournalEntriesRetrieveRequestExpandTrackingCategories
	JournalEntriesRetrieveRequestExpandTrackingCategoriesAccountingPeriod
	JournalEntriesRetrieveRequestExpandTrackingCategoriesCompany
	JournalEntriesRetrieveRequestExpandTrackingCategoriesCompanyAccountingPeriod
)

func (j JournalEntriesRetrieveRequestExpand) String() string {
	switch j {
	default:
		return strconv.Itoa(int(j))
	case JournalEntriesRetrieveRequestExpandAccountingPeriod:
		return "accounting_period"
	case JournalEntriesRetrieveRequestExpandAppliedPayments:
		return "applied_payments"
	case JournalEntriesRetrieveRequestExpandAppliedPaymentsAccountingPeriod:
		return "applied_payments,accounting_period"
	case JournalEntriesRetrieveRequestExpandAppliedPaymentsCompany:
		return "applied_payments,company"
	case JournalEntriesRetrieveRequestExpandAppliedPaymentsCompanyAccountingPeriod:
		return "applied_payments,company,accounting_period"
	case JournalEntriesRetrieveRequestExpandAppliedPaymentsTrackingCategories:
		return "applied_payments,tracking_categories"
	case JournalEntriesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesAccountingPeriod:
		return "applied_payments,tracking_categories,accounting_period"
	case JournalEntriesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesCompany:
		return "applied_payments,tracking_categories,company"
	case JournalEntriesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod:
		return "applied_payments,tracking_categories,company,accounting_period"
	case JournalEntriesRetrieveRequestExpandCompany:
		return "company"
	case JournalEntriesRetrieveRequestExpandCompanyAccountingPeriod:
		return "company,accounting_period"
	case JournalEntriesRetrieveRequestExpandLines:
		return "lines"
	case JournalEntriesRetrieveRequestExpandLinesAccountingPeriod:
		return "lines,accounting_period"
	case JournalEntriesRetrieveRequestExpandLinesAppliedPayments:
		return "lines,applied_payments"
	case JournalEntriesRetrieveRequestExpandLinesAppliedPaymentsAccountingPeriod:
		return "lines,applied_payments,accounting_period"
	case JournalEntriesRetrieveRequestExpandLinesAppliedPaymentsCompany:
		return "lines,applied_payments,company"
	case JournalEntriesRetrieveRequestExpandLinesAppliedPaymentsCompanyAccountingPeriod:
		return "lines,applied_payments,company,accounting_period"
	case JournalEntriesRetrieveRequestExpandLinesAppliedPaymentsTrackingCategories:
		return "lines,applied_payments,tracking_categories"
	case JournalEntriesRetrieveRequestExpandLinesAppliedPaymentsTrackingCategoriesAccountingPeriod:
		return "lines,applied_payments,tracking_categories,accounting_period"
	case JournalEntriesRetrieveRequestExpandLinesAppliedPaymentsTrackingCategoriesCompany:
		return "lines,applied_payments,tracking_categories,company"
	case JournalEntriesRetrieveRequestExpandLinesAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod:
		return "lines,applied_payments,tracking_categories,company,accounting_period"
	case JournalEntriesRetrieveRequestExpandLinesCompany:
		return "lines,company"
	case JournalEntriesRetrieveRequestExpandLinesCompanyAccountingPeriod:
		return "lines,company,accounting_period"
	case JournalEntriesRetrieveRequestExpandLinesPayments:
		return "lines,payments"
	case JournalEntriesRetrieveRequestExpandLinesPaymentsAccountingPeriod:
		return "lines,payments,accounting_period"
	case JournalEntriesRetrieveRequestExpandLinesPaymentsAppliedPayments:
		return "lines,payments,applied_payments"
	case JournalEntriesRetrieveRequestExpandLinesPaymentsAppliedPaymentsAccountingPeriod:
		return "lines,payments,applied_payments,accounting_period"
	case JournalEntriesRetrieveRequestExpandLinesPaymentsAppliedPaymentsCompany:
		return "lines,payments,applied_payments,company"
	case JournalEntriesRetrieveRequestExpandLinesPaymentsAppliedPaymentsCompanyAccountingPeriod:
		return "lines,payments,applied_payments,company,accounting_period"
	case JournalEntriesRetrieveRequestExpandLinesPaymentsAppliedPaymentsTrackingCategories:
		return "lines,payments,applied_payments,tracking_categories"
	case JournalEntriesRetrieveRequestExpandLinesPaymentsAppliedPaymentsTrackingCategoriesAccountingPeriod:
		return "lines,payments,applied_payments,tracking_categories,accounting_period"
	case JournalEntriesRetrieveRequestExpandLinesPaymentsAppliedPaymentsTrackingCategoriesCompany:
		return "lines,payments,applied_payments,tracking_categories,company"
	case JournalEntriesRetrieveRequestExpandLinesPaymentsAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod:
		return "lines,payments,applied_payments,tracking_categories,company,accounting_period"
	case JournalEntriesRetrieveRequestExpandLinesPaymentsCompany:
		return "lines,payments,company"
	case JournalEntriesRetrieveRequestExpandLinesPaymentsCompanyAccountingPeriod:
		return "lines,payments,company,accounting_period"
	case JournalEntriesRetrieveRequestExpandLinesPaymentsTrackingCategories:
		return "lines,payments,tracking_categories"
	case JournalEntriesRetrieveRequestExpandLinesPaymentsTrackingCategoriesAccountingPeriod:
		return "lines,payments,tracking_categories,accounting_period"
	case JournalEntriesRetrieveRequestExpandLinesPaymentsTrackingCategoriesCompany:
		return "lines,payments,tracking_categories,company"
	case JournalEntriesRetrieveRequestExpandLinesPaymentsTrackingCategoriesCompanyAccountingPeriod:
		return "lines,payments,tracking_categories,company,accounting_period"
	case JournalEntriesRetrieveRequestExpandLinesTrackingCategories:
		return "lines,tracking_categories"
	case JournalEntriesRetrieveRequestExpandLinesTrackingCategoriesAccountingPeriod:
		return "lines,tracking_categories,accounting_period"
	case JournalEntriesRetrieveRequestExpandLinesTrackingCategoriesCompany:
		return "lines,tracking_categories,company"
	case JournalEntriesRetrieveRequestExpandLinesTrackingCategoriesCompanyAccountingPeriod:
		return "lines,tracking_categories,company,accounting_period"
	case JournalEntriesRetrieveRequestExpandPayments:
		return "payments"
	case JournalEntriesRetrieveRequestExpandPaymentsAccountingPeriod:
		return "payments,accounting_period"
	case JournalEntriesRetrieveRequestExpandPaymentsAppliedPayments:
		return "payments,applied_payments"
	case JournalEntriesRetrieveRequestExpandPaymentsAppliedPaymentsAccountingPeriod:
		return "payments,applied_payments,accounting_period"
	case JournalEntriesRetrieveRequestExpandPaymentsAppliedPaymentsCompany:
		return "payments,applied_payments,company"
	case JournalEntriesRetrieveRequestExpandPaymentsAppliedPaymentsCompanyAccountingPeriod:
		return "payments,applied_payments,company,accounting_period"
	case JournalEntriesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategories:
		return "payments,applied_payments,tracking_categories"
	case JournalEntriesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesAccountingPeriod:
		return "payments,applied_payments,tracking_categories,accounting_period"
	case JournalEntriesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesCompany:
		return "payments,applied_payments,tracking_categories,company"
	case JournalEntriesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod:
		return "payments,applied_payments,tracking_categories,company,accounting_period"
	case JournalEntriesRetrieveRequestExpandPaymentsCompany:
		return "payments,company"
	case JournalEntriesRetrieveRequestExpandPaymentsCompanyAccountingPeriod:
		return "payments,company,accounting_period"
	case JournalEntriesRetrieveRequestExpandPaymentsTrackingCategories:
		return "payments,tracking_categories"
	case JournalEntriesRetrieveRequestExpandPaymentsTrackingCategoriesAccountingPeriod:
		return "payments,tracking_categories,accounting_period"
	case JournalEntriesRetrieveRequestExpandPaymentsTrackingCategoriesCompany:
		return "payments,tracking_categories,company"
	case JournalEntriesRetrieveRequestExpandPaymentsTrackingCategoriesCompanyAccountingPeriod:
		return "payments,tracking_categories,company,accounting_period"
	case JournalEntriesRetrieveRequestExpandTrackingCategories:
		return "tracking_categories"
	case JournalEntriesRetrieveRequestExpandTrackingCategoriesAccountingPeriod:
		return "tracking_categories,accounting_period"
	case JournalEntriesRetrieveRequestExpandTrackingCategoriesCompany:
		return "tracking_categories,company"
	case JournalEntriesRetrieveRequestExpandTrackingCategoriesCompanyAccountingPeriod:
		return "tracking_categories,company,accounting_period"
	}
}

func (j JournalEntriesRetrieveRequestExpand) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", j.String())), nil
}

func (j *JournalEntriesRetrieveRequestExpand) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "accounting_period":
		value := JournalEntriesRetrieveRequestExpandAccountingPeriod
		*j = value
	case "applied_payments":
		value := JournalEntriesRetrieveRequestExpandAppliedPayments
		*j = value
	case "applied_payments,accounting_period":
		value := JournalEntriesRetrieveRequestExpandAppliedPaymentsAccountingPeriod
		*j = value
	case "applied_payments,company":
		value := JournalEntriesRetrieveRequestExpandAppliedPaymentsCompany
		*j = value
	case "applied_payments,company,accounting_period":
		value := JournalEntriesRetrieveRequestExpandAppliedPaymentsCompanyAccountingPeriod
		*j = value
	case "applied_payments,tracking_categories":
		value := JournalEntriesRetrieveRequestExpandAppliedPaymentsTrackingCategories
		*j = value
	case "applied_payments,tracking_categories,accounting_period":
		value := JournalEntriesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesAccountingPeriod
		*j = value
	case "applied_payments,tracking_categories,company":
		value := JournalEntriesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesCompany
		*j = value
	case "applied_payments,tracking_categories,company,accounting_period":
		value := JournalEntriesRetrieveRequestExpandAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod
		*j = value
	case "company":
		value := JournalEntriesRetrieveRequestExpandCompany
		*j = value
	case "company,accounting_period":
		value := JournalEntriesRetrieveRequestExpandCompanyAccountingPeriod
		*j = value
	case "lines":
		value := JournalEntriesRetrieveRequestExpandLines
		*j = value
	case "lines,accounting_period":
		value := JournalEntriesRetrieveRequestExpandLinesAccountingPeriod
		*j = value
	case "lines,applied_payments":
		value := JournalEntriesRetrieveRequestExpandLinesAppliedPayments
		*j = value
	case "lines,applied_payments,accounting_period":
		value := JournalEntriesRetrieveRequestExpandLinesAppliedPaymentsAccountingPeriod
		*j = value
	case "lines,applied_payments,company":
		value := JournalEntriesRetrieveRequestExpandLinesAppliedPaymentsCompany
		*j = value
	case "lines,applied_payments,company,accounting_period":
		value := JournalEntriesRetrieveRequestExpandLinesAppliedPaymentsCompanyAccountingPeriod
		*j = value
	case "lines,applied_payments,tracking_categories":
		value := JournalEntriesRetrieveRequestExpandLinesAppliedPaymentsTrackingCategories
		*j = value
	case "lines,applied_payments,tracking_categories,accounting_period":
		value := JournalEntriesRetrieveRequestExpandLinesAppliedPaymentsTrackingCategoriesAccountingPeriod
		*j = value
	case "lines,applied_payments,tracking_categories,company":
		value := JournalEntriesRetrieveRequestExpandLinesAppliedPaymentsTrackingCategoriesCompany
		*j = value
	case "lines,applied_payments,tracking_categories,company,accounting_period":
		value := JournalEntriesRetrieveRequestExpandLinesAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod
		*j = value
	case "lines,company":
		value := JournalEntriesRetrieveRequestExpandLinesCompany
		*j = value
	case "lines,company,accounting_period":
		value := JournalEntriesRetrieveRequestExpandLinesCompanyAccountingPeriod
		*j = value
	case "lines,payments":
		value := JournalEntriesRetrieveRequestExpandLinesPayments
		*j = value
	case "lines,payments,accounting_period":
		value := JournalEntriesRetrieveRequestExpandLinesPaymentsAccountingPeriod
		*j = value
	case "lines,payments,applied_payments":
		value := JournalEntriesRetrieveRequestExpandLinesPaymentsAppliedPayments
		*j = value
	case "lines,payments,applied_payments,accounting_period":
		value := JournalEntriesRetrieveRequestExpandLinesPaymentsAppliedPaymentsAccountingPeriod
		*j = value
	case "lines,payments,applied_payments,company":
		value := JournalEntriesRetrieveRequestExpandLinesPaymentsAppliedPaymentsCompany
		*j = value
	case "lines,payments,applied_payments,company,accounting_period":
		value := JournalEntriesRetrieveRequestExpandLinesPaymentsAppliedPaymentsCompanyAccountingPeriod
		*j = value
	case "lines,payments,applied_payments,tracking_categories":
		value := JournalEntriesRetrieveRequestExpandLinesPaymentsAppliedPaymentsTrackingCategories
		*j = value
	case "lines,payments,applied_payments,tracking_categories,accounting_period":
		value := JournalEntriesRetrieveRequestExpandLinesPaymentsAppliedPaymentsTrackingCategoriesAccountingPeriod
		*j = value
	case "lines,payments,applied_payments,tracking_categories,company":
		value := JournalEntriesRetrieveRequestExpandLinesPaymentsAppliedPaymentsTrackingCategoriesCompany
		*j = value
	case "lines,payments,applied_payments,tracking_categories,company,accounting_period":
		value := JournalEntriesRetrieveRequestExpandLinesPaymentsAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod
		*j = value
	case "lines,payments,company":
		value := JournalEntriesRetrieveRequestExpandLinesPaymentsCompany
		*j = value
	case "lines,payments,company,accounting_period":
		value := JournalEntriesRetrieveRequestExpandLinesPaymentsCompanyAccountingPeriod
		*j = value
	case "lines,payments,tracking_categories":
		value := JournalEntriesRetrieveRequestExpandLinesPaymentsTrackingCategories
		*j = value
	case "lines,payments,tracking_categories,accounting_period":
		value := JournalEntriesRetrieveRequestExpandLinesPaymentsTrackingCategoriesAccountingPeriod
		*j = value
	case "lines,payments,tracking_categories,company":
		value := JournalEntriesRetrieveRequestExpandLinesPaymentsTrackingCategoriesCompany
		*j = value
	case "lines,payments,tracking_categories,company,accounting_period":
		value := JournalEntriesRetrieveRequestExpandLinesPaymentsTrackingCategoriesCompanyAccountingPeriod
		*j = value
	case "lines,tracking_categories":
		value := JournalEntriesRetrieveRequestExpandLinesTrackingCategories
		*j = value
	case "lines,tracking_categories,accounting_period":
		value := JournalEntriesRetrieveRequestExpandLinesTrackingCategoriesAccountingPeriod
		*j = value
	case "lines,tracking_categories,company":
		value := JournalEntriesRetrieveRequestExpandLinesTrackingCategoriesCompany
		*j = value
	case "lines,tracking_categories,company,accounting_period":
		value := JournalEntriesRetrieveRequestExpandLinesTrackingCategoriesCompanyAccountingPeriod
		*j = value
	case "payments":
		value := JournalEntriesRetrieveRequestExpandPayments
		*j = value
	case "payments,accounting_period":
		value := JournalEntriesRetrieveRequestExpandPaymentsAccountingPeriod
		*j = value
	case "payments,applied_payments":
		value := JournalEntriesRetrieveRequestExpandPaymentsAppliedPayments
		*j = value
	case "payments,applied_payments,accounting_period":
		value := JournalEntriesRetrieveRequestExpandPaymentsAppliedPaymentsAccountingPeriod
		*j = value
	case "payments,applied_payments,company":
		value := JournalEntriesRetrieveRequestExpandPaymentsAppliedPaymentsCompany
		*j = value
	case "payments,applied_payments,company,accounting_period":
		value := JournalEntriesRetrieveRequestExpandPaymentsAppliedPaymentsCompanyAccountingPeriod
		*j = value
	case "payments,applied_payments,tracking_categories":
		value := JournalEntriesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategories
		*j = value
	case "payments,applied_payments,tracking_categories,accounting_period":
		value := JournalEntriesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesAccountingPeriod
		*j = value
	case "payments,applied_payments,tracking_categories,company":
		value := JournalEntriesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesCompany
		*j = value
	case "payments,applied_payments,tracking_categories,company,accounting_period":
		value := JournalEntriesRetrieveRequestExpandPaymentsAppliedPaymentsTrackingCategoriesCompanyAccountingPeriod
		*j = value
	case "payments,company":
		value := JournalEntriesRetrieveRequestExpandPaymentsCompany
		*j = value
	case "payments,company,accounting_period":
		value := JournalEntriesRetrieveRequestExpandPaymentsCompanyAccountingPeriod
		*j = value
	case "payments,tracking_categories":
		value := JournalEntriesRetrieveRequestExpandPaymentsTrackingCategories
		*j = value
	case "payments,tracking_categories,accounting_period":
		value := JournalEntriesRetrieveRequestExpandPaymentsTrackingCategoriesAccountingPeriod
		*j = value
	case "payments,tracking_categories,company":
		value := JournalEntriesRetrieveRequestExpandPaymentsTrackingCategoriesCompany
		*j = value
	case "payments,tracking_categories,company,accounting_period":
		value := JournalEntriesRetrieveRequestExpandPaymentsTrackingCategoriesCompanyAccountingPeriod
		*j = value
	case "tracking_categories":
		value := JournalEntriesRetrieveRequestExpandTrackingCategories
		*j = value
	case "tracking_categories,accounting_period":
		value := JournalEntriesRetrieveRequestExpandTrackingCategoriesAccountingPeriod
		*j = value
	case "tracking_categories,company":
		value := JournalEntriesRetrieveRequestExpandTrackingCategoriesCompany
		*j = value
	case "tracking_categories,company,accounting_period":
		value := JournalEntriesRetrieveRequestExpandTrackingCategoriesCompanyAccountingPeriod
		*j = value
	}
	return nil
}

// # The JournalEntry Object
// ### Description
// A `JournalEntry` is a record of a transaction or event that is entered into a company's accounting system.
//
// The `JournalEntry` common model contains records that are automatically created as a result of a certain type of transaction, like an Invoice, and records that are manually created against a company’s ledger.
//
// The lines of a given `JournalEntry` object should always sum to 0. A positive `net_amount` means the line represents a debit and a negative net_amount represents a credit.
//
// ### Usage Example
// Fetch from the `GET JournalEntry` endpoint and view a company's journey entry.
type JournalEntry struct {
	// The journal entry's transaction date.
	TransactionDate *time.Time `json:"transaction_date,omitempty"`
	// When the third party's journal entry was created.
	RemoteCreatedAt *time.Time `json:"remote_created_at,omitempty"`
	// When the third party's journal entry was updated.
	RemoteUpdatedAt *time.Time `json:"remote_updated_at,omitempty"`
	// Array of `Payment` object IDs.
	Payments []*JournalEntryPaymentsItem `json:"payments,omitempty"`
	// A list of the Payment Applied to Lines common models related to a given Invoice, Credit Note, or Journal Entry.
	AppliedPayments []*JournalEntryAppliedPaymentsItem `json:"applied_payments,omitempty"`
	// The journal entry's private note.
	Memo *string `json:"memo,omitempty"`
	// The journal's currency.
	//
	// * `XUA` - ADB Unit of Account
	// * `AFN` - Afghan Afghani
	// * `AFA` - Afghan Afghani (1927–2002)
	// * `ALL` - Albanian Lek
	// * `ALK` - Albanian Lek (1946–1965)
	// * `DZD` - Algerian Dinar
	// * `ADP` - Andorran Peseta
	// * `AOA` - Angolan Kwanza
	// * `AOK` - Angolan Kwanza (1977–1991)
	// * `AON` - Angolan New Kwanza (1990–2000)
	// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
	// * `ARA` - Argentine Austral
	// * `ARS` - Argentine Peso
	// * `ARM` - Argentine Peso (1881–1970)
	// * `ARP` - Argentine Peso (1983–1985)
	// * `ARL` - Argentine Peso Ley (1970–1983)
	// * `AMD` - Armenian Dram
	// * `AWG` - Aruban Florin
	// * `AUD` - Australian Dollar
	// * `ATS` - Austrian Schilling
	// * `AZN` - Azerbaijani Manat
	// * `AZM` - Azerbaijani Manat (1993–2006)
	// * `BSD` - Bahamian Dollar
	// * `BHD` - Bahraini Dinar
	// * `BDT` - Bangladeshi Taka
	// * `BBD` - Barbadian Dollar
	// * `BYN` - Belarusian Ruble
	// * `BYB` - Belarusian Ruble (1994–1999)
	// * `BYR` - Belarusian Ruble (2000–2016)
	// * `BEF` - Belgian Franc
	// * `BEC` - Belgian Franc (convertible)
	// * `BEL` - Belgian Franc (financial)
	// * `BZD` - Belize Dollar
	// * `BMD` - Bermudan Dollar
	// * `BTN` - Bhutanese Ngultrum
	// * `BOB` - Bolivian Boliviano
	// * `BOL` - Bolivian Boliviano (1863–1963)
	// * `BOV` - Bolivian Mvdol
	// * `BOP` - Bolivian Peso
	// * `BAM` - Bosnia-Herzegovina Convertible Mark
	// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
	// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
	// * `BWP` - Botswanan Pula
	// * `BRC` - Brazilian Cruzado (1986–1989)
	// * `BRZ` - Brazilian Cruzeiro (1942–1967)
	// * `BRE` - Brazilian Cruzeiro (1990–1993)
	// * `BRR` - Brazilian Cruzeiro (1993–1994)
	// * `BRN` - Brazilian New Cruzado (1989–1990)
	// * `BRB` - Brazilian New Cruzeiro (1967–1986)
	// * `BRL` - Brazilian Real
	// * `GBP` - British Pound
	// * `BND` - Brunei Dollar
	// * `BGL` - Bulgarian Hard Lev
	// * `BGN` - Bulgarian Lev
	// * `BGO` - Bulgarian Lev (1879–1952)
	// * `BGM` - Bulgarian Socialist Lev
	// * `BUK` - Burmese Kyat
	// * `BIF` - Burundian Franc
	// * `XPF` - CFP Franc
	// * `KHR` - Cambodian Riel
	// * `CAD` - Canadian Dollar
	// * `CVE` - Cape Verdean Escudo
	// * `KYD` - Cayman Islands Dollar
	// * `XAF` - Central African CFA Franc
	// * `CLE` - Chilean Escudo
	// * `CLP` - Chilean Peso
	// * `CLF` - Chilean Unit of Account (UF)
	// * `CNX` - Chinese People’s Bank Dollar
	// * `CNY` - Chinese Yuan
	// * `CNH` - Chinese Yuan (offshore)
	// * `COP` - Colombian Peso
	// * `COU` - Colombian Real Value Unit
	// * `KMF` - Comorian Franc
	// * `CDF` - Congolese Franc
	// * `CRC` - Costa Rican Colón
	// * `HRD` - Croatian Dinar
	// * `HRK` - Croatian Kuna
	// * `CUC` - Cuban Convertible Peso
	// * `CUP` - Cuban Peso
	// * `CYP` - Cypriot Pound
	// * `CZK` - Czech Koruna
	// * `CSK` - Czechoslovak Hard Koruna
	// * `DKK` - Danish Krone
	// * `DJF` - Djiboutian Franc
	// * `DOP` - Dominican Peso
	// * `NLG` - Dutch Guilder
	// * `XCD` - East Caribbean Dollar
	// * `DDM` - East German Mark
	// * `ECS` - Ecuadorian Sucre
	// * `ECV` - Ecuadorian Unit of Constant Value
	// * `EGP` - Egyptian Pound
	// * `GQE` - Equatorial Guinean Ekwele
	// * `ERN` - Eritrean Nakfa
	// * `EEK` - Estonian Kroon
	// * `ETB` - Ethiopian Birr
	// * `EUR` - Euro
	// * `XBA` - European Composite Unit
	// * `XEU` - European Currency Unit
	// * `XBB` - European Monetary Unit
	// * `XBC` - European Unit of Account (XBC)
	// * `XBD` - European Unit of Account (XBD)
	// * `FKP` - Falkland Islands Pound
	// * `FJD` - Fijian Dollar
	// * `FIM` - Finnish Markka
	// * `FRF` - French Franc
	// * `XFO` - French Gold Franc
	// * `XFU` - French UIC-Franc
	// * `GMD` - Gambian Dalasi
	// * `GEK` - Georgian Kupon Larit
	// * `GEL` - Georgian Lari
	// * `DEM` - German Mark
	// * `GHS` - Ghanaian Cedi
	// * `GHC` - Ghanaian Cedi (1979–2007)
	// * `GIP` - Gibraltar Pound
	// * `XAU` - Gold
	// * `GRD` - Greek Drachma
	// * `GTQ` - Guatemalan Quetzal
	// * `GWP` - Guinea-Bissau Peso
	// * `GNF` - Guinean Franc
	// * `GNS` - Guinean Syli
	// * `GYD` - Guyanaese Dollar
	// * `HTG` - Haitian Gourde
	// * `HNL` - Honduran Lempira
	// * `HKD` - Hong Kong Dollar
	// * `HUF` - Hungarian Forint
	// * `IMP` - IMP
	// * `ISK` - Icelandic Króna
	// * `ISJ` - Icelandic Króna (1918–1981)
	// * `INR` - Indian Rupee
	// * `IDR` - Indonesian Rupiah
	// * `IRR` - Iranian Rial
	// * `IQD` - Iraqi Dinar
	// * `IEP` - Irish Pound
	// * `ILS` - Israeli New Shekel
	// * `ILP` - Israeli Pound
	// * `ILR` - Israeli Shekel (1980–1985)
	// * `ITL` - Italian Lira
	// * `JMD` - Jamaican Dollar
	// * `JPY` - Japanese Yen
	// * `JOD` - Jordanian Dinar
	// * `KZT` - Kazakhstani Tenge
	// * `KES` - Kenyan Shilling
	// * `KWD` - Kuwaiti Dinar
	// * `KGS` - Kyrgystani Som
	// * `LAK` - Laotian Kip
	// * `LVL` - Latvian Lats
	// * `LVR` - Latvian Ruble
	// * `LBP` - Lebanese Pound
	// * `LSL` - Lesotho Loti
	// * `LRD` - Liberian Dollar
	// * `LYD` - Libyan Dinar
	// * `LTL` - Lithuanian Litas
	// * `LTT` - Lithuanian Talonas
	// * `LUL` - Luxembourg Financial Franc
	// * `LUC` - Luxembourgian Convertible Franc
	// * `LUF` - Luxembourgian Franc
	// * `MOP` - Macanese Pataca
	// * `MKD` - Macedonian Denar
	// * `MKN` - Macedonian Denar (1992–1993)
	// * `MGA` - Malagasy Ariary
	// * `MGF` - Malagasy Franc
	// * `MWK` - Malawian Kwacha
	// * `MYR` - Malaysian Ringgit
	// * `MVR` - Maldivian Rufiyaa
	// * `MVP` - Maldivian Rupee (1947–1981)
	// * `MLF` - Malian Franc
	// * `MTL` - Maltese Lira
	// * `MTP` - Maltese Pound
	// * `MRU` - Mauritanian Ouguiya
	// * `MRO` - Mauritanian Ouguiya (1973–2017)
	// * `MUR` - Mauritian Rupee
	// * `MXV` - Mexican Investment Unit
	// * `MXN` - Mexican Peso
	// * `MXP` - Mexican Silver Peso (1861–1992)
	// * `MDC` - Moldovan Cupon
	// * `MDL` - Moldovan Leu
	// * `MCF` - Monegasque Franc
	// * `MNT` - Mongolian Tugrik
	// * `MAD` - Moroccan Dirham
	// * `MAF` - Moroccan Franc
	// * `MZE` - Mozambican Escudo
	// * `MZN` - Mozambican Metical
	// * `MZM` - Mozambican Metical (1980–2006)
	// * `MMK` - Myanmar Kyat
	// * `NAD` - Namibian Dollar
	// * `NPR` - Nepalese Rupee
	// * `ANG` - Netherlands Antillean Guilder
	// * `TWD` - New Taiwan Dollar
	// * `NZD` - New Zealand Dollar
	// * `NIO` - Nicaraguan Córdoba
	// * `NIC` - Nicaraguan Córdoba (1988–1991)
	// * `NGN` - Nigerian Naira
	// * `KPW` - North Korean Won
	// * `NOK` - Norwegian Krone
	// * `OMR` - Omani Rial
	// * `PKR` - Pakistani Rupee
	// * `XPD` - Palladium
	// * `PAB` - Panamanian Balboa
	// * `PGK` - Papua New Guinean Kina
	// * `PYG` - Paraguayan Guarani
	// * `PEI` - Peruvian Inti
	// * `PEN` - Peruvian Sol
	// * `PES` - Peruvian Sol (1863–1965)
	// * `PHP` - Philippine Peso
	// * `XPT` - Platinum
	// * `PLN` - Polish Zloty
	// * `PLZ` - Polish Zloty (1950–1995)
	// * `PTE` - Portuguese Escudo
	// * `GWE` - Portuguese Guinea Escudo
	// * `QAR` - Qatari Rial
	// * `XRE` - RINET Funds
	// * `RHD` - Rhodesian Dollar
	// * `RON` - Romanian Leu
	// * `ROL` - Romanian Leu (1952–2006)
	// * `RUB` - Russian Ruble
	// * `RUR` - Russian Ruble (1991–1998)
	// * `RWF` - Rwandan Franc
	// * `SVC` - Salvadoran Colón
	// * `WST` - Samoan Tala
	// * `SAR` - Saudi Riyal
	// * `RSD` - Serbian Dinar
	// * `CSD` - Serbian Dinar (2002–2006)
	// * `SCR` - Seychellois Rupee
	// * `SLL` - Sierra Leonean Leone
	// * `XAG` - Silver
	// * `SGD` - Singapore Dollar
	// * `SKK` - Slovak Koruna
	// * `SIT` - Slovenian Tolar
	// * `SBD` - Solomon Islands Dollar
	// * `SOS` - Somali Shilling
	// * `ZAR` - South African Rand
	// * `ZAL` - South African Rand (financial)
	// * `KRH` - South Korean Hwan (1953–1962)
	// * `KRW` - South Korean Won
	// * `KRO` - South Korean Won (1945–1953)
	// * `SSP` - South Sudanese Pound
	// * `SUR` - Soviet Rouble
	// * `ESP` - Spanish Peseta
	// * `ESA` - Spanish Peseta (A account)
	// * `ESB` - Spanish Peseta (convertible account)
	// * `XDR` - Special Drawing Rights
	// * `LKR` - Sri Lankan Rupee
	// * `SHP` - St. Helena Pound
	// * `XSU` - Sucre
	// * `SDD` - Sudanese Dinar (1992–2007)
	// * `SDG` - Sudanese Pound
	// * `SDP` - Sudanese Pound (1957–1998)
	// * `SRD` - Surinamese Dollar
	// * `SRG` - Surinamese Guilder
	// * `SZL` - Swazi Lilangeni
	// * `SEK` - Swedish Krona
	// * `CHF` - Swiss Franc
	// * `SYP` - Syrian Pound
	// * `STN` - São Tomé & Príncipe Dobra
	// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
	// * `TVD` - TVD
	// * `TJR` - Tajikistani Ruble
	// * `TJS` - Tajikistani Somoni
	// * `TZS` - Tanzanian Shilling
	// * `XTS` - Testing Currency Code
	// * `THB` - Thai Baht
	// * `XXX` - The codes assigned for transactions where no currency is involved
	// * `TPE` - Timorese Escudo
	// * `TOP` - Tongan Paʻanga
	// * `TTD` - Trinidad & Tobago Dollar
	// * `TND` - Tunisian Dinar
	// * `TRY` - Turkish Lira
	// * `TRL` - Turkish Lira (1922–2005)
	// * `TMT` - Turkmenistani Manat
	// * `TMM` - Turkmenistani Manat (1993–2009)
	// * `USD` - US Dollar
	// * `USN` - US Dollar (Next day)
	// * `USS` - US Dollar (Same day)
	// * `UGX` - Ugandan Shilling
	// * `UGS` - Ugandan Shilling (1966–1987)
	// * `UAH` - Ukrainian Hryvnia
	// * `UAK` - Ukrainian Karbovanets
	// * `AED` - United Arab Emirates Dirham
	// * `UYW` - Uruguayan Nominal Wage Index Unit
	// * `UYU` - Uruguayan Peso
	// * `UYP` - Uruguayan Peso (1975–1993)
	// * `UYI` - Uruguayan Peso (Indexed Units)
	// * `UZS` - Uzbekistani Som
	// * `VUV` - Vanuatu Vatu
	// * `VES` - Venezuelan Bolívar
	// * `VEB` - Venezuelan Bolívar (1871–2008)
	// * `VEF` - Venezuelan Bolívar (2008–2018)
	// * `VND` - Vietnamese Dong
	// * `VNN` - Vietnamese Dong (1978–1985)
	// * `CHE` - WIR Euro
	// * `CHW` - WIR Franc
	// * `XOF` - West African CFA Franc
	// * `YDD` - Yemeni Dinar
	// * `YER` - Yemeni Rial
	// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
	// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
	// * `YUM` - Yugoslavian New Dinar (1994–2002)
	// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
	// * `ZWN` - ZWN
	// * `ZRN` - Zairean New Zaire (1993–1998)
	// * `ZRZ` - Zairean Zaire (1971–1993)
	// * `ZMW` - Zambian Kwacha
	// * `ZMK` - Zambian Kwacha (1968–2012)
	// * `ZWD` - Zimbabwean Dollar (1980–2008)
	// * `ZWR` - Zimbabwean Dollar (2008)
	// * `ZWL` - Zimbabwean Dollar (2009)
	Currency *JournalEntryCurrency `json:"currency,omitempty"`
	// The journal entry's exchange rate.
	ExchangeRate *string `json:"exchange_rate,omitempty"`
	// The company the journal entry belongs to.
	Company *JournalEntryCompany `json:"company,omitempty"`
	Lines   []*JournalLine       `json:"lines,omitempty"`
	// Reference number for identifying journal entries.
	JournalNumber      *string                               `json:"journal_number,omitempty"`
	TrackingCategories []*JournalEntryTrackingCategoriesItem `json:"tracking_categories,omitempty"`
	RemoteWasDeleted   *bool                                 `json:"remote_was_deleted,omitempty"`
	// The journal's posting status.
	//
	// * `UNPOSTED` - UNPOSTED
	// * `POSTED` - POSTED
	PostingStatus *JournalEntryPostingStatus `json:"posting_status,omitempty"`
	// The accounting period that the JournalEntry was generated in.
	AccountingPeriod *JournalEntryAccountingPeriod `json:"accounting_period,omitempty"`
	Id               *string                       `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId  *string    `json:"remote_id,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt    *time.Time     `json:"modified_at,omitempty"`
	FieldMappings map[string]any `json:"field_mappings,omitempty"`
	RemoteData    []*RemoteData  `json:"remote_data,omitempty"`
}

// The accounting period that the JournalEntry was generated in.
type JournalEntryAccountingPeriod struct {
	typeName         string
	String           string
	AccountingPeriod *AccountingPeriod
}

func NewJournalEntryAccountingPeriodFromString(value string) *JournalEntryAccountingPeriod {
	return &JournalEntryAccountingPeriod{typeName: "string", String: value}
}

func NewJournalEntryAccountingPeriodFromAccountingPeriod(value *AccountingPeriod) *JournalEntryAccountingPeriod {
	return &JournalEntryAccountingPeriod{typeName: "accountingPeriod", AccountingPeriod: value}
}

func (j *JournalEntryAccountingPeriod) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		j.typeName = "string"
		j.String = valueString
		return nil
	}
	valueAccountingPeriod := new(AccountingPeriod)
	if err := json.Unmarshal(data, &valueAccountingPeriod); err == nil {
		j.typeName = "accountingPeriod"
		j.AccountingPeriod = valueAccountingPeriod
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, j)
}

func (j JournalEntryAccountingPeriod) MarshalJSON() ([]byte, error) {
	switch j.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "string":
		return json.Marshal(j.String)
	case "accountingPeriod":
		return json.Marshal(j.AccountingPeriod)
	}
}

type JournalEntryAccountingPeriodVisitor interface {
	VisitString(string) error
	VisitAccountingPeriod(*AccountingPeriod) error
}

func (j *JournalEntryAccountingPeriod) Accept(visitor JournalEntryAccountingPeriodVisitor) error {
	switch j.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "string":
		return visitor.VisitString(j.String)
	case "accountingPeriod":
		return visitor.VisitAccountingPeriod(j.AccountingPeriod)
	}
}

type JournalEntryAppliedPaymentsItem struct {
	typeName        string
	String          string
	PaymentLineItem *PaymentLineItem
}

func NewJournalEntryAppliedPaymentsItemFromString(value string) *JournalEntryAppliedPaymentsItem {
	return &JournalEntryAppliedPaymentsItem{typeName: "string", String: value}
}

func NewJournalEntryAppliedPaymentsItemFromPaymentLineItem(value *PaymentLineItem) *JournalEntryAppliedPaymentsItem {
	return &JournalEntryAppliedPaymentsItem{typeName: "paymentLineItem", PaymentLineItem: value}
}

func (j *JournalEntryAppliedPaymentsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		j.typeName = "string"
		j.String = valueString
		return nil
	}
	valuePaymentLineItem := new(PaymentLineItem)
	if err := json.Unmarshal(data, &valuePaymentLineItem); err == nil {
		j.typeName = "paymentLineItem"
		j.PaymentLineItem = valuePaymentLineItem
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, j)
}

func (j JournalEntryAppliedPaymentsItem) MarshalJSON() ([]byte, error) {
	switch j.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "string":
		return json.Marshal(j.String)
	case "paymentLineItem":
		return json.Marshal(j.PaymentLineItem)
	}
}

type JournalEntryAppliedPaymentsItemVisitor interface {
	VisitString(string) error
	VisitPaymentLineItem(*PaymentLineItem) error
}

func (j *JournalEntryAppliedPaymentsItem) Accept(visitor JournalEntryAppliedPaymentsItemVisitor) error {
	switch j.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "string":
		return visitor.VisitString(j.String)
	case "paymentLineItem":
		return visitor.VisitPaymentLineItem(j.PaymentLineItem)
	}
}

// The company the journal entry belongs to.
type JournalEntryCompany struct {
	typeName    string
	String      string
	CompanyInfo *CompanyInfo
}

func NewJournalEntryCompanyFromString(value string) *JournalEntryCompany {
	return &JournalEntryCompany{typeName: "string", String: value}
}

func NewJournalEntryCompanyFromCompanyInfo(value *CompanyInfo) *JournalEntryCompany {
	return &JournalEntryCompany{typeName: "companyInfo", CompanyInfo: value}
}

func (j *JournalEntryCompany) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		j.typeName = "string"
		j.String = valueString
		return nil
	}
	valueCompanyInfo := new(CompanyInfo)
	if err := json.Unmarshal(data, &valueCompanyInfo); err == nil {
		j.typeName = "companyInfo"
		j.CompanyInfo = valueCompanyInfo
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, j)
}

func (j JournalEntryCompany) MarshalJSON() ([]byte, error) {
	switch j.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "string":
		return json.Marshal(j.String)
	case "companyInfo":
		return json.Marshal(j.CompanyInfo)
	}
}

type JournalEntryCompanyVisitor interface {
	VisitString(string) error
	VisitCompanyInfo(*CompanyInfo) error
}

func (j *JournalEntryCompany) Accept(visitor JournalEntryCompanyVisitor) error {
	switch j.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "string":
		return visitor.VisitString(j.String)
	case "companyInfo":
		return visitor.VisitCompanyInfo(j.CompanyInfo)
	}
}

// The journal's currency.
//
// * `XUA` - ADB Unit of Account
// * `AFN` - Afghan Afghani
// * `AFA` - Afghan Afghani (1927–2002)
// * `ALL` - Albanian Lek
// * `ALK` - Albanian Lek (1946–1965)
// * `DZD` - Algerian Dinar
// * `ADP` - Andorran Peseta
// * `AOA` - Angolan Kwanza
// * `AOK` - Angolan Kwanza (1977–1991)
// * `AON` - Angolan New Kwanza (1990–2000)
// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
// * `ARA` - Argentine Austral
// * `ARS` - Argentine Peso
// * `ARM` - Argentine Peso (1881–1970)
// * `ARP` - Argentine Peso (1983–1985)
// * `ARL` - Argentine Peso Ley (1970–1983)
// * `AMD` - Armenian Dram
// * `AWG` - Aruban Florin
// * `AUD` - Australian Dollar
// * `ATS` - Austrian Schilling
// * `AZN` - Azerbaijani Manat
// * `AZM` - Azerbaijani Manat (1993–2006)
// * `BSD` - Bahamian Dollar
// * `BHD` - Bahraini Dinar
// * `BDT` - Bangladeshi Taka
// * `BBD` - Barbadian Dollar
// * `BYN` - Belarusian Ruble
// * `BYB` - Belarusian Ruble (1994–1999)
// * `BYR` - Belarusian Ruble (2000–2016)
// * `BEF` - Belgian Franc
// * `BEC` - Belgian Franc (convertible)
// * `BEL` - Belgian Franc (financial)
// * `BZD` - Belize Dollar
// * `BMD` - Bermudan Dollar
// * `BTN` - Bhutanese Ngultrum
// * `BOB` - Bolivian Boliviano
// * `BOL` - Bolivian Boliviano (1863–1963)
// * `BOV` - Bolivian Mvdol
// * `BOP` - Bolivian Peso
// * `BAM` - Bosnia-Herzegovina Convertible Mark
// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
// * `BWP` - Botswanan Pula
// * `BRC` - Brazilian Cruzado (1986–1989)
// * `BRZ` - Brazilian Cruzeiro (1942–1967)
// * `BRE` - Brazilian Cruzeiro (1990–1993)
// * `BRR` - Brazilian Cruzeiro (1993–1994)
// * `BRN` - Brazilian New Cruzado (1989–1990)
// * `BRB` - Brazilian New Cruzeiro (1967–1986)
// * `BRL` - Brazilian Real
// * `GBP` - British Pound
// * `BND` - Brunei Dollar
// * `BGL` - Bulgarian Hard Lev
// * `BGN` - Bulgarian Lev
// * `BGO` - Bulgarian Lev (1879–1952)
// * `BGM` - Bulgarian Socialist Lev
// * `BUK` - Burmese Kyat
// * `BIF` - Burundian Franc
// * `XPF` - CFP Franc
// * `KHR` - Cambodian Riel
// * `CAD` - Canadian Dollar
// * `CVE` - Cape Verdean Escudo
// * `KYD` - Cayman Islands Dollar
// * `XAF` - Central African CFA Franc
// * `CLE` - Chilean Escudo
// * `CLP` - Chilean Peso
// * `CLF` - Chilean Unit of Account (UF)
// * `CNX` - Chinese People’s Bank Dollar
// * `CNY` - Chinese Yuan
// * `CNH` - Chinese Yuan (offshore)
// * `COP` - Colombian Peso
// * `COU` - Colombian Real Value Unit
// * `KMF` - Comorian Franc
// * `CDF` - Congolese Franc
// * `CRC` - Costa Rican Colón
// * `HRD` - Croatian Dinar
// * `HRK` - Croatian Kuna
// * `CUC` - Cuban Convertible Peso
// * `CUP` - Cuban Peso
// * `CYP` - Cypriot Pound
// * `CZK` - Czech Koruna
// * `CSK` - Czechoslovak Hard Koruna
// * `DKK` - Danish Krone
// * `DJF` - Djiboutian Franc
// * `DOP` - Dominican Peso
// * `NLG` - Dutch Guilder
// * `XCD` - East Caribbean Dollar
// * `DDM` - East German Mark
// * `ECS` - Ecuadorian Sucre
// * `ECV` - Ecuadorian Unit of Constant Value
// * `EGP` - Egyptian Pound
// * `GQE` - Equatorial Guinean Ekwele
// * `ERN` - Eritrean Nakfa
// * `EEK` - Estonian Kroon
// * `ETB` - Ethiopian Birr
// * `EUR` - Euro
// * `XBA` - European Composite Unit
// * `XEU` - European Currency Unit
// * `XBB` - European Monetary Unit
// * `XBC` - European Unit of Account (XBC)
// * `XBD` - European Unit of Account (XBD)
// * `FKP` - Falkland Islands Pound
// * `FJD` - Fijian Dollar
// * `FIM` - Finnish Markka
// * `FRF` - French Franc
// * `XFO` - French Gold Franc
// * `XFU` - French UIC-Franc
// * `GMD` - Gambian Dalasi
// * `GEK` - Georgian Kupon Larit
// * `GEL` - Georgian Lari
// * `DEM` - German Mark
// * `GHS` - Ghanaian Cedi
// * `GHC` - Ghanaian Cedi (1979–2007)
// * `GIP` - Gibraltar Pound
// * `XAU` - Gold
// * `GRD` - Greek Drachma
// * `GTQ` - Guatemalan Quetzal
// * `GWP` - Guinea-Bissau Peso
// * `GNF` - Guinean Franc
// * `GNS` - Guinean Syli
// * `GYD` - Guyanaese Dollar
// * `HTG` - Haitian Gourde
// * `HNL` - Honduran Lempira
// * `HKD` - Hong Kong Dollar
// * `HUF` - Hungarian Forint
// * `IMP` - IMP
// * `ISK` - Icelandic Króna
// * `ISJ` - Icelandic Króna (1918–1981)
// * `INR` - Indian Rupee
// * `IDR` - Indonesian Rupiah
// * `IRR` - Iranian Rial
// * `IQD` - Iraqi Dinar
// * `IEP` - Irish Pound
// * `ILS` - Israeli New Shekel
// * `ILP` - Israeli Pound
// * `ILR` - Israeli Shekel (1980–1985)
// * `ITL` - Italian Lira
// * `JMD` - Jamaican Dollar
// * `JPY` - Japanese Yen
// * `JOD` - Jordanian Dinar
// * `KZT` - Kazakhstani Tenge
// * `KES` - Kenyan Shilling
// * `KWD` - Kuwaiti Dinar
// * `KGS` - Kyrgystani Som
// * `LAK` - Laotian Kip
// * `LVL` - Latvian Lats
// * `LVR` - Latvian Ruble
// * `LBP` - Lebanese Pound
// * `LSL` - Lesotho Loti
// * `LRD` - Liberian Dollar
// * `LYD` - Libyan Dinar
// * `LTL` - Lithuanian Litas
// * `LTT` - Lithuanian Talonas
// * `LUL` - Luxembourg Financial Franc
// * `LUC` - Luxembourgian Convertible Franc
// * `LUF` - Luxembourgian Franc
// * `MOP` - Macanese Pataca
// * `MKD` - Macedonian Denar
// * `MKN` - Macedonian Denar (1992–1993)
// * `MGA` - Malagasy Ariary
// * `MGF` - Malagasy Franc
// * `MWK` - Malawian Kwacha
// * `MYR` - Malaysian Ringgit
// * `MVR` - Maldivian Rufiyaa
// * `MVP` - Maldivian Rupee (1947–1981)
// * `MLF` - Malian Franc
// * `MTL` - Maltese Lira
// * `MTP` - Maltese Pound
// * `MRU` - Mauritanian Ouguiya
// * `MRO` - Mauritanian Ouguiya (1973–2017)
// * `MUR` - Mauritian Rupee
// * `MXV` - Mexican Investment Unit
// * `MXN` - Mexican Peso
// * `MXP` - Mexican Silver Peso (1861–1992)
// * `MDC` - Moldovan Cupon
// * `MDL` - Moldovan Leu
// * `MCF` - Monegasque Franc
// * `MNT` - Mongolian Tugrik
// * `MAD` - Moroccan Dirham
// * `MAF` - Moroccan Franc
// * `MZE` - Mozambican Escudo
// * `MZN` - Mozambican Metical
// * `MZM` - Mozambican Metical (1980–2006)
// * `MMK` - Myanmar Kyat
// * `NAD` - Namibian Dollar
// * `NPR` - Nepalese Rupee
// * `ANG` - Netherlands Antillean Guilder
// * `TWD` - New Taiwan Dollar
// * `NZD` - New Zealand Dollar
// * `NIO` - Nicaraguan Córdoba
// * `NIC` - Nicaraguan Córdoba (1988–1991)
// * `NGN` - Nigerian Naira
// * `KPW` - North Korean Won
// * `NOK` - Norwegian Krone
// * `OMR` - Omani Rial
// * `PKR` - Pakistani Rupee
// * `XPD` - Palladium
// * `PAB` - Panamanian Balboa
// * `PGK` - Papua New Guinean Kina
// * `PYG` - Paraguayan Guarani
// * `PEI` - Peruvian Inti
// * `PEN` - Peruvian Sol
// * `PES` - Peruvian Sol (1863–1965)
// * `PHP` - Philippine Peso
// * `XPT` - Platinum
// * `PLN` - Polish Zloty
// * `PLZ` - Polish Zloty (1950–1995)
// * `PTE` - Portuguese Escudo
// * `GWE` - Portuguese Guinea Escudo
// * `QAR` - Qatari Rial
// * `XRE` - RINET Funds
// * `RHD` - Rhodesian Dollar
// * `RON` - Romanian Leu
// * `ROL` - Romanian Leu (1952–2006)
// * `RUB` - Russian Ruble
// * `RUR` - Russian Ruble (1991–1998)
// * `RWF` - Rwandan Franc
// * `SVC` - Salvadoran Colón
// * `WST` - Samoan Tala
// * `SAR` - Saudi Riyal
// * `RSD` - Serbian Dinar
// * `CSD` - Serbian Dinar (2002–2006)
// * `SCR` - Seychellois Rupee
// * `SLL` - Sierra Leonean Leone
// * `XAG` - Silver
// * `SGD` - Singapore Dollar
// * `SKK` - Slovak Koruna
// * `SIT` - Slovenian Tolar
// * `SBD` - Solomon Islands Dollar
// * `SOS` - Somali Shilling
// * `ZAR` - South African Rand
// * `ZAL` - South African Rand (financial)
// * `KRH` - South Korean Hwan (1953–1962)
// * `KRW` - South Korean Won
// * `KRO` - South Korean Won (1945–1953)
// * `SSP` - South Sudanese Pound
// * `SUR` - Soviet Rouble
// * `ESP` - Spanish Peseta
// * `ESA` - Spanish Peseta (A account)
// * `ESB` - Spanish Peseta (convertible account)
// * `XDR` - Special Drawing Rights
// * `LKR` - Sri Lankan Rupee
// * `SHP` - St. Helena Pound
// * `XSU` - Sucre
// * `SDD` - Sudanese Dinar (1992–2007)
// * `SDG` - Sudanese Pound
// * `SDP` - Sudanese Pound (1957–1998)
// * `SRD` - Surinamese Dollar
// * `SRG` - Surinamese Guilder
// * `SZL` - Swazi Lilangeni
// * `SEK` - Swedish Krona
// * `CHF` - Swiss Franc
// * `SYP` - Syrian Pound
// * `STN` - São Tomé & Príncipe Dobra
// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
// * `TVD` - TVD
// * `TJR` - Tajikistani Ruble
// * `TJS` - Tajikistani Somoni
// * `TZS` - Tanzanian Shilling
// * `XTS` - Testing Currency Code
// * `THB` - Thai Baht
// * `XXX` - The codes assigned for transactions where no currency is involved
// * `TPE` - Timorese Escudo
// * `TOP` - Tongan Paʻanga
// * `TTD` - Trinidad & Tobago Dollar
// * `TND` - Tunisian Dinar
// * `TRY` - Turkish Lira
// * `TRL` - Turkish Lira (1922–2005)
// * `TMT` - Turkmenistani Manat
// * `TMM` - Turkmenistani Manat (1993–2009)
// * `USD` - US Dollar
// * `USN` - US Dollar (Next day)
// * `USS` - US Dollar (Same day)
// * `UGX` - Ugandan Shilling
// * `UGS` - Ugandan Shilling (1966–1987)
// * `UAH` - Ukrainian Hryvnia
// * `UAK` - Ukrainian Karbovanets
// * `AED` - United Arab Emirates Dirham
// * `UYW` - Uruguayan Nominal Wage Index Unit
// * `UYU` - Uruguayan Peso
// * `UYP` - Uruguayan Peso (1975–1993)
// * `UYI` - Uruguayan Peso (Indexed Units)
// * `UZS` - Uzbekistani Som
// * `VUV` - Vanuatu Vatu
// * `VES` - Venezuelan Bolívar
// * `VEB` - Venezuelan Bolívar (1871–2008)
// * `VEF` - Venezuelan Bolívar (2008–2018)
// * `VND` - Vietnamese Dong
// * `VNN` - Vietnamese Dong (1978–1985)
// * `CHE` - WIR Euro
// * `CHW` - WIR Franc
// * `XOF` - West African CFA Franc
// * `YDD` - Yemeni Dinar
// * `YER` - Yemeni Rial
// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
// * `YUM` - Yugoslavian New Dinar (1994–2002)
// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
// * `ZWN` - ZWN
// * `ZRN` - Zairean New Zaire (1993–1998)
// * `ZRZ` - Zairean Zaire (1971–1993)
// * `ZMW` - Zambian Kwacha
// * `ZMK` - Zambian Kwacha (1968–2012)
// * `ZWD` - Zimbabwean Dollar (1980–2008)
// * `ZWR` - Zimbabwean Dollar (2008)
// * `ZWL` - Zimbabwean Dollar (2009)
type JournalEntryCurrency struct {
	typeName     string
	CurrencyEnum CurrencyEnum
	String       string
}

func NewJournalEntryCurrencyFromCurrencyEnum(value CurrencyEnum) *JournalEntryCurrency {
	return &JournalEntryCurrency{typeName: "currencyEnum", CurrencyEnum: value}
}

func NewJournalEntryCurrencyFromString(value string) *JournalEntryCurrency {
	return &JournalEntryCurrency{typeName: "string", String: value}
}

func (j *JournalEntryCurrency) UnmarshalJSON(data []byte) error {
	var valueCurrencyEnum CurrencyEnum
	if err := json.Unmarshal(data, &valueCurrencyEnum); err == nil {
		j.typeName = "currencyEnum"
		j.CurrencyEnum = valueCurrencyEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		j.typeName = "string"
		j.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, j)
}

func (j JournalEntryCurrency) MarshalJSON() ([]byte, error) {
	switch j.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "currencyEnum":
		return json.Marshal(j.CurrencyEnum)
	case "string":
		return json.Marshal(j.String)
	}
}

type JournalEntryCurrencyVisitor interface {
	VisitCurrencyEnum(CurrencyEnum) error
	VisitString(string) error
}

func (j *JournalEntryCurrency) Accept(visitor JournalEntryCurrencyVisitor) error {
	switch j.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "currencyEnum":
		return visitor.VisitCurrencyEnum(j.CurrencyEnum)
	case "string":
		return visitor.VisitString(j.String)
	}
}

type JournalEntryPaymentsItem struct {
	typeName string
	String   string
	Payment  *Payment
}

func NewJournalEntryPaymentsItemFromString(value string) *JournalEntryPaymentsItem {
	return &JournalEntryPaymentsItem{typeName: "string", String: value}
}

func NewJournalEntryPaymentsItemFromPayment(value *Payment) *JournalEntryPaymentsItem {
	return &JournalEntryPaymentsItem{typeName: "payment", Payment: value}
}

func (j *JournalEntryPaymentsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		j.typeName = "string"
		j.String = valueString
		return nil
	}
	valuePayment := new(Payment)
	if err := json.Unmarshal(data, &valuePayment); err == nil {
		j.typeName = "payment"
		j.Payment = valuePayment
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, j)
}

func (j JournalEntryPaymentsItem) MarshalJSON() ([]byte, error) {
	switch j.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "string":
		return json.Marshal(j.String)
	case "payment":
		return json.Marshal(j.Payment)
	}
}

type JournalEntryPaymentsItemVisitor interface {
	VisitString(string) error
	VisitPayment(*Payment) error
}

func (j *JournalEntryPaymentsItem) Accept(visitor JournalEntryPaymentsItemVisitor) error {
	switch j.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "string":
		return visitor.VisitString(j.String)
	case "payment":
		return visitor.VisitPayment(j.Payment)
	}
}

// The journal's posting status.
//
// * `UNPOSTED` - UNPOSTED
// * `POSTED` - POSTED
type JournalEntryPostingStatus struct {
	typeName          string
	PostingStatusEnum PostingStatusEnum
	String            string
}

func NewJournalEntryPostingStatusFromPostingStatusEnum(value PostingStatusEnum) *JournalEntryPostingStatus {
	return &JournalEntryPostingStatus{typeName: "postingStatusEnum", PostingStatusEnum: value}
}

func NewJournalEntryPostingStatusFromString(value string) *JournalEntryPostingStatus {
	return &JournalEntryPostingStatus{typeName: "string", String: value}
}

func (j *JournalEntryPostingStatus) UnmarshalJSON(data []byte) error {
	var valuePostingStatusEnum PostingStatusEnum
	if err := json.Unmarshal(data, &valuePostingStatusEnum); err == nil {
		j.typeName = "postingStatusEnum"
		j.PostingStatusEnum = valuePostingStatusEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		j.typeName = "string"
		j.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, j)
}

func (j JournalEntryPostingStatus) MarshalJSON() ([]byte, error) {
	switch j.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "postingStatusEnum":
		return json.Marshal(j.PostingStatusEnum)
	case "string":
		return json.Marshal(j.String)
	}
}

type JournalEntryPostingStatusVisitor interface {
	VisitPostingStatusEnum(PostingStatusEnum) error
	VisitString(string) error
}

func (j *JournalEntryPostingStatus) Accept(visitor JournalEntryPostingStatusVisitor) error {
	switch j.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "postingStatusEnum":
		return visitor.VisitPostingStatusEnum(j.PostingStatusEnum)
	case "string":
		return visitor.VisitString(j.String)
	}
}

// # The JournalEntry Object
// ### Description
// The `JournalEntry` object is used to get a record of all manually created entries made in a company’s general ledger. The journal line items for each journal entry should sum to zero.
//
// ### Usage Example
// Fetch from the `GET JournalEntry` endpoint and view a company's journey entry.
type JournalEntryRequest struct {
	// The journal entry's transaction date.
	TransactionDate *time.Time `json:"transaction_date,omitempty"`
	// Array of `Payment` object IDs.
	Payments []*JournalEntryRequestPaymentsItem `json:"payments,omitempty"`
	// The journal entry's private note.
	Memo *string `json:"memo,omitempty"`
	// The journal's currency.
	//
	// * `XUA` - ADB Unit of Account
	// * `AFN` - Afghan Afghani
	// * `AFA` - Afghan Afghani (1927–2002)
	// * `ALL` - Albanian Lek
	// * `ALK` - Albanian Lek (1946–1965)
	// * `DZD` - Algerian Dinar
	// * `ADP` - Andorran Peseta
	// * `AOA` - Angolan Kwanza
	// * `AOK` - Angolan Kwanza (1977–1991)
	// * `AON` - Angolan New Kwanza (1990–2000)
	// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
	// * `ARA` - Argentine Austral
	// * `ARS` - Argentine Peso
	// * `ARM` - Argentine Peso (1881–1970)
	// * `ARP` - Argentine Peso (1983–1985)
	// * `ARL` - Argentine Peso Ley (1970–1983)
	// * `AMD` - Armenian Dram
	// * `AWG` - Aruban Florin
	// * `AUD` - Australian Dollar
	// * `ATS` - Austrian Schilling
	// * `AZN` - Azerbaijani Manat
	// * `AZM` - Azerbaijani Manat (1993–2006)
	// * `BSD` - Bahamian Dollar
	// * `BHD` - Bahraini Dinar
	// * `BDT` - Bangladeshi Taka
	// * `BBD` - Barbadian Dollar
	// * `BYN` - Belarusian Ruble
	// * `BYB` - Belarusian Ruble (1994–1999)
	// * `BYR` - Belarusian Ruble (2000–2016)
	// * `BEF` - Belgian Franc
	// * `BEC` - Belgian Franc (convertible)
	// * `BEL` - Belgian Franc (financial)
	// * `BZD` - Belize Dollar
	// * `BMD` - Bermudan Dollar
	// * `BTN` - Bhutanese Ngultrum
	// * `BOB` - Bolivian Boliviano
	// * `BOL` - Bolivian Boliviano (1863–1963)
	// * `BOV` - Bolivian Mvdol
	// * `BOP` - Bolivian Peso
	// * `BAM` - Bosnia-Herzegovina Convertible Mark
	// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
	// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
	// * `BWP` - Botswanan Pula
	// * `BRC` - Brazilian Cruzado (1986–1989)
	// * `BRZ` - Brazilian Cruzeiro (1942–1967)
	// * `BRE` - Brazilian Cruzeiro (1990–1993)
	// * `BRR` - Brazilian Cruzeiro (1993–1994)
	// * `BRN` - Brazilian New Cruzado (1989–1990)
	// * `BRB` - Brazilian New Cruzeiro (1967–1986)
	// * `BRL` - Brazilian Real
	// * `GBP` - British Pound
	// * `BND` - Brunei Dollar
	// * `BGL` - Bulgarian Hard Lev
	// * `BGN` - Bulgarian Lev
	// * `BGO` - Bulgarian Lev (1879–1952)
	// * `BGM` - Bulgarian Socialist Lev
	// * `BUK` - Burmese Kyat
	// * `BIF` - Burundian Franc
	// * `XPF` - CFP Franc
	// * `KHR` - Cambodian Riel
	// * `CAD` - Canadian Dollar
	// * `CVE` - Cape Verdean Escudo
	// * `KYD` - Cayman Islands Dollar
	// * `XAF` - Central African CFA Franc
	// * `CLE` - Chilean Escudo
	// * `CLP` - Chilean Peso
	// * `CLF` - Chilean Unit of Account (UF)
	// * `CNX` - Chinese People’s Bank Dollar
	// * `CNY` - Chinese Yuan
	// * `CNH` - Chinese Yuan (offshore)
	// * `COP` - Colombian Peso
	// * `COU` - Colombian Real Value Unit
	// * `KMF` - Comorian Franc
	// * `CDF` - Congolese Franc
	// * `CRC` - Costa Rican Colón
	// * `HRD` - Croatian Dinar
	// * `HRK` - Croatian Kuna
	// * `CUC` - Cuban Convertible Peso
	// * `CUP` - Cuban Peso
	// * `CYP` - Cypriot Pound
	// * `CZK` - Czech Koruna
	// * `CSK` - Czechoslovak Hard Koruna
	// * `DKK` - Danish Krone
	// * `DJF` - Djiboutian Franc
	// * `DOP` - Dominican Peso
	// * `NLG` - Dutch Guilder
	// * `XCD` - East Caribbean Dollar
	// * `DDM` - East German Mark
	// * `ECS` - Ecuadorian Sucre
	// * `ECV` - Ecuadorian Unit of Constant Value
	// * `EGP` - Egyptian Pound
	// * `GQE` - Equatorial Guinean Ekwele
	// * `ERN` - Eritrean Nakfa
	// * `EEK` - Estonian Kroon
	// * `ETB` - Ethiopian Birr
	// * `EUR` - Euro
	// * `XBA` - European Composite Unit
	// * `XEU` - European Currency Unit
	// * `XBB` - European Monetary Unit
	// * `XBC` - European Unit of Account (XBC)
	// * `XBD` - European Unit of Account (XBD)
	// * `FKP` - Falkland Islands Pound
	// * `FJD` - Fijian Dollar
	// * `FIM` - Finnish Markka
	// * `FRF` - French Franc
	// * `XFO` - French Gold Franc
	// * `XFU` - French UIC-Franc
	// * `GMD` - Gambian Dalasi
	// * `GEK` - Georgian Kupon Larit
	// * `GEL` - Georgian Lari
	// * `DEM` - German Mark
	// * `GHS` - Ghanaian Cedi
	// * `GHC` - Ghanaian Cedi (1979–2007)
	// * `GIP` - Gibraltar Pound
	// * `XAU` - Gold
	// * `GRD` - Greek Drachma
	// * `GTQ` - Guatemalan Quetzal
	// * `GWP` - Guinea-Bissau Peso
	// * `GNF` - Guinean Franc
	// * `GNS` - Guinean Syli
	// * `GYD` - Guyanaese Dollar
	// * `HTG` - Haitian Gourde
	// * `HNL` - Honduran Lempira
	// * `HKD` - Hong Kong Dollar
	// * `HUF` - Hungarian Forint
	// * `IMP` - IMP
	// * `ISK` - Icelandic Króna
	// * `ISJ` - Icelandic Króna (1918–1981)
	// * `INR` - Indian Rupee
	// * `IDR` - Indonesian Rupiah
	// * `IRR` - Iranian Rial
	// * `IQD` - Iraqi Dinar
	// * `IEP` - Irish Pound
	// * `ILS` - Israeli New Shekel
	// * `ILP` - Israeli Pound
	// * `ILR` - Israeli Shekel (1980–1985)
	// * `ITL` - Italian Lira
	// * `JMD` - Jamaican Dollar
	// * `JPY` - Japanese Yen
	// * `JOD` - Jordanian Dinar
	// * `KZT` - Kazakhstani Tenge
	// * `KES` - Kenyan Shilling
	// * `KWD` - Kuwaiti Dinar
	// * `KGS` - Kyrgystani Som
	// * `LAK` - Laotian Kip
	// * `LVL` - Latvian Lats
	// * `LVR` - Latvian Ruble
	// * `LBP` - Lebanese Pound
	// * `LSL` - Lesotho Loti
	// * `LRD` - Liberian Dollar
	// * `LYD` - Libyan Dinar
	// * `LTL` - Lithuanian Litas
	// * `LTT` - Lithuanian Talonas
	// * `LUL` - Luxembourg Financial Franc
	// * `LUC` - Luxembourgian Convertible Franc
	// * `LUF` - Luxembourgian Franc
	// * `MOP` - Macanese Pataca
	// * `MKD` - Macedonian Denar
	// * `MKN` - Macedonian Denar (1992–1993)
	// * `MGA` - Malagasy Ariary
	// * `MGF` - Malagasy Franc
	// * `MWK` - Malawian Kwacha
	// * `MYR` - Malaysian Ringgit
	// * `MVR` - Maldivian Rufiyaa
	// * `MVP` - Maldivian Rupee (1947–1981)
	// * `MLF` - Malian Franc
	// * `MTL` - Maltese Lira
	// * `MTP` - Maltese Pound
	// * `MRU` - Mauritanian Ouguiya
	// * `MRO` - Mauritanian Ouguiya (1973–2017)
	// * `MUR` - Mauritian Rupee
	// * `MXV` - Mexican Investment Unit
	// * `MXN` - Mexican Peso
	// * `MXP` - Mexican Silver Peso (1861–1992)
	// * `MDC` - Moldovan Cupon
	// * `MDL` - Moldovan Leu
	// * `MCF` - Monegasque Franc
	// * `MNT` - Mongolian Tugrik
	// * `MAD` - Moroccan Dirham
	// * `MAF` - Moroccan Franc
	// * `MZE` - Mozambican Escudo
	// * `MZN` - Mozambican Metical
	// * `MZM` - Mozambican Metical (1980–2006)
	// * `MMK` - Myanmar Kyat
	// * `NAD` - Namibian Dollar
	// * `NPR` - Nepalese Rupee
	// * `ANG` - Netherlands Antillean Guilder
	// * `TWD` - New Taiwan Dollar
	// * `NZD` - New Zealand Dollar
	// * `NIO` - Nicaraguan Córdoba
	// * `NIC` - Nicaraguan Córdoba (1988–1991)
	// * `NGN` - Nigerian Naira
	// * `KPW` - North Korean Won
	// * `NOK` - Norwegian Krone
	// * `OMR` - Omani Rial
	// * `PKR` - Pakistani Rupee
	// * `XPD` - Palladium
	// * `PAB` - Panamanian Balboa
	// * `PGK` - Papua New Guinean Kina
	// * `PYG` - Paraguayan Guarani
	// * `PEI` - Peruvian Inti
	// * `PEN` - Peruvian Sol
	// * `PES` - Peruvian Sol (1863–1965)
	// * `PHP` - Philippine Peso
	// * `XPT` - Platinum
	// * `PLN` - Polish Zloty
	// * `PLZ` - Polish Zloty (1950–1995)
	// * `PTE` - Portuguese Escudo
	// * `GWE` - Portuguese Guinea Escudo
	// * `QAR` - Qatari Rial
	// * `XRE` - RINET Funds
	// * `RHD` - Rhodesian Dollar
	// * `RON` - Romanian Leu
	// * `ROL` - Romanian Leu (1952–2006)
	// * `RUB` - Russian Ruble
	// * `RUR` - Russian Ruble (1991–1998)
	// * `RWF` - Rwandan Franc
	// * `SVC` - Salvadoran Colón
	// * `WST` - Samoan Tala
	// * `SAR` - Saudi Riyal
	// * `RSD` - Serbian Dinar
	// * `CSD` - Serbian Dinar (2002–2006)
	// * `SCR` - Seychellois Rupee
	// * `SLL` - Sierra Leonean Leone
	// * `XAG` - Silver
	// * `SGD` - Singapore Dollar
	// * `SKK` - Slovak Koruna
	// * `SIT` - Slovenian Tolar
	// * `SBD` - Solomon Islands Dollar
	// * `SOS` - Somali Shilling
	// * `ZAR` - South African Rand
	// * `ZAL` - South African Rand (financial)
	// * `KRH` - South Korean Hwan (1953–1962)
	// * `KRW` - South Korean Won
	// * `KRO` - South Korean Won (1945–1953)
	// * `SSP` - South Sudanese Pound
	// * `SUR` - Soviet Rouble
	// * `ESP` - Spanish Peseta
	// * `ESA` - Spanish Peseta (A account)
	// * `ESB` - Spanish Peseta (convertible account)
	// * `XDR` - Special Drawing Rights
	// * `LKR` - Sri Lankan Rupee
	// * `SHP` - St. Helena Pound
	// * `XSU` - Sucre
	// * `SDD` - Sudanese Dinar (1992–2007)
	// * `SDG` - Sudanese Pound
	// * `SDP` - Sudanese Pound (1957–1998)
	// * `SRD` - Surinamese Dollar
	// * `SRG` - Surinamese Guilder
	// * `SZL` - Swazi Lilangeni
	// * `SEK` - Swedish Krona
	// * `CHF` - Swiss Franc
	// * `SYP` - Syrian Pound
	// * `STN` - São Tomé & Príncipe Dobra
	// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
	// * `TVD` - TVD
	// * `TJR` - Tajikistani Ruble
	// * `TJS` - Tajikistani Somoni
	// * `TZS` - Tanzanian Shilling
	// * `XTS` - Testing Currency Code
	// * `THB` - Thai Baht
	// * `XXX` - The codes assigned for transactions where no currency is involved
	// * `TPE` - Timorese Escudo
	// * `TOP` - Tongan Paʻanga
	// * `TTD` - Trinidad & Tobago Dollar
	// * `TND` - Tunisian Dinar
	// * `TRY` - Turkish Lira
	// * `TRL` - Turkish Lira (1922–2005)
	// * `TMT` - Turkmenistani Manat
	// * `TMM` - Turkmenistani Manat (1993–2009)
	// * `USD` - US Dollar
	// * `USN` - US Dollar (Next day)
	// * `USS` - US Dollar (Same day)
	// * `UGX` - Ugandan Shilling
	// * `UGS` - Ugandan Shilling (1966–1987)
	// * `UAH` - Ukrainian Hryvnia
	// * `UAK` - Ukrainian Karbovanets
	// * `AED` - United Arab Emirates Dirham
	// * `UYW` - Uruguayan Nominal Wage Index Unit
	// * `UYU` - Uruguayan Peso
	// * `UYP` - Uruguayan Peso (1975–1993)
	// * `UYI` - Uruguayan Peso (Indexed Units)
	// * `UZS` - Uzbekistani Som
	// * `VUV` - Vanuatu Vatu
	// * `VES` - Venezuelan Bolívar
	// * `VEB` - Venezuelan Bolívar (1871–2008)
	// * `VEF` - Venezuelan Bolívar (2008–2018)
	// * `VND` - Vietnamese Dong
	// * `VNN` - Vietnamese Dong (1978–1985)
	// * `CHE` - WIR Euro
	// * `CHW` - WIR Franc
	// * `XOF` - West African CFA Franc
	// * `YDD` - Yemeni Dinar
	// * `YER` - Yemeni Rial
	// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
	// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
	// * `YUM` - Yugoslavian New Dinar (1994–2002)
	// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
	// * `ZWN` - ZWN
	// * `ZRN` - Zairean New Zaire (1993–1998)
	// * `ZRZ` - Zairean Zaire (1971–1993)
	// * `ZMW` - Zambian Kwacha
	// * `ZMK` - Zambian Kwacha (1968–2012)
	// * `ZWD` - Zimbabwean Dollar (1980–2008)
	// * `ZWR` - Zimbabwean Dollar (2008)
	// * `ZWL` - Zimbabwean Dollar (2009)
	Currency *JournalEntryRequestCurrency `json:"currency,omitempty"`
	// The journal entry's exchange rate.
	ExchangeRate *string `json:"exchange_rate,omitempty"`
	// The company the journal entry belongs to.
	Company            *JournalEntryRequestCompany                  `json:"company,omitempty"`
	TrackingCategories []*JournalEntryRequestTrackingCategoriesItem `json:"tracking_categories,omitempty"`
	Lines              []*JournalLineRequest                        `json:"lines,omitempty"`
	// Reference number for identifying journal entries.
	JournalNumber *string `json:"journal_number,omitempty"`
	// The journal's posting status.
	//
	// * `UNPOSTED` - UNPOSTED
	// * `POSTED` - POSTED
	PostingStatus       *JournalEntryRequestPostingStatus `json:"posting_status,omitempty"`
	IntegrationParams   map[string]any                    `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]any                    `json:"linked_account_params,omitempty"`
}

// The company the journal entry belongs to.
type JournalEntryRequestCompany struct {
	typeName    string
	String      string
	CompanyInfo *CompanyInfo
}

func NewJournalEntryRequestCompanyFromString(value string) *JournalEntryRequestCompany {
	return &JournalEntryRequestCompany{typeName: "string", String: value}
}

func NewJournalEntryRequestCompanyFromCompanyInfo(value *CompanyInfo) *JournalEntryRequestCompany {
	return &JournalEntryRequestCompany{typeName: "companyInfo", CompanyInfo: value}
}

func (j *JournalEntryRequestCompany) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		j.typeName = "string"
		j.String = valueString
		return nil
	}
	valueCompanyInfo := new(CompanyInfo)
	if err := json.Unmarshal(data, &valueCompanyInfo); err == nil {
		j.typeName = "companyInfo"
		j.CompanyInfo = valueCompanyInfo
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, j)
}

func (j JournalEntryRequestCompany) MarshalJSON() ([]byte, error) {
	switch j.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "string":
		return json.Marshal(j.String)
	case "companyInfo":
		return json.Marshal(j.CompanyInfo)
	}
}

type JournalEntryRequestCompanyVisitor interface {
	VisitString(string) error
	VisitCompanyInfo(*CompanyInfo) error
}

func (j *JournalEntryRequestCompany) Accept(visitor JournalEntryRequestCompanyVisitor) error {
	switch j.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "string":
		return visitor.VisitString(j.String)
	case "companyInfo":
		return visitor.VisitCompanyInfo(j.CompanyInfo)
	}
}

// The journal's currency.
//
// * `XUA` - ADB Unit of Account
// * `AFN` - Afghan Afghani
// * `AFA` - Afghan Afghani (1927–2002)
// * `ALL` - Albanian Lek
// * `ALK` - Albanian Lek (1946–1965)
// * `DZD` - Algerian Dinar
// * `ADP` - Andorran Peseta
// * `AOA` - Angolan Kwanza
// * `AOK` - Angolan Kwanza (1977–1991)
// * `AON` - Angolan New Kwanza (1990–2000)
// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
// * `ARA` - Argentine Austral
// * `ARS` - Argentine Peso
// * `ARM` - Argentine Peso (1881–1970)
// * `ARP` - Argentine Peso (1983–1985)
// * `ARL` - Argentine Peso Ley (1970–1983)
// * `AMD` - Armenian Dram
// * `AWG` - Aruban Florin
// * `AUD` - Australian Dollar
// * `ATS` - Austrian Schilling
// * `AZN` - Azerbaijani Manat
// * `AZM` - Azerbaijani Manat (1993–2006)
// * `BSD` - Bahamian Dollar
// * `BHD` - Bahraini Dinar
// * `BDT` - Bangladeshi Taka
// * `BBD` - Barbadian Dollar
// * `BYN` - Belarusian Ruble
// * `BYB` - Belarusian Ruble (1994–1999)
// * `BYR` - Belarusian Ruble (2000–2016)
// * `BEF` - Belgian Franc
// * `BEC` - Belgian Franc (convertible)
// * `BEL` - Belgian Franc (financial)
// * `BZD` - Belize Dollar
// * `BMD` - Bermudan Dollar
// * `BTN` - Bhutanese Ngultrum
// * `BOB` - Bolivian Boliviano
// * `BOL` - Bolivian Boliviano (1863–1963)
// * `BOV` - Bolivian Mvdol
// * `BOP` - Bolivian Peso
// * `BAM` - Bosnia-Herzegovina Convertible Mark
// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
// * `BWP` - Botswanan Pula
// * `BRC` - Brazilian Cruzado (1986–1989)
// * `BRZ` - Brazilian Cruzeiro (1942–1967)
// * `BRE` - Brazilian Cruzeiro (1990–1993)
// * `BRR` - Brazilian Cruzeiro (1993–1994)
// * `BRN` - Brazilian New Cruzado (1989–1990)
// * `BRB` - Brazilian New Cruzeiro (1967–1986)
// * `BRL` - Brazilian Real
// * `GBP` - British Pound
// * `BND` - Brunei Dollar
// * `BGL` - Bulgarian Hard Lev
// * `BGN` - Bulgarian Lev
// * `BGO` - Bulgarian Lev (1879–1952)
// * `BGM` - Bulgarian Socialist Lev
// * `BUK` - Burmese Kyat
// * `BIF` - Burundian Franc
// * `XPF` - CFP Franc
// * `KHR` - Cambodian Riel
// * `CAD` - Canadian Dollar
// * `CVE` - Cape Verdean Escudo
// * `KYD` - Cayman Islands Dollar
// * `XAF` - Central African CFA Franc
// * `CLE` - Chilean Escudo
// * `CLP` - Chilean Peso
// * `CLF` - Chilean Unit of Account (UF)
// * `CNX` - Chinese People’s Bank Dollar
// * `CNY` - Chinese Yuan
// * `CNH` - Chinese Yuan (offshore)
// * `COP` - Colombian Peso
// * `COU` - Colombian Real Value Unit
// * `KMF` - Comorian Franc
// * `CDF` - Congolese Franc
// * `CRC` - Costa Rican Colón
// * `HRD` - Croatian Dinar
// * `HRK` - Croatian Kuna
// * `CUC` - Cuban Convertible Peso
// * `CUP` - Cuban Peso
// * `CYP` - Cypriot Pound
// * `CZK` - Czech Koruna
// * `CSK` - Czechoslovak Hard Koruna
// * `DKK` - Danish Krone
// * `DJF` - Djiboutian Franc
// * `DOP` - Dominican Peso
// * `NLG` - Dutch Guilder
// * `XCD` - East Caribbean Dollar
// * `DDM` - East German Mark
// * `ECS` - Ecuadorian Sucre
// * `ECV` - Ecuadorian Unit of Constant Value
// * `EGP` - Egyptian Pound
// * `GQE` - Equatorial Guinean Ekwele
// * `ERN` - Eritrean Nakfa
// * `EEK` - Estonian Kroon
// * `ETB` - Ethiopian Birr
// * `EUR` - Euro
// * `XBA` - European Composite Unit
// * `XEU` - European Currency Unit
// * `XBB` - European Monetary Unit
// * `XBC` - European Unit of Account (XBC)
// * `XBD` - European Unit of Account (XBD)
// * `FKP` - Falkland Islands Pound
// * `FJD` - Fijian Dollar
// * `FIM` - Finnish Markka
// * `FRF` - French Franc
// * `XFO` - French Gold Franc
// * `XFU` - French UIC-Franc
// * `GMD` - Gambian Dalasi
// * `GEK` - Georgian Kupon Larit
// * `GEL` - Georgian Lari
// * `DEM` - German Mark
// * `GHS` - Ghanaian Cedi
// * `GHC` - Ghanaian Cedi (1979–2007)
// * `GIP` - Gibraltar Pound
// * `XAU` - Gold
// * `GRD` - Greek Drachma
// * `GTQ` - Guatemalan Quetzal
// * `GWP` - Guinea-Bissau Peso
// * `GNF` - Guinean Franc
// * `GNS` - Guinean Syli
// * `GYD` - Guyanaese Dollar
// * `HTG` - Haitian Gourde
// * `HNL` - Honduran Lempira
// * `HKD` - Hong Kong Dollar
// * `HUF` - Hungarian Forint
// * `IMP` - IMP
// * `ISK` - Icelandic Króna
// * `ISJ` - Icelandic Króna (1918–1981)
// * `INR` - Indian Rupee
// * `IDR` - Indonesian Rupiah
// * `IRR` - Iranian Rial
// * `IQD` - Iraqi Dinar
// * `IEP` - Irish Pound
// * `ILS` - Israeli New Shekel
// * `ILP` - Israeli Pound
// * `ILR` - Israeli Shekel (1980–1985)
// * `ITL` - Italian Lira
// * `JMD` - Jamaican Dollar
// * `JPY` - Japanese Yen
// * `JOD` - Jordanian Dinar
// * `KZT` - Kazakhstani Tenge
// * `KES` - Kenyan Shilling
// * `KWD` - Kuwaiti Dinar
// * `KGS` - Kyrgystani Som
// * `LAK` - Laotian Kip
// * `LVL` - Latvian Lats
// * `LVR` - Latvian Ruble
// * `LBP` - Lebanese Pound
// * `LSL` - Lesotho Loti
// * `LRD` - Liberian Dollar
// * `LYD` - Libyan Dinar
// * `LTL` - Lithuanian Litas
// * `LTT` - Lithuanian Talonas
// * `LUL` - Luxembourg Financial Franc
// * `LUC` - Luxembourgian Convertible Franc
// * `LUF` - Luxembourgian Franc
// * `MOP` - Macanese Pataca
// * `MKD` - Macedonian Denar
// * `MKN` - Macedonian Denar (1992–1993)
// * `MGA` - Malagasy Ariary
// * `MGF` - Malagasy Franc
// * `MWK` - Malawian Kwacha
// * `MYR` - Malaysian Ringgit
// * `MVR` - Maldivian Rufiyaa
// * `MVP` - Maldivian Rupee (1947–1981)
// * `MLF` - Malian Franc
// * `MTL` - Maltese Lira
// * `MTP` - Maltese Pound
// * `MRU` - Mauritanian Ouguiya
// * `MRO` - Mauritanian Ouguiya (1973–2017)
// * `MUR` - Mauritian Rupee
// * `MXV` - Mexican Investment Unit
// * `MXN` - Mexican Peso
// * `MXP` - Mexican Silver Peso (1861–1992)
// * `MDC` - Moldovan Cupon
// * `MDL` - Moldovan Leu
// * `MCF` - Monegasque Franc
// * `MNT` - Mongolian Tugrik
// * `MAD` - Moroccan Dirham
// * `MAF` - Moroccan Franc
// * `MZE` - Mozambican Escudo
// * `MZN` - Mozambican Metical
// * `MZM` - Mozambican Metical (1980–2006)
// * `MMK` - Myanmar Kyat
// * `NAD` - Namibian Dollar
// * `NPR` - Nepalese Rupee
// * `ANG` - Netherlands Antillean Guilder
// * `TWD` - New Taiwan Dollar
// * `NZD` - New Zealand Dollar
// * `NIO` - Nicaraguan Córdoba
// * `NIC` - Nicaraguan Córdoba (1988–1991)
// * `NGN` - Nigerian Naira
// * `KPW` - North Korean Won
// * `NOK` - Norwegian Krone
// * `OMR` - Omani Rial
// * `PKR` - Pakistani Rupee
// * `XPD` - Palladium
// * `PAB` - Panamanian Balboa
// * `PGK` - Papua New Guinean Kina
// * `PYG` - Paraguayan Guarani
// * `PEI` - Peruvian Inti
// * `PEN` - Peruvian Sol
// * `PES` - Peruvian Sol (1863–1965)
// * `PHP` - Philippine Peso
// * `XPT` - Platinum
// * `PLN` - Polish Zloty
// * `PLZ` - Polish Zloty (1950–1995)
// * `PTE` - Portuguese Escudo
// * `GWE` - Portuguese Guinea Escudo
// * `QAR` - Qatari Rial
// * `XRE` - RINET Funds
// * `RHD` - Rhodesian Dollar
// * `RON` - Romanian Leu
// * `ROL` - Romanian Leu (1952–2006)
// * `RUB` - Russian Ruble
// * `RUR` - Russian Ruble (1991–1998)
// * `RWF` - Rwandan Franc
// * `SVC` - Salvadoran Colón
// * `WST` - Samoan Tala
// * `SAR` - Saudi Riyal
// * `RSD` - Serbian Dinar
// * `CSD` - Serbian Dinar (2002–2006)
// * `SCR` - Seychellois Rupee
// * `SLL` - Sierra Leonean Leone
// * `XAG` - Silver
// * `SGD` - Singapore Dollar
// * `SKK` - Slovak Koruna
// * `SIT` - Slovenian Tolar
// * `SBD` - Solomon Islands Dollar
// * `SOS` - Somali Shilling
// * `ZAR` - South African Rand
// * `ZAL` - South African Rand (financial)
// * `KRH` - South Korean Hwan (1953–1962)
// * `KRW` - South Korean Won
// * `KRO` - South Korean Won (1945–1953)
// * `SSP` - South Sudanese Pound
// * `SUR` - Soviet Rouble
// * `ESP` - Spanish Peseta
// * `ESA` - Spanish Peseta (A account)
// * `ESB` - Spanish Peseta (convertible account)
// * `XDR` - Special Drawing Rights
// * `LKR` - Sri Lankan Rupee
// * `SHP` - St. Helena Pound
// * `XSU` - Sucre
// * `SDD` - Sudanese Dinar (1992–2007)
// * `SDG` - Sudanese Pound
// * `SDP` - Sudanese Pound (1957–1998)
// * `SRD` - Surinamese Dollar
// * `SRG` - Surinamese Guilder
// * `SZL` - Swazi Lilangeni
// * `SEK` - Swedish Krona
// * `CHF` - Swiss Franc
// * `SYP` - Syrian Pound
// * `STN` - São Tomé & Príncipe Dobra
// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
// * `TVD` - TVD
// * `TJR` - Tajikistani Ruble
// * `TJS` - Tajikistani Somoni
// * `TZS` - Tanzanian Shilling
// * `XTS` - Testing Currency Code
// * `THB` - Thai Baht
// * `XXX` - The codes assigned for transactions where no currency is involved
// * `TPE` - Timorese Escudo
// * `TOP` - Tongan Paʻanga
// * `TTD` - Trinidad & Tobago Dollar
// * `TND` - Tunisian Dinar
// * `TRY` - Turkish Lira
// * `TRL` - Turkish Lira (1922–2005)
// * `TMT` - Turkmenistani Manat
// * `TMM` - Turkmenistani Manat (1993–2009)
// * `USD` - US Dollar
// * `USN` - US Dollar (Next day)
// * `USS` - US Dollar (Same day)
// * `UGX` - Ugandan Shilling
// * `UGS` - Ugandan Shilling (1966–1987)
// * `UAH` - Ukrainian Hryvnia
// * `UAK` - Ukrainian Karbovanets
// * `AED` - United Arab Emirates Dirham
// * `UYW` - Uruguayan Nominal Wage Index Unit
// * `UYU` - Uruguayan Peso
// * `UYP` - Uruguayan Peso (1975–1993)
// * `UYI` - Uruguayan Peso (Indexed Units)
// * `UZS` - Uzbekistani Som
// * `VUV` - Vanuatu Vatu
// * `VES` - Venezuelan Bolívar
// * `VEB` - Venezuelan Bolívar (1871–2008)
// * `VEF` - Venezuelan Bolívar (2008–2018)
// * `VND` - Vietnamese Dong
// * `VNN` - Vietnamese Dong (1978–1985)
// * `CHE` - WIR Euro
// * `CHW` - WIR Franc
// * `XOF` - West African CFA Franc
// * `YDD` - Yemeni Dinar
// * `YER` - Yemeni Rial
// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
// * `YUM` - Yugoslavian New Dinar (1994–2002)
// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
// * `ZWN` - ZWN
// * `ZRN` - Zairean New Zaire (1993–1998)
// * `ZRZ` - Zairean Zaire (1971–1993)
// * `ZMW` - Zambian Kwacha
// * `ZMK` - Zambian Kwacha (1968–2012)
// * `ZWD` - Zimbabwean Dollar (1980–2008)
// * `ZWR` - Zimbabwean Dollar (2008)
// * `ZWL` - Zimbabwean Dollar (2009)
type JournalEntryRequestCurrency struct {
	typeName     string
	CurrencyEnum CurrencyEnum
	String       string
}

func NewJournalEntryRequestCurrencyFromCurrencyEnum(value CurrencyEnum) *JournalEntryRequestCurrency {
	return &JournalEntryRequestCurrency{typeName: "currencyEnum", CurrencyEnum: value}
}

func NewJournalEntryRequestCurrencyFromString(value string) *JournalEntryRequestCurrency {
	return &JournalEntryRequestCurrency{typeName: "string", String: value}
}

func (j *JournalEntryRequestCurrency) UnmarshalJSON(data []byte) error {
	var valueCurrencyEnum CurrencyEnum
	if err := json.Unmarshal(data, &valueCurrencyEnum); err == nil {
		j.typeName = "currencyEnum"
		j.CurrencyEnum = valueCurrencyEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		j.typeName = "string"
		j.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, j)
}

func (j JournalEntryRequestCurrency) MarshalJSON() ([]byte, error) {
	switch j.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "currencyEnum":
		return json.Marshal(j.CurrencyEnum)
	case "string":
		return json.Marshal(j.String)
	}
}

type JournalEntryRequestCurrencyVisitor interface {
	VisitCurrencyEnum(CurrencyEnum) error
	VisitString(string) error
}

func (j *JournalEntryRequestCurrency) Accept(visitor JournalEntryRequestCurrencyVisitor) error {
	switch j.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "currencyEnum":
		return visitor.VisitCurrencyEnum(j.CurrencyEnum)
	case "string":
		return visitor.VisitString(j.String)
	}
}

type JournalEntryRequestPaymentsItem struct {
	typeName string
	String   string
	Payment  *Payment
}

func NewJournalEntryRequestPaymentsItemFromString(value string) *JournalEntryRequestPaymentsItem {
	return &JournalEntryRequestPaymentsItem{typeName: "string", String: value}
}

func NewJournalEntryRequestPaymentsItemFromPayment(value *Payment) *JournalEntryRequestPaymentsItem {
	return &JournalEntryRequestPaymentsItem{typeName: "payment", Payment: value}
}

func (j *JournalEntryRequestPaymentsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		j.typeName = "string"
		j.String = valueString
		return nil
	}
	valuePayment := new(Payment)
	if err := json.Unmarshal(data, &valuePayment); err == nil {
		j.typeName = "payment"
		j.Payment = valuePayment
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, j)
}

func (j JournalEntryRequestPaymentsItem) MarshalJSON() ([]byte, error) {
	switch j.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "string":
		return json.Marshal(j.String)
	case "payment":
		return json.Marshal(j.Payment)
	}
}

type JournalEntryRequestPaymentsItemVisitor interface {
	VisitString(string) error
	VisitPayment(*Payment) error
}

func (j *JournalEntryRequestPaymentsItem) Accept(visitor JournalEntryRequestPaymentsItemVisitor) error {
	switch j.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "string":
		return visitor.VisitString(j.String)
	case "payment":
		return visitor.VisitPayment(j.Payment)
	}
}

// The journal's posting status.
//
// * `UNPOSTED` - UNPOSTED
// * `POSTED` - POSTED
type JournalEntryRequestPostingStatus struct {
	typeName          string
	PostingStatusEnum PostingStatusEnum
	String            string
}

func NewJournalEntryRequestPostingStatusFromPostingStatusEnum(value PostingStatusEnum) *JournalEntryRequestPostingStatus {
	return &JournalEntryRequestPostingStatus{typeName: "postingStatusEnum", PostingStatusEnum: value}
}

func NewJournalEntryRequestPostingStatusFromString(value string) *JournalEntryRequestPostingStatus {
	return &JournalEntryRequestPostingStatus{typeName: "string", String: value}
}

func (j *JournalEntryRequestPostingStatus) UnmarshalJSON(data []byte) error {
	var valuePostingStatusEnum PostingStatusEnum
	if err := json.Unmarshal(data, &valuePostingStatusEnum); err == nil {
		j.typeName = "postingStatusEnum"
		j.PostingStatusEnum = valuePostingStatusEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		j.typeName = "string"
		j.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, j)
}

func (j JournalEntryRequestPostingStatus) MarshalJSON() ([]byte, error) {
	switch j.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "postingStatusEnum":
		return json.Marshal(j.PostingStatusEnum)
	case "string":
		return json.Marshal(j.String)
	}
}

type JournalEntryRequestPostingStatusVisitor interface {
	VisitPostingStatusEnum(PostingStatusEnum) error
	VisitString(string) error
}

func (j *JournalEntryRequestPostingStatus) Accept(visitor JournalEntryRequestPostingStatusVisitor) error {
	switch j.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "postingStatusEnum":
		return visitor.VisitPostingStatusEnum(j.PostingStatusEnum)
	case "string":
		return visitor.VisitString(j.String)
	}
}

type JournalEntryRequestTrackingCategoriesItem struct {
	typeName         string
	String           string
	TrackingCategory *TrackingCategory
}

func NewJournalEntryRequestTrackingCategoriesItemFromString(value string) *JournalEntryRequestTrackingCategoriesItem {
	return &JournalEntryRequestTrackingCategoriesItem{typeName: "string", String: value}
}

func NewJournalEntryRequestTrackingCategoriesItemFromTrackingCategory(value *TrackingCategory) *JournalEntryRequestTrackingCategoriesItem {
	return &JournalEntryRequestTrackingCategoriesItem{typeName: "trackingCategory", TrackingCategory: value}
}

func (j *JournalEntryRequestTrackingCategoriesItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		j.typeName = "string"
		j.String = valueString
		return nil
	}
	valueTrackingCategory := new(TrackingCategory)
	if err := json.Unmarshal(data, &valueTrackingCategory); err == nil {
		j.typeName = "trackingCategory"
		j.TrackingCategory = valueTrackingCategory
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, j)
}

func (j JournalEntryRequestTrackingCategoriesItem) MarshalJSON() ([]byte, error) {
	switch j.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "string":
		return json.Marshal(j.String)
	case "trackingCategory":
		return json.Marshal(j.TrackingCategory)
	}
}

type JournalEntryRequestTrackingCategoriesItemVisitor interface {
	VisitString(string) error
	VisitTrackingCategory(*TrackingCategory) error
}

func (j *JournalEntryRequestTrackingCategoriesItem) Accept(visitor JournalEntryRequestTrackingCategoriesItemVisitor) error {
	switch j.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "string":
		return visitor.VisitString(j.String)
	case "trackingCategory":
		return visitor.VisitTrackingCategory(j.TrackingCategory)
	}
}

type JournalEntryResponse struct {
	Model    *JournalEntry               `json:"model,omitempty"`
	Warnings []*WarningValidationProblem `json:"warnings,omitempty"`
	Errors   []*ErrorValidationProblem   `json:"errors,omitempty"`
	Logs     []*DebugModeLog             `json:"logs,omitempty"`
}

type JournalEntryTrackingCategoriesItem struct {
	typeName         string
	String           string
	TrackingCategory *TrackingCategory
}

func NewJournalEntryTrackingCategoriesItemFromString(value string) *JournalEntryTrackingCategoriesItem {
	return &JournalEntryTrackingCategoriesItem{typeName: "string", String: value}
}

func NewJournalEntryTrackingCategoriesItemFromTrackingCategory(value *TrackingCategory) *JournalEntryTrackingCategoriesItem {
	return &JournalEntryTrackingCategoriesItem{typeName: "trackingCategory", TrackingCategory: value}
}

func (j *JournalEntryTrackingCategoriesItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		j.typeName = "string"
		j.String = valueString
		return nil
	}
	valueTrackingCategory := new(TrackingCategory)
	if err := json.Unmarshal(data, &valueTrackingCategory); err == nil {
		j.typeName = "trackingCategory"
		j.TrackingCategory = valueTrackingCategory
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, j)
}

func (j JournalEntryTrackingCategoriesItem) MarshalJSON() ([]byte, error) {
	switch j.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "string":
		return json.Marshal(j.String)
	case "trackingCategory":
		return json.Marshal(j.TrackingCategory)
	}
}

type JournalEntryTrackingCategoriesItemVisitor interface {
	VisitString(string) error
	VisitTrackingCategory(*TrackingCategory) error
}

func (j *JournalEntryTrackingCategoriesItem) Accept(visitor JournalEntryTrackingCategoriesItemVisitor) error {
	switch j.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "string":
		return visitor.VisitString(j.String)
	case "trackingCategory":
		return visitor.VisitTrackingCategory(j.TrackingCategory)
	}
}

// # The JournalLine Object
// ### Description
// The `JournalLine` object is used to represent a journal entry's line items.
//
// ### Usage Example
// Fetch from the `GET JournalEntry` endpoint and view the journal entry's line items.
type JournalLine struct {
	// The third-party API ID of the matching object.
	RemoteId *string             `json:"remote_id,omitempty"`
	Account  *JournalLineAccount `json:"account,omitempty"`
	// The value of the line item including taxes and other fees.
	NetAmount          *float64                             `json:"net_amount,omitempty"`
	TrackingCategory   *JournalLineTrackingCategory         `json:"tracking_category,omitempty"`
	TrackingCategories []*JournalLineTrackingCategoriesItem `json:"tracking_categories,omitempty"`
	// The journal line item's currency.
	//
	// * `XUA` - ADB Unit of Account
	// * `AFN` - Afghan Afghani
	// * `AFA` - Afghan Afghani (1927–2002)
	// * `ALL` - Albanian Lek
	// * `ALK` - Albanian Lek (1946–1965)
	// * `DZD` - Algerian Dinar
	// * `ADP` - Andorran Peseta
	// * `AOA` - Angolan Kwanza
	// * `AOK` - Angolan Kwanza (1977–1991)
	// * `AON` - Angolan New Kwanza (1990–2000)
	// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
	// * `ARA` - Argentine Austral
	// * `ARS` - Argentine Peso
	// * `ARM` - Argentine Peso (1881–1970)
	// * `ARP` - Argentine Peso (1983–1985)
	// * `ARL` - Argentine Peso Ley (1970–1983)
	// * `AMD` - Armenian Dram
	// * `AWG` - Aruban Florin
	// * `AUD` - Australian Dollar
	// * `ATS` - Austrian Schilling
	// * `AZN` - Azerbaijani Manat
	// * `AZM` - Azerbaijani Manat (1993–2006)
	// * `BSD` - Bahamian Dollar
	// * `BHD` - Bahraini Dinar
	// * `BDT` - Bangladeshi Taka
	// * `BBD` - Barbadian Dollar
	// * `BYN` - Belarusian Ruble
	// * `BYB` - Belarusian Ruble (1994–1999)
	// * `BYR` - Belarusian Ruble (2000–2016)
	// * `BEF` - Belgian Franc
	// * `BEC` - Belgian Franc (convertible)
	// * `BEL` - Belgian Franc (financial)
	// * `BZD` - Belize Dollar
	// * `BMD` - Bermudan Dollar
	// * `BTN` - Bhutanese Ngultrum
	// * `BOB` - Bolivian Boliviano
	// * `BOL` - Bolivian Boliviano (1863–1963)
	// * `BOV` - Bolivian Mvdol
	// * `BOP` - Bolivian Peso
	// * `BAM` - Bosnia-Herzegovina Convertible Mark
	// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
	// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
	// * `BWP` - Botswanan Pula
	// * `BRC` - Brazilian Cruzado (1986–1989)
	// * `BRZ` - Brazilian Cruzeiro (1942–1967)
	// * `BRE` - Brazilian Cruzeiro (1990–1993)
	// * `BRR` - Brazilian Cruzeiro (1993–1994)
	// * `BRN` - Brazilian New Cruzado (1989–1990)
	// * `BRB` - Brazilian New Cruzeiro (1967–1986)
	// * `BRL` - Brazilian Real
	// * `GBP` - British Pound
	// * `BND` - Brunei Dollar
	// * `BGL` - Bulgarian Hard Lev
	// * `BGN` - Bulgarian Lev
	// * `BGO` - Bulgarian Lev (1879–1952)
	// * `BGM` - Bulgarian Socialist Lev
	// * `BUK` - Burmese Kyat
	// * `BIF` - Burundian Franc
	// * `XPF` - CFP Franc
	// * `KHR` - Cambodian Riel
	// * `CAD` - Canadian Dollar
	// * `CVE` - Cape Verdean Escudo
	// * `KYD` - Cayman Islands Dollar
	// * `XAF` - Central African CFA Franc
	// * `CLE` - Chilean Escudo
	// * `CLP` - Chilean Peso
	// * `CLF` - Chilean Unit of Account (UF)
	// * `CNX` - Chinese People’s Bank Dollar
	// * `CNY` - Chinese Yuan
	// * `CNH` - Chinese Yuan (offshore)
	// * `COP` - Colombian Peso
	// * `COU` - Colombian Real Value Unit
	// * `KMF` - Comorian Franc
	// * `CDF` - Congolese Franc
	// * `CRC` - Costa Rican Colón
	// * `HRD` - Croatian Dinar
	// * `HRK` - Croatian Kuna
	// * `CUC` - Cuban Convertible Peso
	// * `CUP` - Cuban Peso
	// * `CYP` - Cypriot Pound
	// * `CZK` - Czech Koruna
	// * `CSK` - Czechoslovak Hard Koruna
	// * `DKK` - Danish Krone
	// * `DJF` - Djiboutian Franc
	// * `DOP` - Dominican Peso
	// * `NLG` - Dutch Guilder
	// * `XCD` - East Caribbean Dollar
	// * `DDM` - East German Mark
	// * `ECS` - Ecuadorian Sucre
	// * `ECV` - Ecuadorian Unit of Constant Value
	// * `EGP` - Egyptian Pound
	// * `GQE` - Equatorial Guinean Ekwele
	// * `ERN` - Eritrean Nakfa
	// * `EEK` - Estonian Kroon
	// * `ETB` - Ethiopian Birr
	// * `EUR` - Euro
	// * `XBA` - European Composite Unit
	// * `XEU` - European Currency Unit
	// * `XBB` - European Monetary Unit
	// * `XBC` - European Unit of Account (XBC)
	// * `XBD` - European Unit of Account (XBD)
	// * `FKP` - Falkland Islands Pound
	// * `FJD` - Fijian Dollar
	// * `FIM` - Finnish Markka
	// * `FRF` - French Franc
	// * `XFO` - French Gold Franc
	// * `XFU` - French UIC-Franc
	// * `GMD` - Gambian Dalasi
	// * `GEK` - Georgian Kupon Larit
	// * `GEL` - Georgian Lari
	// * `DEM` - German Mark
	// * `GHS` - Ghanaian Cedi
	// * `GHC` - Ghanaian Cedi (1979–2007)
	// * `GIP` - Gibraltar Pound
	// * `XAU` - Gold
	// * `GRD` - Greek Drachma
	// * `GTQ` - Guatemalan Quetzal
	// * `GWP` - Guinea-Bissau Peso
	// * `GNF` - Guinean Franc
	// * `GNS` - Guinean Syli
	// * `GYD` - Guyanaese Dollar
	// * `HTG` - Haitian Gourde
	// * `HNL` - Honduran Lempira
	// * `HKD` - Hong Kong Dollar
	// * `HUF` - Hungarian Forint
	// * `IMP` - IMP
	// * `ISK` - Icelandic Króna
	// * `ISJ` - Icelandic Króna (1918–1981)
	// * `INR` - Indian Rupee
	// * `IDR` - Indonesian Rupiah
	// * `IRR` - Iranian Rial
	// * `IQD` - Iraqi Dinar
	// * `IEP` - Irish Pound
	// * `ILS` - Israeli New Shekel
	// * `ILP` - Israeli Pound
	// * `ILR` - Israeli Shekel (1980–1985)
	// * `ITL` - Italian Lira
	// * `JMD` - Jamaican Dollar
	// * `JPY` - Japanese Yen
	// * `JOD` - Jordanian Dinar
	// * `KZT` - Kazakhstani Tenge
	// * `KES` - Kenyan Shilling
	// * `KWD` - Kuwaiti Dinar
	// * `KGS` - Kyrgystani Som
	// * `LAK` - Laotian Kip
	// * `LVL` - Latvian Lats
	// * `LVR` - Latvian Ruble
	// * `LBP` - Lebanese Pound
	// * `LSL` - Lesotho Loti
	// * `LRD` - Liberian Dollar
	// * `LYD` - Libyan Dinar
	// * `LTL` - Lithuanian Litas
	// * `LTT` - Lithuanian Talonas
	// * `LUL` - Luxembourg Financial Franc
	// * `LUC` - Luxembourgian Convertible Franc
	// * `LUF` - Luxembourgian Franc
	// * `MOP` - Macanese Pataca
	// * `MKD` - Macedonian Denar
	// * `MKN` - Macedonian Denar (1992–1993)
	// * `MGA` - Malagasy Ariary
	// * `MGF` - Malagasy Franc
	// * `MWK` - Malawian Kwacha
	// * `MYR` - Malaysian Ringgit
	// * `MVR` - Maldivian Rufiyaa
	// * `MVP` - Maldivian Rupee (1947–1981)
	// * `MLF` - Malian Franc
	// * `MTL` - Maltese Lira
	// * `MTP` - Maltese Pound
	// * `MRU` - Mauritanian Ouguiya
	// * `MRO` - Mauritanian Ouguiya (1973–2017)
	// * `MUR` - Mauritian Rupee
	// * `MXV` - Mexican Investment Unit
	// * `MXN` - Mexican Peso
	// * `MXP` - Mexican Silver Peso (1861–1992)
	// * `MDC` - Moldovan Cupon
	// * `MDL` - Moldovan Leu
	// * `MCF` - Monegasque Franc
	// * `MNT` - Mongolian Tugrik
	// * `MAD` - Moroccan Dirham
	// * `MAF` - Moroccan Franc
	// * `MZE` - Mozambican Escudo
	// * `MZN` - Mozambican Metical
	// * `MZM` - Mozambican Metical (1980–2006)
	// * `MMK` - Myanmar Kyat
	// * `NAD` - Namibian Dollar
	// * `NPR` - Nepalese Rupee
	// * `ANG` - Netherlands Antillean Guilder
	// * `TWD` - New Taiwan Dollar
	// * `NZD` - New Zealand Dollar
	// * `NIO` - Nicaraguan Córdoba
	// * `NIC` - Nicaraguan Córdoba (1988–1991)
	// * `NGN` - Nigerian Naira
	// * `KPW` - North Korean Won
	// * `NOK` - Norwegian Krone
	// * `OMR` - Omani Rial
	// * `PKR` - Pakistani Rupee
	// * `XPD` - Palladium
	// * `PAB` - Panamanian Balboa
	// * `PGK` - Papua New Guinean Kina
	// * `PYG` - Paraguayan Guarani
	// * `PEI` - Peruvian Inti
	// * `PEN` - Peruvian Sol
	// * `PES` - Peruvian Sol (1863–1965)
	// * `PHP` - Philippine Peso
	// * `XPT` - Platinum
	// * `PLN` - Polish Zloty
	// * `PLZ` - Polish Zloty (1950–1995)
	// * `PTE` - Portuguese Escudo
	// * `GWE` - Portuguese Guinea Escudo
	// * `QAR` - Qatari Rial
	// * `XRE` - RINET Funds
	// * `RHD` - Rhodesian Dollar
	// * `RON` - Romanian Leu
	// * `ROL` - Romanian Leu (1952–2006)
	// * `RUB` - Russian Ruble
	// * `RUR` - Russian Ruble (1991–1998)
	// * `RWF` - Rwandan Franc
	// * `SVC` - Salvadoran Colón
	// * `WST` - Samoan Tala
	// * `SAR` - Saudi Riyal
	// * `RSD` - Serbian Dinar
	// * `CSD` - Serbian Dinar (2002–2006)
	// * `SCR` - Seychellois Rupee
	// * `SLL` - Sierra Leonean Leone
	// * `XAG` - Silver
	// * `SGD` - Singapore Dollar
	// * `SKK` - Slovak Koruna
	// * `SIT` - Slovenian Tolar
	// * `SBD` - Solomon Islands Dollar
	// * `SOS` - Somali Shilling
	// * `ZAR` - South African Rand
	// * `ZAL` - South African Rand (financial)
	// * `KRH` - South Korean Hwan (1953–1962)
	// * `KRW` - South Korean Won
	// * `KRO` - South Korean Won (1945–1953)
	// * `SSP` - South Sudanese Pound
	// * `SUR` - Soviet Rouble
	// * `ESP` - Spanish Peseta
	// * `ESA` - Spanish Peseta (A account)
	// * `ESB` - Spanish Peseta (convertible account)
	// * `XDR` - Special Drawing Rights
	// * `LKR` - Sri Lankan Rupee
	// * `SHP` - St. Helena Pound
	// * `XSU` - Sucre
	// * `SDD` - Sudanese Dinar (1992–2007)
	// * `SDG` - Sudanese Pound
	// * `SDP` - Sudanese Pound (1957–1998)
	// * `SRD` - Surinamese Dollar
	// * `SRG` - Surinamese Guilder
	// * `SZL` - Swazi Lilangeni
	// * `SEK` - Swedish Krona
	// * `CHF` - Swiss Franc
	// * `SYP` - Syrian Pound
	// * `STN` - São Tomé & Príncipe Dobra
	// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
	// * `TVD` - TVD
	// * `TJR` - Tajikistani Ruble
	// * `TJS` - Tajikistani Somoni
	// * `TZS` - Tanzanian Shilling
	// * `XTS` - Testing Currency Code
	// * `THB` - Thai Baht
	// * `XXX` - The codes assigned for transactions where no currency is involved
	// * `TPE` - Timorese Escudo
	// * `TOP` - Tongan Paʻanga
	// * `TTD` - Trinidad & Tobago Dollar
	// * `TND` - Tunisian Dinar
	// * `TRY` - Turkish Lira
	// * `TRL` - Turkish Lira (1922–2005)
	// * `TMT` - Turkmenistani Manat
	// * `TMM` - Turkmenistani Manat (1993–2009)
	// * `USD` - US Dollar
	// * `USN` - US Dollar (Next day)
	// * `USS` - US Dollar (Same day)
	// * `UGX` - Ugandan Shilling
	// * `UGS` - Ugandan Shilling (1966–1987)
	// * `UAH` - Ukrainian Hryvnia
	// * `UAK` - Ukrainian Karbovanets
	// * `AED` - United Arab Emirates Dirham
	// * `UYW` - Uruguayan Nominal Wage Index Unit
	// * `UYU` - Uruguayan Peso
	// * `UYP` - Uruguayan Peso (1975–1993)
	// * `UYI` - Uruguayan Peso (Indexed Units)
	// * `UZS` - Uzbekistani Som
	// * `VUV` - Vanuatu Vatu
	// * `VES` - Venezuelan Bolívar
	// * `VEB` - Venezuelan Bolívar (1871–2008)
	// * `VEF` - Venezuelan Bolívar (2008–2018)
	// * `VND` - Vietnamese Dong
	// * `VNN` - Vietnamese Dong (1978–1985)
	// * `CHE` - WIR Euro
	// * `CHW` - WIR Franc
	// * `XOF` - West African CFA Franc
	// * `YDD` - Yemeni Dinar
	// * `YER` - Yemeni Rial
	// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
	// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
	// * `YUM` - Yugoslavian New Dinar (1994–2002)
	// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
	// * `ZWN` - ZWN
	// * `ZRN` - Zairean New Zaire (1993–1998)
	// * `ZRZ` - Zairean Zaire (1971–1993)
	// * `ZMW` - Zambian Kwacha
	// * `ZMK` - Zambian Kwacha (1968–2012)
	// * `ZWD` - Zimbabwean Dollar (1980–2008)
	// * `ZWR` - Zimbabwean Dollar (2008)
	// * `ZWL` - Zimbabwean Dollar (2009)
	Currency *JournalLineCurrency `json:"currency,omitempty"`
	// The company the journal entry belongs to.
	Company *string `json:"company,omitempty"`
	Contact *string `json:"contact,omitempty"`
	// The line's description.
	Description *string `json:"description,omitempty"`
	// The journal line item's exchange rate.
	ExchangeRate *string `json:"exchange_rate,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted *bool      `json:"remote_was_deleted,omitempty"`
	Id               *string    `json:"id,omitempty"`
	CreatedAt        *time.Time `json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
}

type JournalLineAccount struct {
	typeName string
	String   string
	Account  *Account
}

func NewJournalLineAccountFromString(value string) *JournalLineAccount {
	return &JournalLineAccount{typeName: "string", String: value}
}

func NewJournalLineAccountFromAccount(value *Account) *JournalLineAccount {
	return &JournalLineAccount{typeName: "account", Account: value}
}

func (j *JournalLineAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		j.typeName = "string"
		j.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		j.typeName = "account"
		j.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, j)
}

func (j JournalLineAccount) MarshalJSON() ([]byte, error) {
	switch j.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "string":
		return json.Marshal(j.String)
	case "account":
		return json.Marshal(j.Account)
	}
}

type JournalLineAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (j *JournalLineAccount) Accept(visitor JournalLineAccountVisitor) error {
	switch j.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "string":
		return visitor.VisitString(j.String)
	case "account":
		return visitor.VisitAccount(j.Account)
	}
}

// The journal line item's currency.
//
// * `XUA` - ADB Unit of Account
// * `AFN` - Afghan Afghani
// * `AFA` - Afghan Afghani (1927–2002)
// * `ALL` - Albanian Lek
// * `ALK` - Albanian Lek (1946–1965)
// * `DZD` - Algerian Dinar
// * `ADP` - Andorran Peseta
// * `AOA` - Angolan Kwanza
// * `AOK` - Angolan Kwanza (1977–1991)
// * `AON` - Angolan New Kwanza (1990–2000)
// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
// * `ARA` - Argentine Austral
// * `ARS` - Argentine Peso
// * `ARM` - Argentine Peso (1881–1970)
// * `ARP` - Argentine Peso (1983–1985)
// * `ARL` - Argentine Peso Ley (1970–1983)
// * `AMD` - Armenian Dram
// * `AWG` - Aruban Florin
// * `AUD` - Australian Dollar
// * `ATS` - Austrian Schilling
// * `AZN` - Azerbaijani Manat
// * `AZM` - Azerbaijani Manat (1993–2006)
// * `BSD` - Bahamian Dollar
// * `BHD` - Bahraini Dinar
// * `BDT` - Bangladeshi Taka
// * `BBD` - Barbadian Dollar
// * `BYN` - Belarusian Ruble
// * `BYB` - Belarusian Ruble (1994–1999)
// * `BYR` - Belarusian Ruble (2000–2016)
// * `BEF` - Belgian Franc
// * `BEC` - Belgian Franc (convertible)
// * `BEL` - Belgian Franc (financial)
// * `BZD` - Belize Dollar
// * `BMD` - Bermudan Dollar
// * `BTN` - Bhutanese Ngultrum
// * `BOB` - Bolivian Boliviano
// * `BOL` - Bolivian Boliviano (1863–1963)
// * `BOV` - Bolivian Mvdol
// * `BOP` - Bolivian Peso
// * `BAM` - Bosnia-Herzegovina Convertible Mark
// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
// * `BWP` - Botswanan Pula
// * `BRC` - Brazilian Cruzado (1986–1989)
// * `BRZ` - Brazilian Cruzeiro (1942–1967)
// * `BRE` - Brazilian Cruzeiro (1990–1993)
// * `BRR` - Brazilian Cruzeiro (1993–1994)
// * `BRN` - Brazilian New Cruzado (1989–1990)
// * `BRB` - Brazilian New Cruzeiro (1967–1986)
// * `BRL` - Brazilian Real
// * `GBP` - British Pound
// * `BND` - Brunei Dollar
// * `BGL` - Bulgarian Hard Lev
// * `BGN` - Bulgarian Lev
// * `BGO` - Bulgarian Lev (1879–1952)
// * `BGM` - Bulgarian Socialist Lev
// * `BUK` - Burmese Kyat
// * `BIF` - Burundian Franc
// * `XPF` - CFP Franc
// * `KHR` - Cambodian Riel
// * `CAD` - Canadian Dollar
// * `CVE` - Cape Verdean Escudo
// * `KYD` - Cayman Islands Dollar
// * `XAF` - Central African CFA Franc
// * `CLE` - Chilean Escudo
// * `CLP` - Chilean Peso
// * `CLF` - Chilean Unit of Account (UF)
// * `CNX` - Chinese People’s Bank Dollar
// * `CNY` - Chinese Yuan
// * `CNH` - Chinese Yuan (offshore)
// * `COP` - Colombian Peso
// * `COU` - Colombian Real Value Unit
// * `KMF` - Comorian Franc
// * `CDF` - Congolese Franc
// * `CRC` - Costa Rican Colón
// * `HRD` - Croatian Dinar
// * `HRK` - Croatian Kuna
// * `CUC` - Cuban Convertible Peso
// * `CUP` - Cuban Peso
// * `CYP` - Cypriot Pound
// * `CZK` - Czech Koruna
// * `CSK` - Czechoslovak Hard Koruna
// * `DKK` - Danish Krone
// * `DJF` - Djiboutian Franc
// * `DOP` - Dominican Peso
// * `NLG` - Dutch Guilder
// * `XCD` - East Caribbean Dollar
// * `DDM` - East German Mark
// * `ECS` - Ecuadorian Sucre
// * `ECV` - Ecuadorian Unit of Constant Value
// * `EGP` - Egyptian Pound
// * `GQE` - Equatorial Guinean Ekwele
// * `ERN` - Eritrean Nakfa
// * `EEK` - Estonian Kroon
// * `ETB` - Ethiopian Birr
// * `EUR` - Euro
// * `XBA` - European Composite Unit
// * `XEU` - European Currency Unit
// * `XBB` - European Monetary Unit
// * `XBC` - European Unit of Account (XBC)
// * `XBD` - European Unit of Account (XBD)
// * `FKP` - Falkland Islands Pound
// * `FJD` - Fijian Dollar
// * `FIM` - Finnish Markka
// * `FRF` - French Franc
// * `XFO` - French Gold Franc
// * `XFU` - French UIC-Franc
// * `GMD` - Gambian Dalasi
// * `GEK` - Georgian Kupon Larit
// * `GEL` - Georgian Lari
// * `DEM` - German Mark
// * `GHS` - Ghanaian Cedi
// * `GHC` - Ghanaian Cedi (1979–2007)
// * `GIP` - Gibraltar Pound
// * `XAU` - Gold
// * `GRD` - Greek Drachma
// * `GTQ` - Guatemalan Quetzal
// * `GWP` - Guinea-Bissau Peso
// * `GNF` - Guinean Franc
// * `GNS` - Guinean Syli
// * `GYD` - Guyanaese Dollar
// * `HTG` - Haitian Gourde
// * `HNL` - Honduran Lempira
// * `HKD` - Hong Kong Dollar
// * `HUF` - Hungarian Forint
// * `IMP` - IMP
// * `ISK` - Icelandic Króna
// * `ISJ` - Icelandic Króna (1918–1981)
// * `INR` - Indian Rupee
// * `IDR` - Indonesian Rupiah
// * `IRR` - Iranian Rial
// * `IQD` - Iraqi Dinar
// * `IEP` - Irish Pound
// * `ILS` - Israeli New Shekel
// * `ILP` - Israeli Pound
// * `ILR` - Israeli Shekel (1980–1985)
// * `ITL` - Italian Lira
// * `JMD` - Jamaican Dollar
// * `JPY` - Japanese Yen
// * `JOD` - Jordanian Dinar
// * `KZT` - Kazakhstani Tenge
// * `KES` - Kenyan Shilling
// * `KWD` - Kuwaiti Dinar
// * `KGS` - Kyrgystani Som
// * `LAK` - Laotian Kip
// * `LVL` - Latvian Lats
// * `LVR` - Latvian Ruble
// * `LBP` - Lebanese Pound
// * `LSL` - Lesotho Loti
// * `LRD` - Liberian Dollar
// * `LYD` - Libyan Dinar
// * `LTL` - Lithuanian Litas
// * `LTT` - Lithuanian Talonas
// * `LUL` - Luxembourg Financial Franc
// * `LUC` - Luxembourgian Convertible Franc
// * `LUF` - Luxembourgian Franc
// * `MOP` - Macanese Pataca
// * `MKD` - Macedonian Denar
// * `MKN` - Macedonian Denar (1992–1993)
// * `MGA` - Malagasy Ariary
// * `MGF` - Malagasy Franc
// * `MWK` - Malawian Kwacha
// * `MYR` - Malaysian Ringgit
// * `MVR` - Maldivian Rufiyaa
// * `MVP` - Maldivian Rupee (1947–1981)
// * `MLF` - Malian Franc
// * `MTL` - Maltese Lira
// * `MTP` - Maltese Pound
// * `MRU` - Mauritanian Ouguiya
// * `MRO` - Mauritanian Ouguiya (1973–2017)
// * `MUR` - Mauritian Rupee
// * `MXV` - Mexican Investment Unit
// * `MXN` - Mexican Peso
// * `MXP` - Mexican Silver Peso (1861–1992)
// * `MDC` - Moldovan Cupon
// * `MDL` - Moldovan Leu
// * `MCF` - Monegasque Franc
// * `MNT` - Mongolian Tugrik
// * `MAD` - Moroccan Dirham
// * `MAF` - Moroccan Franc
// * `MZE` - Mozambican Escudo
// * `MZN` - Mozambican Metical
// * `MZM` - Mozambican Metical (1980–2006)
// * `MMK` - Myanmar Kyat
// * `NAD` - Namibian Dollar
// * `NPR` - Nepalese Rupee
// * `ANG` - Netherlands Antillean Guilder
// * `TWD` - New Taiwan Dollar
// * `NZD` - New Zealand Dollar
// * `NIO` - Nicaraguan Córdoba
// * `NIC` - Nicaraguan Córdoba (1988–1991)
// * `NGN` - Nigerian Naira
// * `KPW` - North Korean Won
// * `NOK` - Norwegian Krone
// * `OMR` - Omani Rial
// * `PKR` - Pakistani Rupee
// * `XPD` - Palladium
// * `PAB` - Panamanian Balboa
// * `PGK` - Papua New Guinean Kina
// * `PYG` - Paraguayan Guarani
// * `PEI` - Peruvian Inti
// * `PEN` - Peruvian Sol
// * `PES` - Peruvian Sol (1863–1965)
// * `PHP` - Philippine Peso
// * `XPT` - Platinum
// * `PLN` - Polish Zloty
// * `PLZ` - Polish Zloty (1950–1995)
// * `PTE` - Portuguese Escudo
// * `GWE` - Portuguese Guinea Escudo
// * `QAR` - Qatari Rial
// * `XRE` - RINET Funds
// * `RHD` - Rhodesian Dollar
// * `RON` - Romanian Leu
// * `ROL` - Romanian Leu (1952–2006)
// * `RUB` - Russian Ruble
// * `RUR` - Russian Ruble (1991–1998)
// * `RWF` - Rwandan Franc
// * `SVC` - Salvadoran Colón
// * `WST` - Samoan Tala
// * `SAR` - Saudi Riyal
// * `RSD` - Serbian Dinar
// * `CSD` - Serbian Dinar (2002–2006)
// * `SCR` - Seychellois Rupee
// * `SLL` - Sierra Leonean Leone
// * `XAG` - Silver
// * `SGD` - Singapore Dollar
// * `SKK` - Slovak Koruna
// * `SIT` - Slovenian Tolar
// * `SBD` - Solomon Islands Dollar
// * `SOS` - Somali Shilling
// * `ZAR` - South African Rand
// * `ZAL` - South African Rand (financial)
// * `KRH` - South Korean Hwan (1953–1962)
// * `KRW` - South Korean Won
// * `KRO` - South Korean Won (1945–1953)
// * `SSP` - South Sudanese Pound
// * `SUR` - Soviet Rouble
// * `ESP` - Spanish Peseta
// * `ESA` - Spanish Peseta (A account)
// * `ESB` - Spanish Peseta (convertible account)
// * `XDR` - Special Drawing Rights
// * `LKR` - Sri Lankan Rupee
// * `SHP` - St. Helena Pound
// * `XSU` - Sucre
// * `SDD` - Sudanese Dinar (1992–2007)
// * `SDG` - Sudanese Pound
// * `SDP` - Sudanese Pound (1957–1998)
// * `SRD` - Surinamese Dollar
// * `SRG` - Surinamese Guilder
// * `SZL` - Swazi Lilangeni
// * `SEK` - Swedish Krona
// * `CHF` - Swiss Franc
// * `SYP` - Syrian Pound
// * `STN` - São Tomé & Príncipe Dobra
// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
// * `TVD` - TVD
// * `TJR` - Tajikistani Ruble
// * `TJS` - Tajikistani Somoni
// * `TZS` - Tanzanian Shilling
// * `XTS` - Testing Currency Code
// * `THB` - Thai Baht
// * `XXX` - The codes assigned for transactions where no currency is involved
// * `TPE` - Timorese Escudo
// * `TOP` - Tongan Paʻanga
// * `TTD` - Trinidad & Tobago Dollar
// * `TND` - Tunisian Dinar
// * `TRY` - Turkish Lira
// * `TRL` - Turkish Lira (1922–2005)
// * `TMT` - Turkmenistani Manat
// * `TMM` - Turkmenistani Manat (1993–2009)
// * `USD` - US Dollar
// * `USN` - US Dollar (Next day)
// * `USS` - US Dollar (Same day)
// * `UGX` - Ugandan Shilling
// * `UGS` - Ugandan Shilling (1966–1987)
// * `UAH` - Ukrainian Hryvnia
// * `UAK` - Ukrainian Karbovanets
// * `AED` - United Arab Emirates Dirham
// * `UYW` - Uruguayan Nominal Wage Index Unit
// * `UYU` - Uruguayan Peso
// * `UYP` - Uruguayan Peso (1975–1993)
// * `UYI` - Uruguayan Peso (Indexed Units)
// * `UZS` - Uzbekistani Som
// * `VUV` - Vanuatu Vatu
// * `VES` - Venezuelan Bolívar
// * `VEB` - Venezuelan Bolívar (1871–2008)
// * `VEF` - Venezuelan Bolívar (2008–2018)
// * `VND` - Vietnamese Dong
// * `VNN` - Vietnamese Dong (1978–1985)
// * `CHE` - WIR Euro
// * `CHW` - WIR Franc
// * `XOF` - West African CFA Franc
// * `YDD` - Yemeni Dinar
// * `YER` - Yemeni Rial
// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
// * `YUM` - Yugoslavian New Dinar (1994–2002)
// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
// * `ZWN` - ZWN
// * `ZRN` - Zairean New Zaire (1993–1998)
// * `ZRZ` - Zairean Zaire (1971–1993)
// * `ZMW` - Zambian Kwacha
// * `ZMK` - Zambian Kwacha (1968–2012)
// * `ZWD` - Zimbabwean Dollar (1980–2008)
// * `ZWR` - Zimbabwean Dollar (2008)
// * `ZWL` - Zimbabwean Dollar (2009)
type JournalLineCurrency struct {
	typeName     string
	CurrencyEnum CurrencyEnum
	String       string
}

func NewJournalLineCurrencyFromCurrencyEnum(value CurrencyEnum) *JournalLineCurrency {
	return &JournalLineCurrency{typeName: "currencyEnum", CurrencyEnum: value}
}

func NewJournalLineCurrencyFromString(value string) *JournalLineCurrency {
	return &JournalLineCurrency{typeName: "string", String: value}
}

func (j *JournalLineCurrency) UnmarshalJSON(data []byte) error {
	var valueCurrencyEnum CurrencyEnum
	if err := json.Unmarshal(data, &valueCurrencyEnum); err == nil {
		j.typeName = "currencyEnum"
		j.CurrencyEnum = valueCurrencyEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		j.typeName = "string"
		j.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, j)
}

func (j JournalLineCurrency) MarshalJSON() ([]byte, error) {
	switch j.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "currencyEnum":
		return json.Marshal(j.CurrencyEnum)
	case "string":
		return json.Marshal(j.String)
	}
}

type JournalLineCurrencyVisitor interface {
	VisitCurrencyEnum(CurrencyEnum) error
	VisitString(string) error
}

func (j *JournalLineCurrency) Accept(visitor JournalLineCurrencyVisitor) error {
	switch j.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "currencyEnum":
		return visitor.VisitCurrencyEnum(j.CurrencyEnum)
	case "string":
		return visitor.VisitString(j.String)
	}
}

// # The JournalLine Object
// ### Description
// The `JournalLine` object is used to represent a journal entry's line items.
//
// ### Usage Example
// Fetch from the `GET JournalEntry` endpoint and view the journal entry's line items.
type JournalLineRequest struct {
	// The third-party API ID of the matching object.
	RemoteId *string                    `json:"remote_id,omitempty"`
	Account  *JournalLineRequestAccount `json:"account,omitempty"`
	// The value of the line item including taxes and other fees.
	NetAmount          *float64                                    `json:"net_amount,omitempty"`
	TrackingCategory   *JournalLineRequestTrackingCategory         `json:"tracking_category,omitempty"`
	TrackingCategories []*JournalLineRequestTrackingCategoriesItem `json:"tracking_categories,omitempty"`
	// The journal line item's currency.
	//
	// * `XUA` - ADB Unit of Account
	// * `AFN` - Afghan Afghani
	// * `AFA` - Afghan Afghani (1927–2002)
	// * `ALL` - Albanian Lek
	// * `ALK` - Albanian Lek (1946–1965)
	// * `DZD` - Algerian Dinar
	// * `ADP` - Andorran Peseta
	// * `AOA` - Angolan Kwanza
	// * `AOK` - Angolan Kwanza (1977–1991)
	// * `AON` - Angolan New Kwanza (1990–2000)
	// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
	// * `ARA` - Argentine Austral
	// * `ARS` - Argentine Peso
	// * `ARM` - Argentine Peso (1881–1970)
	// * `ARP` - Argentine Peso (1983–1985)
	// * `ARL` - Argentine Peso Ley (1970–1983)
	// * `AMD` - Armenian Dram
	// * `AWG` - Aruban Florin
	// * `AUD` - Australian Dollar
	// * `ATS` - Austrian Schilling
	// * `AZN` - Azerbaijani Manat
	// * `AZM` - Azerbaijani Manat (1993–2006)
	// * `BSD` - Bahamian Dollar
	// * `BHD` - Bahraini Dinar
	// * `BDT` - Bangladeshi Taka
	// * `BBD` - Barbadian Dollar
	// * `BYN` - Belarusian Ruble
	// * `BYB` - Belarusian Ruble (1994–1999)
	// * `BYR` - Belarusian Ruble (2000–2016)
	// * `BEF` - Belgian Franc
	// * `BEC` - Belgian Franc (convertible)
	// * `BEL` - Belgian Franc (financial)
	// * `BZD` - Belize Dollar
	// * `BMD` - Bermudan Dollar
	// * `BTN` - Bhutanese Ngultrum
	// * `BOB` - Bolivian Boliviano
	// * `BOL` - Bolivian Boliviano (1863–1963)
	// * `BOV` - Bolivian Mvdol
	// * `BOP` - Bolivian Peso
	// * `BAM` - Bosnia-Herzegovina Convertible Mark
	// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
	// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
	// * `BWP` - Botswanan Pula
	// * `BRC` - Brazilian Cruzado (1986–1989)
	// * `BRZ` - Brazilian Cruzeiro (1942–1967)
	// * `BRE` - Brazilian Cruzeiro (1990–1993)
	// * `BRR` - Brazilian Cruzeiro (1993–1994)
	// * `BRN` - Brazilian New Cruzado (1989–1990)
	// * `BRB` - Brazilian New Cruzeiro (1967–1986)
	// * `BRL` - Brazilian Real
	// * `GBP` - British Pound
	// * `BND` - Brunei Dollar
	// * `BGL` - Bulgarian Hard Lev
	// * `BGN` - Bulgarian Lev
	// * `BGO` - Bulgarian Lev (1879–1952)
	// * `BGM` - Bulgarian Socialist Lev
	// * `BUK` - Burmese Kyat
	// * `BIF` - Burundian Franc
	// * `XPF` - CFP Franc
	// * `KHR` - Cambodian Riel
	// * `CAD` - Canadian Dollar
	// * `CVE` - Cape Verdean Escudo
	// * `KYD` - Cayman Islands Dollar
	// * `XAF` - Central African CFA Franc
	// * `CLE` - Chilean Escudo
	// * `CLP` - Chilean Peso
	// * `CLF` - Chilean Unit of Account (UF)
	// * `CNX` - Chinese People’s Bank Dollar
	// * `CNY` - Chinese Yuan
	// * `CNH` - Chinese Yuan (offshore)
	// * `COP` - Colombian Peso
	// * `COU` - Colombian Real Value Unit
	// * `KMF` - Comorian Franc
	// * `CDF` - Congolese Franc
	// * `CRC` - Costa Rican Colón
	// * `HRD` - Croatian Dinar
	// * `HRK` - Croatian Kuna
	// * `CUC` - Cuban Convertible Peso
	// * `CUP` - Cuban Peso
	// * `CYP` - Cypriot Pound
	// * `CZK` - Czech Koruna
	// * `CSK` - Czechoslovak Hard Koruna
	// * `DKK` - Danish Krone
	// * `DJF` - Djiboutian Franc
	// * `DOP` - Dominican Peso
	// * `NLG` - Dutch Guilder
	// * `XCD` - East Caribbean Dollar
	// * `DDM` - East German Mark
	// * `ECS` - Ecuadorian Sucre
	// * `ECV` - Ecuadorian Unit of Constant Value
	// * `EGP` - Egyptian Pound
	// * `GQE` - Equatorial Guinean Ekwele
	// * `ERN` - Eritrean Nakfa
	// * `EEK` - Estonian Kroon
	// * `ETB` - Ethiopian Birr
	// * `EUR` - Euro
	// * `XBA` - European Composite Unit
	// * `XEU` - European Currency Unit
	// * `XBB` - European Monetary Unit
	// * `XBC` - European Unit of Account (XBC)
	// * `XBD` - European Unit of Account (XBD)
	// * `FKP` - Falkland Islands Pound
	// * `FJD` - Fijian Dollar
	// * `FIM` - Finnish Markka
	// * `FRF` - French Franc
	// * `XFO` - French Gold Franc
	// * `XFU` - French UIC-Franc
	// * `GMD` - Gambian Dalasi
	// * `GEK` - Georgian Kupon Larit
	// * `GEL` - Georgian Lari
	// * `DEM` - German Mark
	// * `GHS` - Ghanaian Cedi
	// * `GHC` - Ghanaian Cedi (1979–2007)
	// * `GIP` - Gibraltar Pound
	// * `XAU` - Gold
	// * `GRD` - Greek Drachma
	// * `GTQ` - Guatemalan Quetzal
	// * `GWP` - Guinea-Bissau Peso
	// * `GNF` - Guinean Franc
	// * `GNS` - Guinean Syli
	// * `GYD` - Guyanaese Dollar
	// * `HTG` - Haitian Gourde
	// * `HNL` - Honduran Lempira
	// * `HKD` - Hong Kong Dollar
	// * `HUF` - Hungarian Forint
	// * `IMP` - IMP
	// * `ISK` - Icelandic Króna
	// * `ISJ` - Icelandic Króna (1918–1981)
	// * `INR` - Indian Rupee
	// * `IDR` - Indonesian Rupiah
	// * `IRR` - Iranian Rial
	// * `IQD` - Iraqi Dinar
	// * `IEP` - Irish Pound
	// * `ILS` - Israeli New Shekel
	// * `ILP` - Israeli Pound
	// * `ILR` - Israeli Shekel (1980–1985)
	// * `ITL` - Italian Lira
	// * `JMD` - Jamaican Dollar
	// * `JPY` - Japanese Yen
	// * `JOD` - Jordanian Dinar
	// * `KZT` - Kazakhstani Tenge
	// * `KES` - Kenyan Shilling
	// * `KWD` - Kuwaiti Dinar
	// * `KGS` - Kyrgystani Som
	// * `LAK` - Laotian Kip
	// * `LVL` - Latvian Lats
	// * `LVR` - Latvian Ruble
	// * `LBP` - Lebanese Pound
	// * `LSL` - Lesotho Loti
	// * `LRD` - Liberian Dollar
	// * `LYD` - Libyan Dinar
	// * `LTL` - Lithuanian Litas
	// * `LTT` - Lithuanian Talonas
	// * `LUL` - Luxembourg Financial Franc
	// * `LUC` - Luxembourgian Convertible Franc
	// * `LUF` - Luxembourgian Franc
	// * `MOP` - Macanese Pataca
	// * `MKD` - Macedonian Denar
	// * `MKN` - Macedonian Denar (1992–1993)
	// * `MGA` - Malagasy Ariary
	// * `MGF` - Malagasy Franc
	// * `MWK` - Malawian Kwacha
	// * `MYR` - Malaysian Ringgit
	// * `MVR` - Maldivian Rufiyaa
	// * `MVP` - Maldivian Rupee (1947–1981)
	// * `MLF` - Malian Franc
	// * `MTL` - Maltese Lira
	// * `MTP` - Maltese Pound
	// * `MRU` - Mauritanian Ouguiya
	// * `MRO` - Mauritanian Ouguiya (1973–2017)
	// * `MUR` - Mauritian Rupee
	// * `MXV` - Mexican Investment Unit
	// * `MXN` - Mexican Peso
	// * `MXP` - Mexican Silver Peso (1861–1992)
	// * `MDC` - Moldovan Cupon
	// * `MDL` - Moldovan Leu
	// * `MCF` - Monegasque Franc
	// * `MNT` - Mongolian Tugrik
	// * `MAD` - Moroccan Dirham
	// * `MAF` - Moroccan Franc
	// * `MZE` - Mozambican Escudo
	// * `MZN` - Mozambican Metical
	// * `MZM` - Mozambican Metical (1980–2006)
	// * `MMK` - Myanmar Kyat
	// * `NAD` - Namibian Dollar
	// * `NPR` - Nepalese Rupee
	// * `ANG` - Netherlands Antillean Guilder
	// * `TWD` - New Taiwan Dollar
	// * `NZD` - New Zealand Dollar
	// * `NIO` - Nicaraguan Córdoba
	// * `NIC` - Nicaraguan Córdoba (1988–1991)
	// * `NGN` - Nigerian Naira
	// * `KPW` - North Korean Won
	// * `NOK` - Norwegian Krone
	// * `OMR` - Omani Rial
	// * `PKR` - Pakistani Rupee
	// * `XPD` - Palladium
	// * `PAB` - Panamanian Balboa
	// * `PGK` - Papua New Guinean Kina
	// * `PYG` - Paraguayan Guarani
	// * `PEI` - Peruvian Inti
	// * `PEN` - Peruvian Sol
	// * `PES` - Peruvian Sol (1863–1965)
	// * `PHP` - Philippine Peso
	// * `XPT` - Platinum
	// * `PLN` - Polish Zloty
	// * `PLZ` - Polish Zloty (1950–1995)
	// * `PTE` - Portuguese Escudo
	// * `GWE` - Portuguese Guinea Escudo
	// * `QAR` - Qatari Rial
	// * `XRE` - RINET Funds
	// * `RHD` - Rhodesian Dollar
	// * `RON` - Romanian Leu
	// * `ROL` - Romanian Leu (1952–2006)
	// * `RUB` - Russian Ruble
	// * `RUR` - Russian Ruble (1991–1998)
	// * `RWF` - Rwandan Franc
	// * `SVC` - Salvadoran Colón
	// * `WST` - Samoan Tala
	// * `SAR` - Saudi Riyal
	// * `RSD` - Serbian Dinar
	// * `CSD` - Serbian Dinar (2002–2006)
	// * `SCR` - Seychellois Rupee
	// * `SLL` - Sierra Leonean Leone
	// * `XAG` - Silver
	// * `SGD` - Singapore Dollar
	// * `SKK` - Slovak Koruna
	// * `SIT` - Slovenian Tolar
	// * `SBD` - Solomon Islands Dollar
	// * `SOS` - Somali Shilling
	// * `ZAR` - South African Rand
	// * `ZAL` - South African Rand (financial)
	// * `KRH` - South Korean Hwan (1953–1962)
	// * `KRW` - South Korean Won
	// * `KRO` - South Korean Won (1945–1953)
	// * `SSP` - South Sudanese Pound
	// * `SUR` - Soviet Rouble
	// * `ESP` - Spanish Peseta
	// * `ESA` - Spanish Peseta (A account)
	// * `ESB` - Spanish Peseta (convertible account)
	// * `XDR` - Special Drawing Rights
	// * `LKR` - Sri Lankan Rupee
	// * `SHP` - St. Helena Pound
	// * `XSU` - Sucre
	// * `SDD` - Sudanese Dinar (1992–2007)
	// * `SDG` - Sudanese Pound
	// * `SDP` - Sudanese Pound (1957–1998)
	// * `SRD` - Surinamese Dollar
	// * `SRG` - Surinamese Guilder
	// * `SZL` - Swazi Lilangeni
	// * `SEK` - Swedish Krona
	// * `CHF` - Swiss Franc
	// * `SYP` - Syrian Pound
	// * `STN` - São Tomé & Príncipe Dobra
	// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
	// * `TVD` - TVD
	// * `TJR` - Tajikistani Ruble
	// * `TJS` - Tajikistani Somoni
	// * `TZS` - Tanzanian Shilling
	// * `XTS` - Testing Currency Code
	// * `THB` - Thai Baht
	// * `XXX` - The codes assigned for transactions where no currency is involved
	// * `TPE` - Timorese Escudo
	// * `TOP` - Tongan Paʻanga
	// * `TTD` - Trinidad & Tobago Dollar
	// * `TND` - Tunisian Dinar
	// * `TRY` - Turkish Lira
	// * `TRL` - Turkish Lira (1922–2005)
	// * `TMT` - Turkmenistani Manat
	// * `TMM` - Turkmenistani Manat (1993–2009)
	// * `USD` - US Dollar
	// * `USN` - US Dollar (Next day)
	// * `USS` - US Dollar (Same day)
	// * `UGX` - Ugandan Shilling
	// * `UGS` - Ugandan Shilling (1966–1987)
	// * `UAH` - Ukrainian Hryvnia
	// * `UAK` - Ukrainian Karbovanets
	// * `AED` - United Arab Emirates Dirham
	// * `UYW` - Uruguayan Nominal Wage Index Unit
	// * `UYU` - Uruguayan Peso
	// * `UYP` - Uruguayan Peso (1975–1993)
	// * `UYI` - Uruguayan Peso (Indexed Units)
	// * `UZS` - Uzbekistani Som
	// * `VUV` - Vanuatu Vatu
	// * `VES` - Venezuelan Bolívar
	// * `VEB` - Venezuelan Bolívar (1871–2008)
	// * `VEF` - Venezuelan Bolívar (2008–2018)
	// * `VND` - Vietnamese Dong
	// * `VNN` - Vietnamese Dong (1978–1985)
	// * `CHE` - WIR Euro
	// * `CHW` - WIR Franc
	// * `XOF` - West African CFA Franc
	// * `YDD` - Yemeni Dinar
	// * `YER` - Yemeni Rial
	// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
	// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
	// * `YUM` - Yugoslavian New Dinar (1994–2002)
	// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
	// * `ZWN` - ZWN
	// * `ZRN` - Zairean New Zaire (1993–1998)
	// * `ZRZ` - Zairean Zaire (1971–1993)
	// * `ZMW` - Zambian Kwacha
	// * `ZMK` - Zambian Kwacha (1968–2012)
	// * `ZWD` - Zimbabwean Dollar (1980–2008)
	// * `ZWR` - Zimbabwean Dollar (2008)
	// * `ZWL` - Zimbabwean Dollar (2009)
	Currency *JournalLineRequestCurrency `json:"currency,omitempty"`
	// The company the journal entry belongs to.
	Company *string `json:"company,omitempty"`
	Contact *string `json:"contact,omitempty"`
	// The line's description.
	Description *string `json:"description,omitempty"`
	// The journal line item's exchange rate.
	ExchangeRate        *string        `json:"exchange_rate,omitempty"`
	IntegrationParams   map[string]any `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]any `json:"linked_account_params,omitempty"`
}

type JournalLineRequestAccount struct {
	typeName string
	String   string
	Account  *Account
}

func NewJournalLineRequestAccountFromString(value string) *JournalLineRequestAccount {
	return &JournalLineRequestAccount{typeName: "string", String: value}
}

func NewJournalLineRequestAccountFromAccount(value *Account) *JournalLineRequestAccount {
	return &JournalLineRequestAccount{typeName: "account", Account: value}
}

func (j *JournalLineRequestAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		j.typeName = "string"
		j.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		j.typeName = "account"
		j.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, j)
}

func (j JournalLineRequestAccount) MarshalJSON() ([]byte, error) {
	switch j.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "string":
		return json.Marshal(j.String)
	case "account":
		return json.Marshal(j.Account)
	}
}

type JournalLineRequestAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (j *JournalLineRequestAccount) Accept(visitor JournalLineRequestAccountVisitor) error {
	switch j.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "string":
		return visitor.VisitString(j.String)
	case "account":
		return visitor.VisitAccount(j.Account)
	}
}

// The journal line item's currency.
//
// * `XUA` - ADB Unit of Account
// * `AFN` - Afghan Afghani
// * `AFA` - Afghan Afghani (1927–2002)
// * `ALL` - Albanian Lek
// * `ALK` - Albanian Lek (1946–1965)
// * `DZD` - Algerian Dinar
// * `ADP` - Andorran Peseta
// * `AOA` - Angolan Kwanza
// * `AOK` - Angolan Kwanza (1977–1991)
// * `AON` - Angolan New Kwanza (1990–2000)
// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
// * `ARA` - Argentine Austral
// * `ARS` - Argentine Peso
// * `ARM` - Argentine Peso (1881–1970)
// * `ARP` - Argentine Peso (1983–1985)
// * `ARL` - Argentine Peso Ley (1970–1983)
// * `AMD` - Armenian Dram
// * `AWG` - Aruban Florin
// * `AUD` - Australian Dollar
// * `ATS` - Austrian Schilling
// * `AZN` - Azerbaijani Manat
// * `AZM` - Azerbaijani Manat (1993–2006)
// * `BSD` - Bahamian Dollar
// * `BHD` - Bahraini Dinar
// * `BDT` - Bangladeshi Taka
// * `BBD` - Barbadian Dollar
// * `BYN` - Belarusian Ruble
// * `BYB` - Belarusian Ruble (1994–1999)
// * `BYR` - Belarusian Ruble (2000–2016)
// * `BEF` - Belgian Franc
// * `BEC` - Belgian Franc (convertible)
// * `BEL` - Belgian Franc (financial)
// * `BZD` - Belize Dollar
// * `BMD` - Bermudan Dollar
// * `BTN` - Bhutanese Ngultrum
// * `BOB` - Bolivian Boliviano
// * `BOL` - Bolivian Boliviano (1863–1963)
// * `BOV` - Bolivian Mvdol
// * `BOP` - Bolivian Peso
// * `BAM` - Bosnia-Herzegovina Convertible Mark
// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
// * `BWP` - Botswanan Pula
// * `BRC` - Brazilian Cruzado (1986–1989)
// * `BRZ` - Brazilian Cruzeiro (1942–1967)
// * `BRE` - Brazilian Cruzeiro (1990–1993)
// * `BRR` - Brazilian Cruzeiro (1993–1994)
// * `BRN` - Brazilian New Cruzado (1989–1990)
// * `BRB` - Brazilian New Cruzeiro (1967–1986)
// * `BRL` - Brazilian Real
// * `GBP` - British Pound
// * `BND` - Brunei Dollar
// * `BGL` - Bulgarian Hard Lev
// * `BGN` - Bulgarian Lev
// * `BGO` - Bulgarian Lev (1879–1952)
// * `BGM` - Bulgarian Socialist Lev
// * `BUK` - Burmese Kyat
// * `BIF` - Burundian Franc
// * `XPF` - CFP Franc
// * `KHR` - Cambodian Riel
// * `CAD` - Canadian Dollar
// * `CVE` - Cape Verdean Escudo
// * `KYD` - Cayman Islands Dollar
// * `XAF` - Central African CFA Franc
// * `CLE` - Chilean Escudo
// * `CLP` - Chilean Peso
// * `CLF` - Chilean Unit of Account (UF)
// * `CNX` - Chinese People’s Bank Dollar
// * `CNY` - Chinese Yuan
// * `CNH` - Chinese Yuan (offshore)
// * `COP` - Colombian Peso
// * `COU` - Colombian Real Value Unit
// * `KMF` - Comorian Franc
// * `CDF` - Congolese Franc
// * `CRC` - Costa Rican Colón
// * `HRD` - Croatian Dinar
// * `HRK` - Croatian Kuna
// * `CUC` - Cuban Convertible Peso
// * `CUP` - Cuban Peso
// * `CYP` - Cypriot Pound
// * `CZK` - Czech Koruna
// * `CSK` - Czechoslovak Hard Koruna
// * `DKK` - Danish Krone
// * `DJF` - Djiboutian Franc
// * `DOP` - Dominican Peso
// * `NLG` - Dutch Guilder
// * `XCD` - East Caribbean Dollar
// * `DDM` - East German Mark
// * `ECS` - Ecuadorian Sucre
// * `ECV` - Ecuadorian Unit of Constant Value
// * `EGP` - Egyptian Pound
// * `GQE` - Equatorial Guinean Ekwele
// * `ERN` - Eritrean Nakfa
// * `EEK` - Estonian Kroon
// * `ETB` - Ethiopian Birr
// * `EUR` - Euro
// * `XBA` - European Composite Unit
// * `XEU` - European Currency Unit
// * `XBB` - European Monetary Unit
// * `XBC` - European Unit of Account (XBC)
// * `XBD` - European Unit of Account (XBD)
// * `FKP` - Falkland Islands Pound
// * `FJD` - Fijian Dollar
// * `FIM` - Finnish Markka
// * `FRF` - French Franc
// * `XFO` - French Gold Franc
// * `XFU` - French UIC-Franc
// * `GMD` - Gambian Dalasi
// * `GEK` - Georgian Kupon Larit
// * `GEL` - Georgian Lari
// * `DEM` - German Mark
// * `GHS` - Ghanaian Cedi
// * `GHC` - Ghanaian Cedi (1979–2007)
// * `GIP` - Gibraltar Pound
// * `XAU` - Gold
// * `GRD` - Greek Drachma
// * `GTQ` - Guatemalan Quetzal
// * `GWP` - Guinea-Bissau Peso
// * `GNF` - Guinean Franc
// * `GNS` - Guinean Syli
// * `GYD` - Guyanaese Dollar
// * `HTG` - Haitian Gourde
// * `HNL` - Honduran Lempira
// * `HKD` - Hong Kong Dollar
// * `HUF` - Hungarian Forint
// * `IMP` - IMP
// * `ISK` - Icelandic Króna
// * `ISJ` - Icelandic Króna (1918–1981)
// * `INR` - Indian Rupee
// * `IDR` - Indonesian Rupiah
// * `IRR` - Iranian Rial
// * `IQD` - Iraqi Dinar
// * `IEP` - Irish Pound
// * `ILS` - Israeli New Shekel
// * `ILP` - Israeli Pound
// * `ILR` - Israeli Shekel (1980–1985)
// * `ITL` - Italian Lira
// * `JMD` - Jamaican Dollar
// * `JPY` - Japanese Yen
// * `JOD` - Jordanian Dinar
// * `KZT` - Kazakhstani Tenge
// * `KES` - Kenyan Shilling
// * `KWD` - Kuwaiti Dinar
// * `KGS` - Kyrgystani Som
// * `LAK` - Laotian Kip
// * `LVL` - Latvian Lats
// * `LVR` - Latvian Ruble
// * `LBP` - Lebanese Pound
// * `LSL` - Lesotho Loti
// * `LRD` - Liberian Dollar
// * `LYD` - Libyan Dinar
// * `LTL` - Lithuanian Litas
// * `LTT` - Lithuanian Talonas
// * `LUL` - Luxembourg Financial Franc
// * `LUC` - Luxembourgian Convertible Franc
// * `LUF` - Luxembourgian Franc
// * `MOP` - Macanese Pataca
// * `MKD` - Macedonian Denar
// * `MKN` - Macedonian Denar (1992–1993)
// * `MGA` - Malagasy Ariary
// * `MGF` - Malagasy Franc
// * `MWK` - Malawian Kwacha
// * `MYR` - Malaysian Ringgit
// * `MVR` - Maldivian Rufiyaa
// * `MVP` - Maldivian Rupee (1947–1981)
// * `MLF` - Malian Franc
// * `MTL` - Maltese Lira
// * `MTP` - Maltese Pound
// * `MRU` - Mauritanian Ouguiya
// * `MRO` - Mauritanian Ouguiya (1973–2017)
// * `MUR` - Mauritian Rupee
// * `MXV` - Mexican Investment Unit
// * `MXN` - Mexican Peso
// * `MXP` - Mexican Silver Peso (1861–1992)
// * `MDC` - Moldovan Cupon
// * `MDL` - Moldovan Leu
// * `MCF` - Monegasque Franc
// * `MNT` - Mongolian Tugrik
// * `MAD` - Moroccan Dirham
// * `MAF` - Moroccan Franc
// * `MZE` - Mozambican Escudo
// * `MZN` - Mozambican Metical
// * `MZM` - Mozambican Metical (1980–2006)
// * `MMK` - Myanmar Kyat
// * `NAD` - Namibian Dollar
// * `NPR` - Nepalese Rupee
// * `ANG` - Netherlands Antillean Guilder
// * `TWD` - New Taiwan Dollar
// * `NZD` - New Zealand Dollar
// * `NIO` - Nicaraguan Córdoba
// * `NIC` - Nicaraguan Córdoba (1988–1991)
// * `NGN` - Nigerian Naira
// * `KPW` - North Korean Won
// * `NOK` - Norwegian Krone
// * `OMR` - Omani Rial
// * `PKR` - Pakistani Rupee
// * `XPD` - Palladium
// * `PAB` - Panamanian Balboa
// * `PGK` - Papua New Guinean Kina
// * `PYG` - Paraguayan Guarani
// * `PEI` - Peruvian Inti
// * `PEN` - Peruvian Sol
// * `PES` - Peruvian Sol (1863–1965)
// * `PHP` - Philippine Peso
// * `XPT` - Platinum
// * `PLN` - Polish Zloty
// * `PLZ` - Polish Zloty (1950–1995)
// * `PTE` - Portuguese Escudo
// * `GWE` - Portuguese Guinea Escudo
// * `QAR` - Qatari Rial
// * `XRE` - RINET Funds
// * `RHD` - Rhodesian Dollar
// * `RON` - Romanian Leu
// * `ROL` - Romanian Leu (1952–2006)
// * `RUB` - Russian Ruble
// * `RUR` - Russian Ruble (1991–1998)
// * `RWF` - Rwandan Franc
// * `SVC` - Salvadoran Colón
// * `WST` - Samoan Tala
// * `SAR` - Saudi Riyal
// * `RSD` - Serbian Dinar
// * `CSD` - Serbian Dinar (2002–2006)
// * `SCR` - Seychellois Rupee
// * `SLL` - Sierra Leonean Leone
// * `XAG` - Silver
// * `SGD` - Singapore Dollar
// * `SKK` - Slovak Koruna
// * `SIT` - Slovenian Tolar
// * `SBD` - Solomon Islands Dollar
// * `SOS` - Somali Shilling
// * `ZAR` - South African Rand
// * `ZAL` - South African Rand (financial)
// * `KRH` - South Korean Hwan (1953–1962)
// * `KRW` - South Korean Won
// * `KRO` - South Korean Won (1945–1953)
// * `SSP` - South Sudanese Pound
// * `SUR` - Soviet Rouble
// * `ESP` - Spanish Peseta
// * `ESA` - Spanish Peseta (A account)
// * `ESB` - Spanish Peseta (convertible account)
// * `XDR` - Special Drawing Rights
// * `LKR` - Sri Lankan Rupee
// * `SHP` - St. Helena Pound
// * `XSU` - Sucre
// * `SDD` - Sudanese Dinar (1992–2007)
// * `SDG` - Sudanese Pound
// * `SDP` - Sudanese Pound (1957–1998)
// * `SRD` - Surinamese Dollar
// * `SRG` - Surinamese Guilder
// * `SZL` - Swazi Lilangeni
// * `SEK` - Swedish Krona
// * `CHF` - Swiss Franc
// * `SYP` - Syrian Pound
// * `STN` - São Tomé & Príncipe Dobra
// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
// * `TVD` - TVD
// * `TJR` - Tajikistani Ruble
// * `TJS` - Tajikistani Somoni
// * `TZS` - Tanzanian Shilling
// * `XTS` - Testing Currency Code
// * `THB` - Thai Baht
// * `XXX` - The codes assigned for transactions where no currency is involved
// * `TPE` - Timorese Escudo
// * `TOP` - Tongan Paʻanga
// * `TTD` - Trinidad & Tobago Dollar
// * `TND` - Tunisian Dinar
// * `TRY` - Turkish Lira
// * `TRL` - Turkish Lira (1922–2005)
// * `TMT` - Turkmenistani Manat
// * `TMM` - Turkmenistani Manat (1993–2009)
// * `USD` - US Dollar
// * `USN` - US Dollar (Next day)
// * `USS` - US Dollar (Same day)
// * `UGX` - Ugandan Shilling
// * `UGS` - Ugandan Shilling (1966–1987)
// * `UAH` - Ukrainian Hryvnia
// * `UAK` - Ukrainian Karbovanets
// * `AED` - United Arab Emirates Dirham
// * `UYW` - Uruguayan Nominal Wage Index Unit
// * `UYU` - Uruguayan Peso
// * `UYP` - Uruguayan Peso (1975–1993)
// * `UYI` - Uruguayan Peso (Indexed Units)
// * `UZS` - Uzbekistani Som
// * `VUV` - Vanuatu Vatu
// * `VES` - Venezuelan Bolívar
// * `VEB` - Venezuelan Bolívar (1871–2008)
// * `VEF` - Venezuelan Bolívar (2008–2018)
// * `VND` - Vietnamese Dong
// * `VNN` - Vietnamese Dong (1978–1985)
// * `CHE` - WIR Euro
// * `CHW` - WIR Franc
// * `XOF` - West African CFA Franc
// * `YDD` - Yemeni Dinar
// * `YER` - Yemeni Rial
// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
// * `YUM` - Yugoslavian New Dinar (1994–2002)
// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
// * `ZWN` - ZWN
// * `ZRN` - Zairean New Zaire (1993–1998)
// * `ZRZ` - Zairean Zaire (1971–1993)
// * `ZMW` - Zambian Kwacha
// * `ZMK` - Zambian Kwacha (1968–2012)
// * `ZWD` - Zimbabwean Dollar (1980–2008)
// * `ZWR` - Zimbabwean Dollar (2008)
// * `ZWL` - Zimbabwean Dollar (2009)
type JournalLineRequestCurrency struct {
	typeName     string
	CurrencyEnum CurrencyEnum
	String       string
}

func NewJournalLineRequestCurrencyFromCurrencyEnum(value CurrencyEnum) *JournalLineRequestCurrency {
	return &JournalLineRequestCurrency{typeName: "currencyEnum", CurrencyEnum: value}
}

func NewJournalLineRequestCurrencyFromString(value string) *JournalLineRequestCurrency {
	return &JournalLineRequestCurrency{typeName: "string", String: value}
}

func (j *JournalLineRequestCurrency) UnmarshalJSON(data []byte) error {
	var valueCurrencyEnum CurrencyEnum
	if err := json.Unmarshal(data, &valueCurrencyEnum); err == nil {
		j.typeName = "currencyEnum"
		j.CurrencyEnum = valueCurrencyEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		j.typeName = "string"
		j.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, j)
}

func (j JournalLineRequestCurrency) MarshalJSON() ([]byte, error) {
	switch j.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "currencyEnum":
		return json.Marshal(j.CurrencyEnum)
	case "string":
		return json.Marshal(j.String)
	}
}

type JournalLineRequestCurrencyVisitor interface {
	VisitCurrencyEnum(CurrencyEnum) error
	VisitString(string) error
}

func (j *JournalLineRequestCurrency) Accept(visitor JournalLineRequestCurrencyVisitor) error {
	switch j.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "currencyEnum":
		return visitor.VisitCurrencyEnum(j.CurrencyEnum)
	case "string":
		return visitor.VisitString(j.String)
	}
}

type JournalLineRequestTrackingCategoriesItem struct {
	typeName         string
	String           string
	TrackingCategory *TrackingCategory
}

func NewJournalLineRequestTrackingCategoriesItemFromString(value string) *JournalLineRequestTrackingCategoriesItem {
	return &JournalLineRequestTrackingCategoriesItem{typeName: "string", String: value}
}

func NewJournalLineRequestTrackingCategoriesItemFromTrackingCategory(value *TrackingCategory) *JournalLineRequestTrackingCategoriesItem {
	return &JournalLineRequestTrackingCategoriesItem{typeName: "trackingCategory", TrackingCategory: value}
}

func (j *JournalLineRequestTrackingCategoriesItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		j.typeName = "string"
		j.String = valueString
		return nil
	}
	valueTrackingCategory := new(TrackingCategory)
	if err := json.Unmarshal(data, &valueTrackingCategory); err == nil {
		j.typeName = "trackingCategory"
		j.TrackingCategory = valueTrackingCategory
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, j)
}

func (j JournalLineRequestTrackingCategoriesItem) MarshalJSON() ([]byte, error) {
	switch j.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "string":
		return json.Marshal(j.String)
	case "trackingCategory":
		return json.Marshal(j.TrackingCategory)
	}
}

type JournalLineRequestTrackingCategoriesItemVisitor interface {
	VisitString(string) error
	VisitTrackingCategory(*TrackingCategory) error
}

func (j *JournalLineRequestTrackingCategoriesItem) Accept(visitor JournalLineRequestTrackingCategoriesItemVisitor) error {
	switch j.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "string":
		return visitor.VisitString(j.String)
	case "trackingCategory":
		return visitor.VisitTrackingCategory(j.TrackingCategory)
	}
}

type JournalLineRequestTrackingCategory struct {
	typeName         string
	String           string
	TrackingCategory *TrackingCategory
}

func NewJournalLineRequestTrackingCategoryFromString(value string) *JournalLineRequestTrackingCategory {
	return &JournalLineRequestTrackingCategory{typeName: "string", String: value}
}

func NewJournalLineRequestTrackingCategoryFromTrackingCategory(value *TrackingCategory) *JournalLineRequestTrackingCategory {
	return &JournalLineRequestTrackingCategory{typeName: "trackingCategory", TrackingCategory: value}
}

func (j *JournalLineRequestTrackingCategory) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		j.typeName = "string"
		j.String = valueString
		return nil
	}
	valueTrackingCategory := new(TrackingCategory)
	if err := json.Unmarshal(data, &valueTrackingCategory); err == nil {
		j.typeName = "trackingCategory"
		j.TrackingCategory = valueTrackingCategory
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, j)
}

func (j JournalLineRequestTrackingCategory) MarshalJSON() ([]byte, error) {
	switch j.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "string":
		return json.Marshal(j.String)
	case "trackingCategory":
		return json.Marshal(j.TrackingCategory)
	}
}

type JournalLineRequestTrackingCategoryVisitor interface {
	VisitString(string) error
	VisitTrackingCategory(*TrackingCategory) error
}

func (j *JournalLineRequestTrackingCategory) Accept(visitor JournalLineRequestTrackingCategoryVisitor) error {
	switch j.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "string":
		return visitor.VisitString(j.String)
	case "trackingCategory":
		return visitor.VisitTrackingCategory(j.TrackingCategory)
	}
}

type JournalLineTrackingCategoriesItem struct {
	typeName         string
	String           string
	TrackingCategory *TrackingCategory
}

func NewJournalLineTrackingCategoriesItemFromString(value string) *JournalLineTrackingCategoriesItem {
	return &JournalLineTrackingCategoriesItem{typeName: "string", String: value}
}

func NewJournalLineTrackingCategoriesItemFromTrackingCategory(value *TrackingCategory) *JournalLineTrackingCategoriesItem {
	return &JournalLineTrackingCategoriesItem{typeName: "trackingCategory", TrackingCategory: value}
}

func (j *JournalLineTrackingCategoriesItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		j.typeName = "string"
		j.String = valueString
		return nil
	}
	valueTrackingCategory := new(TrackingCategory)
	if err := json.Unmarshal(data, &valueTrackingCategory); err == nil {
		j.typeName = "trackingCategory"
		j.TrackingCategory = valueTrackingCategory
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, j)
}

func (j JournalLineTrackingCategoriesItem) MarshalJSON() ([]byte, error) {
	switch j.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "string":
		return json.Marshal(j.String)
	case "trackingCategory":
		return json.Marshal(j.TrackingCategory)
	}
}

type JournalLineTrackingCategoriesItemVisitor interface {
	VisitString(string) error
	VisitTrackingCategory(*TrackingCategory) error
}

func (j *JournalLineTrackingCategoriesItem) Accept(visitor JournalLineTrackingCategoriesItemVisitor) error {
	switch j.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "string":
		return visitor.VisitString(j.String)
	case "trackingCategory":
		return visitor.VisitTrackingCategory(j.TrackingCategory)
	}
}

type JournalLineTrackingCategory struct {
	typeName         string
	String           string
	TrackingCategory *TrackingCategory
}

func NewJournalLineTrackingCategoryFromString(value string) *JournalLineTrackingCategory {
	return &JournalLineTrackingCategory{typeName: "string", String: value}
}

func NewJournalLineTrackingCategoryFromTrackingCategory(value *TrackingCategory) *JournalLineTrackingCategory {
	return &JournalLineTrackingCategory{typeName: "trackingCategory", TrackingCategory: value}
}

func (j *JournalLineTrackingCategory) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		j.typeName = "string"
		j.String = valueString
		return nil
	}
	valueTrackingCategory := new(TrackingCategory)
	if err := json.Unmarshal(data, &valueTrackingCategory); err == nil {
		j.typeName = "trackingCategory"
		j.TrackingCategory = valueTrackingCategory
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, j)
}

func (j JournalLineTrackingCategory) MarshalJSON() ([]byte, error) {
	switch j.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "string":
		return json.Marshal(j.String)
	case "trackingCategory":
		return json.Marshal(j.TrackingCategory)
	}
}

type JournalLineTrackingCategoryVisitor interface {
	VisitString(string) error
	VisitTrackingCategory(*TrackingCategory) error
}

func (j *JournalLineTrackingCategory) Accept(visitor JournalLineTrackingCategoryVisitor) error {
	switch j.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", j.typeName, j)
	case "string":
		return visitor.VisitString(j.String)
	case "trackingCategory":
		return visitor.VisitTrackingCategory(j.TrackingCategory)
	}
}

type LinkToken struct {
	LinkToken       string  `json:"link_token"`
	IntegrationName *string `json:"integration_name,omitempty"`
	MagicLinkUrl    *string `json:"magic_link_url,omitempty"`
}

type LinkedAccountCondition struct {
	// The ID indicating which condition schema to use for a specific condition.
	ConditionSchemaId string `json:"condition_schema_id"`
	// The common model for a specific condition.
	CommonModel *string `json:"common_model,omitempty"`
	// User-facing *native condition* name. e.g. "Skip Manager".
	NativeName *string `json:"native_name,omitempty"`
	// The operator for a specific condition.
	Operator string `json:"operator"`
	Value    *any   `json:"value,omitempty"`
	// The name of the field on the common model that this condition corresponds to, if they conceptually match. e.g. "location_type".
	FieldName *string `json:"field_name,omitempty"`
}

type LinkedAccountConditionRequest struct {
	// The ID indicating which condition schema to use for a specific condition.
	ConditionSchemaId string `json:"condition_schema_id"`
	// The operator for a specific condition.
	Operator string `json:"operator"`
	Value    any    `json:"value,omitempty"`
}

type LinkedAccountSelectiveSyncConfiguration struct {
	// The conditions belonging to a selective sync.
	LinkedAccountConditions []*LinkedAccountCondition `json:"linked_account_conditions,omitempty"`
}

type LinkedAccountSelectiveSyncConfigurationRequest struct {
	// The conditions belonging to a selective sync.
	LinkedAccountConditions []*LinkedAccountConditionRequest `json:"linked_account_conditions,omitempty"`
}

type LinkedAccountStatus struct {
	LinkedAccountStatus string `json:"linked_account_status"`
	CanMakeRequest      bool   `json:"can_make_request"`
}

type LinkedAccountsListRequestCategory uint

const (
	LinkedAccountsListRequestCategoryAccounting LinkedAccountsListRequestCategory = iota + 1
	LinkedAccountsListRequestCategoryAts
	LinkedAccountsListRequestCategoryCrm
	LinkedAccountsListRequestCategoryFilestorage
	LinkedAccountsListRequestCategoryHris
	LinkedAccountsListRequestCategoryMktg
	LinkedAccountsListRequestCategoryTicketing
)

func (l LinkedAccountsListRequestCategory) String() string {
	switch l {
	default:
		return strconv.Itoa(int(l))
	case LinkedAccountsListRequestCategoryAccounting:
		return "accounting"
	case LinkedAccountsListRequestCategoryAts:
		return "ats"
	case LinkedAccountsListRequestCategoryCrm:
		return "crm"
	case LinkedAccountsListRequestCategoryFilestorage:
		return "filestorage"
	case LinkedAccountsListRequestCategoryHris:
		return "hris"
	case LinkedAccountsListRequestCategoryMktg:
		return "mktg"
	case LinkedAccountsListRequestCategoryTicketing:
		return "ticketing"
	}
}

func (l LinkedAccountsListRequestCategory) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", l.String())), nil
}

func (l *LinkedAccountsListRequestCategory) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "accounting":
		value := LinkedAccountsListRequestCategoryAccounting
		*l = value
	case "ats":
		value := LinkedAccountsListRequestCategoryAts
		*l = value
	case "crm":
		value := LinkedAccountsListRequestCategoryCrm
		*l = value
	case "filestorage":
		value := LinkedAccountsListRequestCategoryFilestorage
		*l = value
	case "hris":
		value := LinkedAccountsListRequestCategoryHris
		*l = value
	case "mktg":
		value := LinkedAccountsListRequestCategoryMktg
		*l = value
	case "ticketing":
		value := LinkedAccountsListRequestCategoryTicketing
		*l = value
	}
	return nil
}

type MetaResponse struct {
	RequestSchema                  map[string]any       `json:"request_schema,omitempty"`
	RemoteFieldClasses             map[string]any       `json:"remote_field_classes,omitempty"`
	Status                         *LinkedAccountStatus `json:"status,omitempty"`
	HasConditionalParams           bool                 `json:"has_conditional_params"`
	HasRequiredLinkedAccountParams bool                 `json:"has_required_linked_account_params"`
}

// * `GET` - GET
// * `OPTIONS` - OPTIONS
// * `HEAD` - HEAD
// * `POST` - POST
// * `PUT` - PUT
// * `PATCH` - PATCH
// * `DELETE` - DELETE
type MethodEnum uint

const (
	MethodEnumGet MethodEnum = iota + 1
	MethodEnumOptions
	MethodEnumHead
	MethodEnumPost
	MethodEnumPut
	MethodEnumPatch
	MethodEnumDelete
)

func (m MethodEnum) String() string {
	switch m {
	default:
		return strconv.Itoa(int(m))
	case MethodEnumGet:
		return "GET"
	case MethodEnumOptions:
		return "OPTIONS"
	case MethodEnumHead:
		return "HEAD"
	case MethodEnumPost:
		return "POST"
	case MethodEnumPut:
		return "PUT"
	case MethodEnumPatch:
		return "PATCH"
	case MethodEnumDelete:
		return "DELETE"
	}
}

func (m MethodEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", m.String())), nil
}

func (m *MethodEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "GET":
		value := MethodEnumGet
		*m = value
	case "OPTIONS":
		value := MethodEnumOptions
		*m = value
	case "HEAD":
		value := MethodEnumHead
		*m = value
	case "POST":
		value := MethodEnumPost
		*m = value
	case "PUT":
		value := MethodEnumPut
		*m = value
	case "PATCH":
		value := MethodEnumPatch
		*m = value
	case "DELETE":
		value := MethodEnumDelete
		*m = value
	}
	return nil
}

// # The ModelOperation Object
// ### Description
// The `ModelOperation` object is used to represent the operations that are currently supported for a given model.
//
// ### Usage Example
// View what operations are supported for the `Candidate` endpoint.
type ModelOperation struct {
	ModelName              string   `json:"model_name"`
	AvailableOperations    []string `json:"available_operations,omitempty"`
	RequiredPostParameters []string `json:"required_post_parameters,omitempty"`
	SupportedFields        []string `json:"supported_fields,omitempty"`
}

// # The MultipartFormField Object
// ### Description
// The `MultipartFormField` object is used to represent fields in an HTTP request using `multipart/form-data`.
//
// ### Usage Example
// Create a `MultipartFormField` to define a multipart form entry.
type MultipartFormFieldRequest struct {
	// The name of the form field
	Name string `json:"name"`
	// The data for the form field.
	Data string `json:"data"`
	// The encoding of the value of `data`. Defaults to `RAW` if not defined.
	//
	// * `RAW` - RAW
	// * `BASE64` - BASE64
	// * `GZIP_BASE64` - GZIP_BASE64
	Encoding *MultipartFormFieldRequestEncoding `json:"encoding,omitempty"`
	// The file name of the form field, if the field is for a file.
	FileName *string `json:"file_name,omitempty"`
	// The MIME type of the file, if the field is for a file.
	ContentType *string `json:"content_type,omitempty"`
}

// The encoding of the value of `data`. Defaults to `RAW` if not defined.
//
// * `RAW` - RAW
// * `BASE64` - BASE64
// * `GZIP_BASE64` - GZIP_BASE64
type MultipartFormFieldRequestEncoding struct {
	typeName     string
	EncodingEnum EncodingEnum
	String       string
}

func NewMultipartFormFieldRequestEncodingFromEncodingEnum(value EncodingEnum) *MultipartFormFieldRequestEncoding {
	return &MultipartFormFieldRequestEncoding{typeName: "encodingEnum", EncodingEnum: value}
}

func NewMultipartFormFieldRequestEncodingFromString(value string) *MultipartFormFieldRequestEncoding {
	return &MultipartFormFieldRequestEncoding{typeName: "string", String: value}
}

func (m *MultipartFormFieldRequestEncoding) UnmarshalJSON(data []byte) error {
	var valueEncodingEnum EncodingEnum
	if err := json.Unmarshal(data, &valueEncodingEnum); err == nil {
		m.typeName = "encodingEnum"
		m.EncodingEnum = valueEncodingEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		m.typeName = "string"
		m.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, m)
}

func (m MultipartFormFieldRequestEncoding) MarshalJSON() ([]byte, error) {
	switch m.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", m.typeName, m)
	case "encodingEnum":
		return json.Marshal(m.EncodingEnum)
	case "string":
		return json.Marshal(m.String)
	}
}

type MultipartFormFieldRequestEncodingVisitor interface {
	VisitEncodingEnum(EncodingEnum) error
	VisitString(string) error
}

func (m *MultipartFormFieldRequestEncoding) Accept(visitor MultipartFormFieldRequestEncodingVisitor) error {
	switch m.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", m.typeName, m)
	case "encodingEnum":
		return visitor.VisitEncodingEnum(m.EncodingEnum)
	case "string":
		return visitor.VisitString(m.String)
	}
}

type OperatorSchema struct {
	// The operator for which an operator schema is defined.
	Operator *string `json:"operator,omitempty"`
	// Whether the operator can be repeated multiple times.
	IsUnique *bool `json:"is_unique,omitempty"`
}

type PaginatedAccountDetailsAndActionsList struct {
	Next     *string                     `json:"next,omitempty"`
	Previous *string                     `json:"previous,omitempty"`
	Results  []*AccountDetailsAndActions `json:"results,omitempty"`
}

type PaginatedAccountList struct {
	Next     *string    `json:"next,omitempty"`
	Previous *string    `json:"previous,omitempty"`
	Results  []*Account `json:"results,omitempty"`
}

type PaginatedAccountingAttachmentList struct {
	Next     *string                 `json:"next,omitempty"`
	Previous *string                 `json:"previous,omitempty"`
	Results  []*AccountingAttachment `json:"results,omitempty"`
}

type PaginatedAccountingPeriodList struct {
	Next     *string             `json:"next,omitempty"`
	Previous *string             `json:"previous,omitempty"`
	Results  []*AccountingPeriod `json:"results,omitempty"`
}

type PaginatedAuditLogEventList struct {
	Next     *string          `json:"next,omitempty"`
	Previous *string          `json:"previous,omitempty"`
	Results  []*AuditLogEvent `json:"results,omitempty"`
}

type PaginatedBalanceSheetList struct {
	Next     *string         `json:"next,omitempty"`
	Previous *string         `json:"previous,omitempty"`
	Results  []*BalanceSheet `json:"results,omitempty"`
}

type PaginatedCashFlowStatementList struct {
	Next     *string              `json:"next,omitempty"`
	Previous *string              `json:"previous,omitempty"`
	Results  []*CashFlowStatement `json:"results,omitempty"`
}

type PaginatedCompanyInfoList struct {
	Next     *string        `json:"next,omitempty"`
	Previous *string        `json:"previous,omitempty"`
	Results  []*CompanyInfo `json:"results,omitempty"`
}

type PaginatedConditionSchemaList struct {
	Next     *string            `json:"next,omitempty"`
	Previous *string            `json:"previous,omitempty"`
	Results  []*ConditionSchema `json:"results,omitempty"`
}

type PaginatedContactList struct {
	Next     *string    `json:"next,omitempty"`
	Previous *string    `json:"previous,omitempty"`
	Results  []*Contact `json:"results,omitempty"`
}

type PaginatedCreditNoteList struct {
	Next     *string       `json:"next,omitempty"`
	Previous *string       `json:"previous,omitempty"`
	Results  []*CreditNote `json:"results,omitempty"`
}

type PaginatedExpenseList struct {
	Next     *string    `json:"next,omitempty"`
	Previous *string    `json:"previous,omitempty"`
	Results  []*Expense `json:"results,omitempty"`
}

type PaginatedIncomeStatementList struct {
	Next     *string            `json:"next,omitempty"`
	Previous *string            `json:"previous,omitempty"`
	Results  []*IncomeStatement `json:"results,omitempty"`
}

type PaginatedInvoiceList struct {
	Next     *string    `json:"next,omitempty"`
	Previous *string    `json:"previous,omitempty"`
	Results  []*Invoice `json:"results,omitempty"`
}

type PaginatedIssueList struct {
	Next     *string  `json:"next,omitempty"`
	Previous *string  `json:"previous,omitempty"`
	Results  []*Issue `json:"results,omitempty"`
}

type PaginatedItemList struct {
	Next     *string `json:"next,omitempty"`
	Previous *string `json:"previous,omitempty"`
	Results  []*Item `json:"results,omitempty"`
}

type PaginatedJournalEntryList struct {
	Next     *string         `json:"next,omitempty"`
	Previous *string         `json:"previous,omitempty"`
	Results  []*JournalEntry `json:"results,omitempty"`
}

type PaginatedPaymentList struct {
	Next     *string    `json:"next,omitempty"`
	Previous *string    `json:"previous,omitempty"`
	Results  []*Payment `json:"results,omitempty"`
}

type PaginatedPurchaseOrderList struct {
	Next     *string          `json:"next,omitempty"`
	Previous *string          `json:"previous,omitempty"`
	Results  []*PurchaseOrder `json:"results,omitempty"`
}

type PaginatedSyncStatusList struct {
	Next     *string       `json:"next,omitempty"`
	Previous *string       `json:"previous,omitempty"`
	Results  []*SyncStatus `json:"results,omitempty"`
}

type PaginatedTaxRateList struct {
	Next     *string    `json:"next,omitempty"`
	Previous *string    `json:"previous,omitempty"`
	Results  []*TaxRate `json:"results,omitempty"`
}

type PaginatedTrackingCategoryList struct {
	Next     *string             `json:"next,omitempty"`
	Previous *string             `json:"previous,omitempty"`
	Results  []*TrackingCategory `json:"results,omitempty"`
}

type PaginatedTransactionList struct {
	Next     *string        `json:"next,omitempty"`
	Previous *string        `json:"previous,omitempty"`
	Results  []*Transaction `json:"results,omitempty"`
}

type PaginatedVendorCreditList struct {
	Next     *string         `json:"next,omitempty"`
	Previous *string         `json:"previous,omitempty"`
	Results  []*VendorCredit `json:"results,omitempty"`
}

// # The Payment Object
// ### Description
// The `Payment` object represents general payments made towards a specific transaction.
//
// ### Usage Example
// Fetch from the `GET Payment` endpoint and view an invoice's payment.
type Payment struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The payment's transaction date.
	TransactionDate *time.Time `json:"transaction_date,omitempty"`
	// The supplier, or customer involved in the payment.
	Contact *PaymentContact `json:"contact,omitempty"`
	// The supplier’s or customer’s account in which the payment is made.
	Account *PaymentAccount `json:"account,omitempty"`
	// The payment's currency.
	//
	// * `XUA` - ADB Unit of Account
	// * `AFN` - Afghan Afghani
	// * `AFA` - Afghan Afghani (1927–2002)
	// * `ALL` - Albanian Lek
	// * `ALK` - Albanian Lek (1946–1965)
	// * `DZD` - Algerian Dinar
	// * `ADP` - Andorran Peseta
	// * `AOA` - Angolan Kwanza
	// * `AOK` - Angolan Kwanza (1977–1991)
	// * `AON` - Angolan New Kwanza (1990–2000)
	// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
	// * `ARA` - Argentine Austral
	// * `ARS` - Argentine Peso
	// * `ARM` - Argentine Peso (1881–1970)
	// * `ARP` - Argentine Peso (1983–1985)
	// * `ARL` - Argentine Peso Ley (1970–1983)
	// * `AMD` - Armenian Dram
	// * `AWG` - Aruban Florin
	// * `AUD` - Australian Dollar
	// * `ATS` - Austrian Schilling
	// * `AZN` - Azerbaijani Manat
	// * `AZM` - Azerbaijani Manat (1993–2006)
	// * `BSD` - Bahamian Dollar
	// * `BHD` - Bahraini Dinar
	// * `BDT` - Bangladeshi Taka
	// * `BBD` - Barbadian Dollar
	// * `BYN` - Belarusian Ruble
	// * `BYB` - Belarusian Ruble (1994–1999)
	// * `BYR` - Belarusian Ruble (2000–2016)
	// * `BEF` - Belgian Franc
	// * `BEC` - Belgian Franc (convertible)
	// * `BEL` - Belgian Franc (financial)
	// * `BZD` - Belize Dollar
	// * `BMD` - Bermudan Dollar
	// * `BTN` - Bhutanese Ngultrum
	// * `BOB` - Bolivian Boliviano
	// * `BOL` - Bolivian Boliviano (1863–1963)
	// * `BOV` - Bolivian Mvdol
	// * `BOP` - Bolivian Peso
	// * `BAM` - Bosnia-Herzegovina Convertible Mark
	// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
	// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
	// * `BWP` - Botswanan Pula
	// * `BRC` - Brazilian Cruzado (1986–1989)
	// * `BRZ` - Brazilian Cruzeiro (1942–1967)
	// * `BRE` - Brazilian Cruzeiro (1990–1993)
	// * `BRR` - Brazilian Cruzeiro (1993–1994)
	// * `BRN` - Brazilian New Cruzado (1989–1990)
	// * `BRB` - Brazilian New Cruzeiro (1967–1986)
	// * `BRL` - Brazilian Real
	// * `GBP` - British Pound
	// * `BND` - Brunei Dollar
	// * `BGL` - Bulgarian Hard Lev
	// * `BGN` - Bulgarian Lev
	// * `BGO` - Bulgarian Lev (1879–1952)
	// * `BGM` - Bulgarian Socialist Lev
	// * `BUK` - Burmese Kyat
	// * `BIF` - Burundian Franc
	// * `XPF` - CFP Franc
	// * `KHR` - Cambodian Riel
	// * `CAD` - Canadian Dollar
	// * `CVE` - Cape Verdean Escudo
	// * `KYD` - Cayman Islands Dollar
	// * `XAF` - Central African CFA Franc
	// * `CLE` - Chilean Escudo
	// * `CLP` - Chilean Peso
	// * `CLF` - Chilean Unit of Account (UF)
	// * `CNX` - Chinese People’s Bank Dollar
	// * `CNY` - Chinese Yuan
	// * `CNH` - Chinese Yuan (offshore)
	// * `COP` - Colombian Peso
	// * `COU` - Colombian Real Value Unit
	// * `KMF` - Comorian Franc
	// * `CDF` - Congolese Franc
	// * `CRC` - Costa Rican Colón
	// * `HRD` - Croatian Dinar
	// * `HRK` - Croatian Kuna
	// * `CUC` - Cuban Convertible Peso
	// * `CUP` - Cuban Peso
	// * `CYP` - Cypriot Pound
	// * `CZK` - Czech Koruna
	// * `CSK` - Czechoslovak Hard Koruna
	// * `DKK` - Danish Krone
	// * `DJF` - Djiboutian Franc
	// * `DOP` - Dominican Peso
	// * `NLG` - Dutch Guilder
	// * `XCD` - East Caribbean Dollar
	// * `DDM` - East German Mark
	// * `ECS` - Ecuadorian Sucre
	// * `ECV` - Ecuadorian Unit of Constant Value
	// * `EGP` - Egyptian Pound
	// * `GQE` - Equatorial Guinean Ekwele
	// * `ERN` - Eritrean Nakfa
	// * `EEK` - Estonian Kroon
	// * `ETB` - Ethiopian Birr
	// * `EUR` - Euro
	// * `XBA` - European Composite Unit
	// * `XEU` - European Currency Unit
	// * `XBB` - European Monetary Unit
	// * `XBC` - European Unit of Account (XBC)
	// * `XBD` - European Unit of Account (XBD)
	// * `FKP` - Falkland Islands Pound
	// * `FJD` - Fijian Dollar
	// * `FIM` - Finnish Markka
	// * `FRF` - French Franc
	// * `XFO` - French Gold Franc
	// * `XFU` - French UIC-Franc
	// * `GMD` - Gambian Dalasi
	// * `GEK` - Georgian Kupon Larit
	// * `GEL` - Georgian Lari
	// * `DEM` - German Mark
	// * `GHS` - Ghanaian Cedi
	// * `GHC` - Ghanaian Cedi (1979–2007)
	// * `GIP` - Gibraltar Pound
	// * `XAU` - Gold
	// * `GRD` - Greek Drachma
	// * `GTQ` - Guatemalan Quetzal
	// * `GWP` - Guinea-Bissau Peso
	// * `GNF` - Guinean Franc
	// * `GNS` - Guinean Syli
	// * `GYD` - Guyanaese Dollar
	// * `HTG` - Haitian Gourde
	// * `HNL` - Honduran Lempira
	// * `HKD` - Hong Kong Dollar
	// * `HUF` - Hungarian Forint
	// * `IMP` - IMP
	// * `ISK` - Icelandic Króna
	// * `ISJ` - Icelandic Króna (1918–1981)
	// * `INR` - Indian Rupee
	// * `IDR` - Indonesian Rupiah
	// * `IRR` - Iranian Rial
	// * `IQD` - Iraqi Dinar
	// * `IEP` - Irish Pound
	// * `ILS` - Israeli New Shekel
	// * `ILP` - Israeli Pound
	// * `ILR` - Israeli Shekel (1980–1985)
	// * `ITL` - Italian Lira
	// * `JMD` - Jamaican Dollar
	// * `JPY` - Japanese Yen
	// * `JOD` - Jordanian Dinar
	// * `KZT` - Kazakhstani Tenge
	// * `KES` - Kenyan Shilling
	// * `KWD` - Kuwaiti Dinar
	// * `KGS` - Kyrgystani Som
	// * `LAK` - Laotian Kip
	// * `LVL` - Latvian Lats
	// * `LVR` - Latvian Ruble
	// * `LBP` - Lebanese Pound
	// * `LSL` - Lesotho Loti
	// * `LRD` - Liberian Dollar
	// * `LYD` - Libyan Dinar
	// * `LTL` - Lithuanian Litas
	// * `LTT` - Lithuanian Talonas
	// * `LUL` - Luxembourg Financial Franc
	// * `LUC` - Luxembourgian Convertible Franc
	// * `LUF` - Luxembourgian Franc
	// * `MOP` - Macanese Pataca
	// * `MKD` - Macedonian Denar
	// * `MKN` - Macedonian Denar (1992–1993)
	// * `MGA` - Malagasy Ariary
	// * `MGF` - Malagasy Franc
	// * `MWK` - Malawian Kwacha
	// * `MYR` - Malaysian Ringgit
	// * `MVR` - Maldivian Rufiyaa
	// * `MVP` - Maldivian Rupee (1947–1981)
	// * `MLF` - Malian Franc
	// * `MTL` - Maltese Lira
	// * `MTP` - Maltese Pound
	// * `MRU` - Mauritanian Ouguiya
	// * `MRO` - Mauritanian Ouguiya (1973–2017)
	// * `MUR` - Mauritian Rupee
	// * `MXV` - Mexican Investment Unit
	// * `MXN` - Mexican Peso
	// * `MXP` - Mexican Silver Peso (1861–1992)
	// * `MDC` - Moldovan Cupon
	// * `MDL` - Moldovan Leu
	// * `MCF` - Monegasque Franc
	// * `MNT` - Mongolian Tugrik
	// * `MAD` - Moroccan Dirham
	// * `MAF` - Moroccan Franc
	// * `MZE` - Mozambican Escudo
	// * `MZN` - Mozambican Metical
	// * `MZM` - Mozambican Metical (1980–2006)
	// * `MMK` - Myanmar Kyat
	// * `NAD` - Namibian Dollar
	// * `NPR` - Nepalese Rupee
	// * `ANG` - Netherlands Antillean Guilder
	// * `TWD` - New Taiwan Dollar
	// * `NZD` - New Zealand Dollar
	// * `NIO` - Nicaraguan Córdoba
	// * `NIC` - Nicaraguan Córdoba (1988–1991)
	// * `NGN` - Nigerian Naira
	// * `KPW` - North Korean Won
	// * `NOK` - Norwegian Krone
	// * `OMR` - Omani Rial
	// * `PKR` - Pakistani Rupee
	// * `XPD` - Palladium
	// * `PAB` - Panamanian Balboa
	// * `PGK` - Papua New Guinean Kina
	// * `PYG` - Paraguayan Guarani
	// * `PEI` - Peruvian Inti
	// * `PEN` - Peruvian Sol
	// * `PES` - Peruvian Sol (1863–1965)
	// * `PHP` - Philippine Peso
	// * `XPT` - Platinum
	// * `PLN` - Polish Zloty
	// * `PLZ` - Polish Zloty (1950–1995)
	// * `PTE` - Portuguese Escudo
	// * `GWE` - Portuguese Guinea Escudo
	// * `QAR` - Qatari Rial
	// * `XRE` - RINET Funds
	// * `RHD` - Rhodesian Dollar
	// * `RON` - Romanian Leu
	// * `ROL` - Romanian Leu (1952–2006)
	// * `RUB` - Russian Ruble
	// * `RUR` - Russian Ruble (1991–1998)
	// * `RWF` - Rwandan Franc
	// * `SVC` - Salvadoran Colón
	// * `WST` - Samoan Tala
	// * `SAR` - Saudi Riyal
	// * `RSD` - Serbian Dinar
	// * `CSD` - Serbian Dinar (2002–2006)
	// * `SCR` - Seychellois Rupee
	// * `SLL` - Sierra Leonean Leone
	// * `XAG` - Silver
	// * `SGD` - Singapore Dollar
	// * `SKK` - Slovak Koruna
	// * `SIT` - Slovenian Tolar
	// * `SBD` - Solomon Islands Dollar
	// * `SOS` - Somali Shilling
	// * `ZAR` - South African Rand
	// * `ZAL` - South African Rand (financial)
	// * `KRH` - South Korean Hwan (1953–1962)
	// * `KRW` - South Korean Won
	// * `KRO` - South Korean Won (1945–1953)
	// * `SSP` - South Sudanese Pound
	// * `SUR` - Soviet Rouble
	// * `ESP` - Spanish Peseta
	// * `ESA` - Spanish Peseta (A account)
	// * `ESB` - Spanish Peseta (convertible account)
	// * `XDR` - Special Drawing Rights
	// * `LKR` - Sri Lankan Rupee
	// * `SHP` - St. Helena Pound
	// * `XSU` - Sucre
	// * `SDD` - Sudanese Dinar (1992–2007)
	// * `SDG` - Sudanese Pound
	// * `SDP` - Sudanese Pound (1957–1998)
	// * `SRD` - Surinamese Dollar
	// * `SRG` - Surinamese Guilder
	// * `SZL` - Swazi Lilangeni
	// * `SEK` - Swedish Krona
	// * `CHF` - Swiss Franc
	// * `SYP` - Syrian Pound
	// * `STN` - São Tomé & Príncipe Dobra
	// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
	// * `TVD` - TVD
	// * `TJR` - Tajikistani Ruble
	// * `TJS` - Tajikistani Somoni
	// * `TZS` - Tanzanian Shilling
	// * `XTS` - Testing Currency Code
	// * `THB` - Thai Baht
	// * `XXX` - The codes assigned for transactions where no currency is involved
	// * `TPE` - Timorese Escudo
	// * `TOP` - Tongan Paʻanga
	// * `TTD` - Trinidad & Tobago Dollar
	// * `TND` - Tunisian Dinar
	// * `TRY` - Turkish Lira
	// * `TRL` - Turkish Lira (1922–2005)
	// * `TMT` - Turkmenistani Manat
	// * `TMM` - Turkmenistani Manat (1993–2009)
	// * `USD` - US Dollar
	// * `USN` - US Dollar (Next day)
	// * `USS` - US Dollar (Same day)
	// * `UGX` - Ugandan Shilling
	// * `UGS` - Ugandan Shilling (1966–1987)
	// * `UAH` - Ukrainian Hryvnia
	// * `UAK` - Ukrainian Karbovanets
	// * `AED` - United Arab Emirates Dirham
	// * `UYW` - Uruguayan Nominal Wage Index Unit
	// * `UYU` - Uruguayan Peso
	// * `UYP` - Uruguayan Peso (1975–1993)
	// * `UYI` - Uruguayan Peso (Indexed Units)
	// * `UZS` - Uzbekistani Som
	// * `VUV` - Vanuatu Vatu
	// * `VES` - Venezuelan Bolívar
	// * `VEB` - Venezuelan Bolívar (1871–2008)
	// * `VEF` - Venezuelan Bolívar (2008–2018)
	// * `VND` - Vietnamese Dong
	// * `VNN` - Vietnamese Dong (1978–1985)
	// * `CHE` - WIR Euro
	// * `CHW` - WIR Franc
	// * `XOF` - West African CFA Franc
	// * `YDD` - Yemeni Dinar
	// * `YER` - Yemeni Rial
	// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
	// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
	// * `YUM` - Yugoslavian New Dinar (1994–2002)
	// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
	// * `ZWN` - ZWN
	// * `ZRN` - Zairean New Zaire (1993–1998)
	// * `ZRZ` - Zairean Zaire (1971–1993)
	// * `ZMW` - Zambian Kwacha
	// * `ZMK` - Zambian Kwacha (1968–2012)
	// * `ZWD` - Zimbabwean Dollar (1980–2008)
	// * `ZWR` - Zimbabwean Dollar (2008)
	// * `ZWL` - Zimbabwean Dollar (2009)
	Currency *PaymentCurrency `json:"currency,omitempty"`
	// The payment's exchange rate.
	ExchangeRate *string `json:"exchange_rate,omitempty"`
	// The company the payment belongs to.
	Company *PaymentCompany `json:"company,omitempty"`
	// The total amount of money being paid to the supplier, or customer, after taxes.
	TotalAmount        *float64                         `json:"total_amount,omitempty"`
	TrackingCategories []*PaymentTrackingCategoriesItem `json:"tracking_categories,omitempty"`
	// When the third party's payment entry was updated.
	RemoteUpdatedAt *time.Time `json:"remote_updated_at,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted *bool `json:"remote_was_deleted,omitempty"`
	// The accounting period that the Payment was generated in.
	AccountingPeriod *PaymentAccountingPeriod `json:"accounting_period,omitempty"`
	// A list of “Payment Applied to Lines” objects.
	AppliedToLines []*PaymentAppliedToLinesItem `json:"applied_to_lines,omitempty"`
	CreatedAt      *time.Time                   `json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt    *time.Time     `json:"modified_at,omitempty"`
	FieldMappings map[string]any `json:"field_mappings,omitempty"`
	RemoteData    []*RemoteData  `json:"remote_data,omitempty"`
}

// The supplier’s or customer’s account in which the payment is made.
type PaymentAccount struct {
	typeName string
	String   string
	Account  *Account
}

func NewPaymentAccountFromString(value string) *PaymentAccount {
	return &PaymentAccount{typeName: "string", String: value}
}

func NewPaymentAccountFromAccount(value *Account) *PaymentAccount {
	return &PaymentAccount{typeName: "account", Account: value}
}

func (p *PaymentAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typeName = "string"
		p.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		p.typeName = "account"
		p.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PaymentAccount) MarshalJSON() ([]byte, error) {
	switch p.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return json.Marshal(p.String)
	case "account":
		return json.Marshal(p.Account)
	}
}

type PaymentAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (p *PaymentAccount) Accept(visitor PaymentAccountVisitor) error {
	switch p.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return visitor.VisitString(p.String)
	case "account":
		return visitor.VisitAccount(p.Account)
	}
}

// The accounting period that the Payment was generated in.
type PaymentAccountingPeriod struct {
	typeName         string
	String           string
	AccountingPeriod *AccountingPeriod
}

func NewPaymentAccountingPeriodFromString(value string) *PaymentAccountingPeriod {
	return &PaymentAccountingPeriod{typeName: "string", String: value}
}

func NewPaymentAccountingPeriodFromAccountingPeriod(value *AccountingPeriod) *PaymentAccountingPeriod {
	return &PaymentAccountingPeriod{typeName: "accountingPeriod", AccountingPeriod: value}
}

func (p *PaymentAccountingPeriod) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typeName = "string"
		p.String = valueString
		return nil
	}
	valueAccountingPeriod := new(AccountingPeriod)
	if err := json.Unmarshal(data, &valueAccountingPeriod); err == nil {
		p.typeName = "accountingPeriod"
		p.AccountingPeriod = valueAccountingPeriod
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PaymentAccountingPeriod) MarshalJSON() ([]byte, error) {
	switch p.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return json.Marshal(p.String)
	case "accountingPeriod":
		return json.Marshal(p.AccountingPeriod)
	}
}

type PaymentAccountingPeriodVisitor interface {
	VisitString(string) error
	VisitAccountingPeriod(*AccountingPeriod) error
}

func (p *PaymentAccountingPeriod) Accept(visitor PaymentAccountingPeriodVisitor) error {
	switch p.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return visitor.VisitString(p.String)
	case "accountingPeriod":
		return visitor.VisitAccountingPeriod(p.AccountingPeriod)
	}
}

type PaymentAppliedToLinesItem struct {
	typeName        string
	String          string
	PaymentLineItem *PaymentLineItem
}

func NewPaymentAppliedToLinesItemFromString(value string) *PaymentAppliedToLinesItem {
	return &PaymentAppliedToLinesItem{typeName: "string", String: value}
}

func NewPaymentAppliedToLinesItemFromPaymentLineItem(value *PaymentLineItem) *PaymentAppliedToLinesItem {
	return &PaymentAppliedToLinesItem{typeName: "paymentLineItem", PaymentLineItem: value}
}

func (p *PaymentAppliedToLinesItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typeName = "string"
		p.String = valueString
		return nil
	}
	valuePaymentLineItem := new(PaymentLineItem)
	if err := json.Unmarshal(data, &valuePaymentLineItem); err == nil {
		p.typeName = "paymentLineItem"
		p.PaymentLineItem = valuePaymentLineItem
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PaymentAppliedToLinesItem) MarshalJSON() ([]byte, error) {
	switch p.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return json.Marshal(p.String)
	case "paymentLineItem":
		return json.Marshal(p.PaymentLineItem)
	}
}

type PaymentAppliedToLinesItemVisitor interface {
	VisitString(string) error
	VisitPaymentLineItem(*PaymentLineItem) error
}

func (p *PaymentAppliedToLinesItem) Accept(visitor PaymentAppliedToLinesItemVisitor) error {
	switch p.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return visitor.VisitString(p.String)
	case "paymentLineItem":
		return visitor.VisitPaymentLineItem(p.PaymentLineItem)
	}
}

// The company the payment belongs to.
type PaymentCompany struct {
	typeName    string
	String      string
	CompanyInfo *CompanyInfo
}

func NewPaymentCompanyFromString(value string) *PaymentCompany {
	return &PaymentCompany{typeName: "string", String: value}
}

func NewPaymentCompanyFromCompanyInfo(value *CompanyInfo) *PaymentCompany {
	return &PaymentCompany{typeName: "companyInfo", CompanyInfo: value}
}

func (p *PaymentCompany) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typeName = "string"
		p.String = valueString
		return nil
	}
	valueCompanyInfo := new(CompanyInfo)
	if err := json.Unmarshal(data, &valueCompanyInfo); err == nil {
		p.typeName = "companyInfo"
		p.CompanyInfo = valueCompanyInfo
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PaymentCompany) MarshalJSON() ([]byte, error) {
	switch p.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return json.Marshal(p.String)
	case "companyInfo":
		return json.Marshal(p.CompanyInfo)
	}
}

type PaymentCompanyVisitor interface {
	VisitString(string) error
	VisitCompanyInfo(*CompanyInfo) error
}

func (p *PaymentCompany) Accept(visitor PaymentCompanyVisitor) error {
	switch p.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return visitor.VisitString(p.String)
	case "companyInfo":
		return visitor.VisitCompanyInfo(p.CompanyInfo)
	}
}

// The supplier, or customer involved in the payment.
type PaymentContact struct {
	typeName string
	String   string
	Contact  *Contact
}

func NewPaymentContactFromString(value string) *PaymentContact {
	return &PaymentContact{typeName: "string", String: value}
}

func NewPaymentContactFromContact(value *Contact) *PaymentContact {
	return &PaymentContact{typeName: "contact", Contact: value}
}

func (p *PaymentContact) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typeName = "string"
		p.String = valueString
		return nil
	}
	valueContact := new(Contact)
	if err := json.Unmarshal(data, &valueContact); err == nil {
		p.typeName = "contact"
		p.Contact = valueContact
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PaymentContact) MarshalJSON() ([]byte, error) {
	switch p.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return json.Marshal(p.String)
	case "contact":
		return json.Marshal(p.Contact)
	}
}

type PaymentContactVisitor interface {
	VisitString(string) error
	VisitContact(*Contact) error
}

func (p *PaymentContact) Accept(visitor PaymentContactVisitor) error {
	switch p.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return visitor.VisitString(p.String)
	case "contact":
		return visitor.VisitContact(p.Contact)
	}
}

// The payment's currency.
//
// * `XUA` - ADB Unit of Account
// * `AFN` - Afghan Afghani
// * `AFA` - Afghan Afghani (1927–2002)
// * `ALL` - Albanian Lek
// * `ALK` - Albanian Lek (1946–1965)
// * `DZD` - Algerian Dinar
// * `ADP` - Andorran Peseta
// * `AOA` - Angolan Kwanza
// * `AOK` - Angolan Kwanza (1977–1991)
// * `AON` - Angolan New Kwanza (1990–2000)
// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
// * `ARA` - Argentine Austral
// * `ARS` - Argentine Peso
// * `ARM` - Argentine Peso (1881–1970)
// * `ARP` - Argentine Peso (1983–1985)
// * `ARL` - Argentine Peso Ley (1970–1983)
// * `AMD` - Armenian Dram
// * `AWG` - Aruban Florin
// * `AUD` - Australian Dollar
// * `ATS` - Austrian Schilling
// * `AZN` - Azerbaijani Manat
// * `AZM` - Azerbaijani Manat (1993–2006)
// * `BSD` - Bahamian Dollar
// * `BHD` - Bahraini Dinar
// * `BDT` - Bangladeshi Taka
// * `BBD` - Barbadian Dollar
// * `BYN` - Belarusian Ruble
// * `BYB` - Belarusian Ruble (1994–1999)
// * `BYR` - Belarusian Ruble (2000–2016)
// * `BEF` - Belgian Franc
// * `BEC` - Belgian Franc (convertible)
// * `BEL` - Belgian Franc (financial)
// * `BZD` - Belize Dollar
// * `BMD` - Bermudan Dollar
// * `BTN` - Bhutanese Ngultrum
// * `BOB` - Bolivian Boliviano
// * `BOL` - Bolivian Boliviano (1863–1963)
// * `BOV` - Bolivian Mvdol
// * `BOP` - Bolivian Peso
// * `BAM` - Bosnia-Herzegovina Convertible Mark
// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
// * `BWP` - Botswanan Pula
// * `BRC` - Brazilian Cruzado (1986–1989)
// * `BRZ` - Brazilian Cruzeiro (1942–1967)
// * `BRE` - Brazilian Cruzeiro (1990–1993)
// * `BRR` - Brazilian Cruzeiro (1993–1994)
// * `BRN` - Brazilian New Cruzado (1989–1990)
// * `BRB` - Brazilian New Cruzeiro (1967–1986)
// * `BRL` - Brazilian Real
// * `GBP` - British Pound
// * `BND` - Brunei Dollar
// * `BGL` - Bulgarian Hard Lev
// * `BGN` - Bulgarian Lev
// * `BGO` - Bulgarian Lev (1879–1952)
// * `BGM` - Bulgarian Socialist Lev
// * `BUK` - Burmese Kyat
// * `BIF` - Burundian Franc
// * `XPF` - CFP Franc
// * `KHR` - Cambodian Riel
// * `CAD` - Canadian Dollar
// * `CVE` - Cape Verdean Escudo
// * `KYD` - Cayman Islands Dollar
// * `XAF` - Central African CFA Franc
// * `CLE` - Chilean Escudo
// * `CLP` - Chilean Peso
// * `CLF` - Chilean Unit of Account (UF)
// * `CNX` - Chinese People’s Bank Dollar
// * `CNY` - Chinese Yuan
// * `CNH` - Chinese Yuan (offshore)
// * `COP` - Colombian Peso
// * `COU` - Colombian Real Value Unit
// * `KMF` - Comorian Franc
// * `CDF` - Congolese Franc
// * `CRC` - Costa Rican Colón
// * `HRD` - Croatian Dinar
// * `HRK` - Croatian Kuna
// * `CUC` - Cuban Convertible Peso
// * `CUP` - Cuban Peso
// * `CYP` - Cypriot Pound
// * `CZK` - Czech Koruna
// * `CSK` - Czechoslovak Hard Koruna
// * `DKK` - Danish Krone
// * `DJF` - Djiboutian Franc
// * `DOP` - Dominican Peso
// * `NLG` - Dutch Guilder
// * `XCD` - East Caribbean Dollar
// * `DDM` - East German Mark
// * `ECS` - Ecuadorian Sucre
// * `ECV` - Ecuadorian Unit of Constant Value
// * `EGP` - Egyptian Pound
// * `GQE` - Equatorial Guinean Ekwele
// * `ERN` - Eritrean Nakfa
// * `EEK` - Estonian Kroon
// * `ETB` - Ethiopian Birr
// * `EUR` - Euro
// * `XBA` - European Composite Unit
// * `XEU` - European Currency Unit
// * `XBB` - European Monetary Unit
// * `XBC` - European Unit of Account (XBC)
// * `XBD` - European Unit of Account (XBD)
// * `FKP` - Falkland Islands Pound
// * `FJD` - Fijian Dollar
// * `FIM` - Finnish Markka
// * `FRF` - French Franc
// * `XFO` - French Gold Franc
// * `XFU` - French UIC-Franc
// * `GMD` - Gambian Dalasi
// * `GEK` - Georgian Kupon Larit
// * `GEL` - Georgian Lari
// * `DEM` - German Mark
// * `GHS` - Ghanaian Cedi
// * `GHC` - Ghanaian Cedi (1979–2007)
// * `GIP` - Gibraltar Pound
// * `XAU` - Gold
// * `GRD` - Greek Drachma
// * `GTQ` - Guatemalan Quetzal
// * `GWP` - Guinea-Bissau Peso
// * `GNF` - Guinean Franc
// * `GNS` - Guinean Syli
// * `GYD` - Guyanaese Dollar
// * `HTG` - Haitian Gourde
// * `HNL` - Honduran Lempira
// * `HKD` - Hong Kong Dollar
// * `HUF` - Hungarian Forint
// * `IMP` - IMP
// * `ISK` - Icelandic Króna
// * `ISJ` - Icelandic Króna (1918–1981)
// * `INR` - Indian Rupee
// * `IDR` - Indonesian Rupiah
// * `IRR` - Iranian Rial
// * `IQD` - Iraqi Dinar
// * `IEP` - Irish Pound
// * `ILS` - Israeli New Shekel
// * `ILP` - Israeli Pound
// * `ILR` - Israeli Shekel (1980–1985)
// * `ITL` - Italian Lira
// * `JMD` - Jamaican Dollar
// * `JPY` - Japanese Yen
// * `JOD` - Jordanian Dinar
// * `KZT` - Kazakhstani Tenge
// * `KES` - Kenyan Shilling
// * `KWD` - Kuwaiti Dinar
// * `KGS` - Kyrgystani Som
// * `LAK` - Laotian Kip
// * `LVL` - Latvian Lats
// * `LVR` - Latvian Ruble
// * `LBP` - Lebanese Pound
// * `LSL` - Lesotho Loti
// * `LRD` - Liberian Dollar
// * `LYD` - Libyan Dinar
// * `LTL` - Lithuanian Litas
// * `LTT` - Lithuanian Talonas
// * `LUL` - Luxembourg Financial Franc
// * `LUC` - Luxembourgian Convertible Franc
// * `LUF` - Luxembourgian Franc
// * `MOP` - Macanese Pataca
// * `MKD` - Macedonian Denar
// * `MKN` - Macedonian Denar (1992–1993)
// * `MGA` - Malagasy Ariary
// * `MGF` - Malagasy Franc
// * `MWK` - Malawian Kwacha
// * `MYR` - Malaysian Ringgit
// * `MVR` - Maldivian Rufiyaa
// * `MVP` - Maldivian Rupee (1947–1981)
// * `MLF` - Malian Franc
// * `MTL` - Maltese Lira
// * `MTP` - Maltese Pound
// * `MRU` - Mauritanian Ouguiya
// * `MRO` - Mauritanian Ouguiya (1973–2017)
// * `MUR` - Mauritian Rupee
// * `MXV` - Mexican Investment Unit
// * `MXN` - Mexican Peso
// * `MXP` - Mexican Silver Peso (1861–1992)
// * `MDC` - Moldovan Cupon
// * `MDL` - Moldovan Leu
// * `MCF` - Monegasque Franc
// * `MNT` - Mongolian Tugrik
// * `MAD` - Moroccan Dirham
// * `MAF` - Moroccan Franc
// * `MZE` - Mozambican Escudo
// * `MZN` - Mozambican Metical
// * `MZM` - Mozambican Metical (1980–2006)
// * `MMK` - Myanmar Kyat
// * `NAD` - Namibian Dollar
// * `NPR` - Nepalese Rupee
// * `ANG` - Netherlands Antillean Guilder
// * `TWD` - New Taiwan Dollar
// * `NZD` - New Zealand Dollar
// * `NIO` - Nicaraguan Córdoba
// * `NIC` - Nicaraguan Córdoba (1988–1991)
// * `NGN` - Nigerian Naira
// * `KPW` - North Korean Won
// * `NOK` - Norwegian Krone
// * `OMR` - Omani Rial
// * `PKR` - Pakistani Rupee
// * `XPD` - Palladium
// * `PAB` - Panamanian Balboa
// * `PGK` - Papua New Guinean Kina
// * `PYG` - Paraguayan Guarani
// * `PEI` - Peruvian Inti
// * `PEN` - Peruvian Sol
// * `PES` - Peruvian Sol (1863–1965)
// * `PHP` - Philippine Peso
// * `XPT` - Platinum
// * `PLN` - Polish Zloty
// * `PLZ` - Polish Zloty (1950–1995)
// * `PTE` - Portuguese Escudo
// * `GWE` - Portuguese Guinea Escudo
// * `QAR` - Qatari Rial
// * `XRE` - RINET Funds
// * `RHD` - Rhodesian Dollar
// * `RON` - Romanian Leu
// * `ROL` - Romanian Leu (1952–2006)
// * `RUB` - Russian Ruble
// * `RUR` - Russian Ruble (1991–1998)
// * `RWF` - Rwandan Franc
// * `SVC` - Salvadoran Colón
// * `WST` - Samoan Tala
// * `SAR` - Saudi Riyal
// * `RSD` - Serbian Dinar
// * `CSD` - Serbian Dinar (2002–2006)
// * `SCR` - Seychellois Rupee
// * `SLL` - Sierra Leonean Leone
// * `XAG` - Silver
// * `SGD` - Singapore Dollar
// * `SKK` - Slovak Koruna
// * `SIT` - Slovenian Tolar
// * `SBD` - Solomon Islands Dollar
// * `SOS` - Somali Shilling
// * `ZAR` - South African Rand
// * `ZAL` - South African Rand (financial)
// * `KRH` - South Korean Hwan (1953–1962)
// * `KRW` - South Korean Won
// * `KRO` - South Korean Won (1945–1953)
// * `SSP` - South Sudanese Pound
// * `SUR` - Soviet Rouble
// * `ESP` - Spanish Peseta
// * `ESA` - Spanish Peseta (A account)
// * `ESB` - Spanish Peseta (convertible account)
// * `XDR` - Special Drawing Rights
// * `LKR` - Sri Lankan Rupee
// * `SHP` - St. Helena Pound
// * `XSU` - Sucre
// * `SDD` - Sudanese Dinar (1992–2007)
// * `SDG` - Sudanese Pound
// * `SDP` - Sudanese Pound (1957–1998)
// * `SRD` - Surinamese Dollar
// * `SRG` - Surinamese Guilder
// * `SZL` - Swazi Lilangeni
// * `SEK` - Swedish Krona
// * `CHF` - Swiss Franc
// * `SYP` - Syrian Pound
// * `STN` - São Tomé & Príncipe Dobra
// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
// * `TVD` - TVD
// * `TJR` - Tajikistani Ruble
// * `TJS` - Tajikistani Somoni
// * `TZS` - Tanzanian Shilling
// * `XTS` - Testing Currency Code
// * `THB` - Thai Baht
// * `XXX` - The codes assigned for transactions where no currency is involved
// * `TPE` - Timorese Escudo
// * `TOP` - Tongan Paʻanga
// * `TTD` - Trinidad & Tobago Dollar
// * `TND` - Tunisian Dinar
// * `TRY` - Turkish Lira
// * `TRL` - Turkish Lira (1922–2005)
// * `TMT` - Turkmenistani Manat
// * `TMM` - Turkmenistani Manat (1993–2009)
// * `USD` - US Dollar
// * `USN` - US Dollar (Next day)
// * `USS` - US Dollar (Same day)
// * `UGX` - Ugandan Shilling
// * `UGS` - Ugandan Shilling (1966–1987)
// * `UAH` - Ukrainian Hryvnia
// * `UAK` - Ukrainian Karbovanets
// * `AED` - United Arab Emirates Dirham
// * `UYW` - Uruguayan Nominal Wage Index Unit
// * `UYU` - Uruguayan Peso
// * `UYP` - Uruguayan Peso (1975–1993)
// * `UYI` - Uruguayan Peso (Indexed Units)
// * `UZS` - Uzbekistani Som
// * `VUV` - Vanuatu Vatu
// * `VES` - Venezuelan Bolívar
// * `VEB` - Venezuelan Bolívar (1871–2008)
// * `VEF` - Venezuelan Bolívar (2008–2018)
// * `VND` - Vietnamese Dong
// * `VNN` - Vietnamese Dong (1978–1985)
// * `CHE` - WIR Euro
// * `CHW` - WIR Franc
// * `XOF` - West African CFA Franc
// * `YDD` - Yemeni Dinar
// * `YER` - Yemeni Rial
// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
// * `YUM` - Yugoslavian New Dinar (1994–2002)
// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
// * `ZWN` - ZWN
// * `ZRN` - Zairean New Zaire (1993–1998)
// * `ZRZ` - Zairean Zaire (1971–1993)
// * `ZMW` - Zambian Kwacha
// * `ZMK` - Zambian Kwacha (1968–2012)
// * `ZWD` - Zimbabwean Dollar (1980–2008)
// * `ZWR` - Zimbabwean Dollar (2008)
// * `ZWL` - Zimbabwean Dollar (2009)
type PaymentCurrency struct {
	typeName     string
	CurrencyEnum CurrencyEnum
	String       string
}

func NewPaymentCurrencyFromCurrencyEnum(value CurrencyEnum) *PaymentCurrency {
	return &PaymentCurrency{typeName: "currencyEnum", CurrencyEnum: value}
}

func NewPaymentCurrencyFromString(value string) *PaymentCurrency {
	return &PaymentCurrency{typeName: "string", String: value}
}

func (p *PaymentCurrency) UnmarshalJSON(data []byte) error {
	var valueCurrencyEnum CurrencyEnum
	if err := json.Unmarshal(data, &valueCurrencyEnum); err == nil {
		p.typeName = "currencyEnum"
		p.CurrencyEnum = valueCurrencyEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typeName = "string"
		p.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PaymentCurrency) MarshalJSON() ([]byte, error) {
	switch p.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "currencyEnum":
		return json.Marshal(p.CurrencyEnum)
	case "string":
		return json.Marshal(p.String)
	}
}

type PaymentCurrencyVisitor interface {
	VisitCurrencyEnum(CurrencyEnum) error
	VisitString(string) error
}

func (p *PaymentCurrency) Accept(visitor PaymentCurrencyVisitor) error {
	switch p.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "currencyEnum":
		return visitor.VisitCurrencyEnum(p.CurrencyEnum)
	case "string":
		return visitor.VisitString(p.String)
	}
}

// # The PaymentLineItem Object
// ### Description
// The `PaymentLineItem` object is an applied-to-line on a `Payment` that can either be a `Invoice`, `CreditNote`, or `JournalEntry`.
//
// ### Usage Example
// `Payment` will have a field called `applied-to-lines` which will be an array of `PaymentLineItemInternalMappingSerializer` objects that can either be a `Invoice`, `CreditNote`, or `JournalEntry`.
type PaymentLineItem struct {
	// The amount being applied to the transaction.
	AppliedAmount *string `json:"applied_amount,omitempty"`
	// The date the payment portion is applied.
	AppliedDate *time.Time `json:"applied_date,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The Merge ID of the transaction the payment portion is being applied to.
	RelatedObjectId *string `json:"related_object_id,omitempty"`
	// The type of transaction the payment portion is being applied to. Possible values include: INVOICE, JOURNAL_ENTRY, or CREDIT_NOTE.
	RelatedObjectType *string    `json:"related_object_type,omitempty"`
	Id                *string    `json:"id,omitempty"`
	CreatedAt         *time.Time `json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
}

// # The PaymentLineItem Object
// ### Description
// The `PaymentLineItem` object is an applied-to-line on a `Payment` that can either be a `Invoice`, `CreditNote`, or `JournalEntry`.
//
// ### Usage Example
// `Payment` will have a field called `applied-to-lines` which will be an array of `PaymentLineItemInternalMappingSerializer` objects that can either be a `Invoice`, `CreditNote`, or `JournalEntry`.
type PaymentLineItemRequest struct {
	// The amount being applied to the transaction.
	AppliedAmount *string `json:"applied_amount,omitempty"`
	// The date the payment portion is applied.
	AppliedDate *time.Time `json:"applied_date,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The Merge ID of the transaction the payment portion is being applied to.
	RelatedObjectId *string `json:"related_object_id,omitempty"`
	// The type of transaction the payment portion is being applied to. Possible values include: INVOICE, JOURNAL_ENTRY, or CREDIT_NOTE.
	RelatedObjectType   *string        `json:"related_object_type,omitempty"`
	IntegrationParams   map[string]any `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]any `json:"linked_account_params,omitempty"`
}

// # The Payment Object
// ### Description
// The `Payment` object represents general payments made towards a specific transaction.
//
// ### Usage Example
// Fetch from the `GET Payment` endpoint and view an invoice's payment.
type PaymentRequest struct {
	// The payment's transaction date.
	TransactionDate *time.Time `json:"transaction_date,omitempty"`
	// The supplier, or customer involved in the payment.
	Contact *PaymentRequestContact `json:"contact,omitempty"`
	// The supplier’s or customer’s account in which the payment is made.
	Account *PaymentRequestAccount `json:"account,omitempty"`
	// The payment's currency.
	//
	// * `XUA` - ADB Unit of Account
	// * `AFN` - Afghan Afghani
	// * `AFA` - Afghan Afghani (1927–2002)
	// * `ALL` - Albanian Lek
	// * `ALK` - Albanian Lek (1946–1965)
	// * `DZD` - Algerian Dinar
	// * `ADP` - Andorran Peseta
	// * `AOA` - Angolan Kwanza
	// * `AOK` - Angolan Kwanza (1977–1991)
	// * `AON` - Angolan New Kwanza (1990–2000)
	// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
	// * `ARA` - Argentine Austral
	// * `ARS` - Argentine Peso
	// * `ARM` - Argentine Peso (1881–1970)
	// * `ARP` - Argentine Peso (1983–1985)
	// * `ARL` - Argentine Peso Ley (1970–1983)
	// * `AMD` - Armenian Dram
	// * `AWG` - Aruban Florin
	// * `AUD` - Australian Dollar
	// * `ATS` - Austrian Schilling
	// * `AZN` - Azerbaijani Manat
	// * `AZM` - Azerbaijani Manat (1993–2006)
	// * `BSD` - Bahamian Dollar
	// * `BHD` - Bahraini Dinar
	// * `BDT` - Bangladeshi Taka
	// * `BBD` - Barbadian Dollar
	// * `BYN` - Belarusian Ruble
	// * `BYB` - Belarusian Ruble (1994–1999)
	// * `BYR` - Belarusian Ruble (2000–2016)
	// * `BEF` - Belgian Franc
	// * `BEC` - Belgian Franc (convertible)
	// * `BEL` - Belgian Franc (financial)
	// * `BZD` - Belize Dollar
	// * `BMD` - Bermudan Dollar
	// * `BTN` - Bhutanese Ngultrum
	// * `BOB` - Bolivian Boliviano
	// * `BOL` - Bolivian Boliviano (1863–1963)
	// * `BOV` - Bolivian Mvdol
	// * `BOP` - Bolivian Peso
	// * `BAM` - Bosnia-Herzegovina Convertible Mark
	// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
	// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
	// * `BWP` - Botswanan Pula
	// * `BRC` - Brazilian Cruzado (1986–1989)
	// * `BRZ` - Brazilian Cruzeiro (1942–1967)
	// * `BRE` - Brazilian Cruzeiro (1990–1993)
	// * `BRR` - Brazilian Cruzeiro (1993–1994)
	// * `BRN` - Brazilian New Cruzado (1989–1990)
	// * `BRB` - Brazilian New Cruzeiro (1967–1986)
	// * `BRL` - Brazilian Real
	// * `GBP` - British Pound
	// * `BND` - Brunei Dollar
	// * `BGL` - Bulgarian Hard Lev
	// * `BGN` - Bulgarian Lev
	// * `BGO` - Bulgarian Lev (1879–1952)
	// * `BGM` - Bulgarian Socialist Lev
	// * `BUK` - Burmese Kyat
	// * `BIF` - Burundian Franc
	// * `XPF` - CFP Franc
	// * `KHR` - Cambodian Riel
	// * `CAD` - Canadian Dollar
	// * `CVE` - Cape Verdean Escudo
	// * `KYD` - Cayman Islands Dollar
	// * `XAF` - Central African CFA Franc
	// * `CLE` - Chilean Escudo
	// * `CLP` - Chilean Peso
	// * `CLF` - Chilean Unit of Account (UF)
	// * `CNX` - Chinese People’s Bank Dollar
	// * `CNY` - Chinese Yuan
	// * `CNH` - Chinese Yuan (offshore)
	// * `COP` - Colombian Peso
	// * `COU` - Colombian Real Value Unit
	// * `KMF` - Comorian Franc
	// * `CDF` - Congolese Franc
	// * `CRC` - Costa Rican Colón
	// * `HRD` - Croatian Dinar
	// * `HRK` - Croatian Kuna
	// * `CUC` - Cuban Convertible Peso
	// * `CUP` - Cuban Peso
	// * `CYP` - Cypriot Pound
	// * `CZK` - Czech Koruna
	// * `CSK` - Czechoslovak Hard Koruna
	// * `DKK` - Danish Krone
	// * `DJF` - Djiboutian Franc
	// * `DOP` - Dominican Peso
	// * `NLG` - Dutch Guilder
	// * `XCD` - East Caribbean Dollar
	// * `DDM` - East German Mark
	// * `ECS` - Ecuadorian Sucre
	// * `ECV` - Ecuadorian Unit of Constant Value
	// * `EGP` - Egyptian Pound
	// * `GQE` - Equatorial Guinean Ekwele
	// * `ERN` - Eritrean Nakfa
	// * `EEK` - Estonian Kroon
	// * `ETB` - Ethiopian Birr
	// * `EUR` - Euro
	// * `XBA` - European Composite Unit
	// * `XEU` - European Currency Unit
	// * `XBB` - European Monetary Unit
	// * `XBC` - European Unit of Account (XBC)
	// * `XBD` - European Unit of Account (XBD)
	// * `FKP` - Falkland Islands Pound
	// * `FJD` - Fijian Dollar
	// * `FIM` - Finnish Markka
	// * `FRF` - French Franc
	// * `XFO` - French Gold Franc
	// * `XFU` - French UIC-Franc
	// * `GMD` - Gambian Dalasi
	// * `GEK` - Georgian Kupon Larit
	// * `GEL` - Georgian Lari
	// * `DEM` - German Mark
	// * `GHS` - Ghanaian Cedi
	// * `GHC` - Ghanaian Cedi (1979–2007)
	// * `GIP` - Gibraltar Pound
	// * `XAU` - Gold
	// * `GRD` - Greek Drachma
	// * `GTQ` - Guatemalan Quetzal
	// * `GWP` - Guinea-Bissau Peso
	// * `GNF` - Guinean Franc
	// * `GNS` - Guinean Syli
	// * `GYD` - Guyanaese Dollar
	// * `HTG` - Haitian Gourde
	// * `HNL` - Honduran Lempira
	// * `HKD` - Hong Kong Dollar
	// * `HUF` - Hungarian Forint
	// * `IMP` - IMP
	// * `ISK` - Icelandic Króna
	// * `ISJ` - Icelandic Króna (1918–1981)
	// * `INR` - Indian Rupee
	// * `IDR` - Indonesian Rupiah
	// * `IRR` - Iranian Rial
	// * `IQD` - Iraqi Dinar
	// * `IEP` - Irish Pound
	// * `ILS` - Israeli New Shekel
	// * `ILP` - Israeli Pound
	// * `ILR` - Israeli Shekel (1980–1985)
	// * `ITL` - Italian Lira
	// * `JMD` - Jamaican Dollar
	// * `JPY` - Japanese Yen
	// * `JOD` - Jordanian Dinar
	// * `KZT` - Kazakhstani Tenge
	// * `KES` - Kenyan Shilling
	// * `KWD` - Kuwaiti Dinar
	// * `KGS` - Kyrgystani Som
	// * `LAK` - Laotian Kip
	// * `LVL` - Latvian Lats
	// * `LVR` - Latvian Ruble
	// * `LBP` - Lebanese Pound
	// * `LSL` - Lesotho Loti
	// * `LRD` - Liberian Dollar
	// * `LYD` - Libyan Dinar
	// * `LTL` - Lithuanian Litas
	// * `LTT` - Lithuanian Talonas
	// * `LUL` - Luxembourg Financial Franc
	// * `LUC` - Luxembourgian Convertible Franc
	// * `LUF` - Luxembourgian Franc
	// * `MOP` - Macanese Pataca
	// * `MKD` - Macedonian Denar
	// * `MKN` - Macedonian Denar (1992–1993)
	// * `MGA` - Malagasy Ariary
	// * `MGF` - Malagasy Franc
	// * `MWK` - Malawian Kwacha
	// * `MYR` - Malaysian Ringgit
	// * `MVR` - Maldivian Rufiyaa
	// * `MVP` - Maldivian Rupee (1947–1981)
	// * `MLF` - Malian Franc
	// * `MTL` - Maltese Lira
	// * `MTP` - Maltese Pound
	// * `MRU` - Mauritanian Ouguiya
	// * `MRO` - Mauritanian Ouguiya (1973–2017)
	// * `MUR` - Mauritian Rupee
	// * `MXV` - Mexican Investment Unit
	// * `MXN` - Mexican Peso
	// * `MXP` - Mexican Silver Peso (1861–1992)
	// * `MDC` - Moldovan Cupon
	// * `MDL` - Moldovan Leu
	// * `MCF` - Monegasque Franc
	// * `MNT` - Mongolian Tugrik
	// * `MAD` - Moroccan Dirham
	// * `MAF` - Moroccan Franc
	// * `MZE` - Mozambican Escudo
	// * `MZN` - Mozambican Metical
	// * `MZM` - Mozambican Metical (1980–2006)
	// * `MMK` - Myanmar Kyat
	// * `NAD` - Namibian Dollar
	// * `NPR` - Nepalese Rupee
	// * `ANG` - Netherlands Antillean Guilder
	// * `TWD` - New Taiwan Dollar
	// * `NZD` - New Zealand Dollar
	// * `NIO` - Nicaraguan Córdoba
	// * `NIC` - Nicaraguan Córdoba (1988–1991)
	// * `NGN` - Nigerian Naira
	// * `KPW` - North Korean Won
	// * `NOK` - Norwegian Krone
	// * `OMR` - Omani Rial
	// * `PKR` - Pakistani Rupee
	// * `XPD` - Palladium
	// * `PAB` - Panamanian Balboa
	// * `PGK` - Papua New Guinean Kina
	// * `PYG` - Paraguayan Guarani
	// * `PEI` - Peruvian Inti
	// * `PEN` - Peruvian Sol
	// * `PES` - Peruvian Sol (1863–1965)
	// * `PHP` - Philippine Peso
	// * `XPT` - Platinum
	// * `PLN` - Polish Zloty
	// * `PLZ` - Polish Zloty (1950–1995)
	// * `PTE` - Portuguese Escudo
	// * `GWE` - Portuguese Guinea Escudo
	// * `QAR` - Qatari Rial
	// * `XRE` - RINET Funds
	// * `RHD` - Rhodesian Dollar
	// * `RON` - Romanian Leu
	// * `ROL` - Romanian Leu (1952–2006)
	// * `RUB` - Russian Ruble
	// * `RUR` - Russian Ruble (1991–1998)
	// * `RWF` - Rwandan Franc
	// * `SVC` - Salvadoran Colón
	// * `WST` - Samoan Tala
	// * `SAR` - Saudi Riyal
	// * `RSD` - Serbian Dinar
	// * `CSD` - Serbian Dinar (2002–2006)
	// * `SCR` - Seychellois Rupee
	// * `SLL` - Sierra Leonean Leone
	// * `XAG` - Silver
	// * `SGD` - Singapore Dollar
	// * `SKK` - Slovak Koruna
	// * `SIT` - Slovenian Tolar
	// * `SBD` - Solomon Islands Dollar
	// * `SOS` - Somali Shilling
	// * `ZAR` - South African Rand
	// * `ZAL` - South African Rand (financial)
	// * `KRH` - South Korean Hwan (1953–1962)
	// * `KRW` - South Korean Won
	// * `KRO` - South Korean Won (1945–1953)
	// * `SSP` - South Sudanese Pound
	// * `SUR` - Soviet Rouble
	// * `ESP` - Spanish Peseta
	// * `ESA` - Spanish Peseta (A account)
	// * `ESB` - Spanish Peseta (convertible account)
	// * `XDR` - Special Drawing Rights
	// * `LKR` - Sri Lankan Rupee
	// * `SHP` - St. Helena Pound
	// * `XSU` - Sucre
	// * `SDD` - Sudanese Dinar (1992–2007)
	// * `SDG` - Sudanese Pound
	// * `SDP` - Sudanese Pound (1957–1998)
	// * `SRD` - Surinamese Dollar
	// * `SRG` - Surinamese Guilder
	// * `SZL` - Swazi Lilangeni
	// * `SEK` - Swedish Krona
	// * `CHF` - Swiss Franc
	// * `SYP` - Syrian Pound
	// * `STN` - São Tomé & Príncipe Dobra
	// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
	// * `TVD` - TVD
	// * `TJR` - Tajikistani Ruble
	// * `TJS` - Tajikistani Somoni
	// * `TZS` - Tanzanian Shilling
	// * `XTS` - Testing Currency Code
	// * `THB` - Thai Baht
	// * `XXX` - The codes assigned for transactions where no currency is involved
	// * `TPE` - Timorese Escudo
	// * `TOP` - Tongan Paʻanga
	// * `TTD` - Trinidad & Tobago Dollar
	// * `TND` - Tunisian Dinar
	// * `TRY` - Turkish Lira
	// * `TRL` - Turkish Lira (1922–2005)
	// * `TMT` - Turkmenistani Manat
	// * `TMM` - Turkmenistani Manat (1993–2009)
	// * `USD` - US Dollar
	// * `USN` - US Dollar (Next day)
	// * `USS` - US Dollar (Same day)
	// * `UGX` - Ugandan Shilling
	// * `UGS` - Ugandan Shilling (1966–1987)
	// * `UAH` - Ukrainian Hryvnia
	// * `UAK` - Ukrainian Karbovanets
	// * `AED` - United Arab Emirates Dirham
	// * `UYW` - Uruguayan Nominal Wage Index Unit
	// * `UYU` - Uruguayan Peso
	// * `UYP` - Uruguayan Peso (1975–1993)
	// * `UYI` - Uruguayan Peso (Indexed Units)
	// * `UZS` - Uzbekistani Som
	// * `VUV` - Vanuatu Vatu
	// * `VES` - Venezuelan Bolívar
	// * `VEB` - Venezuelan Bolívar (1871–2008)
	// * `VEF` - Venezuelan Bolívar (2008–2018)
	// * `VND` - Vietnamese Dong
	// * `VNN` - Vietnamese Dong (1978–1985)
	// * `CHE` - WIR Euro
	// * `CHW` - WIR Franc
	// * `XOF` - West African CFA Franc
	// * `YDD` - Yemeni Dinar
	// * `YER` - Yemeni Rial
	// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
	// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
	// * `YUM` - Yugoslavian New Dinar (1994–2002)
	// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
	// * `ZWN` - ZWN
	// * `ZRN` - Zairean New Zaire (1993–1998)
	// * `ZRZ` - Zairean Zaire (1971–1993)
	// * `ZMW` - Zambian Kwacha
	// * `ZMK` - Zambian Kwacha (1968–2012)
	// * `ZWD` - Zimbabwean Dollar (1980–2008)
	// * `ZWR` - Zimbabwean Dollar (2008)
	// * `ZWL` - Zimbabwean Dollar (2009)
	Currency *PaymentRequestCurrency `json:"currency,omitempty"`
	// The payment's exchange rate.
	ExchangeRate *string `json:"exchange_rate,omitempty"`
	// The company the payment belongs to.
	Company *PaymentRequestCompany `json:"company,omitempty"`
	// The total amount of money being paid to the supplier, or customer, after taxes.
	TotalAmount        *float64                                `json:"total_amount,omitempty"`
	TrackingCategories []*PaymentRequestTrackingCategoriesItem `json:"tracking_categories,omitempty"`
	// The accounting period that the Payment was generated in.
	AccountingPeriod *PaymentRequestAccountingPeriod `json:"accounting_period,omitempty"`
	// A list of “Payment Applied to Lines” objects.
	AppliedToLines      []*PaymentRequestAppliedToLinesItem `json:"applied_to_lines,omitempty"`
	IntegrationParams   map[string]any                      `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]any                      `json:"linked_account_params,omitempty"`
}

// The supplier’s or customer’s account in which the payment is made.
type PaymentRequestAccount struct {
	typeName string
	String   string
	Account  *Account
}

func NewPaymentRequestAccountFromString(value string) *PaymentRequestAccount {
	return &PaymentRequestAccount{typeName: "string", String: value}
}

func NewPaymentRequestAccountFromAccount(value *Account) *PaymentRequestAccount {
	return &PaymentRequestAccount{typeName: "account", Account: value}
}

func (p *PaymentRequestAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typeName = "string"
		p.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		p.typeName = "account"
		p.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PaymentRequestAccount) MarshalJSON() ([]byte, error) {
	switch p.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return json.Marshal(p.String)
	case "account":
		return json.Marshal(p.Account)
	}
}

type PaymentRequestAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (p *PaymentRequestAccount) Accept(visitor PaymentRequestAccountVisitor) error {
	switch p.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return visitor.VisitString(p.String)
	case "account":
		return visitor.VisitAccount(p.Account)
	}
}

// The accounting period that the Payment was generated in.
type PaymentRequestAccountingPeriod struct {
	typeName         string
	String           string
	AccountingPeriod *AccountingPeriod
}

func NewPaymentRequestAccountingPeriodFromString(value string) *PaymentRequestAccountingPeriod {
	return &PaymentRequestAccountingPeriod{typeName: "string", String: value}
}

func NewPaymentRequestAccountingPeriodFromAccountingPeriod(value *AccountingPeriod) *PaymentRequestAccountingPeriod {
	return &PaymentRequestAccountingPeriod{typeName: "accountingPeriod", AccountingPeriod: value}
}

func (p *PaymentRequestAccountingPeriod) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typeName = "string"
		p.String = valueString
		return nil
	}
	valueAccountingPeriod := new(AccountingPeriod)
	if err := json.Unmarshal(data, &valueAccountingPeriod); err == nil {
		p.typeName = "accountingPeriod"
		p.AccountingPeriod = valueAccountingPeriod
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PaymentRequestAccountingPeriod) MarshalJSON() ([]byte, error) {
	switch p.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return json.Marshal(p.String)
	case "accountingPeriod":
		return json.Marshal(p.AccountingPeriod)
	}
}

type PaymentRequestAccountingPeriodVisitor interface {
	VisitString(string) error
	VisitAccountingPeriod(*AccountingPeriod) error
}

func (p *PaymentRequestAccountingPeriod) Accept(visitor PaymentRequestAccountingPeriodVisitor) error {
	switch p.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return visitor.VisitString(p.String)
	case "accountingPeriod":
		return visitor.VisitAccountingPeriod(p.AccountingPeriod)
	}
}

type PaymentRequestAppliedToLinesItem struct {
	typeName               string
	String                 string
	PaymentLineItemRequest *PaymentLineItemRequest
}

func NewPaymentRequestAppliedToLinesItemFromString(value string) *PaymentRequestAppliedToLinesItem {
	return &PaymentRequestAppliedToLinesItem{typeName: "string", String: value}
}

func NewPaymentRequestAppliedToLinesItemFromPaymentLineItemRequest(value *PaymentLineItemRequest) *PaymentRequestAppliedToLinesItem {
	return &PaymentRequestAppliedToLinesItem{typeName: "paymentLineItemRequest", PaymentLineItemRequest: value}
}

func (p *PaymentRequestAppliedToLinesItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typeName = "string"
		p.String = valueString
		return nil
	}
	valuePaymentLineItemRequest := new(PaymentLineItemRequest)
	if err := json.Unmarshal(data, &valuePaymentLineItemRequest); err == nil {
		p.typeName = "paymentLineItemRequest"
		p.PaymentLineItemRequest = valuePaymentLineItemRequest
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PaymentRequestAppliedToLinesItem) MarshalJSON() ([]byte, error) {
	switch p.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return json.Marshal(p.String)
	case "paymentLineItemRequest":
		return json.Marshal(p.PaymentLineItemRequest)
	}
}

type PaymentRequestAppliedToLinesItemVisitor interface {
	VisitString(string) error
	VisitPaymentLineItemRequest(*PaymentLineItemRequest) error
}

func (p *PaymentRequestAppliedToLinesItem) Accept(visitor PaymentRequestAppliedToLinesItemVisitor) error {
	switch p.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return visitor.VisitString(p.String)
	case "paymentLineItemRequest":
		return visitor.VisitPaymentLineItemRequest(p.PaymentLineItemRequest)
	}
}

// The company the payment belongs to.
type PaymentRequestCompany struct {
	typeName    string
	String      string
	CompanyInfo *CompanyInfo
}

func NewPaymentRequestCompanyFromString(value string) *PaymentRequestCompany {
	return &PaymentRequestCompany{typeName: "string", String: value}
}

func NewPaymentRequestCompanyFromCompanyInfo(value *CompanyInfo) *PaymentRequestCompany {
	return &PaymentRequestCompany{typeName: "companyInfo", CompanyInfo: value}
}

func (p *PaymentRequestCompany) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typeName = "string"
		p.String = valueString
		return nil
	}
	valueCompanyInfo := new(CompanyInfo)
	if err := json.Unmarshal(data, &valueCompanyInfo); err == nil {
		p.typeName = "companyInfo"
		p.CompanyInfo = valueCompanyInfo
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PaymentRequestCompany) MarshalJSON() ([]byte, error) {
	switch p.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return json.Marshal(p.String)
	case "companyInfo":
		return json.Marshal(p.CompanyInfo)
	}
}

type PaymentRequestCompanyVisitor interface {
	VisitString(string) error
	VisitCompanyInfo(*CompanyInfo) error
}

func (p *PaymentRequestCompany) Accept(visitor PaymentRequestCompanyVisitor) error {
	switch p.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return visitor.VisitString(p.String)
	case "companyInfo":
		return visitor.VisitCompanyInfo(p.CompanyInfo)
	}
}

// The supplier, or customer involved in the payment.
type PaymentRequestContact struct {
	typeName string
	String   string
	Contact  *Contact
}

func NewPaymentRequestContactFromString(value string) *PaymentRequestContact {
	return &PaymentRequestContact{typeName: "string", String: value}
}

func NewPaymentRequestContactFromContact(value *Contact) *PaymentRequestContact {
	return &PaymentRequestContact{typeName: "contact", Contact: value}
}

func (p *PaymentRequestContact) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typeName = "string"
		p.String = valueString
		return nil
	}
	valueContact := new(Contact)
	if err := json.Unmarshal(data, &valueContact); err == nil {
		p.typeName = "contact"
		p.Contact = valueContact
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PaymentRequestContact) MarshalJSON() ([]byte, error) {
	switch p.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return json.Marshal(p.String)
	case "contact":
		return json.Marshal(p.Contact)
	}
}

type PaymentRequestContactVisitor interface {
	VisitString(string) error
	VisitContact(*Contact) error
}

func (p *PaymentRequestContact) Accept(visitor PaymentRequestContactVisitor) error {
	switch p.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return visitor.VisitString(p.String)
	case "contact":
		return visitor.VisitContact(p.Contact)
	}
}

// The payment's currency.
//
// * `XUA` - ADB Unit of Account
// * `AFN` - Afghan Afghani
// * `AFA` - Afghan Afghani (1927–2002)
// * `ALL` - Albanian Lek
// * `ALK` - Albanian Lek (1946–1965)
// * `DZD` - Algerian Dinar
// * `ADP` - Andorran Peseta
// * `AOA` - Angolan Kwanza
// * `AOK` - Angolan Kwanza (1977–1991)
// * `AON` - Angolan New Kwanza (1990–2000)
// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
// * `ARA` - Argentine Austral
// * `ARS` - Argentine Peso
// * `ARM` - Argentine Peso (1881–1970)
// * `ARP` - Argentine Peso (1983–1985)
// * `ARL` - Argentine Peso Ley (1970–1983)
// * `AMD` - Armenian Dram
// * `AWG` - Aruban Florin
// * `AUD` - Australian Dollar
// * `ATS` - Austrian Schilling
// * `AZN` - Azerbaijani Manat
// * `AZM` - Azerbaijani Manat (1993–2006)
// * `BSD` - Bahamian Dollar
// * `BHD` - Bahraini Dinar
// * `BDT` - Bangladeshi Taka
// * `BBD` - Barbadian Dollar
// * `BYN` - Belarusian Ruble
// * `BYB` - Belarusian Ruble (1994–1999)
// * `BYR` - Belarusian Ruble (2000–2016)
// * `BEF` - Belgian Franc
// * `BEC` - Belgian Franc (convertible)
// * `BEL` - Belgian Franc (financial)
// * `BZD` - Belize Dollar
// * `BMD` - Bermudan Dollar
// * `BTN` - Bhutanese Ngultrum
// * `BOB` - Bolivian Boliviano
// * `BOL` - Bolivian Boliviano (1863–1963)
// * `BOV` - Bolivian Mvdol
// * `BOP` - Bolivian Peso
// * `BAM` - Bosnia-Herzegovina Convertible Mark
// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
// * `BWP` - Botswanan Pula
// * `BRC` - Brazilian Cruzado (1986–1989)
// * `BRZ` - Brazilian Cruzeiro (1942–1967)
// * `BRE` - Brazilian Cruzeiro (1990–1993)
// * `BRR` - Brazilian Cruzeiro (1993–1994)
// * `BRN` - Brazilian New Cruzado (1989–1990)
// * `BRB` - Brazilian New Cruzeiro (1967–1986)
// * `BRL` - Brazilian Real
// * `GBP` - British Pound
// * `BND` - Brunei Dollar
// * `BGL` - Bulgarian Hard Lev
// * `BGN` - Bulgarian Lev
// * `BGO` - Bulgarian Lev (1879–1952)
// * `BGM` - Bulgarian Socialist Lev
// * `BUK` - Burmese Kyat
// * `BIF` - Burundian Franc
// * `XPF` - CFP Franc
// * `KHR` - Cambodian Riel
// * `CAD` - Canadian Dollar
// * `CVE` - Cape Verdean Escudo
// * `KYD` - Cayman Islands Dollar
// * `XAF` - Central African CFA Franc
// * `CLE` - Chilean Escudo
// * `CLP` - Chilean Peso
// * `CLF` - Chilean Unit of Account (UF)
// * `CNX` - Chinese People’s Bank Dollar
// * `CNY` - Chinese Yuan
// * `CNH` - Chinese Yuan (offshore)
// * `COP` - Colombian Peso
// * `COU` - Colombian Real Value Unit
// * `KMF` - Comorian Franc
// * `CDF` - Congolese Franc
// * `CRC` - Costa Rican Colón
// * `HRD` - Croatian Dinar
// * `HRK` - Croatian Kuna
// * `CUC` - Cuban Convertible Peso
// * `CUP` - Cuban Peso
// * `CYP` - Cypriot Pound
// * `CZK` - Czech Koruna
// * `CSK` - Czechoslovak Hard Koruna
// * `DKK` - Danish Krone
// * `DJF` - Djiboutian Franc
// * `DOP` - Dominican Peso
// * `NLG` - Dutch Guilder
// * `XCD` - East Caribbean Dollar
// * `DDM` - East German Mark
// * `ECS` - Ecuadorian Sucre
// * `ECV` - Ecuadorian Unit of Constant Value
// * `EGP` - Egyptian Pound
// * `GQE` - Equatorial Guinean Ekwele
// * `ERN` - Eritrean Nakfa
// * `EEK` - Estonian Kroon
// * `ETB` - Ethiopian Birr
// * `EUR` - Euro
// * `XBA` - European Composite Unit
// * `XEU` - European Currency Unit
// * `XBB` - European Monetary Unit
// * `XBC` - European Unit of Account (XBC)
// * `XBD` - European Unit of Account (XBD)
// * `FKP` - Falkland Islands Pound
// * `FJD` - Fijian Dollar
// * `FIM` - Finnish Markka
// * `FRF` - French Franc
// * `XFO` - French Gold Franc
// * `XFU` - French UIC-Franc
// * `GMD` - Gambian Dalasi
// * `GEK` - Georgian Kupon Larit
// * `GEL` - Georgian Lari
// * `DEM` - German Mark
// * `GHS` - Ghanaian Cedi
// * `GHC` - Ghanaian Cedi (1979–2007)
// * `GIP` - Gibraltar Pound
// * `XAU` - Gold
// * `GRD` - Greek Drachma
// * `GTQ` - Guatemalan Quetzal
// * `GWP` - Guinea-Bissau Peso
// * `GNF` - Guinean Franc
// * `GNS` - Guinean Syli
// * `GYD` - Guyanaese Dollar
// * `HTG` - Haitian Gourde
// * `HNL` - Honduran Lempira
// * `HKD` - Hong Kong Dollar
// * `HUF` - Hungarian Forint
// * `IMP` - IMP
// * `ISK` - Icelandic Króna
// * `ISJ` - Icelandic Króna (1918–1981)
// * `INR` - Indian Rupee
// * `IDR` - Indonesian Rupiah
// * `IRR` - Iranian Rial
// * `IQD` - Iraqi Dinar
// * `IEP` - Irish Pound
// * `ILS` - Israeli New Shekel
// * `ILP` - Israeli Pound
// * `ILR` - Israeli Shekel (1980–1985)
// * `ITL` - Italian Lira
// * `JMD` - Jamaican Dollar
// * `JPY` - Japanese Yen
// * `JOD` - Jordanian Dinar
// * `KZT` - Kazakhstani Tenge
// * `KES` - Kenyan Shilling
// * `KWD` - Kuwaiti Dinar
// * `KGS` - Kyrgystani Som
// * `LAK` - Laotian Kip
// * `LVL` - Latvian Lats
// * `LVR` - Latvian Ruble
// * `LBP` - Lebanese Pound
// * `LSL` - Lesotho Loti
// * `LRD` - Liberian Dollar
// * `LYD` - Libyan Dinar
// * `LTL` - Lithuanian Litas
// * `LTT` - Lithuanian Talonas
// * `LUL` - Luxembourg Financial Franc
// * `LUC` - Luxembourgian Convertible Franc
// * `LUF` - Luxembourgian Franc
// * `MOP` - Macanese Pataca
// * `MKD` - Macedonian Denar
// * `MKN` - Macedonian Denar (1992–1993)
// * `MGA` - Malagasy Ariary
// * `MGF` - Malagasy Franc
// * `MWK` - Malawian Kwacha
// * `MYR` - Malaysian Ringgit
// * `MVR` - Maldivian Rufiyaa
// * `MVP` - Maldivian Rupee (1947–1981)
// * `MLF` - Malian Franc
// * `MTL` - Maltese Lira
// * `MTP` - Maltese Pound
// * `MRU` - Mauritanian Ouguiya
// * `MRO` - Mauritanian Ouguiya (1973–2017)
// * `MUR` - Mauritian Rupee
// * `MXV` - Mexican Investment Unit
// * `MXN` - Mexican Peso
// * `MXP` - Mexican Silver Peso (1861–1992)
// * `MDC` - Moldovan Cupon
// * `MDL` - Moldovan Leu
// * `MCF` - Monegasque Franc
// * `MNT` - Mongolian Tugrik
// * `MAD` - Moroccan Dirham
// * `MAF` - Moroccan Franc
// * `MZE` - Mozambican Escudo
// * `MZN` - Mozambican Metical
// * `MZM` - Mozambican Metical (1980–2006)
// * `MMK` - Myanmar Kyat
// * `NAD` - Namibian Dollar
// * `NPR` - Nepalese Rupee
// * `ANG` - Netherlands Antillean Guilder
// * `TWD` - New Taiwan Dollar
// * `NZD` - New Zealand Dollar
// * `NIO` - Nicaraguan Córdoba
// * `NIC` - Nicaraguan Córdoba (1988–1991)
// * `NGN` - Nigerian Naira
// * `KPW` - North Korean Won
// * `NOK` - Norwegian Krone
// * `OMR` - Omani Rial
// * `PKR` - Pakistani Rupee
// * `XPD` - Palladium
// * `PAB` - Panamanian Balboa
// * `PGK` - Papua New Guinean Kina
// * `PYG` - Paraguayan Guarani
// * `PEI` - Peruvian Inti
// * `PEN` - Peruvian Sol
// * `PES` - Peruvian Sol (1863–1965)
// * `PHP` - Philippine Peso
// * `XPT` - Platinum
// * `PLN` - Polish Zloty
// * `PLZ` - Polish Zloty (1950–1995)
// * `PTE` - Portuguese Escudo
// * `GWE` - Portuguese Guinea Escudo
// * `QAR` - Qatari Rial
// * `XRE` - RINET Funds
// * `RHD` - Rhodesian Dollar
// * `RON` - Romanian Leu
// * `ROL` - Romanian Leu (1952–2006)
// * `RUB` - Russian Ruble
// * `RUR` - Russian Ruble (1991–1998)
// * `RWF` - Rwandan Franc
// * `SVC` - Salvadoran Colón
// * `WST` - Samoan Tala
// * `SAR` - Saudi Riyal
// * `RSD` - Serbian Dinar
// * `CSD` - Serbian Dinar (2002–2006)
// * `SCR` - Seychellois Rupee
// * `SLL` - Sierra Leonean Leone
// * `XAG` - Silver
// * `SGD` - Singapore Dollar
// * `SKK` - Slovak Koruna
// * `SIT` - Slovenian Tolar
// * `SBD` - Solomon Islands Dollar
// * `SOS` - Somali Shilling
// * `ZAR` - South African Rand
// * `ZAL` - South African Rand (financial)
// * `KRH` - South Korean Hwan (1953–1962)
// * `KRW` - South Korean Won
// * `KRO` - South Korean Won (1945–1953)
// * `SSP` - South Sudanese Pound
// * `SUR` - Soviet Rouble
// * `ESP` - Spanish Peseta
// * `ESA` - Spanish Peseta (A account)
// * `ESB` - Spanish Peseta (convertible account)
// * `XDR` - Special Drawing Rights
// * `LKR` - Sri Lankan Rupee
// * `SHP` - St. Helena Pound
// * `XSU` - Sucre
// * `SDD` - Sudanese Dinar (1992–2007)
// * `SDG` - Sudanese Pound
// * `SDP` - Sudanese Pound (1957–1998)
// * `SRD` - Surinamese Dollar
// * `SRG` - Surinamese Guilder
// * `SZL` - Swazi Lilangeni
// * `SEK` - Swedish Krona
// * `CHF` - Swiss Franc
// * `SYP` - Syrian Pound
// * `STN` - São Tomé & Príncipe Dobra
// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
// * `TVD` - TVD
// * `TJR` - Tajikistani Ruble
// * `TJS` - Tajikistani Somoni
// * `TZS` - Tanzanian Shilling
// * `XTS` - Testing Currency Code
// * `THB` - Thai Baht
// * `XXX` - The codes assigned for transactions where no currency is involved
// * `TPE` - Timorese Escudo
// * `TOP` - Tongan Paʻanga
// * `TTD` - Trinidad & Tobago Dollar
// * `TND` - Tunisian Dinar
// * `TRY` - Turkish Lira
// * `TRL` - Turkish Lira (1922–2005)
// * `TMT` - Turkmenistani Manat
// * `TMM` - Turkmenistani Manat (1993–2009)
// * `USD` - US Dollar
// * `USN` - US Dollar (Next day)
// * `USS` - US Dollar (Same day)
// * `UGX` - Ugandan Shilling
// * `UGS` - Ugandan Shilling (1966–1987)
// * `UAH` - Ukrainian Hryvnia
// * `UAK` - Ukrainian Karbovanets
// * `AED` - United Arab Emirates Dirham
// * `UYW` - Uruguayan Nominal Wage Index Unit
// * `UYU` - Uruguayan Peso
// * `UYP` - Uruguayan Peso (1975–1993)
// * `UYI` - Uruguayan Peso (Indexed Units)
// * `UZS` - Uzbekistani Som
// * `VUV` - Vanuatu Vatu
// * `VES` - Venezuelan Bolívar
// * `VEB` - Venezuelan Bolívar (1871–2008)
// * `VEF` - Venezuelan Bolívar (2008–2018)
// * `VND` - Vietnamese Dong
// * `VNN` - Vietnamese Dong (1978–1985)
// * `CHE` - WIR Euro
// * `CHW` - WIR Franc
// * `XOF` - West African CFA Franc
// * `YDD` - Yemeni Dinar
// * `YER` - Yemeni Rial
// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
// * `YUM` - Yugoslavian New Dinar (1994–2002)
// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
// * `ZWN` - ZWN
// * `ZRN` - Zairean New Zaire (1993–1998)
// * `ZRZ` - Zairean Zaire (1971–1993)
// * `ZMW` - Zambian Kwacha
// * `ZMK` - Zambian Kwacha (1968–2012)
// * `ZWD` - Zimbabwean Dollar (1980–2008)
// * `ZWR` - Zimbabwean Dollar (2008)
// * `ZWL` - Zimbabwean Dollar (2009)
type PaymentRequestCurrency struct {
	typeName     string
	CurrencyEnum CurrencyEnum
	String       string
}

func NewPaymentRequestCurrencyFromCurrencyEnum(value CurrencyEnum) *PaymentRequestCurrency {
	return &PaymentRequestCurrency{typeName: "currencyEnum", CurrencyEnum: value}
}

func NewPaymentRequestCurrencyFromString(value string) *PaymentRequestCurrency {
	return &PaymentRequestCurrency{typeName: "string", String: value}
}

func (p *PaymentRequestCurrency) UnmarshalJSON(data []byte) error {
	var valueCurrencyEnum CurrencyEnum
	if err := json.Unmarshal(data, &valueCurrencyEnum); err == nil {
		p.typeName = "currencyEnum"
		p.CurrencyEnum = valueCurrencyEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typeName = "string"
		p.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PaymentRequestCurrency) MarshalJSON() ([]byte, error) {
	switch p.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "currencyEnum":
		return json.Marshal(p.CurrencyEnum)
	case "string":
		return json.Marshal(p.String)
	}
}

type PaymentRequestCurrencyVisitor interface {
	VisitCurrencyEnum(CurrencyEnum) error
	VisitString(string) error
}

func (p *PaymentRequestCurrency) Accept(visitor PaymentRequestCurrencyVisitor) error {
	switch p.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "currencyEnum":
		return visitor.VisitCurrencyEnum(p.CurrencyEnum)
	case "string":
		return visitor.VisitString(p.String)
	}
}

type PaymentRequestTrackingCategoriesItem struct {
	typeName         string
	String           string
	TrackingCategory *TrackingCategory
}

func NewPaymentRequestTrackingCategoriesItemFromString(value string) *PaymentRequestTrackingCategoriesItem {
	return &PaymentRequestTrackingCategoriesItem{typeName: "string", String: value}
}

func NewPaymentRequestTrackingCategoriesItemFromTrackingCategory(value *TrackingCategory) *PaymentRequestTrackingCategoriesItem {
	return &PaymentRequestTrackingCategoriesItem{typeName: "trackingCategory", TrackingCategory: value}
}

func (p *PaymentRequestTrackingCategoriesItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typeName = "string"
		p.String = valueString
		return nil
	}
	valueTrackingCategory := new(TrackingCategory)
	if err := json.Unmarshal(data, &valueTrackingCategory); err == nil {
		p.typeName = "trackingCategory"
		p.TrackingCategory = valueTrackingCategory
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PaymentRequestTrackingCategoriesItem) MarshalJSON() ([]byte, error) {
	switch p.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return json.Marshal(p.String)
	case "trackingCategory":
		return json.Marshal(p.TrackingCategory)
	}
}

type PaymentRequestTrackingCategoriesItemVisitor interface {
	VisitString(string) error
	VisitTrackingCategory(*TrackingCategory) error
}

func (p *PaymentRequestTrackingCategoriesItem) Accept(visitor PaymentRequestTrackingCategoriesItemVisitor) error {
	switch p.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return visitor.VisitString(p.String)
	case "trackingCategory":
		return visitor.VisitTrackingCategory(p.TrackingCategory)
	}
}

type PaymentResponse struct {
	Model    *Payment                    `json:"model,omitempty"`
	Warnings []*WarningValidationProblem `json:"warnings,omitempty"`
	Errors   []*ErrorValidationProblem   `json:"errors,omitempty"`
	Logs     []*DebugModeLog             `json:"logs,omitempty"`
}

type PaymentTrackingCategoriesItem struct {
	typeName         string
	String           string
	TrackingCategory *TrackingCategory
}

func NewPaymentTrackingCategoriesItemFromString(value string) *PaymentTrackingCategoriesItem {
	return &PaymentTrackingCategoriesItem{typeName: "string", String: value}
}

func NewPaymentTrackingCategoriesItemFromTrackingCategory(value *TrackingCategory) *PaymentTrackingCategoriesItem {
	return &PaymentTrackingCategoriesItem{typeName: "trackingCategory", TrackingCategory: value}
}

func (p *PaymentTrackingCategoriesItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typeName = "string"
		p.String = valueString
		return nil
	}
	valueTrackingCategory := new(TrackingCategory)
	if err := json.Unmarshal(data, &valueTrackingCategory); err == nil {
		p.typeName = "trackingCategory"
		p.TrackingCategory = valueTrackingCategory
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PaymentTrackingCategoriesItem) MarshalJSON() ([]byte, error) {
	switch p.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return json.Marshal(p.String)
	case "trackingCategory":
		return json.Marshal(p.TrackingCategory)
	}
}

type PaymentTrackingCategoriesItemVisitor interface {
	VisitString(string) error
	VisitTrackingCategory(*TrackingCategory) error
}

func (p *PaymentTrackingCategoriesItem) Accept(visitor PaymentTrackingCategoriesItemVisitor) error {
	switch p.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return visitor.VisitString(p.String)
	case "trackingCategory":
		return visitor.VisitTrackingCategory(p.TrackingCategory)
	}
}

type PaymentsListRequestExpand uint

const (
	PaymentsListRequestExpandAccount PaymentsListRequestExpand = iota + 1
	PaymentsListRequestExpandAccountAccountingPeriod
	PaymentsListRequestExpandAccountCompany
	PaymentsListRequestExpandAccountCompanyAccountingPeriod
	PaymentsListRequestExpandAccountingPeriod
	PaymentsListRequestExpandAppliedToLines
	PaymentsListRequestExpandAppliedToLinesAccount
	PaymentsListRequestExpandAppliedToLinesAccountAccountingPeriod
	PaymentsListRequestExpandAppliedToLinesAccountCompany
	PaymentsListRequestExpandAppliedToLinesAccountCompanyAccountingPeriod
	PaymentsListRequestExpandAppliedToLinesAccountingPeriod
	PaymentsListRequestExpandAppliedToLinesCompany
	PaymentsListRequestExpandAppliedToLinesCompanyAccountingPeriod
	PaymentsListRequestExpandAppliedToLinesContact
	PaymentsListRequestExpandAppliedToLinesContactAccount
	PaymentsListRequestExpandAppliedToLinesContactAccountAccountingPeriod
	PaymentsListRequestExpandAppliedToLinesContactAccountCompany
	PaymentsListRequestExpandAppliedToLinesContactAccountCompanyAccountingPeriod
	PaymentsListRequestExpandAppliedToLinesContactAccountingPeriod
	PaymentsListRequestExpandAppliedToLinesContactCompany
	PaymentsListRequestExpandAppliedToLinesContactCompanyAccountingPeriod
	PaymentsListRequestExpandCompany
	PaymentsListRequestExpandCompanyAccountingPeriod
	PaymentsListRequestExpandContact
	PaymentsListRequestExpandContactAccount
	PaymentsListRequestExpandContactAccountAccountingPeriod
	PaymentsListRequestExpandContactAccountCompany
	PaymentsListRequestExpandContactAccountCompanyAccountingPeriod
	PaymentsListRequestExpandContactAccountingPeriod
	PaymentsListRequestExpandContactCompany
	PaymentsListRequestExpandContactCompanyAccountingPeriod
	PaymentsListRequestExpandTrackingCategories
	PaymentsListRequestExpandTrackingCategoriesAccount
	PaymentsListRequestExpandTrackingCategoriesAccountAccountingPeriod
	PaymentsListRequestExpandTrackingCategoriesAccountCompany
	PaymentsListRequestExpandTrackingCategoriesAccountCompanyAccountingPeriod
	PaymentsListRequestExpandTrackingCategoriesAccountingPeriod
	PaymentsListRequestExpandTrackingCategoriesAppliedToLines
	PaymentsListRequestExpandTrackingCategoriesAppliedToLinesAccount
	PaymentsListRequestExpandTrackingCategoriesAppliedToLinesAccountAccountingPeriod
	PaymentsListRequestExpandTrackingCategoriesAppliedToLinesAccountCompany
	PaymentsListRequestExpandTrackingCategoriesAppliedToLinesAccountCompanyAccountingPeriod
	PaymentsListRequestExpandTrackingCategoriesAppliedToLinesAccountingPeriod
	PaymentsListRequestExpandTrackingCategoriesAppliedToLinesCompany
	PaymentsListRequestExpandTrackingCategoriesAppliedToLinesCompanyAccountingPeriod
	PaymentsListRequestExpandTrackingCategoriesAppliedToLinesContact
	PaymentsListRequestExpandTrackingCategoriesAppliedToLinesContactAccount
	PaymentsListRequestExpandTrackingCategoriesAppliedToLinesContactAccountAccountingPeriod
	PaymentsListRequestExpandTrackingCategoriesAppliedToLinesContactAccountCompany
	PaymentsListRequestExpandTrackingCategoriesAppliedToLinesContactAccountCompanyAccountingPeriod
	PaymentsListRequestExpandTrackingCategoriesAppliedToLinesContactAccountingPeriod
	PaymentsListRequestExpandTrackingCategoriesAppliedToLinesContactCompany
	PaymentsListRequestExpandTrackingCategoriesAppliedToLinesContactCompanyAccountingPeriod
	PaymentsListRequestExpandTrackingCategoriesCompany
	PaymentsListRequestExpandTrackingCategoriesCompanyAccountingPeriod
	PaymentsListRequestExpandTrackingCategoriesContact
	PaymentsListRequestExpandTrackingCategoriesContactAccount
	PaymentsListRequestExpandTrackingCategoriesContactAccountAccountingPeriod
	PaymentsListRequestExpandTrackingCategoriesContactAccountCompany
	PaymentsListRequestExpandTrackingCategoriesContactAccountCompanyAccountingPeriod
	PaymentsListRequestExpandTrackingCategoriesContactAccountingPeriod
	PaymentsListRequestExpandTrackingCategoriesContactCompany
	PaymentsListRequestExpandTrackingCategoriesContactCompanyAccountingPeriod
)

func (p PaymentsListRequestExpand) String() string {
	switch p {
	default:
		return strconv.Itoa(int(p))
	case PaymentsListRequestExpandAccount:
		return "account"
	case PaymentsListRequestExpandAccountAccountingPeriod:
		return "account,accounting_period"
	case PaymentsListRequestExpandAccountCompany:
		return "account,company"
	case PaymentsListRequestExpandAccountCompanyAccountingPeriod:
		return "account,company,accounting_period"
	case PaymentsListRequestExpandAccountingPeriod:
		return "accounting_period"
	case PaymentsListRequestExpandAppliedToLines:
		return "applied_to_lines"
	case PaymentsListRequestExpandAppliedToLinesAccount:
		return "applied_to_lines,account"
	case PaymentsListRequestExpandAppliedToLinesAccountAccountingPeriod:
		return "applied_to_lines,account,accounting_period"
	case PaymentsListRequestExpandAppliedToLinesAccountCompany:
		return "applied_to_lines,account,company"
	case PaymentsListRequestExpandAppliedToLinesAccountCompanyAccountingPeriod:
		return "applied_to_lines,account,company,accounting_period"
	case PaymentsListRequestExpandAppliedToLinesAccountingPeriod:
		return "applied_to_lines,accounting_period"
	case PaymentsListRequestExpandAppliedToLinesCompany:
		return "applied_to_lines,company"
	case PaymentsListRequestExpandAppliedToLinesCompanyAccountingPeriod:
		return "applied_to_lines,company,accounting_period"
	case PaymentsListRequestExpandAppliedToLinesContact:
		return "applied_to_lines,contact"
	case PaymentsListRequestExpandAppliedToLinesContactAccount:
		return "applied_to_lines,contact,account"
	case PaymentsListRequestExpandAppliedToLinesContactAccountAccountingPeriod:
		return "applied_to_lines,contact,account,accounting_period"
	case PaymentsListRequestExpandAppliedToLinesContactAccountCompany:
		return "applied_to_lines,contact,account,company"
	case PaymentsListRequestExpandAppliedToLinesContactAccountCompanyAccountingPeriod:
		return "applied_to_lines,contact,account,company,accounting_period"
	case PaymentsListRequestExpandAppliedToLinesContactAccountingPeriod:
		return "applied_to_lines,contact,accounting_period"
	case PaymentsListRequestExpandAppliedToLinesContactCompany:
		return "applied_to_lines,contact,company"
	case PaymentsListRequestExpandAppliedToLinesContactCompanyAccountingPeriod:
		return "applied_to_lines,contact,company,accounting_period"
	case PaymentsListRequestExpandCompany:
		return "company"
	case PaymentsListRequestExpandCompanyAccountingPeriod:
		return "company,accounting_period"
	case PaymentsListRequestExpandContact:
		return "contact"
	case PaymentsListRequestExpandContactAccount:
		return "contact,account"
	case PaymentsListRequestExpandContactAccountAccountingPeriod:
		return "contact,account,accounting_period"
	case PaymentsListRequestExpandContactAccountCompany:
		return "contact,account,company"
	case PaymentsListRequestExpandContactAccountCompanyAccountingPeriod:
		return "contact,account,company,accounting_period"
	case PaymentsListRequestExpandContactAccountingPeriod:
		return "contact,accounting_period"
	case PaymentsListRequestExpandContactCompany:
		return "contact,company"
	case PaymentsListRequestExpandContactCompanyAccountingPeriod:
		return "contact,company,accounting_period"
	case PaymentsListRequestExpandTrackingCategories:
		return "tracking_categories"
	case PaymentsListRequestExpandTrackingCategoriesAccount:
		return "tracking_categories,account"
	case PaymentsListRequestExpandTrackingCategoriesAccountAccountingPeriod:
		return "tracking_categories,account,accounting_period"
	case PaymentsListRequestExpandTrackingCategoriesAccountCompany:
		return "tracking_categories,account,company"
	case PaymentsListRequestExpandTrackingCategoriesAccountCompanyAccountingPeriod:
		return "tracking_categories,account,company,accounting_period"
	case PaymentsListRequestExpandTrackingCategoriesAccountingPeriod:
		return "tracking_categories,accounting_period"
	case PaymentsListRequestExpandTrackingCategoriesAppliedToLines:
		return "tracking_categories,applied_to_lines"
	case PaymentsListRequestExpandTrackingCategoriesAppliedToLinesAccount:
		return "tracking_categories,applied_to_lines,account"
	case PaymentsListRequestExpandTrackingCategoriesAppliedToLinesAccountAccountingPeriod:
		return "tracking_categories,applied_to_lines,account,accounting_period"
	case PaymentsListRequestExpandTrackingCategoriesAppliedToLinesAccountCompany:
		return "tracking_categories,applied_to_lines,account,company"
	case PaymentsListRequestExpandTrackingCategoriesAppliedToLinesAccountCompanyAccountingPeriod:
		return "tracking_categories,applied_to_lines,account,company,accounting_period"
	case PaymentsListRequestExpandTrackingCategoriesAppliedToLinesAccountingPeriod:
		return "tracking_categories,applied_to_lines,accounting_period"
	case PaymentsListRequestExpandTrackingCategoriesAppliedToLinesCompany:
		return "tracking_categories,applied_to_lines,company"
	case PaymentsListRequestExpandTrackingCategoriesAppliedToLinesCompanyAccountingPeriod:
		return "tracking_categories,applied_to_lines,company,accounting_period"
	case PaymentsListRequestExpandTrackingCategoriesAppliedToLinesContact:
		return "tracking_categories,applied_to_lines,contact"
	case PaymentsListRequestExpandTrackingCategoriesAppliedToLinesContactAccount:
		return "tracking_categories,applied_to_lines,contact,account"
	case PaymentsListRequestExpandTrackingCategoriesAppliedToLinesContactAccountAccountingPeriod:
		return "tracking_categories,applied_to_lines,contact,account,accounting_period"
	case PaymentsListRequestExpandTrackingCategoriesAppliedToLinesContactAccountCompany:
		return "tracking_categories,applied_to_lines,contact,account,company"
	case PaymentsListRequestExpandTrackingCategoriesAppliedToLinesContactAccountCompanyAccountingPeriod:
		return "tracking_categories,applied_to_lines,contact,account,company,accounting_period"
	case PaymentsListRequestExpandTrackingCategoriesAppliedToLinesContactAccountingPeriod:
		return "tracking_categories,applied_to_lines,contact,accounting_period"
	case PaymentsListRequestExpandTrackingCategoriesAppliedToLinesContactCompany:
		return "tracking_categories,applied_to_lines,contact,company"
	case PaymentsListRequestExpandTrackingCategoriesAppliedToLinesContactCompanyAccountingPeriod:
		return "tracking_categories,applied_to_lines,contact,company,accounting_period"
	case PaymentsListRequestExpandTrackingCategoriesCompany:
		return "tracking_categories,company"
	case PaymentsListRequestExpandTrackingCategoriesCompanyAccountingPeriod:
		return "tracking_categories,company,accounting_period"
	case PaymentsListRequestExpandTrackingCategoriesContact:
		return "tracking_categories,contact"
	case PaymentsListRequestExpandTrackingCategoriesContactAccount:
		return "tracking_categories,contact,account"
	case PaymentsListRequestExpandTrackingCategoriesContactAccountAccountingPeriod:
		return "tracking_categories,contact,account,accounting_period"
	case PaymentsListRequestExpandTrackingCategoriesContactAccountCompany:
		return "tracking_categories,contact,account,company"
	case PaymentsListRequestExpandTrackingCategoriesContactAccountCompanyAccountingPeriod:
		return "tracking_categories,contact,account,company,accounting_period"
	case PaymentsListRequestExpandTrackingCategoriesContactAccountingPeriod:
		return "tracking_categories,contact,accounting_period"
	case PaymentsListRequestExpandTrackingCategoriesContactCompany:
		return "tracking_categories,contact,company"
	case PaymentsListRequestExpandTrackingCategoriesContactCompanyAccountingPeriod:
		return "tracking_categories,contact,company,accounting_period"
	}
}

func (p PaymentsListRequestExpand) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", p.String())), nil
}

func (p *PaymentsListRequestExpand) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "account":
		value := PaymentsListRequestExpandAccount
		*p = value
	case "account,accounting_period":
		value := PaymentsListRequestExpandAccountAccountingPeriod
		*p = value
	case "account,company":
		value := PaymentsListRequestExpandAccountCompany
		*p = value
	case "account,company,accounting_period":
		value := PaymentsListRequestExpandAccountCompanyAccountingPeriod
		*p = value
	case "accounting_period":
		value := PaymentsListRequestExpandAccountingPeriod
		*p = value
	case "applied_to_lines":
		value := PaymentsListRequestExpandAppliedToLines
		*p = value
	case "applied_to_lines,account":
		value := PaymentsListRequestExpandAppliedToLinesAccount
		*p = value
	case "applied_to_lines,account,accounting_period":
		value := PaymentsListRequestExpandAppliedToLinesAccountAccountingPeriod
		*p = value
	case "applied_to_lines,account,company":
		value := PaymentsListRequestExpandAppliedToLinesAccountCompany
		*p = value
	case "applied_to_lines,account,company,accounting_period":
		value := PaymentsListRequestExpandAppliedToLinesAccountCompanyAccountingPeriod
		*p = value
	case "applied_to_lines,accounting_period":
		value := PaymentsListRequestExpandAppliedToLinesAccountingPeriod
		*p = value
	case "applied_to_lines,company":
		value := PaymentsListRequestExpandAppliedToLinesCompany
		*p = value
	case "applied_to_lines,company,accounting_period":
		value := PaymentsListRequestExpandAppliedToLinesCompanyAccountingPeriod
		*p = value
	case "applied_to_lines,contact":
		value := PaymentsListRequestExpandAppliedToLinesContact
		*p = value
	case "applied_to_lines,contact,account":
		value := PaymentsListRequestExpandAppliedToLinesContactAccount
		*p = value
	case "applied_to_lines,contact,account,accounting_period":
		value := PaymentsListRequestExpandAppliedToLinesContactAccountAccountingPeriod
		*p = value
	case "applied_to_lines,contact,account,company":
		value := PaymentsListRequestExpandAppliedToLinesContactAccountCompany
		*p = value
	case "applied_to_lines,contact,account,company,accounting_period":
		value := PaymentsListRequestExpandAppliedToLinesContactAccountCompanyAccountingPeriod
		*p = value
	case "applied_to_lines,contact,accounting_period":
		value := PaymentsListRequestExpandAppliedToLinesContactAccountingPeriod
		*p = value
	case "applied_to_lines,contact,company":
		value := PaymentsListRequestExpandAppliedToLinesContactCompany
		*p = value
	case "applied_to_lines,contact,company,accounting_period":
		value := PaymentsListRequestExpandAppliedToLinesContactCompanyAccountingPeriod
		*p = value
	case "company":
		value := PaymentsListRequestExpandCompany
		*p = value
	case "company,accounting_period":
		value := PaymentsListRequestExpandCompanyAccountingPeriod
		*p = value
	case "contact":
		value := PaymentsListRequestExpandContact
		*p = value
	case "contact,account":
		value := PaymentsListRequestExpandContactAccount
		*p = value
	case "contact,account,accounting_period":
		value := PaymentsListRequestExpandContactAccountAccountingPeriod
		*p = value
	case "contact,account,company":
		value := PaymentsListRequestExpandContactAccountCompany
		*p = value
	case "contact,account,company,accounting_period":
		value := PaymentsListRequestExpandContactAccountCompanyAccountingPeriod
		*p = value
	case "contact,accounting_period":
		value := PaymentsListRequestExpandContactAccountingPeriod
		*p = value
	case "contact,company":
		value := PaymentsListRequestExpandContactCompany
		*p = value
	case "contact,company,accounting_period":
		value := PaymentsListRequestExpandContactCompanyAccountingPeriod
		*p = value
	case "tracking_categories":
		value := PaymentsListRequestExpandTrackingCategories
		*p = value
	case "tracking_categories,account":
		value := PaymentsListRequestExpandTrackingCategoriesAccount
		*p = value
	case "tracking_categories,account,accounting_period":
		value := PaymentsListRequestExpandTrackingCategoriesAccountAccountingPeriod
		*p = value
	case "tracking_categories,account,company":
		value := PaymentsListRequestExpandTrackingCategoriesAccountCompany
		*p = value
	case "tracking_categories,account,company,accounting_period":
		value := PaymentsListRequestExpandTrackingCategoriesAccountCompanyAccountingPeriod
		*p = value
	case "tracking_categories,accounting_period":
		value := PaymentsListRequestExpandTrackingCategoriesAccountingPeriod
		*p = value
	case "tracking_categories,applied_to_lines":
		value := PaymentsListRequestExpandTrackingCategoriesAppliedToLines
		*p = value
	case "tracking_categories,applied_to_lines,account":
		value := PaymentsListRequestExpandTrackingCategoriesAppliedToLinesAccount
		*p = value
	case "tracking_categories,applied_to_lines,account,accounting_period":
		value := PaymentsListRequestExpandTrackingCategoriesAppliedToLinesAccountAccountingPeriod
		*p = value
	case "tracking_categories,applied_to_lines,account,company":
		value := PaymentsListRequestExpandTrackingCategoriesAppliedToLinesAccountCompany
		*p = value
	case "tracking_categories,applied_to_lines,account,company,accounting_period":
		value := PaymentsListRequestExpandTrackingCategoriesAppliedToLinesAccountCompanyAccountingPeriod
		*p = value
	case "tracking_categories,applied_to_lines,accounting_period":
		value := PaymentsListRequestExpandTrackingCategoriesAppliedToLinesAccountingPeriod
		*p = value
	case "tracking_categories,applied_to_lines,company":
		value := PaymentsListRequestExpandTrackingCategoriesAppliedToLinesCompany
		*p = value
	case "tracking_categories,applied_to_lines,company,accounting_period":
		value := PaymentsListRequestExpandTrackingCategoriesAppliedToLinesCompanyAccountingPeriod
		*p = value
	case "tracking_categories,applied_to_lines,contact":
		value := PaymentsListRequestExpandTrackingCategoriesAppliedToLinesContact
		*p = value
	case "tracking_categories,applied_to_lines,contact,account":
		value := PaymentsListRequestExpandTrackingCategoriesAppliedToLinesContactAccount
		*p = value
	case "tracking_categories,applied_to_lines,contact,account,accounting_period":
		value := PaymentsListRequestExpandTrackingCategoriesAppliedToLinesContactAccountAccountingPeriod
		*p = value
	case "tracking_categories,applied_to_lines,contact,account,company":
		value := PaymentsListRequestExpandTrackingCategoriesAppliedToLinesContactAccountCompany
		*p = value
	case "tracking_categories,applied_to_lines,contact,account,company,accounting_period":
		value := PaymentsListRequestExpandTrackingCategoriesAppliedToLinesContactAccountCompanyAccountingPeriod
		*p = value
	case "tracking_categories,applied_to_lines,contact,accounting_period":
		value := PaymentsListRequestExpandTrackingCategoriesAppliedToLinesContactAccountingPeriod
		*p = value
	case "tracking_categories,applied_to_lines,contact,company":
		value := PaymentsListRequestExpandTrackingCategoriesAppliedToLinesContactCompany
		*p = value
	case "tracking_categories,applied_to_lines,contact,company,accounting_period":
		value := PaymentsListRequestExpandTrackingCategoriesAppliedToLinesContactCompanyAccountingPeriod
		*p = value
	case "tracking_categories,company":
		value := PaymentsListRequestExpandTrackingCategoriesCompany
		*p = value
	case "tracking_categories,company,accounting_period":
		value := PaymentsListRequestExpandTrackingCategoriesCompanyAccountingPeriod
		*p = value
	case "tracking_categories,contact":
		value := PaymentsListRequestExpandTrackingCategoriesContact
		*p = value
	case "tracking_categories,contact,account":
		value := PaymentsListRequestExpandTrackingCategoriesContactAccount
		*p = value
	case "tracking_categories,contact,account,accounting_period":
		value := PaymentsListRequestExpandTrackingCategoriesContactAccountAccountingPeriod
		*p = value
	case "tracking_categories,contact,account,company":
		value := PaymentsListRequestExpandTrackingCategoriesContactAccountCompany
		*p = value
	case "tracking_categories,contact,account,company,accounting_period":
		value := PaymentsListRequestExpandTrackingCategoriesContactAccountCompanyAccountingPeriod
		*p = value
	case "tracking_categories,contact,accounting_period":
		value := PaymentsListRequestExpandTrackingCategoriesContactAccountingPeriod
		*p = value
	case "tracking_categories,contact,company":
		value := PaymentsListRequestExpandTrackingCategoriesContactCompany
		*p = value
	case "tracking_categories,contact,company,accounting_period":
		value := PaymentsListRequestExpandTrackingCategoriesContactCompanyAccountingPeriod
		*p = value
	}
	return nil
}

type PaymentsRetrieveRequestExpand uint

const (
	PaymentsRetrieveRequestExpandAccount PaymentsRetrieveRequestExpand = iota + 1
	PaymentsRetrieveRequestExpandAccountAccountingPeriod
	PaymentsRetrieveRequestExpandAccountCompany
	PaymentsRetrieveRequestExpandAccountCompanyAccountingPeriod
	PaymentsRetrieveRequestExpandAccountingPeriod
	PaymentsRetrieveRequestExpandAppliedToLines
	PaymentsRetrieveRequestExpandAppliedToLinesAccount
	PaymentsRetrieveRequestExpandAppliedToLinesAccountAccountingPeriod
	PaymentsRetrieveRequestExpandAppliedToLinesAccountCompany
	PaymentsRetrieveRequestExpandAppliedToLinesAccountCompanyAccountingPeriod
	PaymentsRetrieveRequestExpandAppliedToLinesAccountingPeriod
	PaymentsRetrieveRequestExpandAppliedToLinesCompany
	PaymentsRetrieveRequestExpandAppliedToLinesCompanyAccountingPeriod
	PaymentsRetrieveRequestExpandAppliedToLinesContact
	PaymentsRetrieveRequestExpandAppliedToLinesContactAccount
	PaymentsRetrieveRequestExpandAppliedToLinesContactAccountAccountingPeriod
	PaymentsRetrieveRequestExpandAppliedToLinesContactAccountCompany
	PaymentsRetrieveRequestExpandAppliedToLinesContactAccountCompanyAccountingPeriod
	PaymentsRetrieveRequestExpandAppliedToLinesContactAccountingPeriod
	PaymentsRetrieveRequestExpandAppliedToLinesContactCompany
	PaymentsRetrieveRequestExpandAppliedToLinesContactCompanyAccountingPeriod
	PaymentsRetrieveRequestExpandCompany
	PaymentsRetrieveRequestExpandCompanyAccountingPeriod
	PaymentsRetrieveRequestExpandContact
	PaymentsRetrieveRequestExpandContactAccount
	PaymentsRetrieveRequestExpandContactAccountAccountingPeriod
	PaymentsRetrieveRequestExpandContactAccountCompany
	PaymentsRetrieveRequestExpandContactAccountCompanyAccountingPeriod
	PaymentsRetrieveRequestExpandContactAccountingPeriod
	PaymentsRetrieveRequestExpandContactCompany
	PaymentsRetrieveRequestExpandContactCompanyAccountingPeriod
	PaymentsRetrieveRequestExpandTrackingCategories
	PaymentsRetrieveRequestExpandTrackingCategoriesAccount
	PaymentsRetrieveRequestExpandTrackingCategoriesAccountAccountingPeriod
	PaymentsRetrieveRequestExpandTrackingCategoriesAccountCompany
	PaymentsRetrieveRequestExpandTrackingCategoriesAccountCompanyAccountingPeriod
	PaymentsRetrieveRequestExpandTrackingCategoriesAccountingPeriod
	PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLines
	PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesAccount
	PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesAccountAccountingPeriod
	PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesAccountCompany
	PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesAccountCompanyAccountingPeriod
	PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesAccountingPeriod
	PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesCompany
	PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesCompanyAccountingPeriod
	PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesContact
	PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesContactAccount
	PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesContactAccountAccountingPeriod
	PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesContactAccountCompany
	PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesContactAccountCompanyAccountingPeriod
	PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesContactAccountingPeriod
	PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesContactCompany
	PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesContactCompanyAccountingPeriod
	PaymentsRetrieveRequestExpandTrackingCategoriesCompany
	PaymentsRetrieveRequestExpandTrackingCategoriesCompanyAccountingPeriod
	PaymentsRetrieveRequestExpandTrackingCategoriesContact
	PaymentsRetrieveRequestExpandTrackingCategoriesContactAccount
	PaymentsRetrieveRequestExpandTrackingCategoriesContactAccountAccountingPeriod
	PaymentsRetrieveRequestExpandTrackingCategoriesContactAccountCompany
	PaymentsRetrieveRequestExpandTrackingCategoriesContactAccountCompanyAccountingPeriod
	PaymentsRetrieveRequestExpandTrackingCategoriesContactAccountingPeriod
	PaymentsRetrieveRequestExpandTrackingCategoriesContactCompany
	PaymentsRetrieveRequestExpandTrackingCategoriesContactCompanyAccountingPeriod
)

func (p PaymentsRetrieveRequestExpand) String() string {
	switch p {
	default:
		return strconv.Itoa(int(p))
	case PaymentsRetrieveRequestExpandAccount:
		return "account"
	case PaymentsRetrieveRequestExpandAccountAccountingPeriod:
		return "account,accounting_period"
	case PaymentsRetrieveRequestExpandAccountCompany:
		return "account,company"
	case PaymentsRetrieveRequestExpandAccountCompanyAccountingPeriod:
		return "account,company,accounting_period"
	case PaymentsRetrieveRequestExpandAccountingPeriod:
		return "accounting_period"
	case PaymentsRetrieveRequestExpandAppliedToLines:
		return "applied_to_lines"
	case PaymentsRetrieveRequestExpandAppliedToLinesAccount:
		return "applied_to_lines,account"
	case PaymentsRetrieveRequestExpandAppliedToLinesAccountAccountingPeriod:
		return "applied_to_lines,account,accounting_period"
	case PaymentsRetrieveRequestExpandAppliedToLinesAccountCompany:
		return "applied_to_lines,account,company"
	case PaymentsRetrieveRequestExpandAppliedToLinesAccountCompanyAccountingPeriod:
		return "applied_to_lines,account,company,accounting_period"
	case PaymentsRetrieveRequestExpandAppliedToLinesAccountingPeriod:
		return "applied_to_lines,accounting_period"
	case PaymentsRetrieveRequestExpandAppliedToLinesCompany:
		return "applied_to_lines,company"
	case PaymentsRetrieveRequestExpandAppliedToLinesCompanyAccountingPeriod:
		return "applied_to_lines,company,accounting_period"
	case PaymentsRetrieveRequestExpandAppliedToLinesContact:
		return "applied_to_lines,contact"
	case PaymentsRetrieveRequestExpandAppliedToLinesContactAccount:
		return "applied_to_lines,contact,account"
	case PaymentsRetrieveRequestExpandAppliedToLinesContactAccountAccountingPeriod:
		return "applied_to_lines,contact,account,accounting_period"
	case PaymentsRetrieveRequestExpandAppliedToLinesContactAccountCompany:
		return "applied_to_lines,contact,account,company"
	case PaymentsRetrieveRequestExpandAppliedToLinesContactAccountCompanyAccountingPeriod:
		return "applied_to_lines,contact,account,company,accounting_period"
	case PaymentsRetrieveRequestExpandAppliedToLinesContactAccountingPeriod:
		return "applied_to_lines,contact,accounting_period"
	case PaymentsRetrieveRequestExpandAppliedToLinesContactCompany:
		return "applied_to_lines,contact,company"
	case PaymentsRetrieveRequestExpandAppliedToLinesContactCompanyAccountingPeriod:
		return "applied_to_lines,contact,company,accounting_period"
	case PaymentsRetrieveRequestExpandCompany:
		return "company"
	case PaymentsRetrieveRequestExpandCompanyAccountingPeriod:
		return "company,accounting_period"
	case PaymentsRetrieveRequestExpandContact:
		return "contact"
	case PaymentsRetrieveRequestExpandContactAccount:
		return "contact,account"
	case PaymentsRetrieveRequestExpandContactAccountAccountingPeriod:
		return "contact,account,accounting_period"
	case PaymentsRetrieveRequestExpandContactAccountCompany:
		return "contact,account,company"
	case PaymentsRetrieveRequestExpandContactAccountCompanyAccountingPeriod:
		return "contact,account,company,accounting_period"
	case PaymentsRetrieveRequestExpandContactAccountingPeriod:
		return "contact,accounting_period"
	case PaymentsRetrieveRequestExpandContactCompany:
		return "contact,company"
	case PaymentsRetrieveRequestExpandContactCompanyAccountingPeriod:
		return "contact,company,accounting_period"
	case PaymentsRetrieveRequestExpandTrackingCategories:
		return "tracking_categories"
	case PaymentsRetrieveRequestExpandTrackingCategoriesAccount:
		return "tracking_categories,account"
	case PaymentsRetrieveRequestExpandTrackingCategoriesAccountAccountingPeriod:
		return "tracking_categories,account,accounting_period"
	case PaymentsRetrieveRequestExpandTrackingCategoriesAccountCompany:
		return "tracking_categories,account,company"
	case PaymentsRetrieveRequestExpandTrackingCategoriesAccountCompanyAccountingPeriod:
		return "tracking_categories,account,company,accounting_period"
	case PaymentsRetrieveRequestExpandTrackingCategoriesAccountingPeriod:
		return "tracking_categories,accounting_period"
	case PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLines:
		return "tracking_categories,applied_to_lines"
	case PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesAccount:
		return "tracking_categories,applied_to_lines,account"
	case PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesAccountAccountingPeriod:
		return "tracking_categories,applied_to_lines,account,accounting_period"
	case PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesAccountCompany:
		return "tracking_categories,applied_to_lines,account,company"
	case PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesAccountCompanyAccountingPeriod:
		return "tracking_categories,applied_to_lines,account,company,accounting_period"
	case PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesAccountingPeriod:
		return "tracking_categories,applied_to_lines,accounting_period"
	case PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesCompany:
		return "tracking_categories,applied_to_lines,company"
	case PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesCompanyAccountingPeriod:
		return "tracking_categories,applied_to_lines,company,accounting_period"
	case PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesContact:
		return "tracking_categories,applied_to_lines,contact"
	case PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesContactAccount:
		return "tracking_categories,applied_to_lines,contact,account"
	case PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesContactAccountAccountingPeriod:
		return "tracking_categories,applied_to_lines,contact,account,accounting_period"
	case PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesContactAccountCompany:
		return "tracking_categories,applied_to_lines,contact,account,company"
	case PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesContactAccountCompanyAccountingPeriod:
		return "tracking_categories,applied_to_lines,contact,account,company,accounting_period"
	case PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesContactAccountingPeriod:
		return "tracking_categories,applied_to_lines,contact,accounting_period"
	case PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesContactCompany:
		return "tracking_categories,applied_to_lines,contact,company"
	case PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesContactCompanyAccountingPeriod:
		return "tracking_categories,applied_to_lines,contact,company,accounting_period"
	case PaymentsRetrieveRequestExpandTrackingCategoriesCompany:
		return "tracking_categories,company"
	case PaymentsRetrieveRequestExpandTrackingCategoriesCompanyAccountingPeriod:
		return "tracking_categories,company,accounting_period"
	case PaymentsRetrieveRequestExpandTrackingCategoriesContact:
		return "tracking_categories,contact"
	case PaymentsRetrieveRequestExpandTrackingCategoriesContactAccount:
		return "tracking_categories,contact,account"
	case PaymentsRetrieveRequestExpandTrackingCategoriesContactAccountAccountingPeriod:
		return "tracking_categories,contact,account,accounting_period"
	case PaymentsRetrieveRequestExpandTrackingCategoriesContactAccountCompany:
		return "tracking_categories,contact,account,company"
	case PaymentsRetrieveRequestExpandTrackingCategoriesContactAccountCompanyAccountingPeriod:
		return "tracking_categories,contact,account,company,accounting_period"
	case PaymentsRetrieveRequestExpandTrackingCategoriesContactAccountingPeriod:
		return "tracking_categories,contact,accounting_period"
	case PaymentsRetrieveRequestExpandTrackingCategoriesContactCompany:
		return "tracking_categories,contact,company"
	case PaymentsRetrieveRequestExpandTrackingCategoriesContactCompanyAccountingPeriod:
		return "tracking_categories,contact,company,accounting_period"
	}
}

func (p PaymentsRetrieveRequestExpand) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", p.String())), nil
}

func (p *PaymentsRetrieveRequestExpand) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "account":
		value := PaymentsRetrieveRequestExpandAccount
		*p = value
	case "account,accounting_period":
		value := PaymentsRetrieveRequestExpandAccountAccountingPeriod
		*p = value
	case "account,company":
		value := PaymentsRetrieveRequestExpandAccountCompany
		*p = value
	case "account,company,accounting_period":
		value := PaymentsRetrieveRequestExpandAccountCompanyAccountingPeriod
		*p = value
	case "accounting_period":
		value := PaymentsRetrieveRequestExpandAccountingPeriod
		*p = value
	case "applied_to_lines":
		value := PaymentsRetrieveRequestExpandAppliedToLines
		*p = value
	case "applied_to_lines,account":
		value := PaymentsRetrieveRequestExpandAppliedToLinesAccount
		*p = value
	case "applied_to_lines,account,accounting_period":
		value := PaymentsRetrieveRequestExpandAppliedToLinesAccountAccountingPeriod
		*p = value
	case "applied_to_lines,account,company":
		value := PaymentsRetrieveRequestExpandAppliedToLinesAccountCompany
		*p = value
	case "applied_to_lines,account,company,accounting_period":
		value := PaymentsRetrieveRequestExpandAppliedToLinesAccountCompanyAccountingPeriod
		*p = value
	case "applied_to_lines,accounting_period":
		value := PaymentsRetrieveRequestExpandAppliedToLinesAccountingPeriod
		*p = value
	case "applied_to_lines,company":
		value := PaymentsRetrieveRequestExpandAppliedToLinesCompany
		*p = value
	case "applied_to_lines,company,accounting_period":
		value := PaymentsRetrieveRequestExpandAppliedToLinesCompanyAccountingPeriod
		*p = value
	case "applied_to_lines,contact":
		value := PaymentsRetrieveRequestExpandAppliedToLinesContact
		*p = value
	case "applied_to_lines,contact,account":
		value := PaymentsRetrieveRequestExpandAppliedToLinesContactAccount
		*p = value
	case "applied_to_lines,contact,account,accounting_period":
		value := PaymentsRetrieveRequestExpandAppliedToLinesContactAccountAccountingPeriod
		*p = value
	case "applied_to_lines,contact,account,company":
		value := PaymentsRetrieveRequestExpandAppliedToLinesContactAccountCompany
		*p = value
	case "applied_to_lines,contact,account,company,accounting_period":
		value := PaymentsRetrieveRequestExpandAppliedToLinesContactAccountCompanyAccountingPeriod
		*p = value
	case "applied_to_lines,contact,accounting_period":
		value := PaymentsRetrieveRequestExpandAppliedToLinesContactAccountingPeriod
		*p = value
	case "applied_to_lines,contact,company":
		value := PaymentsRetrieveRequestExpandAppliedToLinesContactCompany
		*p = value
	case "applied_to_lines,contact,company,accounting_period":
		value := PaymentsRetrieveRequestExpandAppliedToLinesContactCompanyAccountingPeriod
		*p = value
	case "company":
		value := PaymentsRetrieveRequestExpandCompany
		*p = value
	case "company,accounting_period":
		value := PaymentsRetrieveRequestExpandCompanyAccountingPeriod
		*p = value
	case "contact":
		value := PaymentsRetrieveRequestExpandContact
		*p = value
	case "contact,account":
		value := PaymentsRetrieveRequestExpandContactAccount
		*p = value
	case "contact,account,accounting_period":
		value := PaymentsRetrieveRequestExpandContactAccountAccountingPeriod
		*p = value
	case "contact,account,company":
		value := PaymentsRetrieveRequestExpandContactAccountCompany
		*p = value
	case "contact,account,company,accounting_period":
		value := PaymentsRetrieveRequestExpandContactAccountCompanyAccountingPeriod
		*p = value
	case "contact,accounting_period":
		value := PaymentsRetrieveRequestExpandContactAccountingPeriod
		*p = value
	case "contact,company":
		value := PaymentsRetrieveRequestExpandContactCompany
		*p = value
	case "contact,company,accounting_period":
		value := PaymentsRetrieveRequestExpandContactCompanyAccountingPeriod
		*p = value
	case "tracking_categories":
		value := PaymentsRetrieveRequestExpandTrackingCategories
		*p = value
	case "tracking_categories,account":
		value := PaymentsRetrieveRequestExpandTrackingCategoriesAccount
		*p = value
	case "tracking_categories,account,accounting_period":
		value := PaymentsRetrieveRequestExpandTrackingCategoriesAccountAccountingPeriod
		*p = value
	case "tracking_categories,account,company":
		value := PaymentsRetrieveRequestExpandTrackingCategoriesAccountCompany
		*p = value
	case "tracking_categories,account,company,accounting_period":
		value := PaymentsRetrieveRequestExpandTrackingCategoriesAccountCompanyAccountingPeriod
		*p = value
	case "tracking_categories,accounting_period":
		value := PaymentsRetrieveRequestExpandTrackingCategoriesAccountingPeriod
		*p = value
	case "tracking_categories,applied_to_lines":
		value := PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLines
		*p = value
	case "tracking_categories,applied_to_lines,account":
		value := PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesAccount
		*p = value
	case "tracking_categories,applied_to_lines,account,accounting_period":
		value := PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesAccountAccountingPeriod
		*p = value
	case "tracking_categories,applied_to_lines,account,company":
		value := PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesAccountCompany
		*p = value
	case "tracking_categories,applied_to_lines,account,company,accounting_period":
		value := PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesAccountCompanyAccountingPeriod
		*p = value
	case "tracking_categories,applied_to_lines,accounting_period":
		value := PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesAccountingPeriod
		*p = value
	case "tracking_categories,applied_to_lines,company":
		value := PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesCompany
		*p = value
	case "tracking_categories,applied_to_lines,company,accounting_period":
		value := PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesCompanyAccountingPeriod
		*p = value
	case "tracking_categories,applied_to_lines,contact":
		value := PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesContact
		*p = value
	case "tracking_categories,applied_to_lines,contact,account":
		value := PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesContactAccount
		*p = value
	case "tracking_categories,applied_to_lines,contact,account,accounting_period":
		value := PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesContactAccountAccountingPeriod
		*p = value
	case "tracking_categories,applied_to_lines,contact,account,company":
		value := PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesContactAccountCompany
		*p = value
	case "tracking_categories,applied_to_lines,contact,account,company,accounting_period":
		value := PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesContactAccountCompanyAccountingPeriod
		*p = value
	case "tracking_categories,applied_to_lines,contact,accounting_period":
		value := PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesContactAccountingPeriod
		*p = value
	case "tracking_categories,applied_to_lines,contact,company":
		value := PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesContactCompany
		*p = value
	case "tracking_categories,applied_to_lines,contact,company,accounting_period":
		value := PaymentsRetrieveRequestExpandTrackingCategoriesAppliedToLinesContactCompanyAccountingPeriod
		*p = value
	case "tracking_categories,company":
		value := PaymentsRetrieveRequestExpandTrackingCategoriesCompany
		*p = value
	case "tracking_categories,company,accounting_period":
		value := PaymentsRetrieveRequestExpandTrackingCategoriesCompanyAccountingPeriod
		*p = value
	case "tracking_categories,contact":
		value := PaymentsRetrieveRequestExpandTrackingCategoriesContact
		*p = value
	case "tracking_categories,contact,account":
		value := PaymentsRetrieveRequestExpandTrackingCategoriesContactAccount
		*p = value
	case "tracking_categories,contact,account,accounting_period":
		value := PaymentsRetrieveRequestExpandTrackingCategoriesContactAccountAccountingPeriod
		*p = value
	case "tracking_categories,contact,account,company":
		value := PaymentsRetrieveRequestExpandTrackingCategoriesContactAccountCompany
		*p = value
	case "tracking_categories,contact,account,company,accounting_period":
		value := PaymentsRetrieveRequestExpandTrackingCategoriesContactAccountCompanyAccountingPeriod
		*p = value
	case "tracking_categories,contact,accounting_period":
		value := PaymentsRetrieveRequestExpandTrackingCategoriesContactAccountingPeriod
		*p = value
	case "tracking_categories,contact,company":
		value := PaymentsRetrieveRequestExpandTrackingCategoriesContactCompany
		*p = value
	case "tracking_categories,contact,company,accounting_period":
		value := PaymentsRetrieveRequestExpandTrackingCategoriesContactCompanyAccountingPeriod
		*p = value
	}
	return nil
}

// * `UNPOSTED` - UNPOSTED
// * `POSTED` - POSTED
type PostingStatusEnum uint

const (
	PostingStatusEnumUnposted PostingStatusEnum = iota + 1
	PostingStatusEnumPosted
)

func (p PostingStatusEnum) String() string {
	switch p {
	default:
		return strconv.Itoa(int(p))
	case PostingStatusEnumUnposted:
		return "UNPOSTED"
	case PostingStatusEnumPosted:
		return "POSTED"
	}
}

func (p PostingStatusEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", p.String())), nil
}

func (p *PostingStatusEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "UNPOSTED":
		value := PostingStatusEnumUnposted
		*p = value
	case "POSTED":
		value := PostingStatusEnumPosted
		*p = value
	}
	return nil
}

// # The PurchaseOrder Object
// ### Description
// A `PurchaseOrder` represents a request to purchase goods or services from a vendor. It outlines the details of the purchase, such as the items or services requested, quantities, prices, and delivery details.
//
// A `PurchaseOrder` is a crucial component of the procurement process, but does not typically result in any impact on the company’s general ledger. The general ledger is typically only affected when the `PurchaseOrder` is fulfilled as an *Accounts Payable* Invoice object.
//
// ### Usage Example
// Fetch from the `LIST PurchaseOrders` endpoint and view a company's purchase orders.
type PurchaseOrder struct {
	// The purchase order's status.
	//
	// * `DRAFT` - DRAFT
	// * `SUBMITTED` - SUBMITTED
	// * `AUTHORIZED` - AUTHORIZED
	// * `BILLED` - BILLED
	// * `DELETED` - DELETED
	Status *PurchaseOrderStatus `json:"status,omitempty"`
	// The purchase order's issue date.
	IssueDate *time.Time `json:"issue_date,omitempty"`
	// The human-readable number of the purchase order.
	PurchaseOrderNumber *string `json:"purchase_order_number,omitempty"`
	// The purchase order's delivery date.
	DeliveryDate *time.Time `json:"delivery_date,omitempty"`
	// The purchase order's delivery address.
	DeliveryAddress *PurchaseOrderDeliveryAddress `json:"delivery_address,omitempty"`
	// The contact making the purchase order.
	Customer *string `json:"customer,omitempty"`
	// The party fulfilling the purchase order.
	Vendor *PurchaseOrderVendor `json:"vendor,omitempty"`
	// A memo attached to the purchase order.
	Memo *string `json:"memo,omitempty"`
	// The company the purchase order belongs to.
	Company *PurchaseOrderCompany `json:"company,omitempty"`
	// The purchase order's total amount.
	TotalAmount *float64 `json:"total_amount,omitempty"`
	// The purchase order's currency.
	//
	// * `XUA` - ADB Unit of Account
	// * `AFN` - Afghan Afghani
	// * `AFA` - Afghan Afghani (1927–2002)
	// * `ALL` - Albanian Lek
	// * `ALK` - Albanian Lek (1946–1965)
	// * `DZD` - Algerian Dinar
	// * `ADP` - Andorran Peseta
	// * `AOA` - Angolan Kwanza
	// * `AOK` - Angolan Kwanza (1977–1991)
	// * `AON` - Angolan New Kwanza (1990–2000)
	// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
	// * `ARA` - Argentine Austral
	// * `ARS` - Argentine Peso
	// * `ARM` - Argentine Peso (1881–1970)
	// * `ARP` - Argentine Peso (1983–1985)
	// * `ARL` - Argentine Peso Ley (1970–1983)
	// * `AMD` - Armenian Dram
	// * `AWG` - Aruban Florin
	// * `AUD` - Australian Dollar
	// * `ATS` - Austrian Schilling
	// * `AZN` - Azerbaijani Manat
	// * `AZM` - Azerbaijani Manat (1993–2006)
	// * `BSD` - Bahamian Dollar
	// * `BHD` - Bahraini Dinar
	// * `BDT` - Bangladeshi Taka
	// * `BBD` - Barbadian Dollar
	// * `BYN` - Belarusian Ruble
	// * `BYB` - Belarusian Ruble (1994–1999)
	// * `BYR` - Belarusian Ruble (2000–2016)
	// * `BEF` - Belgian Franc
	// * `BEC` - Belgian Franc (convertible)
	// * `BEL` - Belgian Franc (financial)
	// * `BZD` - Belize Dollar
	// * `BMD` - Bermudan Dollar
	// * `BTN` - Bhutanese Ngultrum
	// * `BOB` - Bolivian Boliviano
	// * `BOL` - Bolivian Boliviano (1863–1963)
	// * `BOV` - Bolivian Mvdol
	// * `BOP` - Bolivian Peso
	// * `BAM` - Bosnia-Herzegovina Convertible Mark
	// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
	// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
	// * `BWP` - Botswanan Pula
	// * `BRC` - Brazilian Cruzado (1986–1989)
	// * `BRZ` - Brazilian Cruzeiro (1942–1967)
	// * `BRE` - Brazilian Cruzeiro (1990–1993)
	// * `BRR` - Brazilian Cruzeiro (1993–1994)
	// * `BRN` - Brazilian New Cruzado (1989–1990)
	// * `BRB` - Brazilian New Cruzeiro (1967–1986)
	// * `BRL` - Brazilian Real
	// * `GBP` - British Pound
	// * `BND` - Brunei Dollar
	// * `BGL` - Bulgarian Hard Lev
	// * `BGN` - Bulgarian Lev
	// * `BGO` - Bulgarian Lev (1879–1952)
	// * `BGM` - Bulgarian Socialist Lev
	// * `BUK` - Burmese Kyat
	// * `BIF` - Burundian Franc
	// * `XPF` - CFP Franc
	// * `KHR` - Cambodian Riel
	// * `CAD` - Canadian Dollar
	// * `CVE` - Cape Verdean Escudo
	// * `KYD` - Cayman Islands Dollar
	// * `XAF` - Central African CFA Franc
	// * `CLE` - Chilean Escudo
	// * `CLP` - Chilean Peso
	// * `CLF` - Chilean Unit of Account (UF)
	// * `CNX` - Chinese People’s Bank Dollar
	// * `CNY` - Chinese Yuan
	// * `CNH` - Chinese Yuan (offshore)
	// * `COP` - Colombian Peso
	// * `COU` - Colombian Real Value Unit
	// * `KMF` - Comorian Franc
	// * `CDF` - Congolese Franc
	// * `CRC` - Costa Rican Colón
	// * `HRD` - Croatian Dinar
	// * `HRK` - Croatian Kuna
	// * `CUC` - Cuban Convertible Peso
	// * `CUP` - Cuban Peso
	// * `CYP` - Cypriot Pound
	// * `CZK` - Czech Koruna
	// * `CSK` - Czechoslovak Hard Koruna
	// * `DKK` - Danish Krone
	// * `DJF` - Djiboutian Franc
	// * `DOP` - Dominican Peso
	// * `NLG` - Dutch Guilder
	// * `XCD` - East Caribbean Dollar
	// * `DDM` - East German Mark
	// * `ECS` - Ecuadorian Sucre
	// * `ECV` - Ecuadorian Unit of Constant Value
	// * `EGP` - Egyptian Pound
	// * `GQE` - Equatorial Guinean Ekwele
	// * `ERN` - Eritrean Nakfa
	// * `EEK` - Estonian Kroon
	// * `ETB` - Ethiopian Birr
	// * `EUR` - Euro
	// * `XBA` - European Composite Unit
	// * `XEU` - European Currency Unit
	// * `XBB` - European Monetary Unit
	// * `XBC` - European Unit of Account (XBC)
	// * `XBD` - European Unit of Account (XBD)
	// * `FKP` - Falkland Islands Pound
	// * `FJD` - Fijian Dollar
	// * `FIM` - Finnish Markka
	// * `FRF` - French Franc
	// * `XFO` - French Gold Franc
	// * `XFU` - French UIC-Franc
	// * `GMD` - Gambian Dalasi
	// * `GEK` - Georgian Kupon Larit
	// * `GEL` - Georgian Lari
	// * `DEM` - German Mark
	// * `GHS` - Ghanaian Cedi
	// * `GHC` - Ghanaian Cedi (1979–2007)
	// * `GIP` - Gibraltar Pound
	// * `XAU` - Gold
	// * `GRD` - Greek Drachma
	// * `GTQ` - Guatemalan Quetzal
	// * `GWP` - Guinea-Bissau Peso
	// * `GNF` - Guinean Franc
	// * `GNS` - Guinean Syli
	// * `GYD` - Guyanaese Dollar
	// * `HTG` - Haitian Gourde
	// * `HNL` - Honduran Lempira
	// * `HKD` - Hong Kong Dollar
	// * `HUF` - Hungarian Forint
	// * `IMP` - IMP
	// * `ISK` - Icelandic Króna
	// * `ISJ` - Icelandic Króna (1918–1981)
	// * `INR` - Indian Rupee
	// * `IDR` - Indonesian Rupiah
	// * `IRR` - Iranian Rial
	// * `IQD` - Iraqi Dinar
	// * `IEP` - Irish Pound
	// * `ILS` - Israeli New Shekel
	// * `ILP` - Israeli Pound
	// * `ILR` - Israeli Shekel (1980–1985)
	// * `ITL` - Italian Lira
	// * `JMD` - Jamaican Dollar
	// * `JPY` - Japanese Yen
	// * `JOD` - Jordanian Dinar
	// * `KZT` - Kazakhstani Tenge
	// * `KES` - Kenyan Shilling
	// * `KWD` - Kuwaiti Dinar
	// * `KGS` - Kyrgystani Som
	// * `LAK` - Laotian Kip
	// * `LVL` - Latvian Lats
	// * `LVR` - Latvian Ruble
	// * `LBP` - Lebanese Pound
	// * `LSL` - Lesotho Loti
	// * `LRD` - Liberian Dollar
	// * `LYD` - Libyan Dinar
	// * `LTL` - Lithuanian Litas
	// * `LTT` - Lithuanian Talonas
	// * `LUL` - Luxembourg Financial Franc
	// * `LUC` - Luxembourgian Convertible Franc
	// * `LUF` - Luxembourgian Franc
	// * `MOP` - Macanese Pataca
	// * `MKD` - Macedonian Denar
	// * `MKN` - Macedonian Denar (1992–1993)
	// * `MGA` - Malagasy Ariary
	// * `MGF` - Malagasy Franc
	// * `MWK` - Malawian Kwacha
	// * `MYR` - Malaysian Ringgit
	// * `MVR` - Maldivian Rufiyaa
	// * `MVP` - Maldivian Rupee (1947–1981)
	// * `MLF` - Malian Franc
	// * `MTL` - Maltese Lira
	// * `MTP` - Maltese Pound
	// * `MRU` - Mauritanian Ouguiya
	// * `MRO` - Mauritanian Ouguiya (1973–2017)
	// * `MUR` - Mauritian Rupee
	// * `MXV` - Mexican Investment Unit
	// * `MXN` - Mexican Peso
	// * `MXP` - Mexican Silver Peso (1861–1992)
	// * `MDC` - Moldovan Cupon
	// * `MDL` - Moldovan Leu
	// * `MCF` - Monegasque Franc
	// * `MNT` - Mongolian Tugrik
	// * `MAD` - Moroccan Dirham
	// * `MAF` - Moroccan Franc
	// * `MZE` - Mozambican Escudo
	// * `MZN` - Mozambican Metical
	// * `MZM` - Mozambican Metical (1980–2006)
	// * `MMK` - Myanmar Kyat
	// * `NAD` - Namibian Dollar
	// * `NPR` - Nepalese Rupee
	// * `ANG` - Netherlands Antillean Guilder
	// * `TWD` - New Taiwan Dollar
	// * `NZD` - New Zealand Dollar
	// * `NIO` - Nicaraguan Córdoba
	// * `NIC` - Nicaraguan Córdoba (1988–1991)
	// * `NGN` - Nigerian Naira
	// * `KPW` - North Korean Won
	// * `NOK` - Norwegian Krone
	// * `OMR` - Omani Rial
	// * `PKR` - Pakistani Rupee
	// * `XPD` - Palladium
	// * `PAB` - Panamanian Balboa
	// * `PGK` - Papua New Guinean Kina
	// * `PYG` - Paraguayan Guarani
	// * `PEI` - Peruvian Inti
	// * `PEN` - Peruvian Sol
	// * `PES` - Peruvian Sol (1863–1965)
	// * `PHP` - Philippine Peso
	// * `XPT` - Platinum
	// * `PLN` - Polish Zloty
	// * `PLZ` - Polish Zloty (1950–1995)
	// * `PTE` - Portuguese Escudo
	// * `GWE` - Portuguese Guinea Escudo
	// * `QAR` - Qatari Rial
	// * `XRE` - RINET Funds
	// * `RHD` - Rhodesian Dollar
	// * `RON` - Romanian Leu
	// * `ROL` - Romanian Leu (1952–2006)
	// * `RUB` - Russian Ruble
	// * `RUR` - Russian Ruble (1991–1998)
	// * `RWF` - Rwandan Franc
	// * `SVC` - Salvadoran Colón
	// * `WST` - Samoan Tala
	// * `SAR` - Saudi Riyal
	// * `RSD` - Serbian Dinar
	// * `CSD` - Serbian Dinar (2002–2006)
	// * `SCR` - Seychellois Rupee
	// * `SLL` - Sierra Leonean Leone
	// * `XAG` - Silver
	// * `SGD` - Singapore Dollar
	// * `SKK` - Slovak Koruna
	// * `SIT` - Slovenian Tolar
	// * `SBD` - Solomon Islands Dollar
	// * `SOS` - Somali Shilling
	// * `ZAR` - South African Rand
	// * `ZAL` - South African Rand (financial)
	// * `KRH` - South Korean Hwan (1953–1962)
	// * `KRW` - South Korean Won
	// * `KRO` - South Korean Won (1945–1953)
	// * `SSP` - South Sudanese Pound
	// * `SUR` - Soviet Rouble
	// * `ESP` - Spanish Peseta
	// * `ESA` - Spanish Peseta (A account)
	// * `ESB` - Spanish Peseta (convertible account)
	// * `XDR` - Special Drawing Rights
	// * `LKR` - Sri Lankan Rupee
	// * `SHP` - St. Helena Pound
	// * `XSU` - Sucre
	// * `SDD` - Sudanese Dinar (1992–2007)
	// * `SDG` - Sudanese Pound
	// * `SDP` - Sudanese Pound (1957–1998)
	// * `SRD` - Surinamese Dollar
	// * `SRG` - Surinamese Guilder
	// * `SZL` - Swazi Lilangeni
	// * `SEK` - Swedish Krona
	// * `CHF` - Swiss Franc
	// * `SYP` - Syrian Pound
	// * `STN` - São Tomé & Príncipe Dobra
	// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
	// * `TVD` - TVD
	// * `TJR` - Tajikistani Ruble
	// * `TJS` - Tajikistani Somoni
	// * `TZS` - Tanzanian Shilling
	// * `XTS` - Testing Currency Code
	// * `THB` - Thai Baht
	// * `XXX` - The codes assigned for transactions where no currency is involved
	// * `TPE` - Timorese Escudo
	// * `TOP` - Tongan Paʻanga
	// * `TTD` - Trinidad & Tobago Dollar
	// * `TND` - Tunisian Dinar
	// * `TRY` - Turkish Lira
	// * `TRL` - Turkish Lira (1922–2005)
	// * `TMT` - Turkmenistani Manat
	// * `TMM` - Turkmenistani Manat (1993–2009)
	// * `USD` - US Dollar
	// * `USN` - US Dollar (Next day)
	// * `USS` - US Dollar (Same day)
	// * `UGX` - Ugandan Shilling
	// * `UGS` - Ugandan Shilling (1966–1987)
	// * `UAH` - Ukrainian Hryvnia
	// * `UAK` - Ukrainian Karbovanets
	// * `AED` - United Arab Emirates Dirham
	// * `UYW` - Uruguayan Nominal Wage Index Unit
	// * `UYU` - Uruguayan Peso
	// * `UYP` - Uruguayan Peso (1975–1993)
	// * `UYI` - Uruguayan Peso (Indexed Units)
	// * `UZS` - Uzbekistani Som
	// * `VUV` - Vanuatu Vatu
	// * `VES` - Venezuelan Bolívar
	// * `VEB` - Venezuelan Bolívar (1871–2008)
	// * `VEF` - Venezuelan Bolívar (2008–2018)
	// * `VND` - Vietnamese Dong
	// * `VNN` - Vietnamese Dong (1978–1985)
	// * `CHE` - WIR Euro
	// * `CHW` - WIR Franc
	// * `XOF` - West African CFA Franc
	// * `YDD` - Yemeni Dinar
	// * `YER` - Yemeni Rial
	// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
	// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
	// * `YUM` - Yugoslavian New Dinar (1994–2002)
	// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
	// * `ZWN` - ZWN
	// * `ZRN` - Zairean New Zaire (1993–1998)
	// * `ZRZ` - Zairean Zaire (1971–1993)
	// * `ZMW` - Zambian Kwacha
	// * `ZMK` - Zambian Kwacha (1968–2012)
	// * `ZWD` - Zimbabwean Dollar (1980–2008)
	// * `ZWR` - Zimbabwean Dollar (2008)
	// * `ZWL` - Zimbabwean Dollar (2009)
	Currency *PurchaseOrderCurrency `json:"currency,omitempty"`
	// The purchase order's exchange rate.
	ExchangeRate       *string                                `json:"exchange_rate,omitempty"`
	LineItems          []*PurchaseOrderLineItem               `json:"line_items,omitempty"`
	TrackingCategories []*PurchaseOrderTrackingCategoriesItem `json:"tracking_categories,omitempty"`
	// When the third party's purchase order note was created.
	RemoteCreatedAt *time.Time `json:"remote_created_at,omitempty"`
	// When the third party's purchase order note was updated.
	RemoteUpdatedAt *time.Time `json:"remote_updated_at,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted *bool `json:"remote_was_deleted,omitempty"`
	// The accounting period that the PurchaseOrder was generated in.
	AccountingPeriod *PurchaseOrderAccountingPeriod `json:"accounting_period,omitempty"`
	Id               *string                        `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId  *string    `json:"remote_id,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt    *time.Time     `json:"modified_at,omitempty"`
	FieldMappings map[string]any `json:"field_mappings,omitempty"`
	RemoteData    []*RemoteData  `json:"remote_data,omitempty"`
}

// The accounting period that the PurchaseOrder was generated in.
type PurchaseOrderAccountingPeriod struct {
	typeName         string
	String           string
	AccountingPeriod *AccountingPeriod
}

func NewPurchaseOrderAccountingPeriodFromString(value string) *PurchaseOrderAccountingPeriod {
	return &PurchaseOrderAccountingPeriod{typeName: "string", String: value}
}

func NewPurchaseOrderAccountingPeriodFromAccountingPeriod(value *AccountingPeriod) *PurchaseOrderAccountingPeriod {
	return &PurchaseOrderAccountingPeriod{typeName: "accountingPeriod", AccountingPeriod: value}
}

func (p *PurchaseOrderAccountingPeriod) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typeName = "string"
		p.String = valueString
		return nil
	}
	valueAccountingPeriod := new(AccountingPeriod)
	if err := json.Unmarshal(data, &valueAccountingPeriod); err == nil {
		p.typeName = "accountingPeriod"
		p.AccountingPeriod = valueAccountingPeriod
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PurchaseOrderAccountingPeriod) MarshalJSON() ([]byte, error) {
	switch p.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return json.Marshal(p.String)
	case "accountingPeriod":
		return json.Marshal(p.AccountingPeriod)
	}
}

type PurchaseOrderAccountingPeriodVisitor interface {
	VisitString(string) error
	VisitAccountingPeriod(*AccountingPeriod) error
}

func (p *PurchaseOrderAccountingPeriod) Accept(visitor PurchaseOrderAccountingPeriodVisitor) error {
	switch p.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return visitor.VisitString(p.String)
	case "accountingPeriod":
		return visitor.VisitAccountingPeriod(p.AccountingPeriod)
	}
}

// The company the purchase order belongs to.
type PurchaseOrderCompany struct {
	typeName    string
	String      string
	CompanyInfo *CompanyInfo
}

func NewPurchaseOrderCompanyFromString(value string) *PurchaseOrderCompany {
	return &PurchaseOrderCompany{typeName: "string", String: value}
}

func NewPurchaseOrderCompanyFromCompanyInfo(value *CompanyInfo) *PurchaseOrderCompany {
	return &PurchaseOrderCompany{typeName: "companyInfo", CompanyInfo: value}
}

func (p *PurchaseOrderCompany) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typeName = "string"
		p.String = valueString
		return nil
	}
	valueCompanyInfo := new(CompanyInfo)
	if err := json.Unmarshal(data, &valueCompanyInfo); err == nil {
		p.typeName = "companyInfo"
		p.CompanyInfo = valueCompanyInfo
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PurchaseOrderCompany) MarshalJSON() ([]byte, error) {
	switch p.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return json.Marshal(p.String)
	case "companyInfo":
		return json.Marshal(p.CompanyInfo)
	}
}

type PurchaseOrderCompanyVisitor interface {
	VisitString(string) error
	VisitCompanyInfo(*CompanyInfo) error
}

func (p *PurchaseOrderCompany) Accept(visitor PurchaseOrderCompanyVisitor) error {
	switch p.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return visitor.VisitString(p.String)
	case "companyInfo":
		return visitor.VisitCompanyInfo(p.CompanyInfo)
	}
}

// The purchase order's currency.
//
// * `XUA` - ADB Unit of Account
// * `AFN` - Afghan Afghani
// * `AFA` - Afghan Afghani (1927–2002)
// * `ALL` - Albanian Lek
// * `ALK` - Albanian Lek (1946–1965)
// * `DZD` - Algerian Dinar
// * `ADP` - Andorran Peseta
// * `AOA` - Angolan Kwanza
// * `AOK` - Angolan Kwanza (1977–1991)
// * `AON` - Angolan New Kwanza (1990–2000)
// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
// * `ARA` - Argentine Austral
// * `ARS` - Argentine Peso
// * `ARM` - Argentine Peso (1881–1970)
// * `ARP` - Argentine Peso (1983–1985)
// * `ARL` - Argentine Peso Ley (1970–1983)
// * `AMD` - Armenian Dram
// * `AWG` - Aruban Florin
// * `AUD` - Australian Dollar
// * `ATS` - Austrian Schilling
// * `AZN` - Azerbaijani Manat
// * `AZM` - Azerbaijani Manat (1993–2006)
// * `BSD` - Bahamian Dollar
// * `BHD` - Bahraini Dinar
// * `BDT` - Bangladeshi Taka
// * `BBD` - Barbadian Dollar
// * `BYN` - Belarusian Ruble
// * `BYB` - Belarusian Ruble (1994–1999)
// * `BYR` - Belarusian Ruble (2000–2016)
// * `BEF` - Belgian Franc
// * `BEC` - Belgian Franc (convertible)
// * `BEL` - Belgian Franc (financial)
// * `BZD` - Belize Dollar
// * `BMD` - Bermudan Dollar
// * `BTN` - Bhutanese Ngultrum
// * `BOB` - Bolivian Boliviano
// * `BOL` - Bolivian Boliviano (1863–1963)
// * `BOV` - Bolivian Mvdol
// * `BOP` - Bolivian Peso
// * `BAM` - Bosnia-Herzegovina Convertible Mark
// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
// * `BWP` - Botswanan Pula
// * `BRC` - Brazilian Cruzado (1986–1989)
// * `BRZ` - Brazilian Cruzeiro (1942–1967)
// * `BRE` - Brazilian Cruzeiro (1990–1993)
// * `BRR` - Brazilian Cruzeiro (1993–1994)
// * `BRN` - Brazilian New Cruzado (1989–1990)
// * `BRB` - Brazilian New Cruzeiro (1967–1986)
// * `BRL` - Brazilian Real
// * `GBP` - British Pound
// * `BND` - Brunei Dollar
// * `BGL` - Bulgarian Hard Lev
// * `BGN` - Bulgarian Lev
// * `BGO` - Bulgarian Lev (1879–1952)
// * `BGM` - Bulgarian Socialist Lev
// * `BUK` - Burmese Kyat
// * `BIF` - Burundian Franc
// * `XPF` - CFP Franc
// * `KHR` - Cambodian Riel
// * `CAD` - Canadian Dollar
// * `CVE` - Cape Verdean Escudo
// * `KYD` - Cayman Islands Dollar
// * `XAF` - Central African CFA Franc
// * `CLE` - Chilean Escudo
// * `CLP` - Chilean Peso
// * `CLF` - Chilean Unit of Account (UF)
// * `CNX` - Chinese People’s Bank Dollar
// * `CNY` - Chinese Yuan
// * `CNH` - Chinese Yuan (offshore)
// * `COP` - Colombian Peso
// * `COU` - Colombian Real Value Unit
// * `KMF` - Comorian Franc
// * `CDF` - Congolese Franc
// * `CRC` - Costa Rican Colón
// * `HRD` - Croatian Dinar
// * `HRK` - Croatian Kuna
// * `CUC` - Cuban Convertible Peso
// * `CUP` - Cuban Peso
// * `CYP` - Cypriot Pound
// * `CZK` - Czech Koruna
// * `CSK` - Czechoslovak Hard Koruna
// * `DKK` - Danish Krone
// * `DJF` - Djiboutian Franc
// * `DOP` - Dominican Peso
// * `NLG` - Dutch Guilder
// * `XCD` - East Caribbean Dollar
// * `DDM` - East German Mark
// * `ECS` - Ecuadorian Sucre
// * `ECV` - Ecuadorian Unit of Constant Value
// * `EGP` - Egyptian Pound
// * `GQE` - Equatorial Guinean Ekwele
// * `ERN` - Eritrean Nakfa
// * `EEK` - Estonian Kroon
// * `ETB` - Ethiopian Birr
// * `EUR` - Euro
// * `XBA` - European Composite Unit
// * `XEU` - European Currency Unit
// * `XBB` - European Monetary Unit
// * `XBC` - European Unit of Account (XBC)
// * `XBD` - European Unit of Account (XBD)
// * `FKP` - Falkland Islands Pound
// * `FJD` - Fijian Dollar
// * `FIM` - Finnish Markka
// * `FRF` - French Franc
// * `XFO` - French Gold Franc
// * `XFU` - French UIC-Franc
// * `GMD` - Gambian Dalasi
// * `GEK` - Georgian Kupon Larit
// * `GEL` - Georgian Lari
// * `DEM` - German Mark
// * `GHS` - Ghanaian Cedi
// * `GHC` - Ghanaian Cedi (1979–2007)
// * `GIP` - Gibraltar Pound
// * `XAU` - Gold
// * `GRD` - Greek Drachma
// * `GTQ` - Guatemalan Quetzal
// * `GWP` - Guinea-Bissau Peso
// * `GNF` - Guinean Franc
// * `GNS` - Guinean Syli
// * `GYD` - Guyanaese Dollar
// * `HTG` - Haitian Gourde
// * `HNL` - Honduran Lempira
// * `HKD` - Hong Kong Dollar
// * `HUF` - Hungarian Forint
// * `IMP` - IMP
// * `ISK` - Icelandic Króna
// * `ISJ` - Icelandic Króna (1918–1981)
// * `INR` - Indian Rupee
// * `IDR` - Indonesian Rupiah
// * `IRR` - Iranian Rial
// * `IQD` - Iraqi Dinar
// * `IEP` - Irish Pound
// * `ILS` - Israeli New Shekel
// * `ILP` - Israeli Pound
// * `ILR` - Israeli Shekel (1980–1985)
// * `ITL` - Italian Lira
// * `JMD` - Jamaican Dollar
// * `JPY` - Japanese Yen
// * `JOD` - Jordanian Dinar
// * `KZT` - Kazakhstani Tenge
// * `KES` - Kenyan Shilling
// * `KWD` - Kuwaiti Dinar
// * `KGS` - Kyrgystani Som
// * `LAK` - Laotian Kip
// * `LVL` - Latvian Lats
// * `LVR` - Latvian Ruble
// * `LBP` - Lebanese Pound
// * `LSL` - Lesotho Loti
// * `LRD` - Liberian Dollar
// * `LYD` - Libyan Dinar
// * `LTL` - Lithuanian Litas
// * `LTT` - Lithuanian Talonas
// * `LUL` - Luxembourg Financial Franc
// * `LUC` - Luxembourgian Convertible Franc
// * `LUF` - Luxembourgian Franc
// * `MOP` - Macanese Pataca
// * `MKD` - Macedonian Denar
// * `MKN` - Macedonian Denar (1992–1993)
// * `MGA` - Malagasy Ariary
// * `MGF` - Malagasy Franc
// * `MWK` - Malawian Kwacha
// * `MYR` - Malaysian Ringgit
// * `MVR` - Maldivian Rufiyaa
// * `MVP` - Maldivian Rupee (1947–1981)
// * `MLF` - Malian Franc
// * `MTL` - Maltese Lira
// * `MTP` - Maltese Pound
// * `MRU` - Mauritanian Ouguiya
// * `MRO` - Mauritanian Ouguiya (1973–2017)
// * `MUR` - Mauritian Rupee
// * `MXV` - Mexican Investment Unit
// * `MXN` - Mexican Peso
// * `MXP` - Mexican Silver Peso (1861–1992)
// * `MDC` - Moldovan Cupon
// * `MDL` - Moldovan Leu
// * `MCF` - Monegasque Franc
// * `MNT` - Mongolian Tugrik
// * `MAD` - Moroccan Dirham
// * `MAF` - Moroccan Franc
// * `MZE` - Mozambican Escudo
// * `MZN` - Mozambican Metical
// * `MZM` - Mozambican Metical (1980–2006)
// * `MMK` - Myanmar Kyat
// * `NAD` - Namibian Dollar
// * `NPR` - Nepalese Rupee
// * `ANG` - Netherlands Antillean Guilder
// * `TWD` - New Taiwan Dollar
// * `NZD` - New Zealand Dollar
// * `NIO` - Nicaraguan Córdoba
// * `NIC` - Nicaraguan Córdoba (1988–1991)
// * `NGN` - Nigerian Naira
// * `KPW` - North Korean Won
// * `NOK` - Norwegian Krone
// * `OMR` - Omani Rial
// * `PKR` - Pakistani Rupee
// * `XPD` - Palladium
// * `PAB` - Panamanian Balboa
// * `PGK` - Papua New Guinean Kina
// * `PYG` - Paraguayan Guarani
// * `PEI` - Peruvian Inti
// * `PEN` - Peruvian Sol
// * `PES` - Peruvian Sol (1863–1965)
// * `PHP` - Philippine Peso
// * `XPT` - Platinum
// * `PLN` - Polish Zloty
// * `PLZ` - Polish Zloty (1950–1995)
// * `PTE` - Portuguese Escudo
// * `GWE` - Portuguese Guinea Escudo
// * `QAR` - Qatari Rial
// * `XRE` - RINET Funds
// * `RHD` - Rhodesian Dollar
// * `RON` - Romanian Leu
// * `ROL` - Romanian Leu (1952–2006)
// * `RUB` - Russian Ruble
// * `RUR` - Russian Ruble (1991–1998)
// * `RWF` - Rwandan Franc
// * `SVC` - Salvadoran Colón
// * `WST` - Samoan Tala
// * `SAR` - Saudi Riyal
// * `RSD` - Serbian Dinar
// * `CSD` - Serbian Dinar (2002–2006)
// * `SCR` - Seychellois Rupee
// * `SLL` - Sierra Leonean Leone
// * `XAG` - Silver
// * `SGD` - Singapore Dollar
// * `SKK` - Slovak Koruna
// * `SIT` - Slovenian Tolar
// * `SBD` - Solomon Islands Dollar
// * `SOS` - Somali Shilling
// * `ZAR` - South African Rand
// * `ZAL` - South African Rand (financial)
// * `KRH` - South Korean Hwan (1953–1962)
// * `KRW` - South Korean Won
// * `KRO` - South Korean Won (1945–1953)
// * `SSP` - South Sudanese Pound
// * `SUR` - Soviet Rouble
// * `ESP` - Spanish Peseta
// * `ESA` - Spanish Peseta (A account)
// * `ESB` - Spanish Peseta (convertible account)
// * `XDR` - Special Drawing Rights
// * `LKR` - Sri Lankan Rupee
// * `SHP` - St. Helena Pound
// * `XSU` - Sucre
// * `SDD` - Sudanese Dinar (1992–2007)
// * `SDG` - Sudanese Pound
// * `SDP` - Sudanese Pound (1957–1998)
// * `SRD` - Surinamese Dollar
// * `SRG` - Surinamese Guilder
// * `SZL` - Swazi Lilangeni
// * `SEK` - Swedish Krona
// * `CHF` - Swiss Franc
// * `SYP` - Syrian Pound
// * `STN` - São Tomé & Príncipe Dobra
// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
// * `TVD` - TVD
// * `TJR` - Tajikistani Ruble
// * `TJS` - Tajikistani Somoni
// * `TZS` - Tanzanian Shilling
// * `XTS` - Testing Currency Code
// * `THB` - Thai Baht
// * `XXX` - The codes assigned for transactions where no currency is involved
// * `TPE` - Timorese Escudo
// * `TOP` - Tongan Paʻanga
// * `TTD` - Trinidad & Tobago Dollar
// * `TND` - Tunisian Dinar
// * `TRY` - Turkish Lira
// * `TRL` - Turkish Lira (1922–2005)
// * `TMT` - Turkmenistani Manat
// * `TMM` - Turkmenistani Manat (1993–2009)
// * `USD` - US Dollar
// * `USN` - US Dollar (Next day)
// * `USS` - US Dollar (Same day)
// * `UGX` - Ugandan Shilling
// * `UGS` - Ugandan Shilling (1966–1987)
// * `UAH` - Ukrainian Hryvnia
// * `UAK` - Ukrainian Karbovanets
// * `AED` - United Arab Emirates Dirham
// * `UYW` - Uruguayan Nominal Wage Index Unit
// * `UYU` - Uruguayan Peso
// * `UYP` - Uruguayan Peso (1975–1993)
// * `UYI` - Uruguayan Peso (Indexed Units)
// * `UZS` - Uzbekistani Som
// * `VUV` - Vanuatu Vatu
// * `VES` - Venezuelan Bolívar
// * `VEB` - Venezuelan Bolívar (1871–2008)
// * `VEF` - Venezuelan Bolívar (2008–2018)
// * `VND` - Vietnamese Dong
// * `VNN` - Vietnamese Dong (1978–1985)
// * `CHE` - WIR Euro
// * `CHW` - WIR Franc
// * `XOF` - West African CFA Franc
// * `YDD` - Yemeni Dinar
// * `YER` - Yemeni Rial
// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
// * `YUM` - Yugoslavian New Dinar (1994–2002)
// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
// * `ZWN` - ZWN
// * `ZRN` - Zairean New Zaire (1993–1998)
// * `ZRZ` - Zairean Zaire (1971–1993)
// * `ZMW` - Zambian Kwacha
// * `ZMK` - Zambian Kwacha (1968–2012)
// * `ZWD` - Zimbabwean Dollar (1980–2008)
// * `ZWR` - Zimbabwean Dollar (2008)
// * `ZWL` - Zimbabwean Dollar (2009)
type PurchaseOrderCurrency struct {
	typeName     string
	CurrencyEnum CurrencyEnum
	String       string
}

func NewPurchaseOrderCurrencyFromCurrencyEnum(value CurrencyEnum) *PurchaseOrderCurrency {
	return &PurchaseOrderCurrency{typeName: "currencyEnum", CurrencyEnum: value}
}

func NewPurchaseOrderCurrencyFromString(value string) *PurchaseOrderCurrency {
	return &PurchaseOrderCurrency{typeName: "string", String: value}
}

func (p *PurchaseOrderCurrency) UnmarshalJSON(data []byte) error {
	var valueCurrencyEnum CurrencyEnum
	if err := json.Unmarshal(data, &valueCurrencyEnum); err == nil {
		p.typeName = "currencyEnum"
		p.CurrencyEnum = valueCurrencyEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typeName = "string"
		p.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PurchaseOrderCurrency) MarshalJSON() ([]byte, error) {
	switch p.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "currencyEnum":
		return json.Marshal(p.CurrencyEnum)
	case "string":
		return json.Marshal(p.String)
	}
}

type PurchaseOrderCurrencyVisitor interface {
	VisitCurrencyEnum(CurrencyEnum) error
	VisitString(string) error
}

func (p *PurchaseOrderCurrency) Accept(visitor PurchaseOrderCurrencyVisitor) error {
	switch p.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "currencyEnum":
		return visitor.VisitCurrencyEnum(p.CurrencyEnum)
	case "string":
		return visitor.VisitString(p.String)
	}
}

// The purchase order's delivery address.
type PurchaseOrderDeliveryAddress struct {
	typeName string
	String   string
	Address  *Address
}

func NewPurchaseOrderDeliveryAddressFromString(value string) *PurchaseOrderDeliveryAddress {
	return &PurchaseOrderDeliveryAddress{typeName: "string", String: value}
}

func NewPurchaseOrderDeliveryAddressFromAddress(value *Address) *PurchaseOrderDeliveryAddress {
	return &PurchaseOrderDeliveryAddress{typeName: "address", Address: value}
}

func (p *PurchaseOrderDeliveryAddress) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typeName = "string"
		p.String = valueString
		return nil
	}
	valueAddress := new(Address)
	if err := json.Unmarshal(data, &valueAddress); err == nil {
		p.typeName = "address"
		p.Address = valueAddress
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PurchaseOrderDeliveryAddress) MarshalJSON() ([]byte, error) {
	switch p.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return json.Marshal(p.String)
	case "address":
		return json.Marshal(p.Address)
	}
}

type PurchaseOrderDeliveryAddressVisitor interface {
	VisitString(string) error
	VisitAddress(*Address) error
}

func (p *PurchaseOrderDeliveryAddress) Accept(visitor PurchaseOrderDeliveryAddressVisitor) error {
	switch p.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return visitor.VisitString(p.String)
	case "address":
		return visitor.VisitAddress(p.Address)
	}
}

// # The PurchaseOrderLineItem Object
// ### Description
// The `PurchaseOrderLineItem` object is used to represent a purchase order's line item.
//
// ### Usage Example
// Fetch from the `GET PurchaseOrder` endpoint and view a company's purchase orders.
type PurchaseOrderLineItem struct {
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// A description of the good being purchased.
	Description *string `json:"description,omitempty"`
	// The line item's unit price.
	UnitPrice *float64 `json:"unit_price,omitempty"`
	// The line item's quantity.
	Quantity *float64                   `json:"quantity,omitempty"`
	Item     *PurchaseOrderLineItemItem `json:"item,omitempty"`
	// The purchase order line item's account.
	Account *string `json:"account,omitempty"`
	// The purchase order line item's associated tracking category.
	TrackingCategory *string `json:"tracking_category,omitempty"`
	// The purchase order line item's associated tracking categories.
	TrackingCategories []string `json:"tracking_categories,omitempty"`
	// The purchase order line item's tax amount.
	TaxAmount *string `json:"tax_amount,omitempty"`
	// The purchase order line item's total amount.
	TotalLineAmount *string `json:"total_line_amount,omitempty"`
	// The purchase order line item's currency.
	//
	// * `XUA` - ADB Unit of Account
	// * `AFN` - Afghan Afghani
	// * `AFA` - Afghan Afghani (1927–2002)
	// * `ALL` - Albanian Lek
	// * `ALK` - Albanian Lek (1946–1965)
	// * `DZD` - Algerian Dinar
	// * `ADP` - Andorran Peseta
	// * `AOA` - Angolan Kwanza
	// * `AOK` - Angolan Kwanza (1977–1991)
	// * `AON` - Angolan New Kwanza (1990–2000)
	// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
	// * `ARA` - Argentine Austral
	// * `ARS` - Argentine Peso
	// * `ARM` - Argentine Peso (1881–1970)
	// * `ARP` - Argentine Peso (1983–1985)
	// * `ARL` - Argentine Peso Ley (1970–1983)
	// * `AMD` - Armenian Dram
	// * `AWG` - Aruban Florin
	// * `AUD` - Australian Dollar
	// * `ATS` - Austrian Schilling
	// * `AZN` - Azerbaijani Manat
	// * `AZM` - Azerbaijani Manat (1993–2006)
	// * `BSD` - Bahamian Dollar
	// * `BHD` - Bahraini Dinar
	// * `BDT` - Bangladeshi Taka
	// * `BBD` - Barbadian Dollar
	// * `BYN` - Belarusian Ruble
	// * `BYB` - Belarusian Ruble (1994–1999)
	// * `BYR` - Belarusian Ruble (2000–2016)
	// * `BEF` - Belgian Franc
	// * `BEC` - Belgian Franc (convertible)
	// * `BEL` - Belgian Franc (financial)
	// * `BZD` - Belize Dollar
	// * `BMD` - Bermudan Dollar
	// * `BTN` - Bhutanese Ngultrum
	// * `BOB` - Bolivian Boliviano
	// * `BOL` - Bolivian Boliviano (1863–1963)
	// * `BOV` - Bolivian Mvdol
	// * `BOP` - Bolivian Peso
	// * `BAM` - Bosnia-Herzegovina Convertible Mark
	// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
	// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
	// * `BWP` - Botswanan Pula
	// * `BRC` - Brazilian Cruzado (1986–1989)
	// * `BRZ` - Brazilian Cruzeiro (1942–1967)
	// * `BRE` - Brazilian Cruzeiro (1990–1993)
	// * `BRR` - Brazilian Cruzeiro (1993–1994)
	// * `BRN` - Brazilian New Cruzado (1989–1990)
	// * `BRB` - Brazilian New Cruzeiro (1967–1986)
	// * `BRL` - Brazilian Real
	// * `GBP` - British Pound
	// * `BND` - Brunei Dollar
	// * `BGL` - Bulgarian Hard Lev
	// * `BGN` - Bulgarian Lev
	// * `BGO` - Bulgarian Lev (1879–1952)
	// * `BGM` - Bulgarian Socialist Lev
	// * `BUK` - Burmese Kyat
	// * `BIF` - Burundian Franc
	// * `XPF` - CFP Franc
	// * `KHR` - Cambodian Riel
	// * `CAD` - Canadian Dollar
	// * `CVE` - Cape Verdean Escudo
	// * `KYD` - Cayman Islands Dollar
	// * `XAF` - Central African CFA Franc
	// * `CLE` - Chilean Escudo
	// * `CLP` - Chilean Peso
	// * `CLF` - Chilean Unit of Account (UF)
	// * `CNX` - Chinese People’s Bank Dollar
	// * `CNY` - Chinese Yuan
	// * `CNH` - Chinese Yuan (offshore)
	// * `COP` - Colombian Peso
	// * `COU` - Colombian Real Value Unit
	// * `KMF` - Comorian Franc
	// * `CDF` - Congolese Franc
	// * `CRC` - Costa Rican Colón
	// * `HRD` - Croatian Dinar
	// * `HRK` - Croatian Kuna
	// * `CUC` - Cuban Convertible Peso
	// * `CUP` - Cuban Peso
	// * `CYP` - Cypriot Pound
	// * `CZK` - Czech Koruna
	// * `CSK` - Czechoslovak Hard Koruna
	// * `DKK` - Danish Krone
	// * `DJF` - Djiboutian Franc
	// * `DOP` - Dominican Peso
	// * `NLG` - Dutch Guilder
	// * `XCD` - East Caribbean Dollar
	// * `DDM` - East German Mark
	// * `ECS` - Ecuadorian Sucre
	// * `ECV` - Ecuadorian Unit of Constant Value
	// * `EGP` - Egyptian Pound
	// * `GQE` - Equatorial Guinean Ekwele
	// * `ERN` - Eritrean Nakfa
	// * `EEK` - Estonian Kroon
	// * `ETB` - Ethiopian Birr
	// * `EUR` - Euro
	// * `XBA` - European Composite Unit
	// * `XEU` - European Currency Unit
	// * `XBB` - European Monetary Unit
	// * `XBC` - European Unit of Account (XBC)
	// * `XBD` - European Unit of Account (XBD)
	// * `FKP` - Falkland Islands Pound
	// * `FJD` - Fijian Dollar
	// * `FIM` - Finnish Markka
	// * `FRF` - French Franc
	// * `XFO` - French Gold Franc
	// * `XFU` - French UIC-Franc
	// * `GMD` - Gambian Dalasi
	// * `GEK` - Georgian Kupon Larit
	// * `GEL` - Georgian Lari
	// * `DEM` - German Mark
	// * `GHS` - Ghanaian Cedi
	// * `GHC` - Ghanaian Cedi (1979–2007)
	// * `GIP` - Gibraltar Pound
	// * `XAU` - Gold
	// * `GRD` - Greek Drachma
	// * `GTQ` - Guatemalan Quetzal
	// * `GWP` - Guinea-Bissau Peso
	// * `GNF` - Guinean Franc
	// * `GNS` - Guinean Syli
	// * `GYD` - Guyanaese Dollar
	// * `HTG` - Haitian Gourde
	// * `HNL` - Honduran Lempira
	// * `HKD` - Hong Kong Dollar
	// * `HUF` - Hungarian Forint
	// * `IMP` - IMP
	// * `ISK` - Icelandic Króna
	// * `ISJ` - Icelandic Króna (1918–1981)
	// * `INR` - Indian Rupee
	// * `IDR` - Indonesian Rupiah
	// * `IRR` - Iranian Rial
	// * `IQD` - Iraqi Dinar
	// * `IEP` - Irish Pound
	// * `ILS` - Israeli New Shekel
	// * `ILP` - Israeli Pound
	// * `ILR` - Israeli Shekel (1980–1985)
	// * `ITL` - Italian Lira
	// * `JMD` - Jamaican Dollar
	// * `JPY` - Japanese Yen
	// * `JOD` - Jordanian Dinar
	// * `KZT` - Kazakhstani Tenge
	// * `KES` - Kenyan Shilling
	// * `KWD` - Kuwaiti Dinar
	// * `KGS` - Kyrgystani Som
	// * `LAK` - Laotian Kip
	// * `LVL` - Latvian Lats
	// * `LVR` - Latvian Ruble
	// * `LBP` - Lebanese Pound
	// * `LSL` - Lesotho Loti
	// * `LRD` - Liberian Dollar
	// * `LYD` - Libyan Dinar
	// * `LTL` - Lithuanian Litas
	// * `LTT` - Lithuanian Talonas
	// * `LUL` - Luxembourg Financial Franc
	// * `LUC` - Luxembourgian Convertible Franc
	// * `LUF` - Luxembourgian Franc
	// * `MOP` - Macanese Pataca
	// * `MKD` - Macedonian Denar
	// * `MKN` - Macedonian Denar (1992–1993)
	// * `MGA` - Malagasy Ariary
	// * `MGF` - Malagasy Franc
	// * `MWK` - Malawian Kwacha
	// * `MYR` - Malaysian Ringgit
	// * `MVR` - Maldivian Rufiyaa
	// * `MVP` - Maldivian Rupee (1947–1981)
	// * `MLF` - Malian Franc
	// * `MTL` - Maltese Lira
	// * `MTP` - Maltese Pound
	// * `MRU` - Mauritanian Ouguiya
	// * `MRO` - Mauritanian Ouguiya (1973–2017)
	// * `MUR` - Mauritian Rupee
	// * `MXV` - Mexican Investment Unit
	// * `MXN` - Mexican Peso
	// * `MXP` - Mexican Silver Peso (1861–1992)
	// * `MDC` - Moldovan Cupon
	// * `MDL` - Moldovan Leu
	// * `MCF` - Monegasque Franc
	// * `MNT` - Mongolian Tugrik
	// * `MAD` - Moroccan Dirham
	// * `MAF` - Moroccan Franc
	// * `MZE` - Mozambican Escudo
	// * `MZN` - Mozambican Metical
	// * `MZM` - Mozambican Metical (1980–2006)
	// * `MMK` - Myanmar Kyat
	// * `NAD` - Namibian Dollar
	// * `NPR` - Nepalese Rupee
	// * `ANG` - Netherlands Antillean Guilder
	// * `TWD` - New Taiwan Dollar
	// * `NZD` - New Zealand Dollar
	// * `NIO` - Nicaraguan Córdoba
	// * `NIC` - Nicaraguan Córdoba (1988–1991)
	// * `NGN` - Nigerian Naira
	// * `KPW` - North Korean Won
	// * `NOK` - Norwegian Krone
	// * `OMR` - Omani Rial
	// * `PKR` - Pakistani Rupee
	// * `XPD` - Palladium
	// * `PAB` - Panamanian Balboa
	// * `PGK` - Papua New Guinean Kina
	// * `PYG` - Paraguayan Guarani
	// * `PEI` - Peruvian Inti
	// * `PEN` - Peruvian Sol
	// * `PES` - Peruvian Sol (1863–1965)
	// * `PHP` - Philippine Peso
	// * `XPT` - Platinum
	// * `PLN` - Polish Zloty
	// * `PLZ` - Polish Zloty (1950–1995)
	// * `PTE` - Portuguese Escudo
	// * `GWE` - Portuguese Guinea Escudo
	// * `QAR` - Qatari Rial
	// * `XRE` - RINET Funds
	// * `RHD` - Rhodesian Dollar
	// * `RON` - Romanian Leu
	// * `ROL` - Romanian Leu (1952–2006)
	// * `RUB` - Russian Ruble
	// * `RUR` - Russian Ruble (1991–1998)
	// * `RWF` - Rwandan Franc
	// * `SVC` - Salvadoran Colón
	// * `WST` - Samoan Tala
	// * `SAR` - Saudi Riyal
	// * `RSD` - Serbian Dinar
	// * `CSD` - Serbian Dinar (2002–2006)
	// * `SCR` - Seychellois Rupee
	// * `SLL` - Sierra Leonean Leone
	// * `XAG` - Silver
	// * `SGD` - Singapore Dollar
	// * `SKK` - Slovak Koruna
	// * `SIT` - Slovenian Tolar
	// * `SBD` - Solomon Islands Dollar
	// * `SOS` - Somali Shilling
	// * `ZAR` - South African Rand
	// * `ZAL` - South African Rand (financial)
	// * `KRH` - South Korean Hwan (1953–1962)
	// * `KRW` - South Korean Won
	// * `KRO` - South Korean Won (1945–1953)
	// * `SSP` - South Sudanese Pound
	// * `SUR` - Soviet Rouble
	// * `ESP` - Spanish Peseta
	// * `ESA` - Spanish Peseta (A account)
	// * `ESB` - Spanish Peseta (convertible account)
	// * `XDR` - Special Drawing Rights
	// * `LKR` - Sri Lankan Rupee
	// * `SHP` - St. Helena Pound
	// * `XSU` - Sucre
	// * `SDD` - Sudanese Dinar (1992–2007)
	// * `SDG` - Sudanese Pound
	// * `SDP` - Sudanese Pound (1957–1998)
	// * `SRD` - Surinamese Dollar
	// * `SRG` - Surinamese Guilder
	// * `SZL` - Swazi Lilangeni
	// * `SEK` - Swedish Krona
	// * `CHF` - Swiss Franc
	// * `SYP` - Syrian Pound
	// * `STN` - São Tomé & Príncipe Dobra
	// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
	// * `TVD` - TVD
	// * `TJR` - Tajikistani Ruble
	// * `TJS` - Tajikistani Somoni
	// * `TZS` - Tanzanian Shilling
	// * `XTS` - Testing Currency Code
	// * `THB` - Thai Baht
	// * `XXX` - The codes assigned for transactions where no currency is involved
	// * `TPE` - Timorese Escudo
	// * `TOP` - Tongan Paʻanga
	// * `TTD` - Trinidad & Tobago Dollar
	// * `TND` - Tunisian Dinar
	// * `TRY` - Turkish Lira
	// * `TRL` - Turkish Lira (1922–2005)
	// * `TMT` - Turkmenistani Manat
	// * `TMM` - Turkmenistani Manat (1993–2009)
	// * `USD` - US Dollar
	// * `USN` - US Dollar (Next day)
	// * `USS` - US Dollar (Same day)
	// * `UGX` - Ugandan Shilling
	// * `UGS` - Ugandan Shilling (1966–1987)
	// * `UAH` - Ukrainian Hryvnia
	// * `UAK` - Ukrainian Karbovanets
	// * `AED` - United Arab Emirates Dirham
	// * `UYW` - Uruguayan Nominal Wage Index Unit
	// * `UYU` - Uruguayan Peso
	// * `UYP` - Uruguayan Peso (1975–1993)
	// * `UYI` - Uruguayan Peso (Indexed Units)
	// * `UZS` - Uzbekistani Som
	// * `VUV` - Vanuatu Vatu
	// * `VES` - Venezuelan Bolívar
	// * `VEB` - Venezuelan Bolívar (1871–2008)
	// * `VEF` - Venezuelan Bolívar (2008–2018)
	// * `VND` - Vietnamese Dong
	// * `VNN` - Vietnamese Dong (1978–1985)
	// * `CHE` - WIR Euro
	// * `CHW` - WIR Franc
	// * `XOF` - West African CFA Franc
	// * `YDD` - Yemeni Dinar
	// * `YER` - Yemeni Rial
	// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
	// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
	// * `YUM` - Yugoslavian New Dinar (1994–2002)
	// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
	// * `ZWN` - ZWN
	// * `ZRN` - Zairean New Zaire (1993–1998)
	// * `ZRZ` - Zairean Zaire (1971–1993)
	// * `ZMW` - Zambian Kwacha
	// * `ZMK` - Zambian Kwacha (1968–2012)
	// * `ZWD` - Zimbabwean Dollar (1980–2008)
	// * `ZWR` - Zimbabwean Dollar (2008)
	// * `ZWL` - Zimbabwean Dollar (2009)
	Currency *PurchaseOrderLineItemCurrency `json:"currency,omitempty"`
	// The purchase order line item's exchange rate.
	ExchangeRate *string `json:"exchange_rate,omitempty"`
	// The company the purchase order line item belongs to.
	Company *string `json:"company,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted *bool      `json:"remote_was_deleted,omitempty"`
	Id               *string    `json:"id,omitempty"`
	CreatedAt        *time.Time `json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
}

// The purchase order line item's currency.
//
// * `XUA` - ADB Unit of Account
// * `AFN` - Afghan Afghani
// * `AFA` - Afghan Afghani (1927–2002)
// * `ALL` - Albanian Lek
// * `ALK` - Albanian Lek (1946–1965)
// * `DZD` - Algerian Dinar
// * `ADP` - Andorran Peseta
// * `AOA` - Angolan Kwanza
// * `AOK` - Angolan Kwanza (1977–1991)
// * `AON` - Angolan New Kwanza (1990–2000)
// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
// * `ARA` - Argentine Austral
// * `ARS` - Argentine Peso
// * `ARM` - Argentine Peso (1881–1970)
// * `ARP` - Argentine Peso (1983–1985)
// * `ARL` - Argentine Peso Ley (1970–1983)
// * `AMD` - Armenian Dram
// * `AWG` - Aruban Florin
// * `AUD` - Australian Dollar
// * `ATS` - Austrian Schilling
// * `AZN` - Azerbaijani Manat
// * `AZM` - Azerbaijani Manat (1993–2006)
// * `BSD` - Bahamian Dollar
// * `BHD` - Bahraini Dinar
// * `BDT` - Bangladeshi Taka
// * `BBD` - Barbadian Dollar
// * `BYN` - Belarusian Ruble
// * `BYB` - Belarusian Ruble (1994–1999)
// * `BYR` - Belarusian Ruble (2000–2016)
// * `BEF` - Belgian Franc
// * `BEC` - Belgian Franc (convertible)
// * `BEL` - Belgian Franc (financial)
// * `BZD` - Belize Dollar
// * `BMD` - Bermudan Dollar
// * `BTN` - Bhutanese Ngultrum
// * `BOB` - Bolivian Boliviano
// * `BOL` - Bolivian Boliviano (1863–1963)
// * `BOV` - Bolivian Mvdol
// * `BOP` - Bolivian Peso
// * `BAM` - Bosnia-Herzegovina Convertible Mark
// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
// * `BWP` - Botswanan Pula
// * `BRC` - Brazilian Cruzado (1986–1989)
// * `BRZ` - Brazilian Cruzeiro (1942–1967)
// * `BRE` - Brazilian Cruzeiro (1990–1993)
// * `BRR` - Brazilian Cruzeiro (1993–1994)
// * `BRN` - Brazilian New Cruzado (1989–1990)
// * `BRB` - Brazilian New Cruzeiro (1967–1986)
// * `BRL` - Brazilian Real
// * `GBP` - British Pound
// * `BND` - Brunei Dollar
// * `BGL` - Bulgarian Hard Lev
// * `BGN` - Bulgarian Lev
// * `BGO` - Bulgarian Lev (1879–1952)
// * `BGM` - Bulgarian Socialist Lev
// * `BUK` - Burmese Kyat
// * `BIF` - Burundian Franc
// * `XPF` - CFP Franc
// * `KHR` - Cambodian Riel
// * `CAD` - Canadian Dollar
// * `CVE` - Cape Verdean Escudo
// * `KYD` - Cayman Islands Dollar
// * `XAF` - Central African CFA Franc
// * `CLE` - Chilean Escudo
// * `CLP` - Chilean Peso
// * `CLF` - Chilean Unit of Account (UF)
// * `CNX` - Chinese People’s Bank Dollar
// * `CNY` - Chinese Yuan
// * `CNH` - Chinese Yuan (offshore)
// * `COP` - Colombian Peso
// * `COU` - Colombian Real Value Unit
// * `KMF` - Comorian Franc
// * `CDF` - Congolese Franc
// * `CRC` - Costa Rican Colón
// * `HRD` - Croatian Dinar
// * `HRK` - Croatian Kuna
// * `CUC` - Cuban Convertible Peso
// * `CUP` - Cuban Peso
// * `CYP` - Cypriot Pound
// * `CZK` - Czech Koruna
// * `CSK` - Czechoslovak Hard Koruna
// * `DKK` - Danish Krone
// * `DJF` - Djiboutian Franc
// * `DOP` - Dominican Peso
// * `NLG` - Dutch Guilder
// * `XCD` - East Caribbean Dollar
// * `DDM` - East German Mark
// * `ECS` - Ecuadorian Sucre
// * `ECV` - Ecuadorian Unit of Constant Value
// * `EGP` - Egyptian Pound
// * `GQE` - Equatorial Guinean Ekwele
// * `ERN` - Eritrean Nakfa
// * `EEK` - Estonian Kroon
// * `ETB` - Ethiopian Birr
// * `EUR` - Euro
// * `XBA` - European Composite Unit
// * `XEU` - European Currency Unit
// * `XBB` - European Monetary Unit
// * `XBC` - European Unit of Account (XBC)
// * `XBD` - European Unit of Account (XBD)
// * `FKP` - Falkland Islands Pound
// * `FJD` - Fijian Dollar
// * `FIM` - Finnish Markka
// * `FRF` - French Franc
// * `XFO` - French Gold Franc
// * `XFU` - French UIC-Franc
// * `GMD` - Gambian Dalasi
// * `GEK` - Georgian Kupon Larit
// * `GEL` - Georgian Lari
// * `DEM` - German Mark
// * `GHS` - Ghanaian Cedi
// * `GHC` - Ghanaian Cedi (1979–2007)
// * `GIP` - Gibraltar Pound
// * `XAU` - Gold
// * `GRD` - Greek Drachma
// * `GTQ` - Guatemalan Quetzal
// * `GWP` - Guinea-Bissau Peso
// * `GNF` - Guinean Franc
// * `GNS` - Guinean Syli
// * `GYD` - Guyanaese Dollar
// * `HTG` - Haitian Gourde
// * `HNL` - Honduran Lempira
// * `HKD` - Hong Kong Dollar
// * `HUF` - Hungarian Forint
// * `IMP` - IMP
// * `ISK` - Icelandic Króna
// * `ISJ` - Icelandic Króna (1918–1981)
// * `INR` - Indian Rupee
// * `IDR` - Indonesian Rupiah
// * `IRR` - Iranian Rial
// * `IQD` - Iraqi Dinar
// * `IEP` - Irish Pound
// * `ILS` - Israeli New Shekel
// * `ILP` - Israeli Pound
// * `ILR` - Israeli Shekel (1980–1985)
// * `ITL` - Italian Lira
// * `JMD` - Jamaican Dollar
// * `JPY` - Japanese Yen
// * `JOD` - Jordanian Dinar
// * `KZT` - Kazakhstani Tenge
// * `KES` - Kenyan Shilling
// * `KWD` - Kuwaiti Dinar
// * `KGS` - Kyrgystani Som
// * `LAK` - Laotian Kip
// * `LVL` - Latvian Lats
// * `LVR` - Latvian Ruble
// * `LBP` - Lebanese Pound
// * `LSL` - Lesotho Loti
// * `LRD` - Liberian Dollar
// * `LYD` - Libyan Dinar
// * `LTL` - Lithuanian Litas
// * `LTT` - Lithuanian Talonas
// * `LUL` - Luxembourg Financial Franc
// * `LUC` - Luxembourgian Convertible Franc
// * `LUF` - Luxembourgian Franc
// * `MOP` - Macanese Pataca
// * `MKD` - Macedonian Denar
// * `MKN` - Macedonian Denar (1992–1993)
// * `MGA` - Malagasy Ariary
// * `MGF` - Malagasy Franc
// * `MWK` - Malawian Kwacha
// * `MYR` - Malaysian Ringgit
// * `MVR` - Maldivian Rufiyaa
// * `MVP` - Maldivian Rupee (1947–1981)
// * `MLF` - Malian Franc
// * `MTL` - Maltese Lira
// * `MTP` - Maltese Pound
// * `MRU` - Mauritanian Ouguiya
// * `MRO` - Mauritanian Ouguiya (1973–2017)
// * `MUR` - Mauritian Rupee
// * `MXV` - Mexican Investment Unit
// * `MXN` - Mexican Peso
// * `MXP` - Mexican Silver Peso (1861–1992)
// * `MDC` - Moldovan Cupon
// * `MDL` - Moldovan Leu
// * `MCF` - Monegasque Franc
// * `MNT` - Mongolian Tugrik
// * `MAD` - Moroccan Dirham
// * `MAF` - Moroccan Franc
// * `MZE` - Mozambican Escudo
// * `MZN` - Mozambican Metical
// * `MZM` - Mozambican Metical (1980–2006)
// * `MMK` - Myanmar Kyat
// * `NAD` - Namibian Dollar
// * `NPR` - Nepalese Rupee
// * `ANG` - Netherlands Antillean Guilder
// * `TWD` - New Taiwan Dollar
// * `NZD` - New Zealand Dollar
// * `NIO` - Nicaraguan Córdoba
// * `NIC` - Nicaraguan Córdoba (1988–1991)
// * `NGN` - Nigerian Naira
// * `KPW` - North Korean Won
// * `NOK` - Norwegian Krone
// * `OMR` - Omani Rial
// * `PKR` - Pakistani Rupee
// * `XPD` - Palladium
// * `PAB` - Panamanian Balboa
// * `PGK` - Papua New Guinean Kina
// * `PYG` - Paraguayan Guarani
// * `PEI` - Peruvian Inti
// * `PEN` - Peruvian Sol
// * `PES` - Peruvian Sol (1863–1965)
// * `PHP` - Philippine Peso
// * `XPT` - Platinum
// * `PLN` - Polish Zloty
// * `PLZ` - Polish Zloty (1950–1995)
// * `PTE` - Portuguese Escudo
// * `GWE` - Portuguese Guinea Escudo
// * `QAR` - Qatari Rial
// * `XRE` - RINET Funds
// * `RHD` - Rhodesian Dollar
// * `RON` - Romanian Leu
// * `ROL` - Romanian Leu (1952–2006)
// * `RUB` - Russian Ruble
// * `RUR` - Russian Ruble (1991–1998)
// * `RWF` - Rwandan Franc
// * `SVC` - Salvadoran Colón
// * `WST` - Samoan Tala
// * `SAR` - Saudi Riyal
// * `RSD` - Serbian Dinar
// * `CSD` - Serbian Dinar (2002–2006)
// * `SCR` - Seychellois Rupee
// * `SLL` - Sierra Leonean Leone
// * `XAG` - Silver
// * `SGD` - Singapore Dollar
// * `SKK` - Slovak Koruna
// * `SIT` - Slovenian Tolar
// * `SBD` - Solomon Islands Dollar
// * `SOS` - Somali Shilling
// * `ZAR` - South African Rand
// * `ZAL` - South African Rand (financial)
// * `KRH` - South Korean Hwan (1953–1962)
// * `KRW` - South Korean Won
// * `KRO` - South Korean Won (1945–1953)
// * `SSP` - South Sudanese Pound
// * `SUR` - Soviet Rouble
// * `ESP` - Spanish Peseta
// * `ESA` - Spanish Peseta (A account)
// * `ESB` - Spanish Peseta (convertible account)
// * `XDR` - Special Drawing Rights
// * `LKR` - Sri Lankan Rupee
// * `SHP` - St. Helena Pound
// * `XSU` - Sucre
// * `SDD` - Sudanese Dinar (1992–2007)
// * `SDG` - Sudanese Pound
// * `SDP` - Sudanese Pound (1957–1998)
// * `SRD` - Surinamese Dollar
// * `SRG` - Surinamese Guilder
// * `SZL` - Swazi Lilangeni
// * `SEK` - Swedish Krona
// * `CHF` - Swiss Franc
// * `SYP` - Syrian Pound
// * `STN` - São Tomé & Príncipe Dobra
// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
// * `TVD` - TVD
// * `TJR` - Tajikistani Ruble
// * `TJS` - Tajikistani Somoni
// * `TZS` - Tanzanian Shilling
// * `XTS` - Testing Currency Code
// * `THB` - Thai Baht
// * `XXX` - The codes assigned for transactions where no currency is involved
// * `TPE` - Timorese Escudo
// * `TOP` - Tongan Paʻanga
// * `TTD` - Trinidad & Tobago Dollar
// * `TND` - Tunisian Dinar
// * `TRY` - Turkish Lira
// * `TRL` - Turkish Lira (1922–2005)
// * `TMT` - Turkmenistani Manat
// * `TMM` - Turkmenistani Manat (1993–2009)
// * `USD` - US Dollar
// * `USN` - US Dollar (Next day)
// * `USS` - US Dollar (Same day)
// * `UGX` - Ugandan Shilling
// * `UGS` - Ugandan Shilling (1966–1987)
// * `UAH` - Ukrainian Hryvnia
// * `UAK` - Ukrainian Karbovanets
// * `AED` - United Arab Emirates Dirham
// * `UYW` - Uruguayan Nominal Wage Index Unit
// * `UYU` - Uruguayan Peso
// * `UYP` - Uruguayan Peso (1975–1993)
// * `UYI` - Uruguayan Peso (Indexed Units)
// * `UZS` - Uzbekistani Som
// * `VUV` - Vanuatu Vatu
// * `VES` - Venezuelan Bolívar
// * `VEB` - Venezuelan Bolívar (1871–2008)
// * `VEF` - Venezuelan Bolívar (2008–2018)
// * `VND` - Vietnamese Dong
// * `VNN` - Vietnamese Dong (1978–1985)
// * `CHE` - WIR Euro
// * `CHW` - WIR Franc
// * `XOF` - West African CFA Franc
// * `YDD` - Yemeni Dinar
// * `YER` - Yemeni Rial
// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
// * `YUM` - Yugoslavian New Dinar (1994–2002)
// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
// * `ZWN` - ZWN
// * `ZRN` - Zairean New Zaire (1993–1998)
// * `ZRZ` - Zairean Zaire (1971–1993)
// * `ZMW` - Zambian Kwacha
// * `ZMK` - Zambian Kwacha (1968–2012)
// * `ZWD` - Zimbabwean Dollar (1980–2008)
// * `ZWR` - Zimbabwean Dollar (2008)
// * `ZWL` - Zimbabwean Dollar (2009)
type PurchaseOrderLineItemCurrency struct {
	typeName     string
	CurrencyEnum CurrencyEnum
	String       string
}

func NewPurchaseOrderLineItemCurrencyFromCurrencyEnum(value CurrencyEnum) *PurchaseOrderLineItemCurrency {
	return &PurchaseOrderLineItemCurrency{typeName: "currencyEnum", CurrencyEnum: value}
}

func NewPurchaseOrderLineItemCurrencyFromString(value string) *PurchaseOrderLineItemCurrency {
	return &PurchaseOrderLineItemCurrency{typeName: "string", String: value}
}

func (p *PurchaseOrderLineItemCurrency) UnmarshalJSON(data []byte) error {
	var valueCurrencyEnum CurrencyEnum
	if err := json.Unmarshal(data, &valueCurrencyEnum); err == nil {
		p.typeName = "currencyEnum"
		p.CurrencyEnum = valueCurrencyEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typeName = "string"
		p.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PurchaseOrderLineItemCurrency) MarshalJSON() ([]byte, error) {
	switch p.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "currencyEnum":
		return json.Marshal(p.CurrencyEnum)
	case "string":
		return json.Marshal(p.String)
	}
}

type PurchaseOrderLineItemCurrencyVisitor interface {
	VisitCurrencyEnum(CurrencyEnum) error
	VisitString(string) error
}

func (p *PurchaseOrderLineItemCurrency) Accept(visitor PurchaseOrderLineItemCurrencyVisitor) error {
	switch p.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "currencyEnum":
		return visitor.VisitCurrencyEnum(p.CurrencyEnum)
	case "string":
		return visitor.VisitString(p.String)
	}
}

type PurchaseOrderLineItemItem struct {
	typeName string
	String   string
	Item     *Item
}

func NewPurchaseOrderLineItemItemFromString(value string) *PurchaseOrderLineItemItem {
	return &PurchaseOrderLineItemItem{typeName: "string", String: value}
}

func NewPurchaseOrderLineItemItemFromItem(value *Item) *PurchaseOrderLineItemItem {
	return &PurchaseOrderLineItemItem{typeName: "item", Item: value}
}

func (p *PurchaseOrderLineItemItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typeName = "string"
		p.String = valueString
		return nil
	}
	valueItem := new(Item)
	if err := json.Unmarshal(data, &valueItem); err == nil {
		p.typeName = "item"
		p.Item = valueItem
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PurchaseOrderLineItemItem) MarshalJSON() ([]byte, error) {
	switch p.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return json.Marshal(p.String)
	case "item":
		return json.Marshal(p.Item)
	}
}

type PurchaseOrderLineItemItemVisitor interface {
	VisitString(string) error
	VisitItem(*Item) error
}

func (p *PurchaseOrderLineItemItem) Accept(visitor PurchaseOrderLineItemItemVisitor) error {
	switch p.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return visitor.VisitString(p.String)
	case "item":
		return visitor.VisitItem(p.Item)
	}
}

// # The PurchaseOrderLineItem Object
// ### Description
// The `PurchaseOrderLineItem` object is used to represent a purchase order's line item.
//
// ### Usage Example
// Fetch from the `GET PurchaseOrder` endpoint and view a company's purchase orders.
type PurchaseOrderLineItemRequest struct {
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// A description of the good being purchased.
	Description *string `json:"description,omitempty"`
	// The line item's unit price.
	UnitPrice *float64 `json:"unit_price,omitempty"`
	// The line item's quantity.
	Quantity *float64                          `json:"quantity,omitempty"`
	Item     *PurchaseOrderLineItemRequestItem `json:"item,omitempty"`
	// The purchase order line item's account.
	Account *string `json:"account,omitempty"`
	// The purchase order line item's associated tracking category.
	TrackingCategory *string `json:"tracking_category,omitempty"`
	// The purchase order line item's associated tracking categories.
	TrackingCategories []string `json:"tracking_categories,omitempty"`
	// The purchase order line item's tax amount.
	TaxAmount *string `json:"tax_amount,omitempty"`
	// The purchase order line item's total amount.
	TotalLineAmount *string `json:"total_line_amount,omitempty"`
	// The purchase order line item's currency.
	//
	// * `XUA` - ADB Unit of Account
	// * `AFN` - Afghan Afghani
	// * `AFA` - Afghan Afghani (1927–2002)
	// * `ALL` - Albanian Lek
	// * `ALK` - Albanian Lek (1946–1965)
	// * `DZD` - Algerian Dinar
	// * `ADP` - Andorran Peseta
	// * `AOA` - Angolan Kwanza
	// * `AOK` - Angolan Kwanza (1977–1991)
	// * `AON` - Angolan New Kwanza (1990–2000)
	// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
	// * `ARA` - Argentine Austral
	// * `ARS` - Argentine Peso
	// * `ARM` - Argentine Peso (1881–1970)
	// * `ARP` - Argentine Peso (1983–1985)
	// * `ARL` - Argentine Peso Ley (1970–1983)
	// * `AMD` - Armenian Dram
	// * `AWG` - Aruban Florin
	// * `AUD` - Australian Dollar
	// * `ATS` - Austrian Schilling
	// * `AZN` - Azerbaijani Manat
	// * `AZM` - Azerbaijani Manat (1993–2006)
	// * `BSD` - Bahamian Dollar
	// * `BHD` - Bahraini Dinar
	// * `BDT` - Bangladeshi Taka
	// * `BBD` - Barbadian Dollar
	// * `BYN` - Belarusian Ruble
	// * `BYB` - Belarusian Ruble (1994–1999)
	// * `BYR` - Belarusian Ruble (2000–2016)
	// * `BEF` - Belgian Franc
	// * `BEC` - Belgian Franc (convertible)
	// * `BEL` - Belgian Franc (financial)
	// * `BZD` - Belize Dollar
	// * `BMD` - Bermudan Dollar
	// * `BTN` - Bhutanese Ngultrum
	// * `BOB` - Bolivian Boliviano
	// * `BOL` - Bolivian Boliviano (1863–1963)
	// * `BOV` - Bolivian Mvdol
	// * `BOP` - Bolivian Peso
	// * `BAM` - Bosnia-Herzegovina Convertible Mark
	// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
	// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
	// * `BWP` - Botswanan Pula
	// * `BRC` - Brazilian Cruzado (1986–1989)
	// * `BRZ` - Brazilian Cruzeiro (1942–1967)
	// * `BRE` - Brazilian Cruzeiro (1990–1993)
	// * `BRR` - Brazilian Cruzeiro (1993–1994)
	// * `BRN` - Brazilian New Cruzado (1989–1990)
	// * `BRB` - Brazilian New Cruzeiro (1967–1986)
	// * `BRL` - Brazilian Real
	// * `GBP` - British Pound
	// * `BND` - Brunei Dollar
	// * `BGL` - Bulgarian Hard Lev
	// * `BGN` - Bulgarian Lev
	// * `BGO` - Bulgarian Lev (1879–1952)
	// * `BGM` - Bulgarian Socialist Lev
	// * `BUK` - Burmese Kyat
	// * `BIF` - Burundian Franc
	// * `XPF` - CFP Franc
	// * `KHR` - Cambodian Riel
	// * `CAD` - Canadian Dollar
	// * `CVE` - Cape Verdean Escudo
	// * `KYD` - Cayman Islands Dollar
	// * `XAF` - Central African CFA Franc
	// * `CLE` - Chilean Escudo
	// * `CLP` - Chilean Peso
	// * `CLF` - Chilean Unit of Account (UF)
	// * `CNX` - Chinese People’s Bank Dollar
	// * `CNY` - Chinese Yuan
	// * `CNH` - Chinese Yuan (offshore)
	// * `COP` - Colombian Peso
	// * `COU` - Colombian Real Value Unit
	// * `KMF` - Comorian Franc
	// * `CDF` - Congolese Franc
	// * `CRC` - Costa Rican Colón
	// * `HRD` - Croatian Dinar
	// * `HRK` - Croatian Kuna
	// * `CUC` - Cuban Convertible Peso
	// * `CUP` - Cuban Peso
	// * `CYP` - Cypriot Pound
	// * `CZK` - Czech Koruna
	// * `CSK` - Czechoslovak Hard Koruna
	// * `DKK` - Danish Krone
	// * `DJF` - Djiboutian Franc
	// * `DOP` - Dominican Peso
	// * `NLG` - Dutch Guilder
	// * `XCD` - East Caribbean Dollar
	// * `DDM` - East German Mark
	// * `ECS` - Ecuadorian Sucre
	// * `ECV` - Ecuadorian Unit of Constant Value
	// * `EGP` - Egyptian Pound
	// * `GQE` - Equatorial Guinean Ekwele
	// * `ERN` - Eritrean Nakfa
	// * `EEK` - Estonian Kroon
	// * `ETB` - Ethiopian Birr
	// * `EUR` - Euro
	// * `XBA` - European Composite Unit
	// * `XEU` - European Currency Unit
	// * `XBB` - European Monetary Unit
	// * `XBC` - European Unit of Account (XBC)
	// * `XBD` - European Unit of Account (XBD)
	// * `FKP` - Falkland Islands Pound
	// * `FJD` - Fijian Dollar
	// * `FIM` - Finnish Markka
	// * `FRF` - French Franc
	// * `XFO` - French Gold Franc
	// * `XFU` - French UIC-Franc
	// * `GMD` - Gambian Dalasi
	// * `GEK` - Georgian Kupon Larit
	// * `GEL` - Georgian Lari
	// * `DEM` - German Mark
	// * `GHS` - Ghanaian Cedi
	// * `GHC` - Ghanaian Cedi (1979–2007)
	// * `GIP` - Gibraltar Pound
	// * `XAU` - Gold
	// * `GRD` - Greek Drachma
	// * `GTQ` - Guatemalan Quetzal
	// * `GWP` - Guinea-Bissau Peso
	// * `GNF` - Guinean Franc
	// * `GNS` - Guinean Syli
	// * `GYD` - Guyanaese Dollar
	// * `HTG` - Haitian Gourde
	// * `HNL` - Honduran Lempira
	// * `HKD` - Hong Kong Dollar
	// * `HUF` - Hungarian Forint
	// * `IMP` - IMP
	// * `ISK` - Icelandic Króna
	// * `ISJ` - Icelandic Króna (1918–1981)
	// * `INR` - Indian Rupee
	// * `IDR` - Indonesian Rupiah
	// * `IRR` - Iranian Rial
	// * `IQD` - Iraqi Dinar
	// * `IEP` - Irish Pound
	// * `ILS` - Israeli New Shekel
	// * `ILP` - Israeli Pound
	// * `ILR` - Israeli Shekel (1980–1985)
	// * `ITL` - Italian Lira
	// * `JMD` - Jamaican Dollar
	// * `JPY` - Japanese Yen
	// * `JOD` - Jordanian Dinar
	// * `KZT` - Kazakhstani Tenge
	// * `KES` - Kenyan Shilling
	// * `KWD` - Kuwaiti Dinar
	// * `KGS` - Kyrgystani Som
	// * `LAK` - Laotian Kip
	// * `LVL` - Latvian Lats
	// * `LVR` - Latvian Ruble
	// * `LBP` - Lebanese Pound
	// * `LSL` - Lesotho Loti
	// * `LRD` - Liberian Dollar
	// * `LYD` - Libyan Dinar
	// * `LTL` - Lithuanian Litas
	// * `LTT` - Lithuanian Talonas
	// * `LUL` - Luxembourg Financial Franc
	// * `LUC` - Luxembourgian Convertible Franc
	// * `LUF` - Luxembourgian Franc
	// * `MOP` - Macanese Pataca
	// * `MKD` - Macedonian Denar
	// * `MKN` - Macedonian Denar (1992–1993)
	// * `MGA` - Malagasy Ariary
	// * `MGF` - Malagasy Franc
	// * `MWK` - Malawian Kwacha
	// * `MYR` - Malaysian Ringgit
	// * `MVR` - Maldivian Rufiyaa
	// * `MVP` - Maldivian Rupee (1947–1981)
	// * `MLF` - Malian Franc
	// * `MTL` - Maltese Lira
	// * `MTP` - Maltese Pound
	// * `MRU` - Mauritanian Ouguiya
	// * `MRO` - Mauritanian Ouguiya (1973–2017)
	// * `MUR` - Mauritian Rupee
	// * `MXV` - Mexican Investment Unit
	// * `MXN` - Mexican Peso
	// * `MXP` - Mexican Silver Peso (1861–1992)
	// * `MDC` - Moldovan Cupon
	// * `MDL` - Moldovan Leu
	// * `MCF` - Monegasque Franc
	// * `MNT` - Mongolian Tugrik
	// * `MAD` - Moroccan Dirham
	// * `MAF` - Moroccan Franc
	// * `MZE` - Mozambican Escudo
	// * `MZN` - Mozambican Metical
	// * `MZM` - Mozambican Metical (1980–2006)
	// * `MMK` - Myanmar Kyat
	// * `NAD` - Namibian Dollar
	// * `NPR` - Nepalese Rupee
	// * `ANG` - Netherlands Antillean Guilder
	// * `TWD` - New Taiwan Dollar
	// * `NZD` - New Zealand Dollar
	// * `NIO` - Nicaraguan Córdoba
	// * `NIC` - Nicaraguan Córdoba (1988–1991)
	// * `NGN` - Nigerian Naira
	// * `KPW` - North Korean Won
	// * `NOK` - Norwegian Krone
	// * `OMR` - Omani Rial
	// * `PKR` - Pakistani Rupee
	// * `XPD` - Palladium
	// * `PAB` - Panamanian Balboa
	// * `PGK` - Papua New Guinean Kina
	// * `PYG` - Paraguayan Guarani
	// * `PEI` - Peruvian Inti
	// * `PEN` - Peruvian Sol
	// * `PES` - Peruvian Sol (1863–1965)
	// * `PHP` - Philippine Peso
	// * `XPT` - Platinum
	// * `PLN` - Polish Zloty
	// * `PLZ` - Polish Zloty (1950–1995)
	// * `PTE` - Portuguese Escudo
	// * `GWE` - Portuguese Guinea Escudo
	// * `QAR` - Qatari Rial
	// * `XRE` - RINET Funds
	// * `RHD` - Rhodesian Dollar
	// * `RON` - Romanian Leu
	// * `ROL` - Romanian Leu (1952–2006)
	// * `RUB` - Russian Ruble
	// * `RUR` - Russian Ruble (1991–1998)
	// * `RWF` - Rwandan Franc
	// * `SVC` - Salvadoran Colón
	// * `WST` - Samoan Tala
	// * `SAR` - Saudi Riyal
	// * `RSD` - Serbian Dinar
	// * `CSD` - Serbian Dinar (2002–2006)
	// * `SCR` - Seychellois Rupee
	// * `SLL` - Sierra Leonean Leone
	// * `XAG` - Silver
	// * `SGD` - Singapore Dollar
	// * `SKK` - Slovak Koruna
	// * `SIT` - Slovenian Tolar
	// * `SBD` - Solomon Islands Dollar
	// * `SOS` - Somali Shilling
	// * `ZAR` - South African Rand
	// * `ZAL` - South African Rand (financial)
	// * `KRH` - South Korean Hwan (1953–1962)
	// * `KRW` - South Korean Won
	// * `KRO` - South Korean Won (1945–1953)
	// * `SSP` - South Sudanese Pound
	// * `SUR` - Soviet Rouble
	// * `ESP` - Spanish Peseta
	// * `ESA` - Spanish Peseta (A account)
	// * `ESB` - Spanish Peseta (convertible account)
	// * `XDR` - Special Drawing Rights
	// * `LKR` - Sri Lankan Rupee
	// * `SHP` - St. Helena Pound
	// * `XSU` - Sucre
	// * `SDD` - Sudanese Dinar (1992–2007)
	// * `SDG` - Sudanese Pound
	// * `SDP` - Sudanese Pound (1957–1998)
	// * `SRD` - Surinamese Dollar
	// * `SRG` - Surinamese Guilder
	// * `SZL` - Swazi Lilangeni
	// * `SEK` - Swedish Krona
	// * `CHF` - Swiss Franc
	// * `SYP` - Syrian Pound
	// * `STN` - São Tomé & Príncipe Dobra
	// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
	// * `TVD` - TVD
	// * `TJR` - Tajikistani Ruble
	// * `TJS` - Tajikistani Somoni
	// * `TZS` - Tanzanian Shilling
	// * `XTS` - Testing Currency Code
	// * `THB` - Thai Baht
	// * `XXX` - The codes assigned for transactions where no currency is involved
	// * `TPE` - Timorese Escudo
	// * `TOP` - Tongan Paʻanga
	// * `TTD` - Trinidad & Tobago Dollar
	// * `TND` - Tunisian Dinar
	// * `TRY` - Turkish Lira
	// * `TRL` - Turkish Lira (1922–2005)
	// * `TMT` - Turkmenistani Manat
	// * `TMM` - Turkmenistani Manat (1993–2009)
	// * `USD` - US Dollar
	// * `USN` - US Dollar (Next day)
	// * `USS` - US Dollar (Same day)
	// * `UGX` - Ugandan Shilling
	// * `UGS` - Ugandan Shilling (1966–1987)
	// * `UAH` - Ukrainian Hryvnia
	// * `UAK` - Ukrainian Karbovanets
	// * `AED` - United Arab Emirates Dirham
	// * `UYW` - Uruguayan Nominal Wage Index Unit
	// * `UYU` - Uruguayan Peso
	// * `UYP` - Uruguayan Peso (1975–1993)
	// * `UYI` - Uruguayan Peso (Indexed Units)
	// * `UZS` - Uzbekistani Som
	// * `VUV` - Vanuatu Vatu
	// * `VES` - Venezuelan Bolívar
	// * `VEB` - Venezuelan Bolívar (1871–2008)
	// * `VEF` - Venezuelan Bolívar (2008–2018)
	// * `VND` - Vietnamese Dong
	// * `VNN` - Vietnamese Dong (1978–1985)
	// * `CHE` - WIR Euro
	// * `CHW` - WIR Franc
	// * `XOF` - West African CFA Franc
	// * `YDD` - Yemeni Dinar
	// * `YER` - Yemeni Rial
	// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
	// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
	// * `YUM` - Yugoslavian New Dinar (1994–2002)
	// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
	// * `ZWN` - ZWN
	// * `ZRN` - Zairean New Zaire (1993–1998)
	// * `ZRZ` - Zairean Zaire (1971–1993)
	// * `ZMW` - Zambian Kwacha
	// * `ZMK` - Zambian Kwacha (1968–2012)
	// * `ZWD` - Zimbabwean Dollar (1980–2008)
	// * `ZWR` - Zimbabwean Dollar (2008)
	// * `ZWL` - Zimbabwean Dollar (2009)
	Currency *PurchaseOrderLineItemRequestCurrency `json:"currency,omitempty"`
	// The purchase order line item's exchange rate.
	ExchangeRate *string `json:"exchange_rate,omitempty"`
	// The company the purchase order line item belongs to.
	Company             *string        `json:"company,omitempty"`
	IntegrationParams   map[string]any `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]any `json:"linked_account_params,omitempty"`
}

// The purchase order line item's currency.
//
// * `XUA` - ADB Unit of Account
// * `AFN` - Afghan Afghani
// * `AFA` - Afghan Afghani (1927–2002)
// * `ALL` - Albanian Lek
// * `ALK` - Albanian Lek (1946–1965)
// * `DZD` - Algerian Dinar
// * `ADP` - Andorran Peseta
// * `AOA` - Angolan Kwanza
// * `AOK` - Angolan Kwanza (1977–1991)
// * `AON` - Angolan New Kwanza (1990–2000)
// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
// * `ARA` - Argentine Austral
// * `ARS` - Argentine Peso
// * `ARM` - Argentine Peso (1881–1970)
// * `ARP` - Argentine Peso (1983–1985)
// * `ARL` - Argentine Peso Ley (1970–1983)
// * `AMD` - Armenian Dram
// * `AWG` - Aruban Florin
// * `AUD` - Australian Dollar
// * `ATS` - Austrian Schilling
// * `AZN` - Azerbaijani Manat
// * `AZM` - Azerbaijani Manat (1993–2006)
// * `BSD` - Bahamian Dollar
// * `BHD` - Bahraini Dinar
// * `BDT` - Bangladeshi Taka
// * `BBD` - Barbadian Dollar
// * `BYN` - Belarusian Ruble
// * `BYB` - Belarusian Ruble (1994–1999)
// * `BYR` - Belarusian Ruble (2000–2016)
// * `BEF` - Belgian Franc
// * `BEC` - Belgian Franc (convertible)
// * `BEL` - Belgian Franc (financial)
// * `BZD` - Belize Dollar
// * `BMD` - Bermudan Dollar
// * `BTN` - Bhutanese Ngultrum
// * `BOB` - Bolivian Boliviano
// * `BOL` - Bolivian Boliviano (1863–1963)
// * `BOV` - Bolivian Mvdol
// * `BOP` - Bolivian Peso
// * `BAM` - Bosnia-Herzegovina Convertible Mark
// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
// * `BWP` - Botswanan Pula
// * `BRC` - Brazilian Cruzado (1986–1989)
// * `BRZ` - Brazilian Cruzeiro (1942–1967)
// * `BRE` - Brazilian Cruzeiro (1990–1993)
// * `BRR` - Brazilian Cruzeiro (1993–1994)
// * `BRN` - Brazilian New Cruzado (1989–1990)
// * `BRB` - Brazilian New Cruzeiro (1967–1986)
// * `BRL` - Brazilian Real
// * `GBP` - British Pound
// * `BND` - Brunei Dollar
// * `BGL` - Bulgarian Hard Lev
// * `BGN` - Bulgarian Lev
// * `BGO` - Bulgarian Lev (1879–1952)
// * `BGM` - Bulgarian Socialist Lev
// * `BUK` - Burmese Kyat
// * `BIF` - Burundian Franc
// * `XPF` - CFP Franc
// * `KHR` - Cambodian Riel
// * `CAD` - Canadian Dollar
// * `CVE` - Cape Verdean Escudo
// * `KYD` - Cayman Islands Dollar
// * `XAF` - Central African CFA Franc
// * `CLE` - Chilean Escudo
// * `CLP` - Chilean Peso
// * `CLF` - Chilean Unit of Account (UF)
// * `CNX` - Chinese People’s Bank Dollar
// * `CNY` - Chinese Yuan
// * `CNH` - Chinese Yuan (offshore)
// * `COP` - Colombian Peso
// * `COU` - Colombian Real Value Unit
// * `KMF` - Comorian Franc
// * `CDF` - Congolese Franc
// * `CRC` - Costa Rican Colón
// * `HRD` - Croatian Dinar
// * `HRK` - Croatian Kuna
// * `CUC` - Cuban Convertible Peso
// * `CUP` - Cuban Peso
// * `CYP` - Cypriot Pound
// * `CZK` - Czech Koruna
// * `CSK` - Czechoslovak Hard Koruna
// * `DKK` - Danish Krone
// * `DJF` - Djiboutian Franc
// * `DOP` - Dominican Peso
// * `NLG` - Dutch Guilder
// * `XCD` - East Caribbean Dollar
// * `DDM` - East German Mark
// * `ECS` - Ecuadorian Sucre
// * `ECV` - Ecuadorian Unit of Constant Value
// * `EGP` - Egyptian Pound
// * `GQE` - Equatorial Guinean Ekwele
// * `ERN` - Eritrean Nakfa
// * `EEK` - Estonian Kroon
// * `ETB` - Ethiopian Birr
// * `EUR` - Euro
// * `XBA` - European Composite Unit
// * `XEU` - European Currency Unit
// * `XBB` - European Monetary Unit
// * `XBC` - European Unit of Account (XBC)
// * `XBD` - European Unit of Account (XBD)
// * `FKP` - Falkland Islands Pound
// * `FJD` - Fijian Dollar
// * `FIM` - Finnish Markka
// * `FRF` - French Franc
// * `XFO` - French Gold Franc
// * `XFU` - French UIC-Franc
// * `GMD` - Gambian Dalasi
// * `GEK` - Georgian Kupon Larit
// * `GEL` - Georgian Lari
// * `DEM` - German Mark
// * `GHS` - Ghanaian Cedi
// * `GHC` - Ghanaian Cedi (1979–2007)
// * `GIP` - Gibraltar Pound
// * `XAU` - Gold
// * `GRD` - Greek Drachma
// * `GTQ` - Guatemalan Quetzal
// * `GWP` - Guinea-Bissau Peso
// * `GNF` - Guinean Franc
// * `GNS` - Guinean Syli
// * `GYD` - Guyanaese Dollar
// * `HTG` - Haitian Gourde
// * `HNL` - Honduran Lempira
// * `HKD` - Hong Kong Dollar
// * `HUF` - Hungarian Forint
// * `IMP` - IMP
// * `ISK` - Icelandic Króna
// * `ISJ` - Icelandic Króna (1918–1981)
// * `INR` - Indian Rupee
// * `IDR` - Indonesian Rupiah
// * `IRR` - Iranian Rial
// * `IQD` - Iraqi Dinar
// * `IEP` - Irish Pound
// * `ILS` - Israeli New Shekel
// * `ILP` - Israeli Pound
// * `ILR` - Israeli Shekel (1980–1985)
// * `ITL` - Italian Lira
// * `JMD` - Jamaican Dollar
// * `JPY` - Japanese Yen
// * `JOD` - Jordanian Dinar
// * `KZT` - Kazakhstani Tenge
// * `KES` - Kenyan Shilling
// * `KWD` - Kuwaiti Dinar
// * `KGS` - Kyrgystani Som
// * `LAK` - Laotian Kip
// * `LVL` - Latvian Lats
// * `LVR` - Latvian Ruble
// * `LBP` - Lebanese Pound
// * `LSL` - Lesotho Loti
// * `LRD` - Liberian Dollar
// * `LYD` - Libyan Dinar
// * `LTL` - Lithuanian Litas
// * `LTT` - Lithuanian Talonas
// * `LUL` - Luxembourg Financial Franc
// * `LUC` - Luxembourgian Convertible Franc
// * `LUF` - Luxembourgian Franc
// * `MOP` - Macanese Pataca
// * `MKD` - Macedonian Denar
// * `MKN` - Macedonian Denar (1992–1993)
// * `MGA` - Malagasy Ariary
// * `MGF` - Malagasy Franc
// * `MWK` - Malawian Kwacha
// * `MYR` - Malaysian Ringgit
// * `MVR` - Maldivian Rufiyaa
// * `MVP` - Maldivian Rupee (1947–1981)
// * `MLF` - Malian Franc
// * `MTL` - Maltese Lira
// * `MTP` - Maltese Pound
// * `MRU` - Mauritanian Ouguiya
// * `MRO` - Mauritanian Ouguiya (1973–2017)
// * `MUR` - Mauritian Rupee
// * `MXV` - Mexican Investment Unit
// * `MXN` - Mexican Peso
// * `MXP` - Mexican Silver Peso (1861–1992)
// * `MDC` - Moldovan Cupon
// * `MDL` - Moldovan Leu
// * `MCF` - Monegasque Franc
// * `MNT` - Mongolian Tugrik
// * `MAD` - Moroccan Dirham
// * `MAF` - Moroccan Franc
// * `MZE` - Mozambican Escudo
// * `MZN` - Mozambican Metical
// * `MZM` - Mozambican Metical (1980–2006)
// * `MMK` - Myanmar Kyat
// * `NAD` - Namibian Dollar
// * `NPR` - Nepalese Rupee
// * `ANG` - Netherlands Antillean Guilder
// * `TWD` - New Taiwan Dollar
// * `NZD` - New Zealand Dollar
// * `NIO` - Nicaraguan Córdoba
// * `NIC` - Nicaraguan Córdoba (1988–1991)
// * `NGN` - Nigerian Naira
// * `KPW` - North Korean Won
// * `NOK` - Norwegian Krone
// * `OMR` - Omani Rial
// * `PKR` - Pakistani Rupee
// * `XPD` - Palladium
// * `PAB` - Panamanian Balboa
// * `PGK` - Papua New Guinean Kina
// * `PYG` - Paraguayan Guarani
// * `PEI` - Peruvian Inti
// * `PEN` - Peruvian Sol
// * `PES` - Peruvian Sol (1863–1965)
// * `PHP` - Philippine Peso
// * `XPT` - Platinum
// * `PLN` - Polish Zloty
// * `PLZ` - Polish Zloty (1950–1995)
// * `PTE` - Portuguese Escudo
// * `GWE` - Portuguese Guinea Escudo
// * `QAR` - Qatari Rial
// * `XRE` - RINET Funds
// * `RHD` - Rhodesian Dollar
// * `RON` - Romanian Leu
// * `ROL` - Romanian Leu (1952–2006)
// * `RUB` - Russian Ruble
// * `RUR` - Russian Ruble (1991–1998)
// * `RWF` - Rwandan Franc
// * `SVC` - Salvadoran Colón
// * `WST` - Samoan Tala
// * `SAR` - Saudi Riyal
// * `RSD` - Serbian Dinar
// * `CSD` - Serbian Dinar (2002–2006)
// * `SCR` - Seychellois Rupee
// * `SLL` - Sierra Leonean Leone
// * `XAG` - Silver
// * `SGD` - Singapore Dollar
// * `SKK` - Slovak Koruna
// * `SIT` - Slovenian Tolar
// * `SBD` - Solomon Islands Dollar
// * `SOS` - Somali Shilling
// * `ZAR` - South African Rand
// * `ZAL` - South African Rand (financial)
// * `KRH` - South Korean Hwan (1953–1962)
// * `KRW` - South Korean Won
// * `KRO` - South Korean Won (1945–1953)
// * `SSP` - South Sudanese Pound
// * `SUR` - Soviet Rouble
// * `ESP` - Spanish Peseta
// * `ESA` - Spanish Peseta (A account)
// * `ESB` - Spanish Peseta (convertible account)
// * `XDR` - Special Drawing Rights
// * `LKR` - Sri Lankan Rupee
// * `SHP` - St. Helena Pound
// * `XSU` - Sucre
// * `SDD` - Sudanese Dinar (1992–2007)
// * `SDG` - Sudanese Pound
// * `SDP` - Sudanese Pound (1957–1998)
// * `SRD` - Surinamese Dollar
// * `SRG` - Surinamese Guilder
// * `SZL` - Swazi Lilangeni
// * `SEK` - Swedish Krona
// * `CHF` - Swiss Franc
// * `SYP` - Syrian Pound
// * `STN` - São Tomé & Príncipe Dobra
// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
// * `TVD` - TVD
// * `TJR` - Tajikistani Ruble
// * `TJS` - Tajikistani Somoni
// * `TZS` - Tanzanian Shilling
// * `XTS` - Testing Currency Code
// * `THB` - Thai Baht
// * `XXX` - The codes assigned for transactions where no currency is involved
// * `TPE` - Timorese Escudo
// * `TOP` - Tongan Paʻanga
// * `TTD` - Trinidad & Tobago Dollar
// * `TND` - Tunisian Dinar
// * `TRY` - Turkish Lira
// * `TRL` - Turkish Lira (1922–2005)
// * `TMT` - Turkmenistani Manat
// * `TMM` - Turkmenistani Manat (1993–2009)
// * `USD` - US Dollar
// * `USN` - US Dollar (Next day)
// * `USS` - US Dollar (Same day)
// * `UGX` - Ugandan Shilling
// * `UGS` - Ugandan Shilling (1966–1987)
// * `UAH` - Ukrainian Hryvnia
// * `UAK` - Ukrainian Karbovanets
// * `AED` - United Arab Emirates Dirham
// * `UYW` - Uruguayan Nominal Wage Index Unit
// * `UYU` - Uruguayan Peso
// * `UYP` - Uruguayan Peso (1975–1993)
// * `UYI` - Uruguayan Peso (Indexed Units)
// * `UZS` - Uzbekistani Som
// * `VUV` - Vanuatu Vatu
// * `VES` - Venezuelan Bolívar
// * `VEB` - Venezuelan Bolívar (1871–2008)
// * `VEF` - Venezuelan Bolívar (2008–2018)
// * `VND` - Vietnamese Dong
// * `VNN` - Vietnamese Dong (1978–1985)
// * `CHE` - WIR Euro
// * `CHW` - WIR Franc
// * `XOF` - West African CFA Franc
// * `YDD` - Yemeni Dinar
// * `YER` - Yemeni Rial
// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
// * `YUM` - Yugoslavian New Dinar (1994–2002)
// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
// * `ZWN` - ZWN
// * `ZRN` - Zairean New Zaire (1993–1998)
// * `ZRZ` - Zairean Zaire (1971–1993)
// * `ZMW` - Zambian Kwacha
// * `ZMK` - Zambian Kwacha (1968–2012)
// * `ZWD` - Zimbabwean Dollar (1980–2008)
// * `ZWR` - Zimbabwean Dollar (2008)
// * `ZWL` - Zimbabwean Dollar (2009)
type PurchaseOrderLineItemRequestCurrency struct {
	typeName     string
	CurrencyEnum CurrencyEnum
	String       string
}

func NewPurchaseOrderLineItemRequestCurrencyFromCurrencyEnum(value CurrencyEnum) *PurchaseOrderLineItemRequestCurrency {
	return &PurchaseOrderLineItemRequestCurrency{typeName: "currencyEnum", CurrencyEnum: value}
}

func NewPurchaseOrderLineItemRequestCurrencyFromString(value string) *PurchaseOrderLineItemRequestCurrency {
	return &PurchaseOrderLineItemRequestCurrency{typeName: "string", String: value}
}

func (p *PurchaseOrderLineItemRequestCurrency) UnmarshalJSON(data []byte) error {
	var valueCurrencyEnum CurrencyEnum
	if err := json.Unmarshal(data, &valueCurrencyEnum); err == nil {
		p.typeName = "currencyEnum"
		p.CurrencyEnum = valueCurrencyEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typeName = "string"
		p.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PurchaseOrderLineItemRequestCurrency) MarshalJSON() ([]byte, error) {
	switch p.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "currencyEnum":
		return json.Marshal(p.CurrencyEnum)
	case "string":
		return json.Marshal(p.String)
	}
}

type PurchaseOrderLineItemRequestCurrencyVisitor interface {
	VisitCurrencyEnum(CurrencyEnum) error
	VisitString(string) error
}

func (p *PurchaseOrderLineItemRequestCurrency) Accept(visitor PurchaseOrderLineItemRequestCurrencyVisitor) error {
	switch p.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "currencyEnum":
		return visitor.VisitCurrencyEnum(p.CurrencyEnum)
	case "string":
		return visitor.VisitString(p.String)
	}
}

type PurchaseOrderLineItemRequestItem struct {
	typeName string
	String   string
	Item     *Item
}

func NewPurchaseOrderLineItemRequestItemFromString(value string) *PurchaseOrderLineItemRequestItem {
	return &PurchaseOrderLineItemRequestItem{typeName: "string", String: value}
}

func NewPurchaseOrderLineItemRequestItemFromItem(value *Item) *PurchaseOrderLineItemRequestItem {
	return &PurchaseOrderLineItemRequestItem{typeName: "item", Item: value}
}

func (p *PurchaseOrderLineItemRequestItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typeName = "string"
		p.String = valueString
		return nil
	}
	valueItem := new(Item)
	if err := json.Unmarshal(data, &valueItem); err == nil {
		p.typeName = "item"
		p.Item = valueItem
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PurchaseOrderLineItemRequestItem) MarshalJSON() ([]byte, error) {
	switch p.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return json.Marshal(p.String)
	case "item":
		return json.Marshal(p.Item)
	}
}

type PurchaseOrderLineItemRequestItemVisitor interface {
	VisitString(string) error
	VisitItem(*Item) error
}

func (p *PurchaseOrderLineItemRequestItem) Accept(visitor PurchaseOrderLineItemRequestItemVisitor) error {
	switch p.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return visitor.VisitString(p.String)
	case "item":
		return visitor.VisitItem(p.Item)
	}
}

// # The PurchaseOrder Object
// ### Description
// The `PurchaseOrder` object is a record of request for a product or service between a buyer and seller.
//
// ### Usage Example
// Fetch from the `LIST PurchaseOrders` endpoint and view a company's purchase orders.
type PurchaseOrderRequest struct {
	// The purchase order's status.
	//
	// * `DRAFT` - DRAFT
	// * `SUBMITTED` - SUBMITTED
	// * `AUTHORIZED` - AUTHORIZED
	// * `BILLED` - BILLED
	// * `DELETED` - DELETED
	Status *PurchaseOrderRequestStatus `json:"status,omitempty"`
	// The purchase order's issue date.
	IssueDate *time.Time `json:"issue_date,omitempty"`
	// The purchase order's delivery date.
	DeliveryDate *time.Time `json:"delivery_date,omitempty"`
	// The purchase order's delivery address.
	DeliveryAddress *PurchaseOrderRequestDeliveryAddress `json:"delivery_address,omitempty"`
	// The contact making the purchase order.
	Customer *string `json:"customer,omitempty"`
	// The party fulfilling the purchase order.
	Vendor *PurchaseOrderRequestVendor `json:"vendor,omitempty"`
	// A memo attached to the purchase order.
	Memo *string `json:"memo,omitempty"`
	// The company the purchase order belongs to.
	Company *PurchaseOrderRequestCompany `json:"company,omitempty"`
	// The purchase order's total amount.
	TotalAmount *float64 `json:"total_amount,omitempty"`
	// The purchase order's currency.
	//
	// * `XUA` - ADB Unit of Account
	// * `AFN` - Afghan Afghani
	// * `AFA` - Afghan Afghani (1927–2002)
	// * `ALL` - Albanian Lek
	// * `ALK` - Albanian Lek (1946–1965)
	// * `DZD` - Algerian Dinar
	// * `ADP` - Andorran Peseta
	// * `AOA` - Angolan Kwanza
	// * `AOK` - Angolan Kwanza (1977–1991)
	// * `AON` - Angolan New Kwanza (1990–2000)
	// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
	// * `ARA` - Argentine Austral
	// * `ARS` - Argentine Peso
	// * `ARM` - Argentine Peso (1881–1970)
	// * `ARP` - Argentine Peso (1983–1985)
	// * `ARL` - Argentine Peso Ley (1970–1983)
	// * `AMD` - Armenian Dram
	// * `AWG` - Aruban Florin
	// * `AUD` - Australian Dollar
	// * `ATS` - Austrian Schilling
	// * `AZN` - Azerbaijani Manat
	// * `AZM` - Azerbaijani Manat (1993–2006)
	// * `BSD` - Bahamian Dollar
	// * `BHD` - Bahraini Dinar
	// * `BDT` - Bangladeshi Taka
	// * `BBD` - Barbadian Dollar
	// * `BYN` - Belarusian Ruble
	// * `BYB` - Belarusian Ruble (1994–1999)
	// * `BYR` - Belarusian Ruble (2000–2016)
	// * `BEF` - Belgian Franc
	// * `BEC` - Belgian Franc (convertible)
	// * `BEL` - Belgian Franc (financial)
	// * `BZD` - Belize Dollar
	// * `BMD` - Bermudan Dollar
	// * `BTN` - Bhutanese Ngultrum
	// * `BOB` - Bolivian Boliviano
	// * `BOL` - Bolivian Boliviano (1863–1963)
	// * `BOV` - Bolivian Mvdol
	// * `BOP` - Bolivian Peso
	// * `BAM` - Bosnia-Herzegovina Convertible Mark
	// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
	// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
	// * `BWP` - Botswanan Pula
	// * `BRC` - Brazilian Cruzado (1986–1989)
	// * `BRZ` - Brazilian Cruzeiro (1942–1967)
	// * `BRE` - Brazilian Cruzeiro (1990–1993)
	// * `BRR` - Brazilian Cruzeiro (1993–1994)
	// * `BRN` - Brazilian New Cruzado (1989–1990)
	// * `BRB` - Brazilian New Cruzeiro (1967–1986)
	// * `BRL` - Brazilian Real
	// * `GBP` - British Pound
	// * `BND` - Brunei Dollar
	// * `BGL` - Bulgarian Hard Lev
	// * `BGN` - Bulgarian Lev
	// * `BGO` - Bulgarian Lev (1879–1952)
	// * `BGM` - Bulgarian Socialist Lev
	// * `BUK` - Burmese Kyat
	// * `BIF` - Burundian Franc
	// * `XPF` - CFP Franc
	// * `KHR` - Cambodian Riel
	// * `CAD` - Canadian Dollar
	// * `CVE` - Cape Verdean Escudo
	// * `KYD` - Cayman Islands Dollar
	// * `XAF` - Central African CFA Franc
	// * `CLE` - Chilean Escudo
	// * `CLP` - Chilean Peso
	// * `CLF` - Chilean Unit of Account (UF)
	// * `CNX` - Chinese People’s Bank Dollar
	// * `CNY` - Chinese Yuan
	// * `CNH` - Chinese Yuan (offshore)
	// * `COP` - Colombian Peso
	// * `COU` - Colombian Real Value Unit
	// * `KMF` - Comorian Franc
	// * `CDF` - Congolese Franc
	// * `CRC` - Costa Rican Colón
	// * `HRD` - Croatian Dinar
	// * `HRK` - Croatian Kuna
	// * `CUC` - Cuban Convertible Peso
	// * `CUP` - Cuban Peso
	// * `CYP` - Cypriot Pound
	// * `CZK` - Czech Koruna
	// * `CSK` - Czechoslovak Hard Koruna
	// * `DKK` - Danish Krone
	// * `DJF` - Djiboutian Franc
	// * `DOP` - Dominican Peso
	// * `NLG` - Dutch Guilder
	// * `XCD` - East Caribbean Dollar
	// * `DDM` - East German Mark
	// * `ECS` - Ecuadorian Sucre
	// * `ECV` - Ecuadorian Unit of Constant Value
	// * `EGP` - Egyptian Pound
	// * `GQE` - Equatorial Guinean Ekwele
	// * `ERN` - Eritrean Nakfa
	// * `EEK` - Estonian Kroon
	// * `ETB` - Ethiopian Birr
	// * `EUR` - Euro
	// * `XBA` - European Composite Unit
	// * `XEU` - European Currency Unit
	// * `XBB` - European Monetary Unit
	// * `XBC` - European Unit of Account (XBC)
	// * `XBD` - European Unit of Account (XBD)
	// * `FKP` - Falkland Islands Pound
	// * `FJD` - Fijian Dollar
	// * `FIM` - Finnish Markka
	// * `FRF` - French Franc
	// * `XFO` - French Gold Franc
	// * `XFU` - French UIC-Franc
	// * `GMD` - Gambian Dalasi
	// * `GEK` - Georgian Kupon Larit
	// * `GEL` - Georgian Lari
	// * `DEM` - German Mark
	// * `GHS` - Ghanaian Cedi
	// * `GHC` - Ghanaian Cedi (1979–2007)
	// * `GIP` - Gibraltar Pound
	// * `XAU` - Gold
	// * `GRD` - Greek Drachma
	// * `GTQ` - Guatemalan Quetzal
	// * `GWP` - Guinea-Bissau Peso
	// * `GNF` - Guinean Franc
	// * `GNS` - Guinean Syli
	// * `GYD` - Guyanaese Dollar
	// * `HTG` - Haitian Gourde
	// * `HNL` - Honduran Lempira
	// * `HKD` - Hong Kong Dollar
	// * `HUF` - Hungarian Forint
	// * `IMP` - IMP
	// * `ISK` - Icelandic Króna
	// * `ISJ` - Icelandic Króna (1918–1981)
	// * `INR` - Indian Rupee
	// * `IDR` - Indonesian Rupiah
	// * `IRR` - Iranian Rial
	// * `IQD` - Iraqi Dinar
	// * `IEP` - Irish Pound
	// * `ILS` - Israeli New Shekel
	// * `ILP` - Israeli Pound
	// * `ILR` - Israeli Shekel (1980–1985)
	// * `ITL` - Italian Lira
	// * `JMD` - Jamaican Dollar
	// * `JPY` - Japanese Yen
	// * `JOD` - Jordanian Dinar
	// * `KZT` - Kazakhstani Tenge
	// * `KES` - Kenyan Shilling
	// * `KWD` - Kuwaiti Dinar
	// * `KGS` - Kyrgystani Som
	// * `LAK` - Laotian Kip
	// * `LVL` - Latvian Lats
	// * `LVR` - Latvian Ruble
	// * `LBP` - Lebanese Pound
	// * `LSL` - Lesotho Loti
	// * `LRD` - Liberian Dollar
	// * `LYD` - Libyan Dinar
	// * `LTL` - Lithuanian Litas
	// * `LTT` - Lithuanian Talonas
	// * `LUL` - Luxembourg Financial Franc
	// * `LUC` - Luxembourgian Convertible Franc
	// * `LUF` - Luxembourgian Franc
	// * `MOP` - Macanese Pataca
	// * `MKD` - Macedonian Denar
	// * `MKN` - Macedonian Denar (1992–1993)
	// * `MGA` - Malagasy Ariary
	// * `MGF` - Malagasy Franc
	// * `MWK` - Malawian Kwacha
	// * `MYR` - Malaysian Ringgit
	// * `MVR` - Maldivian Rufiyaa
	// * `MVP` - Maldivian Rupee (1947–1981)
	// * `MLF` - Malian Franc
	// * `MTL` - Maltese Lira
	// * `MTP` - Maltese Pound
	// * `MRU` - Mauritanian Ouguiya
	// * `MRO` - Mauritanian Ouguiya (1973–2017)
	// * `MUR` - Mauritian Rupee
	// * `MXV` - Mexican Investment Unit
	// * `MXN` - Mexican Peso
	// * `MXP` - Mexican Silver Peso (1861–1992)
	// * `MDC` - Moldovan Cupon
	// * `MDL` - Moldovan Leu
	// * `MCF` - Monegasque Franc
	// * `MNT` - Mongolian Tugrik
	// * `MAD` - Moroccan Dirham
	// * `MAF` - Moroccan Franc
	// * `MZE` - Mozambican Escudo
	// * `MZN` - Mozambican Metical
	// * `MZM` - Mozambican Metical (1980–2006)
	// * `MMK` - Myanmar Kyat
	// * `NAD` - Namibian Dollar
	// * `NPR` - Nepalese Rupee
	// * `ANG` - Netherlands Antillean Guilder
	// * `TWD` - New Taiwan Dollar
	// * `NZD` - New Zealand Dollar
	// * `NIO` - Nicaraguan Córdoba
	// * `NIC` - Nicaraguan Córdoba (1988–1991)
	// * `NGN` - Nigerian Naira
	// * `KPW` - North Korean Won
	// * `NOK` - Norwegian Krone
	// * `OMR` - Omani Rial
	// * `PKR` - Pakistani Rupee
	// * `XPD` - Palladium
	// * `PAB` - Panamanian Balboa
	// * `PGK` - Papua New Guinean Kina
	// * `PYG` - Paraguayan Guarani
	// * `PEI` - Peruvian Inti
	// * `PEN` - Peruvian Sol
	// * `PES` - Peruvian Sol (1863–1965)
	// * `PHP` - Philippine Peso
	// * `XPT` - Platinum
	// * `PLN` - Polish Zloty
	// * `PLZ` - Polish Zloty (1950–1995)
	// * `PTE` - Portuguese Escudo
	// * `GWE` - Portuguese Guinea Escudo
	// * `QAR` - Qatari Rial
	// * `XRE` - RINET Funds
	// * `RHD` - Rhodesian Dollar
	// * `RON` - Romanian Leu
	// * `ROL` - Romanian Leu (1952–2006)
	// * `RUB` - Russian Ruble
	// * `RUR` - Russian Ruble (1991–1998)
	// * `RWF` - Rwandan Franc
	// * `SVC` - Salvadoran Colón
	// * `WST` - Samoan Tala
	// * `SAR` - Saudi Riyal
	// * `RSD` - Serbian Dinar
	// * `CSD` - Serbian Dinar (2002–2006)
	// * `SCR` - Seychellois Rupee
	// * `SLL` - Sierra Leonean Leone
	// * `XAG` - Silver
	// * `SGD` - Singapore Dollar
	// * `SKK` - Slovak Koruna
	// * `SIT` - Slovenian Tolar
	// * `SBD` - Solomon Islands Dollar
	// * `SOS` - Somali Shilling
	// * `ZAR` - South African Rand
	// * `ZAL` - South African Rand (financial)
	// * `KRH` - South Korean Hwan (1953–1962)
	// * `KRW` - South Korean Won
	// * `KRO` - South Korean Won (1945–1953)
	// * `SSP` - South Sudanese Pound
	// * `SUR` - Soviet Rouble
	// * `ESP` - Spanish Peseta
	// * `ESA` - Spanish Peseta (A account)
	// * `ESB` - Spanish Peseta (convertible account)
	// * `XDR` - Special Drawing Rights
	// * `LKR` - Sri Lankan Rupee
	// * `SHP` - St. Helena Pound
	// * `XSU` - Sucre
	// * `SDD` - Sudanese Dinar (1992–2007)
	// * `SDG` - Sudanese Pound
	// * `SDP` - Sudanese Pound (1957–1998)
	// * `SRD` - Surinamese Dollar
	// * `SRG` - Surinamese Guilder
	// * `SZL` - Swazi Lilangeni
	// * `SEK` - Swedish Krona
	// * `CHF` - Swiss Franc
	// * `SYP` - Syrian Pound
	// * `STN` - São Tomé & Príncipe Dobra
	// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
	// * `TVD` - TVD
	// * `TJR` - Tajikistani Ruble
	// * `TJS` - Tajikistani Somoni
	// * `TZS` - Tanzanian Shilling
	// * `XTS` - Testing Currency Code
	// * `THB` - Thai Baht
	// * `XXX` - The codes assigned for transactions where no currency is involved
	// * `TPE` - Timorese Escudo
	// * `TOP` - Tongan Paʻanga
	// * `TTD` - Trinidad & Tobago Dollar
	// * `TND` - Tunisian Dinar
	// * `TRY` - Turkish Lira
	// * `TRL` - Turkish Lira (1922–2005)
	// * `TMT` - Turkmenistani Manat
	// * `TMM` - Turkmenistani Manat (1993–2009)
	// * `USD` - US Dollar
	// * `USN` - US Dollar (Next day)
	// * `USS` - US Dollar (Same day)
	// * `UGX` - Ugandan Shilling
	// * `UGS` - Ugandan Shilling (1966–1987)
	// * `UAH` - Ukrainian Hryvnia
	// * `UAK` - Ukrainian Karbovanets
	// * `AED` - United Arab Emirates Dirham
	// * `UYW` - Uruguayan Nominal Wage Index Unit
	// * `UYU` - Uruguayan Peso
	// * `UYP` - Uruguayan Peso (1975–1993)
	// * `UYI` - Uruguayan Peso (Indexed Units)
	// * `UZS` - Uzbekistani Som
	// * `VUV` - Vanuatu Vatu
	// * `VES` - Venezuelan Bolívar
	// * `VEB` - Venezuelan Bolívar (1871–2008)
	// * `VEF` - Venezuelan Bolívar (2008–2018)
	// * `VND` - Vietnamese Dong
	// * `VNN` - Vietnamese Dong (1978–1985)
	// * `CHE` - WIR Euro
	// * `CHW` - WIR Franc
	// * `XOF` - West African CFA Franc
	// * `YDD` - Yemeni Dinar
	// * `YER` - Yemeni Rial
	// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
	// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
	// * `YUM` - Yugoslavian New Dinar (1994–2002)
	// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
	// * `ZWN` - ZWN
	// * `ZRN` - Zairean New Zaire (1993–1998)
	// * `ZRZ` - Zairean Zaire (1971–1993)
	// * `ZMW` - Zambian Kwacha
	// * `ZMK` - Zambian Kwacha (1968–2012)
	// * `ZWD` - Zimbabwean Dollar (1980–2008)
	// * `ZWR` - Zimbabwean Dollar (2008)
	// * `ZWL` - Zimbabwean Dollar (2009)
	Currency *PurchaseOrderRequestCurrency `json:"currency,omitempty"`
	// The purchase order's exchange rate.
	ExchangeRate        *string                                       `json:"exchange_rate,omitempty"`
	TrackingCategories  []*PurchaseOrderRequestTrackingCategoriesItem `json:"tracking_categories,omitempty"`
	LineItems           []*PurchaseOrderLineItemRequest               `json:"line_items,omitempty"`
	IntegrationParams   map[string]any                                `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]any                                `json:"linked_account_params,omitempty"`
}

// The company the purchase order belongs to.
type PurchaseOrderRequestCompany struct {
	typeName    string
	String      string
	CompanyInfo *CompanyInfo
}

func NewPurchaseOrderRequestCompanyFromString(value string) *PurchaseOrderRequestCompany {
	return &PurchaseOrderRequestCompany{typeName: "string", String: value}
}

func NewPurchaseOrderRequestCompanyFromCompanyInfo(value *CompanyInfo) *PurchaseOrderRequestCompany {
	return &PurchaseOrderRequestCompany{typeName: "companyInfo", CompanyInfo: value}
}

func (p *PurchaseOrderRequestCompany) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typeName = "string"
		p.String = valueString
		return nil
	}
	valueCompanyInfo := new(CompanyInfo)
	if err := json.Unmarshal(data, &valueCompanyInfo); err == nil {
		p.typeName = "companyInfo"
		p.CompanyInfo = valueCompanyInfo
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PurchaseOrderRequestCompany) MarshalJSON() ([]byte, error) {
	switch p.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return json.Marshal(p.String)
	case "companyInfo":
		return json.Marshal(p.CompanyInfo)
	}
}

type PurchaseOrderRequestCompanyVisitor interface {
	VisitString(string) error
	VisitCompanyInfo(*CompanyInfo) error
}

func (p *PurchaseOrderRequestCompany) Accept(visitor PurchaseOrderRequestCompanyVisitor) error {
	switch p.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return visitor.VisitString(p.String)
	case "companyInfo":
		return visitor.VisitCompanyInfo(p.CompanyInfo)
	}
}

// The purchase order's currency.
//
// * `XUA` - ADB Unit of Account
// * `AFN` - Afghan Afghani
// * `AFA` - Afghan Afghani (1927–2002)
// * `ALL` - Albanian Lek
// * `ALK` - Albanian Lek (1946–1965)
// * `DZD` - Algerian Dinar
// * `ADP` - Andorran Peseta
// * `AOA` - Angolan Kwanza
// * `AOK` - Angolan Kwanza (1977–1991)
// * `AON` - Angolan New Kwanza (1990–2000)
// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
// * `ARA` - Argentine Austral
// * `ARS` - Argentine Peso
// * `ARM` - Argentine Peso (1881–1970)
// * `ARP` - Argentine Peso (1983–1985)
// * `ARL` - Argentine Peso Ley (1970–1983)
// * `AMD` - Armenian Dram
// * `AWG` - Aruban Florin
// * `AUD` - Australian Dollar
// * `ATS` - Austrian Schilling
// * `AZN` - Azerbaijani Manat
// * `AZM` - Azerbaijani Manat (1993–2006)
// * `BSD` - Bahamian Dollar
// * `BHD` - Bahraini Dinar
// * `BDT` - Bangladeshi Taka
// * `BBD` - Barbadian Dollar
// * `BYN` - Belarusian Ruble
// * `BYB` - Belarusian Ruble (1994–1999)
// * `BYR` - Belarusian Ruble (2000–2016)
// * `BEF` - Belgian Franc
// * `BEC` - Belgian Franc (convertible)
// * `BEL` - Belgian Franc (financial)
// * `BZD` - Belize Dollar
// * `BMD` - Bermudan Dollar
// * `BTN` - Bhutanese Ngultrum
// * `BOB` - Bolivian Boliviano
// * `BOL` - Bolivian Boliviano (1863–1963)
// * `BOV` - Bolivian Mvdol
// * `BOP` - Bolivian Peso
// * `BAM` - Bosnia-Herzegovina Convertible Mark
// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
// * `BWP` - Botswanan Pula
// * `BRC` - Brazilian Cruzado (1986–1989)
// * `BRZ` - Brazilian Cruzeiro (1942–1967)
// * `BRE` - Brazilian Cruzeiro (1990–1993)
// * `BRR` - Brazilian Cruzeiro (1993–1994)
// * `BRN` - Brazilian New Cruzado (1989–1990)
// * `BRB` - Brazilian New Cruzeiro (1967–1986)
// * `BRL` - Brazilian Real
// * `GBP` - British Pound
// * `BND` - Brunei Dollar
// * `BGL` - Bulgarian Hard Lev
// * `BGN` - Bulgarian Lev
// * `BGO` - Bulgarian Lev (1879–1952)
// * `BGM` - Bulgarian Socialist Lev
// * `BUK` - Burmese Kyat
// * `BIF` - Burundian Franc
// * `XPF` - CFP Franc
// * `KHR` - Cambodian Riel
// * `CAD` - Canadian Dollar
// * `CVE` - Cape Verdean Escudo
// * `KYD` - Cayman Islands Dollar
// * `XAF` - Central African CFA Franc
// * `CLE` - Chilean Escudo
// * `CLP` - Chilean Peso
// * `CLF` - Chilean Unit of Account (UF)
// * `CNX` - Chinese People’s Bank Dollar
// * `CNY` - Chinese Yuan
// * `CNH` - Chinese Yuan (offshore)
// * `COP` - Colombian Peso
// * `COU` - Colombian Real Value Unit
// * `KMF` - Comorian Franc
// * `CDF` - Congolese Franc
// * `CRC` - Costa Rican Colón
// * `HRD` - Croatian Dinar
// * `HRK` - Croatian Kuna
// * `CUC` - Cuban Convertible Peso
// * `CUP` - Cuban Peso
// * `CYP` - Cypriot Pound
// * `CZK` - Czech Koruna
// * `CSK` - Czechoslovak Hard Koruna
// * `DKK` - Danish Krone
// * `DJF` - Djiboutian Franc
// * `DOP` - Dominican Peso
// * `NLG` - Dutch Guilder
// * `XCD` - East Caribbean Dollar
// * `DDM` - East German Mark
// * `ECS` - Ecuadorian Sucre
// * `ECV` - Ecuadorian Unit of Constant Value
// * `EGP` - Egyptian Pound
// * `GQE` - Equatorial Guinean Ekwele
// * `ERN` - Eritrean Nakfa
// * `EEK` - Estonian Kroon
// * `ETB` - Ethiopian Birr
// * `EUR` - Euro
// * `XBA` - European Composite Unit
// * `XEU` - European Currency Unit
// * `XBB` - European Monetary Unit
// * `XBC` - European Unit of Account (XBC)
// * `XBD` - European Unit of Account (XBD)
// * `FKP` - Falkland Islands Pound
// * `FJD` - Fijian Dollar
// * `FIM` - Finnish Markka
// * `FRF` - French Franc
// * `XFO` - French Gold Franc
// * `XFU` - French UIC-Franc
// * `GMD` - Gambian Dalasi
// * `GEK` - Georgian Kupon Larit
// * `GEL` - Georgian Lari
// * `DEM` - German Mark
// * `GHS` - Ghanaian Cedi
// * `GHC` - Ghanaian Cedi (1979–2007)
// * `GIP` - Gibraltar Pound
// * `XAU` - Gold
// * `GRD` - Greek Drachma
// * `GTQ` - Guatemalan Quetzal
// * `GWP` - Guinea-Bissau Peso
// * `GNF` - Guinean Franc
// * `GNS` - Guinean Syli
// * `GYD` - Guyanaese Dollar
// * `HTG` - Haitian Gourde
// * `HNL` - Honduran Lempira
// * `HKD` - Hong Kong Dollar
// * `HUF` - Hungarian Forint
// * `IMP` - IMP
// * `ISK` - Icelandic Króna
// * `ISJ` - Icelandic Króna (1918–1981)
// * `INR` - Indian Rupee
// * `IDR` - Indonesian Rupiah
// * `IRR` - Iranian Rial
// * `IQD` - Iraqi Dinar
// * `IEP` - Irish Pound
// * `ILS` - Israeli New Shekel
// * `ILP` - Israeli Pound
// * `ILR` - Israeli Shekel (1980–1985)
// * `ITL` - Italian Lira
// * `JMD` - Jamaican Dollar
// * `JPY` - Japanese Yen
// * `JOD` - Jordanian Dinar
// * `KZT` - Kazakhstani Tenge
// * `KES` - Kenyan Shilling
// * `KWD` - Kuwaiti Dinar
// * `KGS` - Kyrgystani Som
// * `LAK` - Laotian Kip
// * `LVL` - Latvian Lats
// * `LVR` - Latvian Ruble
// * `LBP` - Lebanese Pound
// * `LSL` - Lesotho Loti
// * `LRD` - Liberian Dollar
// * `LYD` - Libyan Dinar
// * `LTL` - Lithuanian Litas
// * `LTT` - Lithuanian Talonas
// * `LUL` - Luxembourg Financial Franc
// * `LUC` - Luxembourgian Convertible Franc
// * `LUF` - Luxembourgian Franc
// * `MOP` - Macanese Pataca
// * `MKD` - Macedonian Denar
// * `MKN` - Macedonian Denar (1992–1993)
// * `MGA` - Malagasy Ariary
// * `MGF` - Malagasy Franc
// * `MWK` - Malawian Kwacha
// * `MYR` - Malaysian Ringgit
// * `MVR` - Maldivian Rufiyaa
// * `MVP` - Maldivian Rupee (1947–1981)
// * `MLF` - Malian Franc
// * `MTL` - Maltese Lira
// * `MTP` - Maltese Pound
// * `MRU` - Mauritanian Ouguiya
// * `MRO` - Mauritanian Ouguiya (1973–2017)
// * `MUR` - Mauritian Rupee
// * `MXV` - Mexican Investment Unit
// * `MXN` - Mexican Peso
// * `MXP` - Mexican Silver Peso (1861–1992)
// * `MDC` - Moldovan Cupon
// * `MDL` - Moldovan Leu
// * `MCF` - Monegasque Franc
// * `MNT` - Mongolian Tugrik
// * `MAD` - Moroccan Dirham
// * `MAF` - Moroccan Franc
// * `MZE` - Mozambican Escudo
// * `MZN` - Mozambican Metical
// * `MZM` - Mozambican Metical (1980–2006)
// * `MMK` - Myanmar Kyat
// * `NAD` - Namibian Dollar
// * `NPR` - Nepalese Rupee
// * `ANG` - Netherlands Antillean Guilder
// * `TWD` - New Taiwan Dollar
// * `NZD` - New Zealand Dollar
// * `NIO` - Nicaraguan Córdoba
// * `NIC` - Nicaraguan Córdoba (1988–1991)
// * `NGN` - Nigerian Naira
// * `KPW` - North Korean Won
// * `NOK` - Norwegian Krone
// * `OMR` - Omani Rial
// * `PKR` - Pakistani Rupee
// * `XPD` - Palladium
// * `PAB` - Panamanian Balboa
// * `PGK` - Papua New Guinean Kina
// * `PYG` - Paraguayan Guarani
// * `PEI` - Peruvian Inti
// * `PEN` - Peruvian Sol
// * `PES` - Peruvian Sol (1863–1965)
// * `PHP` - Philippine Peso
// * `XPT` - Platinum
// * `PLN` - Polish Zloty
// * `PLZ` - Polish Zloty (1950–1995)
// * `PTE` - Portuguese Escudo
// * `GWE` - Portuguese Guinea Escudo
// * `QAR` - Qatari Rial
// * `XRE` - RINET Funds
// * `RHD` - Rhodesian Dollar
// * `RON` - Romanian Leu
// * `ROL` - Romanian Leu (1952–2006)
// * `RUB` - Russian Ruble
// * `RUR` - Russian Ruble (1991–1998)
// * `RWF` - Rwandan Franc
// * `SVC` - Salvadoran Colón
// * `WST` - Samoan Tala
// * `SAR` - Saudi Riyal
// * `RSD` - Serbian Dinar
// * `CSD` - Serbian Dinar (2002–2006)
// * `SCR` - Seychellois Rupee
// * `SLL` - Sierra Leonean Leone
// * `XAG` - Silver
// * `SGD` - Singapore Dollar
// * `SKK` - Slovak Koruna
// * `SIT` - Slovenian Tolar
// * `SBD` - Solomon Islands Dollar
// * `SOS` - Somali Shilling
// * `ZAR` - South African Rand
// * `ZAL` - South African Rand (financial)
// * `KRH` - South Korean Hwan (1953–1962)
// * `KRW` - South Korean Won
// * `KRO` - South Korean Won (1945–1953)
// * `SSP` - South Sudanese Pound
// * `SUR` - Soviet Rouble
// * `ESP` - Spanish Peseta
// * `ESA` - Spanish Peseta (A account)
// * `ESB` - Spanish Peseta (convertible account)
// * `XDR` - Special Drawing Rights
// * `LKR` - Sri Lankan Rupee
// * `SHP` - St. Helena Pound
// * `XSU` - Sucre
// * `SDD` - Sudanese Dinar (1992–2007)
// * `SDG` - Sudanese Pound
// * `SDP` - Sudanese Pound (1957–1998)
// * `SRD` - Surinamese Dollar
// * `SRG` - Surinamese Guilder
// * `SZL` - Swazi Lilangeni
// * `SEK` - Swedish Krona
// * `CHF` - Swiss Franc
// * `SYP` - Syrian Pound
// * `STN` - São Tomé & Príncipe Dobra
// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
// * `TVD` - TVD
// * `TJR` - Tajikistani Ruble
// * `TJS` - Tajikistani Somoni
// * `TZS` - Tanzanian Shilling
// * `XTS` - Testing Currency Code
// * `THB` - Thai Baht
// * `XXX` - The codes assigned for transactions where no currency is involved
// * `TPE` - Timorese Escudo
// * `TOP` - Tongan Paʻanga
// * `TTD` - Trinidad & Tobago Dollar
// * `TND` - Tunisian Dinar
// * `TRY` - Turkish Lira
// * `TRL` - Turkish Lira (1922–2005)
// * `TMT` - Turkmenistani Manat
// * `TMM` - Turkmenistani Manat (1993–2009)
// * `USD` - US Dollar
// * `USN` - US Dollar (Next day)
// * `USS` - US Dollar (Same day)
// * `UGX` - Ugandan Shilling
// * `UGS` - Ugandan Shilling (1966–1987)
// * `UAH` - Ukrainian Hryvnia
// * `UAK` - Ukrainian Karbovanets
// * `AED` - United Arab Emirates Dirham
// * `UYW` - Uruguayan Nominal Wage Index Unit
// * `UYU` - Uruguayan Peso
// * `UYP` - Uruguayan Peso (1975–1993)
// * `UYI` - Uruguayan Peso (Indexed Units)
// * `UZS` - Uzbekistani Som
// * `VUV` - Vanuatu Vatu
// * `VES` - Venezuelan Bolívar
// * `VEB` - Venezuelan Bolívar (1871–2008)
// * `VEF` - Venezuelan Bolívar (2008–2018)
// * `VND` - Vietnamese Dong
// * `VNN` - Vietnamese Dong (1978–1985)
// * `CHE` - WIR Euro
// * `CHW` - WIR Franc
// * `XOF` - West African CFA Franc
// * `YDD` - Yemeni Dinar
// * `YER` - Yemeni Rial
// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
// * `YUM` - Yugoslavian New Dinar (1994–2002)
// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
// * `ZWN` - ZWN
// * `ZRN` - Zairean New Zaire (1993–1998)
// * `ZRZ` - Zairean Zaire (1971–1993)
// * `ZMW` - Zambian Kwacha
// * `ZMK` - Zambian Kwacha (1968–2012)
// * `ZWD` - Zimbabwean Dollar (1980–2008)
// * `ZWR` - Zimbabwean Dollar (2008)
// * `ZWL` - Zimbabwean Dollar (2009)
type PurchaseOrderRequestCurrency struct {
	typeName     string
	CurrencyEnum CurrencyEnum
	String       string
}

func NewPurchaseOrderRequestCurrencyFromCurrencyEnum(value CurrencyEnum) *PurchaseOrderRequestCurrency {
	return &PurchaseOrderRequestCurrency{typeName: "currencyEnum", CurrencyEnum: value}
}

func NewPurchaseOrderRequestCurrencyFromString(value string) *PurchaseOrderRequestCurrency {
	return &PurchaseOrderRequestCurrency{typeName: "string", String: value}
}

func (p *PurchaseOrderRequestCurrency) UnmarshalJSON(data []byte) error {
	var valueCurrencyEnum CurrencyEnum
	if err := json.Unmarshal(data, &valueCurrencyEnum); err == nil {
		p.typeName = "currencyEnum"
		p.CurrencyEnum = valueCurrencyEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typeName = "string"
		p.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PurchaseOrderRequestCurrency) MarshalJSON() ([]byte, error) {
	switch p.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "currencyEnum":
		return json.Marshal(p.CurrencyEnum)
	case "string":
		return json.Marshal(p.String)
	}
}

type PurchaseOrderRequestCurrencyVisitor interface {
	VisitCurrencyEnum(CurrencyEnum) error
	VisitString(string) error
}

func (p *PurchaseOrderRequestCurrency) Accept(visitor PurchaseOrderRequestCurrencyVisitor) error {
	switch p.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "currencyEnum":
		return visitor.VisitCurrencyEnum(p.CurrencyEnum)
	case "string":
		return visitor.VisitString(p.String)
	}
}

// The purchase order's delivery address.
type PurchaseOrderRequestDeliveryAddress struct {
	typeName string
	String   string
	Address  *Address
}

func NewPurchaseOrderRequestDeliveryAddressFromString(value string) *PurchaseOrderRequestDeliveryAddress {
	return &PurchaseOrderRequestDeliveryAddress{typeName: "string", String: value}
}

func NewPurchaseOrderRequestDeliveryAddressFromAddress(value *Address) *PurchaseOrderRequestDeliveryAddress {
	return &PurchaseOrderRequestDeliveryAddress{typeName: "address", Address: value}
}

func (p *PurchaseOrderRequestDeliveryAddress) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typeName = "string"
		p.String = valueString
		return nil
	}
	valueAddress := new(Address)
	if err := json.Unmarshal(data, &valueAddress); err == nil {
		p.typeName = "address"
		p.Address = valueAddress
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PurchaseOrderRequestDeliveryAddress) MarshalJSON() ([]byte, error) {
	switch p.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return json.Marshal(p.String)
	case "address":
		return json.Marshal(p.Address)
	}
}

type PurchaseOrderRequestDeliveryAddressVisitor interface {
	VisitString(string) error
	VisitAddress(*Address) error
}

func (p *PurchaseOrderRequestDeliveryAddress) Accept(visitor PurchaseOrderRequestDeliveryAddressVisitor) error {
	switch p.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return visitor.VisitString(p.String)
	case "address":
		return visitor.VisitAddress(p.Address)
	}
}

// The purchase order's status.
//
// * `DRAFT` - DRAFT
// * `SUBMITTED` - SUBMITTED
// * `AUTHORIZED` - AUTHORIZED
// * `BILLED` - BILLED
// * `DELETED` - DELETED
type PurchaseOrderRequestStatus struct {
	typeName                string
	PurchaseOrderStatusEnum PurchaseOrderStatusEnum
	String                  string
}

func NewPurchaseOrderRequestStatusFromPurchaseOrderStatusEnum(value PurchaseOrderStatusEnum) *PurchaseOrderRequestStatus {
	return &PurchaseOrderRequestStatus{typeName: "purchaseOrderStatusEnum", PurchaseOrderStatusEnum: value}
}

func NewPurchaseOrderRequestStatusFromString(value string) *PurchaseOrderRequestStatus {
	return &PurchaseOrderRequestStatus{typeName: "string", String: value}
}

func (p *PurchaseOrderRequestStatus) UnmarshalJSON(data []byte) error {
	var valuePurchaseOrderStatusEnum PurchaseOrderStatusEnum
	if err := json.Unmarshal(data, &valuePurchaseOrderStatusEnum); err == nil {
		p.typeName = "purchaseOrderStatusEnum"
		p.PurchaseOrderStatusEnum = valuePurchaseOrderStatusEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typeName = "string"
		p.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PurchaseOrderRequestStatus) MarshalJSON() ([]byte, error) {
	switch p.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "purchaseOrderStatusEnum":
		return json.Marshal(p.PurchaseOrderStatusEnum)
	case "string":
		return json.Marshal(p.String)
	}
}

type PurchaseOrderRequestStatusVisitor interface {
	VisitPurchaseOrderStatusEnum(PurchaseOrderStatusEnum) error
	VisitString(string) error
}

func (p *PurchaseOrderRequestStatus) Accept(visitor PurchaseOrderRequestStatusVisitor) error {
	switch p.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "purchaseOrderStatusEnum":
		return visitor.VisitPurchaseOrderStatusEnum(p.PurchaseOrderStatusEnum)
	case "string":
		return visitor.VisitString(p.String)
	}
}

type PurchaseOrderRequestTrackingCategoriesItem struct {
	typeName         string
	String           string
	TrackingCategory *TrackingCategory
}

func NewPurchaseOrderRequestTrackingCategoriesItemFromString(value string) *PurchaseOrderRequestTrackingCategoriesItem {
	return &PurchaseOrderRequestTrackingCategoriesItem{typeName: "string", String: value}
}

func NewPurchaseOrderRequestTrackingCategoriesItemFromTrackingCategory(value *TrackingCategory) *PurchaseOrderRequestTrackingCategoriesItem {
	return &PurchaseOrderRequestTrackingCategoriesItem{typeName: "trackingCategory", TrackingCategory: value}
}

func (p *PurchaseOrderRequestTrackingCategoriesItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typeName = "string"
		p.String = valueString
		return nil
	}
	valueTrackingCategory := new(TrackingCategory)
	if err := json.Unmarshal(data, &valueTrackingCategory); err == nil {
		p.typeName = "trackingCategory"
		p.TrackingCategory = valueTrackingCategory
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PurchaseOrderRequestTrackingCategoriesItem) MarshalJSON() ([]byte, error) {
	switch p.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return json.Marshal(p.String)
	case "trackingCategory":
		return json.Marshal(p.TrackingCategory)
	}
}

type PurchaseOrderRequestTrackingCategoriesItemVisitor interface {
	VisitString(string) error
	VisitTrackingCategory(*TrackingCategory) error
}

func (p *PurchaseOrderRequestTrackingCategoriesItem) Accept(visitor PurchaseOrderRequestTrackingCategoriesItemVisitor) error {
	switch p.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return visitor.VisitString(p.String)
	case "trackingCategory":
		return visitor.VisitTrackingCategory(p.TrackingCategory)
	}
}

// The party fulfilling the purchase order.
type PurchaseOrderRequestVendor struct {
	typeName string
	String   string
	Contact  *Contact
}

func NewPurchaseOrderRequestVendorFromString(value string) *PurchaseOrderRequestVendor {
	return &PurchaseOrderRequestVendor{typeName: "string", String: value}
}

func NewPurchaseOrderRequestVendorFromContact(value *Contact) *PurchaseOrderRequestVendor {
	return &PurchaseOrderRequestVendor{typeName: "contact", Contact: value}
}

func (p *PurchaseOrderRequestVendor) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typeName = "string"
		p.String = valueString
		return nil
	}
	valueContact := new(Contact)
	if err := json.Unmarshal(data, &valueContact); err == nil {
		p.typeName = "contact"
		p.Contact = valueContact
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PurchaseOrderRequestVendor) MarshalJSON() ([]byte, error) {
	switch p.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return json.Marshal(p.String)
	case "contact":
		return json.Marshal(p.Contact)
	}
}

type PurchaseOrderRequestVendorVisitor interface {
	VisitString(string) error
	VisitContact(*Contact) error
}

func (p *PurchaseOrderRequestVendor) Accept(visitor PurchaseOrderRequestVendorVisitor) error {
	switch p.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return visitor.VisitString(p.String)
	case "contact":
		return visitor.VisitContact(p.Contact)
	}
}

type PurchaseOrderResponse struct {
	Model    *PurchaseOrder              `json:"model,omitempty"`
	Warnings []*WarningValidationProblem `json:"warnings,omitempty"`
	Errors   []*ErrorValidationProblem   `json:"errors,omitempty"`
	Logs     []*DebugModeLog             `json:"logs,omitempty"`
}

// The purchase order's status.
//
// * `DRAFT` - DRAFT
// * `SUBMITTED` - SUBMITTED
// * `AUTHORIZED` - AUTHORIZED
// * `BILLED` - BILLED
// * `DELETED` - DELETED
type PurchaseOrderStatus struct {
	typeName                string
	PurchaseOrderStatusEnum PurchaseOrderStatusEnum
	String                  string
}

func NewPurchaseOrderStatusFromPurchaseOrderStatusEnum(value PurchaseOrderStatusEnum) *PurchaseOrderStatus {
	return &PurchaseOrderStatus{typeName: "purchaseOrderStatusEnum", PurchaseOrderStatusEnum: value}
}

func NewPurchaseOrderStatusFromString(value string) *PurchaseOrderStatus {
	return &PurchaseOrderStatus{typeName: "string", String: value}
}

func (p *PurchaseOrderStatus) UnmarshalJSON(data []byte) error {
	var valuePurchaseOrderStatusEnum PurchaseOrderStatusEnum
	if err := json.Unmarshal(data, &valuePurchaseOrderStatusEnum); err == nil {
		p.typeName = "purchaseOrderStatusEnum"
		p.PurchaseOrderStatusEnum = valuePurchaseOrderStatusEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typeName = "string"
		p.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PurchaseOrderStatus) MarshalJSON() ([]byte, error) {
	switch p.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "purchaseOrderStatusEnum":
		return json.Marshal(p.PurchaseOrderStatusEnum)
	case "string":
		return json.Marshal(p.String)
	}
}

type PurchaseOrderStatusVisitor interface {
	VisitPurchaseOrderStatusEnum(PurchaseOrderStatusEnum) error
	VisitString(string) error
}

func (p *PurchaseOrderStatus) Accept(visitor PurchaseOrderStatusVisitor) error {
	switch p.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "purchaseOrderStatusEnum":
		return visitor.VisitPurchaseOrderStatusEnum(p.PurchaseOrderStatusEnum)
	case "string":
		return visitor.VisitString(p.String)
	}
}

// * `DRAFT` - DRAFT
// * `SUBMITTED` - SUBMITTED
// * `AUTHORIZED` - AUTHORIZED
// * `BILLED` - BILLED
// * `DELETED` - DELETED
type PurchaseOrderStatusEnum uint

const (
	PurchaseOrderStatusEnumDraft PurchaseOrderStatusEnum = iota + 1
	PurchaseOrderStatusEnumSubmitted
	PurchaseOrderStatusEnumAuthorized
	PurchaseOrderStatusEnumBilled
	PurchaseOrderStatusEnumDeleted
)

func (p PurchaseOrderStatusEnum) String() string {
	switch p {
	default:
		return strconv.Itoa(int(p))
	case PurchaseOrderStatusEnumDraft:
		return "DRAFT"
	case PurchaseOrderStatusEnumSubmitted:
		return "SUBMITTED"
	case PurchaseOrderStatusEnumAuthorized:
		return "AUTHORIZED"
	case PurchaseOrderStatusEnumBilled:
		return "BILLED"
	case PurchaseOrderStatusEnumDeleted:
		return "DELETED"
	}
}

func (p PurchaseOrderStatusEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", p.String())), nil
}

func (p *PurchaseOrderStatusEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "DRAFT":
		value := PurchaseOrderStatusEnumDraft
		*p = value
	case "SUBMITTED":
		value := PurchaseOrderStatusEnumSubmitted
		*p = value
	case "AUTHORIZED":
		value := PurchaseOrderStatusEnumAuthorized
		*p = value
	case "BILLED":
		value := PurchaseOrderStatusEnumBilled
		*p = value
	case "DELETED":
		value := PurchaseOrderStatusEnumDeleted
		*p = value
	}
	return nil
}

type PurchaseOrderTrackingCategoriesItem struct {
	typeName         string
	String           string
	TrackingCategory *TrackingCategory
}

func NewPurchaseOrderTrackingCategoriesItemFromString(value string) *PurchaseOrderTrackingCategoriesItem {
	return &PurchaseOrderTrackingCategoriesItem{typeName: "string", String: value}
}

func NewPurchaseOrderTrackingCategoriesItemFromTrackingCategory(value *TrackingCategory) *PurchaseOrderTrackingCategoriesItem {
	return &PurchaseOrderTrackingCategoriesItem{typeName: "trackingCategory", TrackingCategory: value}
}

func (p *PurchaseOrderTrackingCategoriesItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typeName = "string"
		p.String = valueString
		return nil
	}
	valueTrackingCategory := new(TrackingCategory)
	if err := json.Unmarshal(data, &valueTrackingCategory); err == nil {
		p.typeName = "trackingCategory"
		p.TrackingCategory = valueTrackingCategory
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PurchaseOrderTrackingCategoriesItem) MarshalJSON() ([]byte, error) {
	switch p.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return json.Marshal(p.String)
	case "trackingCategory":
		return json.Marshal(p.TrackingCategory)
	}
}

type PurchaseOrderTrackingCategoriesItemVisitor interface {
	VisitString(string) error
	VisitTrackingCategory(*TrackingCategory) error
}

func (p *PurchaseOrderTrackingCategoriesItem) Accept(visitor PurchaseOrderTrackingCategoriesItemVisitor) error {
	switch p.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return visitor.VisitString(p.String)
	case "trackingCategory":
		return visitor.VisitTrackingCategory(p.TrackingCategory)
	}
}

// The party fulfilling the purchase order.
type PurchaseOrderVendor struct {
	typeName string
	String   string
	Contact  *Contact
}

func NewPurchaseOrderVendorFromString(value string) *PurchaseOrderVendor {
	return &PurchaseOrderVendor{typeName: "string", String: value}
}

func NewPurchaseOrderVendorFromContact(value *Contact) *PurchaseOrderVendor {
	return &PurchaseOrderVendor{typeName: "contact", Contact: value}
}

func (p *PurchaseOrderVendor) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typeName = "string"
		p.String = valueString
		return nil
	}
	valueContact := new(Contact)
	if err := json.Unmarshal(data, &valueContact); err == nil {
		p.typeName = "contact"
		p.Contact = valueContact
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PurchaseOrderVendor) MarshalJSON() ([]byte, error) {
	switch p.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return json.Marshal(p.String)
	case "contact":
		return json.Marshal(p.Contact)
	}
}

type PurchaseOrderVendorVisitor interface {
	VisitString(string) error
	VisitContact(*Contact) error
}

func (p *PurchaseOrderVendor) Accept(visitor PurchaseOrderVendorVisitor) error {
	switch p.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return visitor.VisitString(p.String)
	case "contact":
		return visitor.VisitContact(p.Contact)
	}
}

type PurchaseOrdersListRequestExpand uint

const (
	PurchaseOrdersListRequestExpandAccountingPeriod PurchaseOrdersListRequestExpand = iota + 1
	PurchaseOrdersListRequestExpandCompany
	PurchaseOrdersListRequestExpandCompanyAccountingPeriod
	PurchaseOrdersListRequestExpandDeliveryAddress
	PurchaseOrdersListRequestExpandDeliveryAddressAccountingPeriod
	PurchaseOrdersListRequestExpandDeliveryAddressCompany
	PurchaseOrdersListRequestExpandDeliveryAddressCompanyAccountingPeriod
	PurchaseOrdersListRequestExpandDeliveryAddressVendor
	PurchaseOrdersListRequestExpandDeliveryAddressVendorAccountingPeriod
	PurchaseOrdersListRequestExpandDeliveryAddressVendorCompany
	PurchaseOrdersListRequestExpandDeliveryAddressVendorCompanyAccountingPeriod
	PurchaseOrdersListRequestExpandLineItems
	PurchaseOrdersListRequestExpandLineItemsAccountingPeriod
	PurchaseOrdersListRequestExpandLineItemsCompany
	PurchaseOrdersListRequestExpandLineItemsCompanyAccountingPeriod
	PurchaseOrdersListRequestExpandLineItemsDeliveryAddress
	PurchaseOrdersListRequestExpandLineItemsDeliveryAddressAccountingPeriod
	PurchaseOrdersListRequestExpandLineItemsDeliveryAddressCompany
	PurchaseOrdersListRequestExpandLineItemsDeliveryAddressCompanyAccountingPeriod
	PurchaseOrdersListRequestExpandLineItemsDeliveryAddressVendor
	PurchaseOrdersListRequestExpandLineItemsDeliveryAddressVendorAccountingPeriod
	PurchaseOrdersListRequestExpandLineItemsDeliveryAddressVendorCompany
	PurchaseOrdersListRequestExpandLineItemsDeliveryAddressVendorCompanyAccountingPeriod
	PurchaseOrdersListRequestExpandLineItemsTrackingCategories
	PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesAccountingPeriod
	PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesCompany
	PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesCompanyAccountingPeriod
	PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesDeliveryAddress
	PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesDeliveryAddressAccountingPeriod
	PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesDeliveryAddressCompany
	PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesDeliveryAddressCompanyAccountingPeriod
	PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesDeliveryAddressVendor
	PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesDeliveryAddressVendorAccountingPeriod
	PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesDeliveryAddressVendorCompany
	PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesDeliveryAddressVendorCompanyAccountingPeriod
	PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesVendor
	PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesVendorAccountingPeriod
	PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesVendorCompany
	PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesVendorCompanyAccountingPeriod
	PurchaseOrdersListRequestExpandLineItemsVendor
	PurchaseOrdersListRequestExpandLineItemsVendorAccountingPeriod
	PurchaseOrdersListRequestExpandLineItemsVendorCompany
	PurchaseOrdersListRequestExpandLineItemsVendorCompanyAccountingPeriod
	PurchaseOrdersListRequestExpandTrackingCategories
	PurchaseOrdersListRequestExpandTrackingCategoriesAccountingPeriod
	PurchaseOrdersListRequestExpandTrackingCategoriesCompany
	PurchaseOrdersListRequestExpandTrackingCategoriesCompanyAccountingPeriod
	PurchaseOrdersListRequestExpandTrackingCategoriesDeliveryAddress
	PurchaseOrdersListRequestExpandTrackingCategoriesDeliveryAddressAccountingPeriod
	PurchaseOrdersListRequestExpandTrackingCategoriesDeliveryAddressCompany
	PurchaseOrdersListRequestExpandTrackingCategoriesDeliveryAddressCompanyAccountingPeriod
	PurchaseOrdersListRequestExpandTrackingCategoriesDeliveryAddressVendor
	PurchaseOrdersListRequestExpandTrackingCategoriesDeliveryAddressVendorAccountingPeriod
	PurchaseOrdersListRequestExpandTrackingCategoriesDeliveryAddressVendorCompany
	PurchaseOrdersListRequestExpandTrackingCategoriesDeliveryAddressVendorCompanyAccountingPeriod
	PurchaseOrdersListRequestExpandTrackingCategoriesVendor
	PurchaseOrdersListRequestExpandTrackingCategoriesVendorAccountingPeriod
	PurchaseOrdersListRequestExpandTrackingCategoriesVendorCompany
	PurchaseOrdersListRequestExpandTrackingCategoriesVendorCompanyAccountingPeriod
	PurchaseOrdersListRequestExpandVendor
	PurchaseOrdersListRequestExpandVendorAccountingPeriod
	PurchaseOrdersListRequestExpandVendorCompany
	PurchaseOrdersListRequestExpandVendorCompanyAccountingPeriod
)

func (p PurchaseOrdersListRequestExpand) String() string {
	switch p {
	default:
		return strconv.Itoa(int(p))
	case PurchaseOrdersListRequestExpandAccountingPeriod:
		return "accounting_period"
	case PurchaseOrdersListRequestExpandCompany:
		return "company"
	case PurchaseOrdersListRequestExpandCompanyAccountingPeriod:
		return "company,accounting_period"
	case PurchaseOrdersListRequestExpandDeliveryAddress:
		return "delivery_address"
	case PurchaseOrdersListRequestExpandDeliveryAddressAccountingPeriod:
		return "delivery_address,accounting_period"
	case PurchaseOrdersListRequestExpandDeliveryAddressCompany:
		return "delivery_address,company"
	case PurchaseOrdersListRequestExpandDeliveryAddressCompanyAccountingPeriod:
		return "delivery_address,company,accounting_period"
	case PurchaseOrdersListRequestExpandDeliveryAddressVendor:
		return "delivery_address,vendor"
	case PurchaseOrdersListRequestExpandDeliveryAddressVendorAccountingPeriod:
		return "delivery_address,vendor,accounting_period"
	case PurchaseOrdersListRequestExpandDeliveryAddressVendorCompany:
		return "delivery_address,vendor,company"
	case PurchaseOrdersListRequestExpandDeliveryAddressVendorCompanyAccountingPeriod:
		return "delivery_address,vendor,company,accounting_period"
	case PurchaseOrdersListRequestExpandLineItems:
		return "line_items"
	case PurchaseOrdersListRequestExpandLineItemsAccountingPeriod:
		return "line_items,accounting_period"
	case PurchaseOrdersListRequestExpandLineItemsCompany:
		return "line_items,company"
	case PurchaseOrdersListRequestExpandLineItemsCompanyAccountingPeriod:
		return "line_items,company,accounting_period"
	case PurchaseOrdersListRequestExpandLineItemsDeliveryAddress:
		return "line_items,delivery_address"
	case PurchaseOrdersListRequestExpandLineItemsDeliveryAddressAccountingPeriod:
		return "line_items,delivery_address,accounting_period"
	case PurchaseOrdersListRequestExpandLineItemsDeliveryAddressCompany:
		return "line_items,delivery_address,company"
	case PurchaseOrdersListRequestExpandLineItemsDeliveryAddressCompanyAccountingPeriod:
		return "line_items,delivery_address,company,accounting_period"
	case PurchaseOrdersListRequestExpandLineItemsDeliveryAddressVendor:
		return "line_items,delivery_address,vendor"
	case PurchaseOrdersListRequestExpandLineItemsDeliveryAddressVendorAccountingPeriod:
		return "line_items,delivery_address,vendor,accounting_period"
	case PurchaseOrdersListRequestExpandLineItemsDeliveryAddressVendorCompany:
		return "line_items,delivery_address,vendor,company"
	case PurchaseOrdersListRequestExpandLineItemsDeliveryAddressVendorCompanyAccountingPeriod:
		return "line_items,delivery_address,vendor,company,accounting_period"
	case PurchaseOrdersListRequestExpandLineItemsTrackingCategories:
		return "line_items,tracking_categories"
	case PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesAccountingPeriod:
		return "line_items,tracking_categories,accounting_period"
	case PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesCompany:
		return "line_items,tracking_categories,company"
	case PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesCompanyAccountingPeriod:
		return "line_items,tracking_categories,company,accounting_period"
	case PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesDeliveryAddress:
		return "line_items,tracking_categories,delivery_address"
	case PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesDeliveryAddressAccountingPeriod:
		return "line_items,tracking_categories,delivery_address,accounting_period"
	case PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesDeliveryAddressCompany:
		return "line_items,tracking_categories,delivery_address,company"
	case PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesDeliveryAddressCompanyAccountingPeriod:
		return "line_items,tracking_categories,delivery_address,company,accounting_period"
	case PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesDeliveryAddressVendor:
		return "line_items,tracking_categories,delivery_address,vendor"
	case PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesDeliveryAddressVendorAccountingPeriod:
		return "line_items,tracking_categories,delivery_address,vendor,accounting_period"
	case PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesDeliveryAddressVendorCompany:
		return "line_items,tracking_categories,delivery_address,vendor,company"
	case PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesDeliveryAddressVendorCompanyAccountingPeriod:
		return "line_items,tracking_categories,delivery_address,vendor,company,accounting_period"
	case PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesVendor:
		return "line_items,tracking_categories,vendor"
	case PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesVendorAccountingPeriod:
		return "line_items,tracking_categories,vendor,accounting_period"
	case PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesVendorCompany:
		return "line_items,tracking_categories,vendor,company"
	case PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesVendorCompanyAccountingPeriod:
		return "line_items,tracking_categories,vendor,company,accounting_period"
	case PurchaseOrdersListRequestExpandLineItemsVendor:
		return "line_items,vendor"
	case PurchaseOrdersListRequestExpandLineItemsVendorAccountingPeriod:
		return "line_items,vendor,accounting_period"
	case PurchaseOrdersListRequestExpandLineItemsVendorCompany:
		return "line_items,vendor,company"
	case PurchaseOrdersListRequestExpandLineItemsVendorCompanyAccountingPeriod:
		return "line_items,vendor,company,accounting_period"
	case PurchaseOrdersListRequestExpandTrackingCategories:
		return "tracking_categories"
	case PurchaseOrdersListRequestExpandTrackingCategoriesAccountingPeriod:
		return "tracking_categories,accounting_period"
	case PurchaseOrdersListRequestExpandTrackingCategoriesCompany:
		return "tracking_categories,company"
	case PurchaseOrdersListRequestExpandTrackingCategoriesCompanyAccountingPeriod:
		return "tracking_categories,company,accounting_period"
	case PurchaseOrdersListRequestExpandTrackingCategoriesDeliveryAddress:
		return "tracking_categories,delivery_address"
	case PurchaseOrdersListRequestExpandTrackingCategoriesDeliveryAddressAccountingPeriod:
		return "tracking_categories,delivery_address,accounting_period"
	case PurchaseOrdersListRequestExpandTrackingCategoriesDeliveryAddressCompany:
		return "tracking_categories,delivery_address,company"
	case PurchaseOrdersListRequestExpandTrackingCategoriesDeliveryAddressCompanyAccountingPeriod:
		return "tracking_categories,delivery_address,company,accounting_period"
	case PurchaseOrdersListRequestExpandTrackingCategoriesDeliveryAddressVendor:
		return "tracking_categories,delivery_address,vendor"
	case PurchaseOrdersListRequestExpandTrackingCategoriesDeliveryAddressVendorAccountingPeriod:
		return "tracking_categories,delivery_address,vendor,accounting_period"
	case PurchaseOrdersListRequestExpandTrackingCategoriesDeliveryAddressVendorCompany:
		return "tracking_categories,delivery_address,vendor,company"
	case PurchaseOrdersListRequestExpandTrackingCategoriesDeliveryAddressVendorCompanyAccountingPeriod:
		return "tracking_categories,delivery_address,vendor,company,accounting_period"
	case PurchaseOrdersListRequestExpandTrackingCategoriesVendor:
		return "tracking_categories,vendor"
	case PurchaseOrdersListRequestExpandTrackingCategoriesVendorAccountingPeriod:
		return "tracking_categories,vendor,accounting_period"
	case PurchaseOrdersListRequestExpandTrackingCategoriesVendorCompany:
		return "tracking_categories,vendor,company"
	case PurchaseOrdersListRequestExpandTrackingCategoriesVendorCompanyAccountingPeriod:
		return "tracking_categories,vendor,company,accounting_period"
	case PurchaseOrdersListRequestExpandVendor:
		return "vendor"
	case PurchaseOrdersListRequestExpandVendorAccountingPeriod:
		return "vendor,accounting_period"
	case PurchaseOrdersListRequestExpandVendorCompany:
		return "vendor,company"
	case PurchaseOrdersListRequestExpandVendorCompanyAccountingPeriod:
		return "vendor,company,accounting_period"
	}
}

func (p PurchaseOrdersListRequestExpand) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", p.String())), nil
}

func (p *PurchaseOrdersListRequestExpand) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "accounting_period":
		value := PurchaseOrdersListRequestExpandAccountingPeriod
		*p = value
	case "company":
		value := PurchaseOrdersListRequestExpandCompany
		*p = value
	case "company,accounting_period":
		value := PurchaseOrdersListRequestExpandCompanyAccountingPeriod
		*p = value
	case "delivery_address":
		value := PurchaseOrdersListRequestExpandDeliveryAddress
		*p = value
	case "delivery_address,accounting_period":
		value := PurchaseOrdersListRequestExpandDeliveryAddressAccountingPeriod
		*p = value
	case "delivery_address,company":
		value := PurchaseOrdersListRequestExpandDeliveryAddressCompany
		*p = value
	case "delivery_address,company,accounting_period":
		value := PurchaseOrdersListRequestExpandDeliveryAddressCompanyAccountingPeriod
		*p = value
	case "delivery_address,vendor":
		value := PurchaseOrdersListRequestExpandDeliveryAddressVendor
		*p = value
	case "delivery_address,vendor,accounting_period":
		value := PurchaseOrdersListRequestExpandDeliveryAddressVendorAccountingPeriod
		*p = value
	case "delivery_address,vendor,company":
		value := PurchaseOrdersListRequestExpandDeliveryAddressVendorCompany
		*p = value
	case "delivery_address,vendor,company,accounting_period":
		value := PurchaseOrdersListRequestExpandDeliveryAddressVendorCompanyAccountingPeriod
		*p = value
	case "line_items":
		value := PurchaseOrdersListRequestExpandLineItems
		*p = value
	case "line_items,accounting_period":
		value := PurchaseOrdersListRequestExpandLineItemsAccountingPeriod
		*p = value
	case "line_items,company":
		value := PurchaseOrdersListRequestExpandLineItemsCompany
		*p = value
	case "line_items,company,accounting_period":
		value := PurchaseOrdersListRequestExpandLineItemsCompanyAccountingPeriod
		*p = value
	case "line_items,delivery_address":
		value := PurchaseOrdersListRequestExpandLineItemsDeliveryAddress
		*p = value
	case "line_items,delivery_address,accounting_period":
		value := PurchaseOrdersListRequestExpandLineItemsDeliveryAddressAccountingPeriod
		*p = value
	case "line_items,delivery_address,company":
		value := PurchaseOrdersListRequestExpandLineItemsDeliveryAddressCompany
		*p = value
	case "line_items,delivery_address,company,accounting_period":
		value := PurchaseOrdersListRequestExpandLineItemsDeliveryAddressCompanyAccountingPeriod
		*p = value
	case "line_items,delivery_address,vendor":
		value := PurchaseOrdersListRequestExpandLineItemsDeliveryAddressVendor
		*p = value
	case "line_items,delivery_address,vendor,accounting_period":
		value := PurchaseOrdersListRequestExpandLineItemsDeliveryAddressVendorAccountingPeriod
		*p = value
	case "line_items,delivery_address,vendor,company":
		value := PurchaseOrdersListRequestExpandLineItemsDeliveryAddressVendorCompany
		*p = value
	case "line_items,delivery_address,vendor,company,accounting_period":
		value := PurchaseOrdersListRequestExpandLineItemsDeliveryAddressVendorCompanyAccountingPeriod
		*p = value
	case "line_items,tracking_categories":
		value := PurchaseOrdersListRequestExpandLineItemsTrackingCategories
		*p = value
	case "line_items,tracking_categories,accounting_period":
		value := PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesAccountingPeriod
		*p = value
	case "line_items,tracking_categories,company":
		value := PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesCompany
		*p = value
	case "line_items,tracking_categories,company,accounting_period":
		value := PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesCompanyAccountingPeriod
		*p = value
	case "line_items,tracking_categories,delivery_address":
		value := PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesDeliveryAddress
		*p = value
	case "line_items,tracking_categories,delivery_address,accounting_period":
		value := PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesDeliveryAddressAccountingPeriod
		*p = value
	case "line_items,tracking_categories,delivery_address,company":
		value := PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesDeliveryAddressCompany
		*p = value
	case "line_items,tracking_categories,delivery_address,company,accounting_period":
		value := PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesDeliveryAddressCompanyAccountingPeriod
		*p = value
	case "line_items,tracking_categories,delivery_address,vendor":
		value := PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesDeliveryAddressVendor
		*p = value
	case "line_items,tracking_categories,delivery_address,vendor,accounting_period":
		value := PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesDeliveryAddressVendorAccountingPeriod
		*p = value
	case "line_items,tracking_categories,delivery_address,vendor,company":
		value := PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesDeliveryAddressVendorCompany
		*p = value
	case "line_items,tracking_categories,delivery_address,vendor,company,accounting_period":
		value := PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesDeliveryAddressVendorCompanyAccountingPeriod
		*p = value
	case "line_items,tracking_categories,vendor":
		value := PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesVendor
		*p = value
	case "line_items,tracking_categories,vendor,accounting_period":
		value := PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesVendorAccountingPeriod
		*p = value
	case "line_items,tracking_categories,vendor,company":
		value := PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesVendorCompany
		*p = value
	case "line_items,tracking_categories,vendor,company,accounting_period":
		value := PurchaseOrdersListRequestExpandLineItemsTrackingCategoriesVendorCompanyAccountingPeriod
		*p = value
	case "line_items,vendor":
		value := PurchaseOrdersListRequestExpandLineItemsVendor
		*p = value
	case "line_items,vendor,accounting_period":
		value := PurchaseOrdersListRequestExpandLineItemsVendorAccountingPeriod
		*p = value
	case "line_items,vendor,company":
		value := PurchaseOrdersListRequestExpandLineItemsVendorCompany
		*p = value
	case "line_items,vendor,company,accounting_period":
		value := PurchaseOrdersListRequestExpandLineItemsVendorCompanyAccountingPeriod
		*p = value
	case "tracking_categories":
		value := PurchaseOrdersListRequestExpandTrackingCategories
		*p = value
	case "tracking_categories,accounting_period":
		value := PurchaseOrdersListRequestExpandTrackingCategoriesAccountingPeriod
		*p = value
	case "tracking_categories,company":
		value := PurchaseOrdersListRequestExpandTrackingCategoriesCompany
		*p = value
	case "tracking_categories,company,accounting_period":
		value := PurchaseOrdersListRequestExpandTrackingCategoriesCompanyAccountingPeriod
		*p = value
	case "tracking_categories,delivery_address":
		value := PurchaseOrdersListRequestExpandTrackingCategoriesDeliveryAddress
		*p = value
	case "tracking_categories,delivery_address,accounting_period":
		value := PurchaseOrdersListRequestExpandTrackingCategoriesDeliveryAddressAccountingPeriod
		*p = value
	case "tracking_categories,delivery_address,company":
		value := PurchaseOrdersListRequestExpandTrackingCategoriesDeliveryAddressCompany
		*p = value
	case "tracking_categories,delivery_address,company,accounting_period":
		value := PurchaseOrdersListRequestExpandTrackingCategoriesDeliveryAddressCompanyAccountingPeriod
		*p = value
	case "tracking_categories,delivery_address,vendor":
		value := PurchaseOrdersListRequestExpandTrackingCategoriesDeliveryAddressVendor
		*p = value
	case "tracking_categories,delivery_address,vendor,accounting_period":
		value := PurchaseOrdersListRequestExpandTrackingCategoriesDeliveryAddressVendorAccountingPeriod
		*p = value
	case "tracking_categories,delivery_address,vendor,company":
		value := PurchaseOrdersListRequestExpandTrackingCategoriesDeliveryAddressVendorCompany
		*p = value
	case "tracking_categories,delivery_address,vendor,company,accounting_period":
		value := PurchaseOrdersListRequestExpandTrackingCategoriesDeliveryAddressVendorCompanyAccountingPeriod
		*p = value
	case "tracking_categories,vendor":
		value := PurchaseOrdersListRequestExpandTrackingCategoriesVendor
		*p = value
	case "tracking_categories,vendor,accounting_period":
		value := PurchaseOrdersListRequestExpandTrackingCategoriesVendorAccountingPeriod
		*p = value
	case "tracking_categories,vendor,company":
		value := PurchaseOrdersListRequestExpandTrackingCategoriesVendorCompany
		*p = value
	case "tracking_categories,vendor,company,accounting_period":
		value := PurchaseOrdersListRequestExpandTrackingCategoriesVendorCompanyAccountingPeriod
		*p = value
	case "vendor":
		value := PurchaseOrdersListRequestExpandVendor
		*p = value
	case "vendor,accounting_period":
		value := PurchaseOrdersListRequestExpandVendorAccountingPeriod
		*p = value
	case "vendor,company":
		value := PurchaseOrdersListRequestExpandVendorCompany
		*p = value
	case "vendor,company,accounting_period":
		value := PurchaseOrdersListRequestExpandVendorCompanyAccountingPeriod
		*p = value
	}
	return nil
}

type PurchaseOrdersRetrieveRequestExpand uint

const (
	PurchaseOrdersRetrieveRequestExpandAccountingPeriod PurchaseOrdersRetrieveRequestExpand = iota + 1
	PurchaseOrdersRetrieveRequestExpandCompany
	PurchaseOrdersRetrieveRequestExpandCompanyAccountingPeriod
	PurchaseOrdersRetrieveRequestExpandDeliveryAddress
	PurchaseOrdersRetrieveRequestExpandDeliveryAddressAccountingPeriod
	PurchaseOrdersRetrieveRequestExpandDeliveryAddressCompany
	PurchaseOrdersRetrieveRequestExpandDeliveryAddressCompanyAccountingPeriod
	PurchaseOrdersRetrieveRequestExpandDeliveryAddressVendor
	PurchaseOrdersRetrieveRequestExpandDeliveryAddressVendorAccountingPeriod
	PurchaseOrdersRetrieveRequestExpandDeliveryAddressVendorCompany
	PurchaseOrdersRetrieveRequestExpandDeliveryAddressVendorCompanyAccountingPeriod
	PurchaseOrdersRetrieveRequestExpandLineItems
	PurchaseOrdersRetrieveRequestExpandLineItemsAccountingPeriod
	PurchaseOrdersRetrieveRequestExpandLineItemsCompany
	PurchaseOrdersRetrieveRequestExpandLineItemsCompanyAccountingPeriod
	PurchaseOrdersRetrieveRequestExpandLineItemsDeliveryAddress
	PurchaseOrdersRetrieveRequestExpandLineItemsDeliveryAddressAccountingPeriod
	PurchaseOrdersRetrieveRequestExpandLineItemsDeliveryAddressCompany
	PurchaseOrdersRetrieveRequestExpandLineItemsDeliveryAddressCompanyAccountingPeriod
	PurchaseOrdersRetrieveRequestExpandLineItemsDeliveryAddressVendor
	PurchaseOrdersRetrieveRequestExpandLineItemsDeliveryAddressVendorAccountingPeriod
	PurchaseOrdersRetrieveRequestExpandLineItemsDeliveryAddressVendorCompany
	PurchaseOrdersRetrieveRequestExpandLineItemsDeliveryAddressVendorCompanyAccountingPeriod
	PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategories
	PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesAccountingPeriod
	PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesCompany
	PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesCompanyAccountingPeriod
	PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesDeliveryAddress
	PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesDeliveryAddressAccountingPeriod
	PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesDeliveryAddressCompany
	PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesDeliveryAddressCompanyAccountingPeriod
	PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesDeliveryAddressVendor
	PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesDeliveryAddressVendorAccountingPeriod
	PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesDeliveryAddressVendorCompany
	PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesDeliveryAddressVendorCompanyAccountingPeriod
	PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesVendor
	PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesVendorAccountingPeriod
	PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesVendorCompany
	PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesVendorCompanyAccountingPeriod
	PurchaseOrdersRetrieveRequestExpandLineItemsVendor
	PurchaseOrdersRetrieveRequestExpandLineItemsVendorAccountingPeriod
	PurchaseOrdersRetrieveRequestExpandLineItemsVendorCompany
	PurchaseOrdersRetrieveRequestExpandLineItemsVendorCompanyAccountingPeriod
	PurchaseOrdersRetrieveRequestExpandTrackingCategories
	PurchaseOrdersRetrieveRequestExpandTrackingCategoriesAccountingPeriod
	PurchaseOrdersRetrieveRequestExpandTrackingCategoriesCompany
	PurchaseOrdersRetrieveRequestExpandTrackingCategoriesCompanyAccountingPeriod
	PurchaseOrdersRetrieveRequestExpandTrackingCategoriesDeliveryAddress
	PurchaseOrdersRetrieveRequestExpandTrackingCategoriesDeliveryAddressAccountingPeriod
	PurchaseOrdersRetrieveRequestExpandTrackingCategoriesDeliveryAddressCompany
	PurchaseOrdersRetrieveRequestExpandTrackingCategoriesDeliveryAddressCompanyAccountingPeriod
	PurchaseOrdersRetrieveRequestExpandTrackingCategoriesDeliveryAddressVendor
	PurchaseOrdersRetrieveRequestExpandTrackingCategoriesDeliveryAddressVendorAccountingPeriod
	PurchaseOrdersRetrieveRequestExpandTrackingCategoriesDeliveryAddressVendorCompany
	PurchaseOrdersRetrieveRequestExpandTrackingCategoriesDeliveryAddressVendorCompanyAccountingPeriod
	PurchaseOrdersRetrieveRequestExpandTrackingCategoriesVendor
	PurchaseOrdersRetrieveRequestExpandTrackingCategoriesVendorAccountingPeriod
	PurchaseOrdersRetrieveRequestExpandTrackingCategoriesVendorCompany
	PurchaseOrdersRetrieveRequestExpandTrackingCategoriesVendorCompanyAccountingPeriod
	PurchaseOrdersRetrieveRequestExpandVendor
	PurchaseOrdersRetrieveRequestExpandVendorAccountingPeriod
	PurchaseOrdersRetrieveRequestExpandVendorCompany
	PurchaseOrdersRetrieveRequestExpandVendorCompanyAccountingPeriod
)

func (p PurchaseOrdersRetrieveRequestExpand) String() string {
	switch p {
	default:
		return strconv.Itoa(int(p))
	case PurchaseOrdersRetrieveRequestExpandAccountingPeriod:
		return "accounting_period"
	case PurchaseOrdersRetrieveRequestExpandCompany:
		return "company"
	case PurchaseOrdersRetrieveRequestExpandCompanyAccountingPeriod:
		return "company,accounting_period"
	case PurchaseOrdersRetrieveRequestExpandDeliveryAddress:
		return "delivery_address"
	case PurchaseOrdersRetrieveRequestExpandDeliveryAddressAccountingPeriod:
		return "delivery_address,accounting_period"
	case PurchaseOrdersRetrieveRequestExpandDeliveryAddressCompany:
		return "delivery_address,company"
	case PurchaseOrdersRetrieveRequestExpandDeliveryAddressCompanyAccountingPeriod:
		return "delivery_address,company,accounting_period"
	case PurchaseOrdersRetrieveRequestExpandDeliveryAddressVendor:
		return "delivery_address,vendor"
	case PurchaseOrdersRetrieveRequestExpandDeliveryAddressVendorAccountingPeriod:
		return "delivery_address,vendor,accounting_period"
	case PurchaseOrdersRetrieveRequestExpandDeliveryAddressVendorCompany:
		return "delivery_address,vendor,company"
	case PurchaseOrdersRetrieveRequestExpandDeliveryAddressVendorCompanyAccountingPeriod:
		return "delivery_address,vendor,company,accounting_period"
	case PurchaseOrdersRetrieveRequestExpandLineItems:
		return "line_items"
	case PurchaseOrdersRetrieveRequestExpandLineItemsAccountingPeriod:
		return "line_items,accounting_period"
	case PurchaseOrdersRetrieveRequestExpandLineItemsCompany:
		return "line_items,company"
	case PurchaseOrdersRetrieveRequestExpandLineItemsCompanyAccountingPeriod:
		return "line_items,company,accounting_period"
	case PurchaseOrdersRetrieveRequestExpandLineItemsDeliveryAddress:
		return "line_items,delivery_address"
	case PurchaseOrdersRetrieveRequestExpandLineItemsDeliveryAddressAccountingPeriod:
		return "line_items,delivery_address,accounting_period"
	case PurchaseOrdersRetrieveRequestExpandLineItemsDeliveryAddressCompany:
		return "line_items,delivery_address,company"
	case PurchaseOrdersRetrieveRequestExpandLineItemsDeliveryAddressCompanyAccountingPeriod:
		return "line_items,delivery_address,company,accounting_period"
	case PurchaseOrdersRetrieveRequestExpandLineItemsDeliveryAddressVendor:
		return "line_items,delivery_address,vendor"
	case PurchaseOrdersRetrieveRequestExpandLineItemsDeliveryAddressVendorAccountingPeriod:
		return "line_items,delivery_address,vendor,accounting_period"
	case PurchaseOrdersRetrieveRequestExpandLineItemsDeliveryAddressVendorCompany:
		return "line_items,delivery_address,vendor,company"
	case PurchaseOrdersRetrieveRequestExpandLineItemsDeliveryAddressVendorCompanyAccountingPeriod:
		return "line_items,delivery_address,vendor,company,accounting_period"
	case PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategories:
		return "line_items,tracking_categories"
	case PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesAccountingPeriod:
		return "line_items,tracking_categories,accounting_period"
	case PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesCompany:
		return "line_items,tracking_categories,company"
	case PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesCompanyAccountingPeriod:
		return "line_items,tracking_categories,company,accounting_period"
	case PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesDeliveryAddress:
		return "line_items,tracking_categories,delivery_address"
	case PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesDeliveryAddressAccountingPeriod:
		return "line_items,tracking_categories,delivery_address,accounting_period"
	case PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesDeliveryAddressCompany:
		return "line_items,tracking_categories,delivery_address,company"
	case PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesDeliveryAddressCompanyAccountingPeriod:
		return "line_items,tracking_categories,delivery_address,company,accounting_period"
	case PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesDeliveryAddressVendor:
		return "line_items,tracking_categories,delivery_address,vendor"
	case PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesDeliveryAddressVendorAccountingPeriod:
		return "line_items,tracking_categories,delivery_address,vendor,accounting_period"
	case PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesDeliveryAddressVendorCompany:
		return "line_items,tracking_categories,delivery_address,vendor,company"
	case PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesDeliveryAddressVendorCompanyAccountingPeriod:
		return "line_items,tracking_categories,delivery_address,vendor,company,accounting_period"
	case PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesVendor:
		return "line_items,tracking_categories,vendor"
	case PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesVendorAccountingPeriod:
		return "line_items,tracking_categories,vendor,accounting_period"
	case PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesVendorCompany:
		return "line_items,tracking_categories,vendor,company"
	case PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesVendorCompanyAccountingPeriod:
		return "line_items,tracking_categories,vendor,company,accounting_period"
	case PurchaseOrdersRetrieveRequestExpandLineItemsVendor:
		return "line_items,vendor"
	case PurchaseOrdersRetrieveRequestExpandLineItemsVendorAccountingPeriod:
		return "line_items,vendor,accounting_period"
	case PurchaseOrdersRetrieveRequestExpandLineItemsVendorCompany:
		return "line_items,vendor,company"
	case PurchaseOrdersRetrieveRequestExpandLineItemsVendorCompanyAccountingPeriod:
		return "line_items,vendor,company,accounting_period"
	case PurchaseOrdersRetrieveRequestExpandTrackingCategories:
		return "tracking_categories"
	case PurchaseOrdersRetrieveRequestExpandTrackingCategoriesAccountingPeriod:
		return "tracking_categories,accounting_period"
	case PurchaseOrdersRetrieveRequestExpandTrackingCategoriesCompany:
		return "tracking_categories,company"
	case PurchaseOrdersRetrieveRequestExpandTrackingCategoriesCompanyAccountingPeriod:
		return "tracking_categories,company,accounting_period"
	case PurchaseOrdersRetrieveRequestExpandTrackingCategoriesDeliveryAddress:
		return "tracking_categories,delivery_address"
	case PurchaseOrdersRetrieveRequestExpandTrackingCategoriesDeliveryAddressAccountingPeriod:
		return "tracking_categories,delivery_address,accounting_period"
	case PurchaseOrdersRetrieveRequestExpandTrackingCategoriesDeliveryAddressCompany:
		return "tracking_categories,delivery_address,company"
	case PurchaseOrdersRetrieveRequestExpandTrackingCategoriesDeliveryAddressCompanyAccountingPeriod:
		return "tracking_categories,delivery_address,company,accounting_period"
	case PurchaseOrdersRetrieveRequestExpandTrackingCategoriesDeliveryAddressVendor:
		return "tracking_categories,delivery_address,vendor"
	case PurchaseOrdersRetrieveRequestExpandTrackingCategoriesDeliveryAddressVendorAccountingPeriod:
		return "tracking_categories,delivery_address,vendor,accounting_period"
	case PurchaseOrdersRetrieveRequestExpandTrackingCategoriesDeliveryAddressVendorCompany:
		return "tracking_categories,delivery_address,vendor,company"
	case PurchaseOrdersRetrieveRequestExpandTrackingCategoriesDeliveryAddressVendorCompanyAccountingPeriod:
		return "tracking_categories,delivery_address,vendor,company,accounting_period"
	case PurchaseOrdersRetrieveRequestExpandTrackingCategoriesVendor:
		return "tracking_categories,vendor"
	case PurchaseOrdersRetrieveRequestExpandTrackingCategoriesVendorAccountingPeriod:
		return "tracking_categories,vendor,accounting_period"
	case PurchaseOrdersRetrieveRequestExpandTrackingCategoriesVendorCompany:
		return "tracking_categories,vendor,company"
	case PurchaseOrdersRetrieveRequestExpandTrackingCategoriesVendorCompanyAccountingPeriod:
		return "tracking_categories,vendor,company,accounting_period"
	case PurchaseOrdersRetrieveRequestExpandVendor:
		return "vendor"
	case PurchaseOrdersRetrieveRequestExpandVendorAccountingPeriod:
		return "vendor,accounting_period"
	case PurchaseOrdersRetrieveRequestExpandVendorCompany:
		return "vendor,company"
	case PurchaseOrdersRetrieveRequestExpandVendorCompanyAccountingPeriod:
		return "vendor,company,accounting_period"
	}
}

func (p PurchaseOrdersRetrieveRequestExpand) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", p.String())), nil
}

func (p *PurchaseOrdersRetrieveRequestExpand) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "accounting_period":
		value := PurchaseOrdersRetrieveRequestExpandAccountingPeriod
		*p = value
	case "company":
		value := PurchaseOrdersRetrieveRequestExpandCompany
		*p = value
	case "company,accounting_period":
		value := PurchaseOrdersRetrieveRequestExpandCompanyAccountingPeriod
		*p = value
	case "delivery_address":
		value := PurchaseOrdersRetrieveRequestExpandDeliveryAddress
		*p = value
	case "delivery_address,accounting_period":
		value := PurchaseOrdersRetrieveRequestExpandDeliveryAddressAccountingPeriod
		*p = value
	case "delivery_address,company":
		value := PurchaseOrdersRetrieveRequestExpandDeliveryAddressCompany
		*p = value
	case "delivery_address,company,accounting_period":
		value := PurchaseOrdersRetrieveRequestExpandDeliveryAddressCompanyAccountingPeriod
		*p = value
	case "delivery_address,vendor":
		value := PurchaseOrdersRetrieveRequestExpandDeliveryAddressVendor
		*p = value
	case "delivery_address,vendor,accounting_period":
		value := PurchaseOrdersRetrieveRequestExpandDeliveryAddressVendorAccountingPeriod
		*p = value
	case "delivery_address,vendor,company":
		value := PurchaseOrdersRetrieveRequestExpandDeliveryAddressVendorCompany
		*p = value
	case "delivery_address,vendor,company,accounting_period":
		value := PurchaseOrdersRetrieveRequestExpandDeliveryAddressVendorCompanyAccountingPeriod
		*p = value
	case "line_items":
		value := PurchaseOrdersRetrieveRequestExpandLineItems
		*p = value
	case "line_items,accounting_period":
		value := PurchaseOrdersRetrieveRequestExpandLineItemsAccountingPeriod
		*p = value
	case "line_items,company":
		value := PurchaseOrdersRetrieveRequestExpandLineItemsCompany
		*p = value
	case "line_items,company,accounting_period":
		value := PurchaseOrdersRetrieveRequestExpandLineItemsCompanyAccountingPeriod
		*p = value
	case "line_items,delivery_address":
		value := PurchaseOrdersRetrieveRequestExpandLineItemsDeliveryAddress
		*p = value
	case "line_items,delivery_address,accounting_period":
		value := PurchaseOrdersRetrieveRequestExpandLineItemsDeliveryAddressAccountingPeriod
		*p = value
	case "line_items,delivery_address,company":
		value := PurchaseOrdersRetrieveRequestExpandLineItemsDeliveryAddressCompany
		*p = value
	case "line_items,delivery_address,company,accounting_period":
		value := PurchaseOrdersRetrieveRequestExpandLineItemsDeliveryAddressCompanyAccountingPeriod
		*p = value
	case "line_items,delivery_address,vendor":
		value := PurchaseOrdersRetrieveRequestExpandLineItemsDeliveryAddressVendor
		*p = value
	case "line_items,delivery_address,vendor,accounting_period":
		value := PurchaseOrdersRetrieveRequestExpandLineItemsDeliveryAddressVendorAccountingPeriod
		*p = value
	case "line_items,delivery_address,vendor,company":
		value := PurchaseOrdersRetrieveRequestExpandLineItemsDeliveryAddressVendorCompany
		*p = value
	case "line_items,delivery_address,vendor,company,accounting_period":
		value := PurchaseOrdersRetrieveRequestExpandLineItemsDeliveryAddressVendorCompanyAccountingPeriod
		*p = value
	case "line_items,tracking_categories":
		value := PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategories
		*p = value
	case "line_items,tracking_categories,accounting_period":
		value := PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesAccountingPeriod
		*p = value
	case "line_items,tracking_categories,company":
		value := PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesCompany
		*p = value
	case "line_items,tracking_categories,company,accounting_period":
		value := PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesCompanyAccountingPeriod
		*p = value
	case "line_items,tracking_categories,delivery_address":
		value := PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesDeliveryAddress
		*p = value
	case "line_items,tracking_categories,delivery_address,accounting_period":
		value := PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesDeliveryAddressAccountingPeriod
		*p = value
	case "line_items,tracking_categories,delivery_address,company":
		value := PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesDeliveryAddressCompany
		*p = value
	case "line_items,tracking_categories,delivery_address,company,accounting_period":
		value := PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesDeliveryAddressCompanyAccountingPeriod
		*p = value
	case "line_items,tracking_categories,delivery_address,vendor":
		value := PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesDeliveryAddressVendor
		*p = value
	case "line_items,tracking_categories,delivery_address,vendor,accounting_period":
		value := PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesDeliveryAddressVendorAccountingPeriod
		*p = value
	case "line_items,tracking_categories,delivery_address,vendor,company":
		value := PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesDeliveryAddressVendorCompany
		*p = value
	case "line_items,tracking_categories,delivery_address,vendor,company,accounting_period":
		value := PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesDeliveryAddressVendorCompanyAccountingPeriod
		*p = value
	case "line_items,tracking_categories,vendor":
		value := PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesVendor
		*p = value
	case "line_items,tracking_categories,vendor,accounting_period":
		value := PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesVendorAccountingPeriod
		*p = value
	case "line_items,tracking_categories,vendor,company":
		value := PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesVendorCompany
		*p = value
	case "line_items,tracking_categories,vendor,company,accounting_period":
		value := PurchaseOrdersRetrieveRequestExpandLineItemsTrackingCategoriesVendorCompanyAccountingPeriod
		*p = value
	case "line_items,vendor":
		value := PurchaseOrdersRetrieveRequestExpandLineItemsVendor
		*p = value
	case "line_items,vendor,accounting_period":
		value := PurchaseOrdersRetrieveRequestExpandLineItemsVendorAccountingPeriod
		*p = value
	case "line_items,vendor,company":
		value := PurchaseOrdersRetrieveRequestExpandLineItemsVendorCompany
		*p = value
	case "line_items,vendor,company,accounting_period":
		value := PurchaseOrdersRetrieveRequestExpandLineItemsVendorCompanyAccountingPeriod
		*p = value
	case "tracking_categories":
		value := PurchaseOrdersRetrieveRequestExpandTrackingCategories
		*p = value
	case "tracking_categories,accounting_period":
		value := PurchaseOrdersRetrieveRequestExpandTrackingCategoriesAccountingPeriod
		*p = value
	case "tracking_categories,company":
		value := PurchaseOrdersRetrieveRequestExpandTrackingCategoriesCompany
		*p = value
	case "tracking_categories,company,accounting_period":
		value := PurchaseOrdersRetrieveRequestExpandTrackingCategoriesCompanyAccountingPeriod
		*p = value
	case "tracking_categories,delivery_address":
		value := PurchaseOrdersRetrieveRequestExpandTrackingCategoriesDeliveryAddress
		*p = value
	case "tracking_categories,delivery_address,accounting_period":
		value := PurchaseOrdersRetrieveRequestExpandTrackingCategoriesDeliveryAddressAccountingPeriod
		*p = value
	case "tracking_categories,delivery_address,company":
		value := PurchaseOrdersRetrieveRequestExpandTrackingCategoriesDeliveryAddressCompany
		*p = value
	case "tracking_categories,delivery_address,company,accounting_period":
		value := PurchaseOrdersRetrieveRequestExpandTrackingCategoriesDeliveryAddressCompanyAccountingPeriod
		*p = value
	case "tracking_categories,delivery_address,vendor":
		value := PurchaseOrdersRetrieveRequestExpandTrackingCategoriesDeliveryAddressVendor
		*p = value
	case "tracking_categories,delivery_address,vendor,accounting_period":
		value := PurchaseOrdersRetrieveRequestExpandTrackingCategoriesDeliveryAddressVendorAccountingPeriod
		*p = value
	case "tracking_categories,delivery_address,vendor,company":
		value := PurchaseOrdersRetrieveRequestExpandTrackingCategoriesDeliveryAddressVendorCompany
		*p = value
	case "tracking_categories,delivery_address,vendor,company,accounting_period":
		value := PurchaseOrdersRetrieveRequestExpandTrackingCategoriesDeliveryAddressVendorCompanyAccountingPeriod
		*p = value
	case "tracking_categories,vendor":
		value := PurchaseOrdersRetrieveRequestExpandTrackingCategoriesVendor
		*p = value
	case "tracking_categories,vendor,accounting_period":
		value := PurchaseOrdersRetrieveRequestExpandTrackingCategoriesVendorAccountingPeriod
		*p = value
	case "tracking_categories,vendor,company":
		value := PurchaseOrdersRetrieveRequestExpandTrackingCategoriesVendorCompany
		*p = value
	case "tracking_categories,vendor,company,accounting_period":
		value := PurchaseOrdersRetrieveRequestExpandTrackingCategoriesVendorCompanyAccountingPeriod
		*p = value
	case "vendor":
		value := PurchaseOrdersRetrieveRequestExpandVendor
		*p = value
	case "vendor,accounting_period":
		value := PurchaseOrdersRetrieveRequestExpandVendorAccountingPeriod
		*p = value
	case "vendor,company":
		value := PurchaseOrdersRetrieveRequestExpandVendorCompany
		*p = value
	case "vendor,company,accounting_period":
		value := PurchaseOrdersRetrieveRequestExpandVendorCompanyAccountingPeriod
		*p = value
	}
	return nil
}

type RemoteData struct {
	Path string         `json:"path"`
	Data map[string]any `json:"data,omitempty"`
}

// # The RemoteKey Object
// ### Description
// The `RemoteKey` object is used to represent a request for a new remote key.
//
// ### Usage Example
// Post a `GenerateRemoteKey` to receive a new `RemoteKey`.
type RemoteKey struct {
	Name string `json:"name"`
	Key  string `json:"key"`
}

// # The RemoteResponse Object
// ### Description
// The `RemoteResponse` object is used to represent information returned from a third-party endpoint.
//
// ### Usage Example
// View the `RemoteResponse` returned from your `DataPassthrough`.
type RemoteResponse struct {
	Method          string            `json:"method"`
	Path            string            `json:"path"`
	Status          int               `json:"status"`
	Response        any               `json:"response,omitempty"`
	ResponseHeaders map[string]any    `json:"response_headers,omitempty"`
	ResponseType    *ResponseTypeEnum `json:"response_type,omitempty"`
	Headers         map[string]any    `json:"headers,omitempty"`
}

// # The ReportItem Object
// ### Description
// The `ReportItem` object is used to represent a report item for a Balance Sheet, Cash Flow Statement or Profit and Loss Report.
//
// ### Usage Example
// Fetch from the `GET BalanceSheet` endpoint and view the balance sheet's report items.
type ReportItem struct {
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The report item's name.
	Name *string `json:"name,omitempty"`
	// The report item's value.
	Value    *float64         `json:"value,omitempty"`
	SubItems []map[string]any `json:"sub_items,omitempty"`
	// The company the report item belongs to.
	Company   *string    `json:"company,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
}

// * `JSON` - JSON
// * `XML` - XML
// * `MULTIPART` - MULTIPART
type RequestFormatEnum uint

const (
	RequestFormatEnumJson RequestFormatEnum = iota + 1
	RequestFormatEnumXml
	RequestFormatEnumMultipart
)

func (r RequestFormatEnum) String() string {
	switch r {
	default:
		return strconv.Itoa(int(r))
	case RequestFormatEnumJson:
		return "JSON"
	case RequestFormatEnumXml:
		return "XML"
	case RequestFormatEnumMultipart:
		return "MULTIPART"
	}
}

func (r RequestFormatEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", r.String())), nil
}

func (r *RequestFormatEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "JSON":
		value := RequestFormatEnumJson
		*r = value
	case "XML":
		value := RequestFormatEnumXml
		*r = value
	case "MULTIPART":
		value := RequestFormatEnumMultipart
		*r = value
	}
	return nil
}

// * `JSON` - JSON
// * `BASE64_GZIP` - BASE64_GZIP
type ResponseTypeEnum uint

const (
	ResponseTypeEnumJson ResponseTypeEnum = iota + 1
	ResponseTypeEnumBase64Gzip
)

func (r ResponseTypeEnum) String() string {
	switch r {
	default:
		return strconv.Itoa(int(r))
	case ResponseTypeEnumJson:
		return "JSON"
	case ResponseTypeEnumBase64Gzip:
		return "BASE64_GZIP"
	}
}

func (r ResponseTypeEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", r.String())), nil
}

func (r *ResponseTypeEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "JSON":
		value := ResponseTypeEnumJson
		*r = value
	case "BASE64_GZIP":
		value := ResponseTypeEnumBase64Gzip
		*r = value
	}
	return nil
}

// * `ADMIN` - ADMIN
// * `DEVELOPER` - DEVELOPER
// * `MEMBER` - MEMBER
// * `API` - API
// * `SYSTEM` - SYSTEM
// * `MERGE_TEAM` - MERGE_TEAM
type RoleEnum uint

const (
	RoleEnumAdmin RoleEnum = iota + 1
	RoleEnumDeveloper
	RoleEnumMember
	RoleEnumApi
	RoleEnumSystem
	RoleEnumMergeTeam
)

func (r RoleEnum) String() string {
	switch r {
	default:
		return strconv.Itoa(int(r))
	case RoleEnumAdmin:
		return "ADMIN"
	case RoleEnumDeveloper:
		return "DEVELOPER"
	case RoleEnumMember:
		return "MEMBER"
	case RoleEnumApi:
		return "API"
	case RoleEnumSystem:
		return "SYSTEM"
	case RoleEnumMergeTeam:
		return "MERGE_TEAM"
	}
}

func (r RoleEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", r.String())), nil
}

func (r *RoleEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "ADMIN":
		value := RoleEnumAdmin
		*r = value
	case "DEVELOPER":
		value := RoleEnumDeveloper
		*r = value
	case "MEMBER":
		value := RoleEnumMember
		*r = value
	case "API":
		value := RoleEnumApi
		*r = value
	case "SYSTEM":
		value := RoleEnumSystem
		*r = value
	case "MERGE_TEAM":
		value := RoleEnumMergeTeam
		*r = value
	}
	return nil
}

// * `IN_NEXT_SYNC` - IN_NEXT_SYNC
// * `IN_LAST_SYNC` - IN_LAST_SYNC
type SelectiveSyncConfigurationsUsageEnum uint

const (
	SelectiveSyncConfigurationsUsageEnumInNextSync SelectiveSyncConfigurationsUsageEnum = iota + 1
	SelectiveSyncConfigurationsUsageEnumInLastSync
)

func (s SelectiveSyncConfigurationsUsageEnum) String() string {
	switch s {
	default:
		return strconv.Itoa(int(s))
	case SelectiveSyncConfigurationsUsageEnumInNextSync:
		return "IN_NEXT_SYNC"
	case SelectiveSyncConfigurationsUsageEnumInLastSync:
		return "IN_LAST_SYNC"
	}
}

func (s SelectiveSyncConfigurationsUsageEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", s.String())), nil
}

func (s *SelectiveSyncConfigurationsUsageEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "IN_NEXT_SYNC":
		value := SelectiveSyncConfigurationsUsageEnumInNextSync
		*s = value
	case "IN_LAST_SYNC":
		value := SelectiveSyncConfigurationsUsageEnumInLastSync
		*s = value
	}
	return nil
}

// * `ACTIVE` - ACTIVE
// * `ARCHIVED` - ARCHIVED
type Status7D1Enum uint

const (
	Status7D1EnumActive Status7D1Enum = iota + 1
	Status7D1EnumArchived
)

func (s Status7D1Enum) String() string {
	switch s {
	default:
		return strconv.Itoa(int(s))
	case Status7D1EnumActive:
		return "ACTIVE"
	case Status7D1EnumArchived:
		return "ARCHIVED"
	}
}

func (s Status7D1Enum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", s.String())), nil
}

func (s *Status7D1Enum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "ACTIVE":
		value := Status7D1EnumActive
		*s = value
	case "ARCHIVED":
		value := Status7D1EnumArchived
		*s = value
	}
	return nil
}

// # The SyncStatus Object
// ### Description
// The `SyncStatus` object is used to represent the syncing state of an account
//
// ### Usage Example
// View the `SyncStatus` for an account to see how recently its models were synced.
type SyncStatus struct {
	ModelName                        string                                `json:"model_name"`
	ModelId                          string                                `json:"model_id"`
	LastSyncStart                    *time.Time                            `json:"last_sync_start,omitempty"`
	NextSyncStart                    *time.Time                            `json:"next_sync_start,omitempty"`
	Status                           SyncStatusStatusEnum                  `json:"status,omitempty"`
	IsInitialSync                    bool                                  `json:"is_initial_sync"`
	SelectiveSyncConfigurationsUsage *SelectiveSyncConfigurationsUsageEnum `json:"selective_sync_configurations_usage,omitempty"`
}

// * `SYNCING` - SYNCING
// * `DONE` - DONE
// * `FAILED` - FAILED
// * `DISABLED` - DISABLED
// * `PAUSED` - PAUSED
// * `PARTIALLY_SYNCED` - PARTIALLY_SYNCED
type SyncStatusStatusEnum uint

const (
	SyncStatusStatusEnumSyncing SyncStatusStatusEnum = iota + 1
	SyncStatusStatusEnumDone
	SyncStatusStatusEnumFailed
	SyncStatusStatusEnumDisabled
	SyncStatusStatusEnumPaused
	SyncStatusStatusEnumPartiallySynced
)

func (s SyncStatusStatusEnum) String() string {
	switch s {
	default:
		return strconv.Itoa(int(s))
	case SyncStatusStatusEnumSyncing:
		return "SYNCING"
	case SyncStatusStatusEnumDone:
		return "DONE"
	case SyncStatusStatusEnumFailed:
		return "FAILED"
	case SyncStatusStatusEnumDisabled:
		return "DISABLED"
	case SyncStatusStatusEnumPaused:
		return "PAUSED"
	case SyncStatusStatusEnumPartiallySynced:
		return "PARTIALLY_SYNCED"
	}
}

func (s SyncStatusStatusEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", s.String())), nil
}

func (s *SyncStatusStatusEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "SYNCING":
		value := SyncStatusStatusEnumSyncing
		*s = value
	case "DONE":
		value := SyncStatusStatusEnumDone
		*s = value
	case "FAILED":
		value := SyncStatusStatusEnumFailed
		*s = value
	case "DISABLED":
		value := SyncStatusStatusEnumDisabled
		*s = value
	case "PAUSED":
		value := SyncStatusStatusEnumPaused
		*s = value
	case "PARTIALLY_SYNCED":
		value := SyncStatusStatusEnumPartiallySynced
		*s = value
	}
	return nil
}

// # The TaxRate Object
// ### Description
// The `TaxRate` object is used to represent a tax rate.
//
// ### Usage Example
// Fetch from the `LIST TaxRates` endpoint and view tax rates relevant to a company.
type TaxRate struct {
	// The tax rate's description.
	Description *string `json:"description,omitempty"`
	// The tax rate's total tax rate.
	TotalTaxRate *float64 `json:"total_tax_rate,omitempty"`
	// The tax rate's effective tax rate.
	EffectiveTaxRate *float64 `json:"effective_tax_rate,omitempty"`
	// The company the tax rate belongs to.
	Company *TaxRateCompany `json:"company,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted *bool   `json:"remote_was_deleted,omitempty"`
	Id               *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId  *string    `json:"remote_id,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt    *time.Time     `json:"modified_at,omitempty"`
	FieldMappings map[string]any `json:"field_mappings,omitempty"`
	RemoteData    []*RemoteData  `json:"remote_data,omitempty"`
}

// The company the tax rate belongs to.
type TaxRateCompany struct {
	typeName    string
	String      string
	CompanyInfo *CompanyInfo
}

func NewTaxRateCompanyFromString(value string) *TaxRateCompany {
	return &TaxRateCompany{typeName: "string", String: value}
}

func NewTaxRateCompanyFromCompanyInfo(value *CompanyInfo) *TaxRateCompany {
	return &TaxRateCompany{typeName: "companyInfo", CompanyInfo: value}
}

func (t *TaxRateCompany) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	valueCompanyInfo := new(CompanyInfo)
	if err := json.Unmarshal(data, &valueCompanyInfo); err == nil {
		t.typeName = "companyInfo"
		t.CompanyInfo = valueCompanyInfo
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TaxRateCompany) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return json.Marshal(t.String)
	case "companyInfo":
		return json.Marshal(t.CompanyInfo)
	}
}

type TaxRateCompanyVisitor interface {
	VisitString(string) error
	VisitCompanyInfo(*CompanyInfo) error
}

func (t *TaxRateCompany) Accept(visitor TaxRateCompanyVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return visitor.VisitString(t.String)
	case "companyInfo":
		return visitor.VisitCompanyInfo(t.CompanyInfo)
	}
}

// # The TrackingCategory Object
// ### Description
// A `TrackingCategory` object represents a categorization method used to classify transactions within an accounting platform. They are often used to group records for reporting and analysis purposes. The most common types of `TrackingCategories` are Classes and Departments.
//
// ### Usage Example
// Fetch from the `GET TrackingCategory` endpoint and view a company's tracking category.
type TrackingCategory struct {
	// The tracking category's name.
	Name *string `json:"name,omitempty"`
	// The tracking category's status.
	//
	// * `ACTIVE` - ACTIVE
	// * `ARCHIVED` - ARCHIVED
	Status *TrackingCategoryStatus `json:"status,omitempty"`
	// The tracking category’s type.
	//
	// * `CLASS` - CLASS
	// * `DEPARTMENT` - DEPARTMENT
	CategoryType *TrackingCategoryCategoryType `json:"category_type,omitempty"`
	// ID of the parent tracking category.
	ParentCategory *string `json:"parent_category,omitempty"`
	// The company the tracking category belongs to.
	Company *TrackingCategoryCompany `json:"company,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted *bool   `json:"remote_was_deleted,omitempty"`
	Id               *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId  *string    `json:"remote_id,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt    *time.Time     `json:"modified_at,omitempty"`
	FieldMappings map[string]any `json:"field_mappings,omitempty"`
	RemoteData    []*RemoteData  `json:"remote_data,omitempty"`
}

// The tracking category’s type.
//
// * `CLASS` - CLASS
// * `DEPARTMENT` - DEPARTMENT
type TrackingCategoryCategoryType struct {
	typeName         string
	CategoryTypeEnum CategoryTypeEnum
	String           string
}

func NewTrackingCategoryCategoryTypeFromCategoryTypeEnum(value CategoryTypeEnum) *TrackingCategoryCategoryType {
	return &TrackingCategoryCategoryType{typeName: "categoryTypeEnum", CategoryTypeEnum: value}
}

func NewTrackingCategoryCategoryTypeFromString(value string) *TrackingCategoryCategoryType {
	return &TrackingCategoryCategoryType{typeName: "string", String: value}
}

func (t *TrackingCategoryCategoryType) UnmarshalJSON(data []byte) error {
	var valueCategoryTypeEnum CategoryTypeEnum
	if err := json.Unmarshal(data, &valueCategoryTypeEnum); err == nil {
		t.typeName = "categoryTypeEnum"
		t.CategoryTypeEnum = valueCategoryTypeEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TrackingCategoryCategoryType) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "categoryTypeEnum":
		return json.Marshal(t.CategoryTypeEnum)
	case "string":
		return json.Marshal(t.String)
	}
}

type TrackingCategoryCategoryTypeVisitor interface {
	VisitCategoryTypeEnum(CategoryTypeEnum) error
	VisitString(string) error
}

func (t *TrackingCategoryCategoryType) Accept(visitor TrackingCategoryCategoryTypeVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "categoryTypeEnum":
		return visitor.VisitCategoryTypeEnum(t.CategoryTypeEnum)
	case "string":
		return visitor.VisitString(t.String)
	}
}

// The company the tracking category belongs to.
type TrackingCategoryCompany struct {
	typeName    string
	String      string
	CompanyInfo *CompanyInfo
}

func NewTrackingCategoryCompanyFromString(value string) *TrackingCategoryCompany {
	return &TrackingCategoryCompany{typeName: "string", String: value}
}

func NewTrackingCategoryCompanyFromCompanyInfo(value *CompanyInfo) *TrackingCategoryCompany {
	return &TrackingCategoryCompany{typeName: "companyInfo", CompanyInfo: value}
}

func (t *TrackingCategoryCompany) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	valueCompanyInfo := new(CompanyInfo)
	if err := json.Unmarshal(data, &valueCompanyInfo); err == nil {
		t.typeName = "companyInfo"
		t.CompanyInfo = valueCompanyInfo
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TrackingCategoryCompany) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return json.Marshal(t.String)
	case "companyInfo":
		return json.Marshal(t.CompanyInfo)
	}
}

type TrackingCategoryCompanyVisitor interface {
	VisitString(string) error
	VisitCompanyInfo(*CompanyInfo) error
}

func (t *TrackingCategoryCompany) Accept(visitor TrackingCategoryCompanyVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return visitor.VisitString(t.String)
	case "companyInfo":
		return visitor.VisitCompanyInfo(t.CompanyInfo)
	}
}

// The tracking category's status.
//
// * `ACTIVE` - ACTIVE
// * `ARCHIVED` - ARCHIVED
type TrackingCategoryStatus struct {
	typeName      string
	Status7D1Enum Status7D1Enum
	String        string
}

func NewTrackingCategoryStatusFromStatus7D1Enum(value Status7D1Enum) *TrackingCategoryStatus {
	return &TrackingCategoryStatus{typeName: "status7D1Enum", Status7D1Enum: value}
}

func NewTrackingCategoryStatusFromString(value string) *TrackingCategoryStatus {
	return &TrackingCategoryStatus{typeName: "string", String: value}
}

func (t *TrackingCategoryStatus) UnmarshalJSON(data []byte) error {
	var valueStatus7D1Enum Status7D1Enum
	if err := json.Unmarshal(data, &valueStatus7D1Enum); err == nil {
		t.typeName = "status7D1Enum"
		t.Status7D1Enum = valueStatus7D1Enum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TrackingCategoryStatus) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "status7D1Enum":
		return json.Marshal(t.Status7D1Enum)
	case "string":
		return json.Marshal(t.String)
	}
}

type TrackingCategoryStatusVisitor interface {
	VisitStatus7D1Enum(Status7D1Enum) error
	VisitString(string) error
}

func (t *TrackingCategoryStatus) Accept(visitor TrackingCategoryStatusVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "status7D1Enum":
		return visitor.VisitStatus7D1Enum(t.Status7D1Enum)
	case "string":
		return visitor.VisitString(t.String)
	}
}

// # The Transaction Object
// ### Description
// The `Transaction` common model includes records of all types of transactions that do not appear in other common models. The type of transaction can be identified through the type field. More specifically, it will contain all types of transactions outside of:
// * __Credit Notes__
// * __Expenses__
// * __Invoices__
// * __Journal Entries__
// * __Payments__
// * __Purchase Orders__
// * __Vendor Credits__
//
// ### Usage Example
// Fetch from the `GET Transaction` endpoint and view a company's transactions.
type Transaction struct {
	// The type of transaction, which can by any transaction object not already included in Merge’s common model.
	TransactionType *string `json:"transaction_type,omitempty"`
	// The transaction's number used for identifying purposes.
	Number *string `json:"number,omitempty"`
	// The date upon which the transaction occurred.
	TransactionDate *time.Time `json:"transaction_date,omitempty"`
	// The transaction's account.
	Account *TransactionAccount `json:"account,omitempty"`
	// The contact to whom the transaction relates to.
	Contact *TransactionContact `json:"contact,omitempty"`
	// The total amount being paid after taxes.
	TotalAmount *string `json:"total_amount,omitempty"`
	// The transaction's currency.
	//
	// * `XUA` - ADB Unit of Account
	// * `AFN` - Afghan Afghani
	// * `AFA` - Afghan Afghani (1927–2002)
	// * `ALL` - Albanian Lek
	// * `ALK` - Albanian Lek (1946–1965)
	// * `DZD` - Algerian Dinar
	// * `ADP` - Andorran Peseta
	// * `AOA` - Angolan Kwanza
	// * `AOK` - Angolan Kwanza (1977–1991)
	// * `AON` - Angolan New Kwanza (1990–2000)
	// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
	// * `ARA` - Argentine Austral
	// * `ARS` - Argentine Peso
	// * `ARM` - Argentine Peso (1881–1970)
	// * `ARP` - Argentine Peso (1983–1985)
	// * `ARL` - Argentine Peso Ley (1970–1983)
	// * `AMD` - Armenian Dram
	// * `AWG` - Aruban Florin
	// * `AUD` - Australian Dollar
	// * `ATS` - Austrian Schilling
	// * `AZN` - Azerbaijani Manat
	// * `AZM` - Azerbaijani Manat (1993–2006)
	// * `BSD` - Bahamian Dollar
	// * `BHD` - Bahraini Dinar
	// * `BDT` - Bangladeshi Taka
	// * `BBD` - Barbadian Dollar
	// * `BYN` - Belarusian Ruble
	// * `BYB` - Belarusian Ruble (1994–1999)
	// * `BYR` - Belarusian Ruble (2000–2016)
	// * `BEF` - Belgian Franc
	// * `BEC` - Belgian Franc (convertible)
	// * `BEL` - Belgian Franc (financial)
	// * `BZD` - Belize Dollar
	// * `BMD` - Bermudan Dollar
	// * `BTN` - Bhutanese Ngultrum
	// * `BOB` - Bolivian Boliviano
	// * `BOL` - Bolivian Boliviano (1863–1963)
	// * `BOV` - Bolivian Mvdol
	// * `BOP` - Bolivian Peso
	// * `BAM` - Bosnia-Herzegovina Convertible Mark
	// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
	// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
	// * `BWP` - Botswanan Pula
	// * `BRC` - Brazilian Cruzado (1986–1989)
	// * `BRZ` - Brazilian Cruzeiro (1942–1967)
	// * `BRE` - Brazilian Cruzeiro (1990–1993)
	// * `BRR` - Brazilian Cruzeiro (1993–1994)
	// * `BRN` - Brazilian New Cruzado (1989–1990)
	// * `BRB` - Brazilian New Cruzeiro (1967–1986)
	// * `BRL` - Brazilian Real
	// * `GBP` - British Pound
	// * `BND` - Brunei Dollar
	// * `BGL` - Bulgarian Hard Lev
	// * `BGN` - Bulgarian Lev
	// * `BGO` - Bulgarian Lev (1879–1952)
	// * `BGM` - Bulgarian Socialist Lev
	// * `BUK` - Burmese Kyat
	// * `BIF` - Burundian Franc
	// * `XPF` - CFP Franc
	// * `KHR` - Cambodian Riel
	// * `CAD` - Canadian Dollar
	// * `CVE` - Cape Verdean Escudo
	// * `KYD` - Cayman Islands Dollar
	// * `XAF` - Central African CFA Franc
	// * `CLE` - Chilean Escudo
	// * `CLP` - Chilean Peso
	// * `CLF` - Chilean Unit of Account (UF)
	// * `CNX` - Chinese People’s Bank Dollar
	// * `CNY` - Chinese Yuan
	// * `CNH` - Chinese Yuan (offshore)
	// * `COP` - Colombian Peso
	// * `COU` - Colombian Real Value Unit
	// * `KMF` - Comorian Franc
	// * `CDF` - Congolese Franc
	// * `CRC` - Costa Rican Colón
	// * `HRD` - Croatian Dinar
	// * `HRK` - Croatian Kuna
	// * `CUC` - Cuban Convertible Peso
	// * `CUP` - Cuban Peso
	// * `CYP` - Cypriot Pound
	// * `CZK` - Czech Koruna
	// * `CSK` - Czechoslovak Hard Koruna
	// * `DKK` - Danish Krone
	// * `DJF` - Djiboutian Franc
	// * `DOP` - Dominican Peso
	// * `NLG` - Dutch Guilder
	// * `XCD` - East Caribbean Dollar
	// * `DDM` - East German Mark
	// * `ECS` - Ecuadorian Sucre
	// * `ECV` - Ecuadorian Unit of Constant Value
	// * `EGP` - Egyptian Pound
	// * `GQE` - Equatorial Guinean Ekwele
	// * `ERN` - Eritrean Nakfa
	// * `EEK` - Estonian Kroon
	// * `ETB` - Ethiopian Birr
	// * `EUR` - Euro
	// * `XBA` - European Composite Unit
	// * `XEU` - European Currency Unit
	// * `XBB` - European Monetary Unit
	// * `XBC` - European Unit of Account (XBC)
	// * `XBD` - European Unit of Account (XBD)
	// * `FKP` - Falkland Islands Pound
	// * `FJD` - Fijian Dollar
	// * `FIM` - Finnish Markka
	// * `FRF` - French Franc
	// * `XFO` - French Gold Franc
	// * `XFU` - French UIC-Franc
	// * `GMD` - Gambian Dalasi
	// * `GEK` - Georgian Kupon Larit
	// * `GEL` - Georgian Lari
	// * `DEM` - German Mark
	// * `GHS` - Ghanaian Cedi
	// * `GHC` - Ghanaian Cedi (1979–2007)
	// * `GIP` - Gibraltar Pound
	// * `XAU` - Gold
	// * `GRD` - Greek Drachma
	// * `GTQ` - Guatemalan Quetzal
	// * `GWP` - Guinea-Bissau Peso
	// * `GNF` - Guinean Franc
	// * `GNS` - Guinean Syli
	// * `GYD` - Guyanaese Dollar
	// * `HTG` - Haitian Gourde
	// * `HNL` - Honduran Lempira
	// * `HKD` - Hong Kong Dollar
	// * `HUF` - Hungarian Forint
	// * `IMP` - IMP
	// * `ISK` - Icelandic Króna
	// * `ISJ` - Icelandic Króna (1918–1981)
	// * `INR` - Indian Rupee
	// * `IDR` - Indonesian Rupiah
	// * `IRR` - Iranian Rial
	// * `IQD` - Iraqi Dinar
	// * `IEP` - Irish Pound
	// * `ILS` - Israeli New Shekel
	// * `ILP` - Israeli Pound
	// * `ILR` - Israeli Shekel (1980–1985)
	// * `ITL` - Italian Lira
	// * `JMD` - Jamaican Dollar
	// * `JPY` - Japanese Yen
	// * `JOD` - Jordanian Dinar
	// * `KZT` - Kazakhstani Tenge
	// * `KES` - Kenyan Shilling
	// * `KWD` - Kuwaiti Dinar
	// * `KGS` - Kyrgystani Som
	// * `LAK` - Laotian Kip
	// * `LVL` - Latvian Lats
	// * `LVR` - Latvian Ruble
	// * `LBP` - Lebanese Pound
	// * `LSL` - Lesotho Loti
	// * `LRD` - Liberian Dollar
	// * `LYD` - Libyan Dinar
	// * `LTL` - Lithuanian Litas
	// * `LTT` - Lithuanian Talonas
	// * `LUL` - Luxembourg Financial Franc
	// * `LUC` - Luxembourgian Convertible Franc
	// * `LUF` - Luxembourgian Franc
	// * `MOP` - Macanese Pataca
	// * `MKD` - Macedonian Denar
	// * `MKN` - Macedonian Denar (1992–1993)
	// * `MGA` - Malagasy Ariary
	// * `MGF` - Malagasy Franc
	// * `MWK` - Malawian Kwacha
	// * `MYR` - Malaysian Ringgit
	// * `MVR` - Maldivian Rufiyaa
	// * `MVP` - Maldivian Rupee (1947–1981)
	// * `MLF` - Malian Franc
	// * `MTL` - Maltese Lira
	// * `MTP` - Maltese Pound
	// * `MRU` - Mauritanian Ouguiya
	// * `MRO` - Mauritanian Ouguiya (1973–2017)
	// * `MUR` - Mauritian Rupee
	// * `MXV` - Mexican Investment Unit
	// * `MXN` - Mexican Peso
	// * `MXP` - Mexican Silver Peso (1861–1992)
	// * `MDC` - Moldovan Cupon
	// * `MDL` - Moldovan Leu
	// * `MCF` - Monegasque Franc
	// * `MNT` - Mongolian Tugrik
	// * `MAD` - Moroccan Dirham
	// * `MAF` - Moroccan Franc
	// * `MZE` - Mozambican Escudo
	// * `MZN` - Mozambican Metical
	// * `MZM` - Mozambican Metical (1980–2006)
	// * `MMK` - Myanmar Kyat
	// * `NAD` - Namibian Dollar
	// * `NPR` - Nepalese Rupee
	// * `ANG` - Netherlands Antillean Guilder
	// * `TWD` - New Taiwan Dollar
	// * `NZD` - New Zealand Dollar
	// * `NIO` - Nicaraguan Córdoba
	// * `NIC` - Nicaraguan Córdoba (1988–1991)
	// * `NGN` - Nigerian Naira
	// * `KPW` - North Korean Won
	// * `NOK` - Norwegian Krone
	// * `OMR` - Omani Rial
	// * `PKR` - Pakistani Rupee
	// * `XPD` - Palladium
	// * `PAB` - Panamanian Balboa
	// * `PGK` - Papua New Guinean Kina
	// * `PYG` - Paraguayan Guarani
	// * `PEI` - Peruvian Inti
	// * `PEN` - Peruvian Sol
	// * `PES` - Peruvian Sol (1863–1965)
	// * `PHP` - Philippine Peso
	// * `XPT` - Platinum
	// * `PLN` - Polish Zloty
	// * `PLZ` - Polish Zloty (1950–1995)
	// * `PTE` - Portuguese Escudo
	// * `GWE` - Portuguese Guinea Escudo
	// * `QAR` - Qatari Rial
	// * `XRE` - RINET Funds
	// * `RHD` - Rhodesian Dollar
	// * `RON` - Romanian Leu
	// * `ROL` - Romanian Leu (1952–2006)
	// * `RUB` - Russian Ruble
	// * `RUR` - Russian Ruble (1991–1998)
	// * `RWF` - Rwandan Franc
	// * `SVC` - Salvadoran Colón
	// * `WST` - Samoan Tala
	// * `SAR` - Saudi Riyal
	// * `RSD` - Serbian Dinar
	// * `CSD` - Serbian Dinar (2002–2006)
	// * `SCR` - Seychellois Rupee
	// * `SLL` - Sierra Leonean Leone
	// * `XAG` - Silver
	// * `SGD` - Singapore Dollar
	// * `SKK` - Slovak Koruna
	// * `SIT` - Slovenian Tolar
	// * `SBD` - Solomon Islands Dollar
	// * `SOS` - Somali Shilling
	// * `ZAR` - South African Rand
	// * `ZAL` - South African Rand (financial)
	// * `KRH` - South Korean Hwan (1953–1962)
	// * `KRW` - South Korean Won
	// * `KRO` - South Korean Won (1945–1953)
	// * `SSP` - South Sudanese Pound
	// * `SUR` - Soviet Rouble
	// * `ESP` - Spanish Peseta
	// * `ESA` - Spanish Peseta (A account)
	// * `ESB` - Spanish Peseta (convertible account)
	// * `XDR` - Special Drawing Rights
	// * `LKR` - Sri Lankan Rupee
	// * `SHP` - St. Helena Pound
	// * `XSU` - Sucre
	// * `SDD` - Sudanese Dinar (1992–2007)
	// * `SDG` - Sudanese Pound
	// * `SDP` - Sudanese Pound (1957–1998)
	// * `SRD` - Surinamese Dollar
	// * `SRG` - Surinamese Guilder
	// * `SZL` - Swazi Lilangeni
	// * `SEK` - Swedish Krona
	// * `CHF` - Swiss Franc
	// * `SYP` - Syrian Pound
	// * `STN` - São Tomé & Príncipe Dobra
	// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
	// * `TVD` - TVD
	// * `TJR` - Tajikistani Ruble
	// * `TJS` - Tajikistani Somoni
	// * `TZS` - Tanzanian Shilling
	// * `XTS` - Testing Currency Code
	// * `THB` - Thai Baht
	// * `XXX` - The codes assigned for transactions where no currency is involved
	// * `TPE` - Timorese Escudo
	// * `TOP` - Tongan Paʻanga
	// * `TTD` - Trinidad & Tobago Dollar
	// * `TND` - Tunisian Dinar
	// * `TRY` - Turkish Lira
	// * `TRL` - Turkish Lira (1922–2005)
	// * `TMT` - Turkmenistani Manat
	// * `TMM` - Turkmenistani Manat (1993–2009)
	// * `USD` - US Dollar
	// * `USN` - US Dollar (Next day)
	// * `USS` - US Dollar (Same day)
	// * `UGX` - Ugandan Shilling
	// * `UGS` - Ugandan Shilling (1966–1987)
	// * `UAH` - Ukrainian Hryvnia
	// * `UAK` - Ukrainian Karbovanets
	// * `AED` - United Arab Emirates Dirham
	// * `UYW` - Uruguayan Nominal Wage Index Unit
	// * `UYU` - Uruguayan Peso
	// * `UYP` - Uruguayan Peso (1975–1993)
	// * `UYI` - Uruguayan Peso (Indexed Units)
	// * `UZS` - Uzbekistani Som
	// * `VUV` - Vanuatu Vatu
	// * `VES` - Venezuelan Bolívar
	// * `VEB` - Venezuelan Bolívar (1871–2008)
	// * `VEF` - Venezuelan Bolívar (2008–2018)
	// * `VND` - Vietnamese Dong
	// * `VNN` - Vietnamese Dong (1978–1985)
	// * `CHE` - WIR Euro
	// * `CHW` - WIR Franc
	// * `XOF` - West African CFA Franc
	// * `YDD` - Yemeni Dinar
	// * `YER` - Yemeni Rial
	// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
	// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
	// * `YUM` - Yugoslavian New Dinar (1994–2002)
	// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
	// * `ZWN` - ZWN
	// * `ZRN` - Zairean New Zaire (1993–1998)
	// * `ZRZ` - Zairean Zaire (1971–1993)
	// * `ZMW` - Zambian Kwacha
	// * `ZMK` - Zambian Kwacha (1968–2012)
	// * `ZWD` - Zimbabwean Dollar (1980–2008)
	// * `ZWR` - Zimbabwean Dollar (2008)
	// * `ZWL` - Zimbabwean Dollar (2009)
	Currency *TransactionCurrency `json:"currency,omitempty"`
	// The transaction's exchange rate.
	ExchangeRate *string `json:"exchange_rate,omitempty"`
	// The company the transaction belongs to.
	Company            *string                              `json:"company,omitempty"`
	TrackingCategories []*TransactionTrackingCategoriesItem `json:"tracking_categories,omitempty"`
	LineItems          []*TransactionLineItem               `json:"line_items,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted *bool `json:"remote_was_deleted,omitempty"`
	// The accounting period that the Transaction was generated in.
	AccountingPeriod *TransactionAccountingPeriod `json:"accounting_period,omitempty"`
	Id               *string                      `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId  *string    `json:"remote_id,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt    *time.Time     `json:"modified_at,omitempty"`
	FieldMappings map[string]any `json:"field_mappings,omitempty"`
	RemoteData    []*RemoteData  `json:"remote_data,omitempty"`
}

// The transaction's account.
type TransactionAccount struct {
	typeName string
	String   string
	Account  *Account
}

func NewTransactionAccountFromString(value string) *TransactionAccount {
	return &TransactionAccount{typeName: "string", String: value}
}

func NewTransactionAccountFromAccount(value *Account) *TransactionAccount {
	return &TransactionAccount{typeName: "account", Account: value}
}

func (t *TransactionAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		t.typeName = "account"
		t.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TransactionAccount) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return json.Marshal(t.String)
	case "account":
		return json.Marshal(t.Account)
	}
}

type TransactionAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (t *TransactionAccount) Accept(visitor TransactionAccountVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return visitor.VisitString(t.String)
	case "account":
		return visitor.VisitAccount(t.Account)
	}
}

// The accounting period that the Transaction was generated in.
type TransactionAccountingPeriod struct {
	typeName         string
	String           string
	AccountingPeriod *AccountingPeriod
}

func NewTransactionAccountingPeriodFromString(value string) *TransactionAccountingPeriod {
	return &TransactionAccountingPeriod{typeName: "string", String: value}
}

func NewTransactionAccountingPeriodFromAccountingPeriod(value *AccountingPeriod) *TransactionAccountingPeriod {
	return &TransactionAccountingPeriod{typeName: "accountingPeriod", AccountingPeriod: value}
}

func (t *TransactionAccountingPeriod) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	valueAccountingPeriod := new(AccountingPeriod)
	if err := json.Unmarshal(data, &valueAccountingPeriod); err == nil {
		t.typeName = "accountingPeriod"
		t.AccountingPeriod = valueAccountingPeriod
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TransactionAccountingPeriod) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return json.Marshal(t.String)
	case "accountingPeriod":
		return json.Marshal(t.AccountingPeriod)
	}
}

type TransactionAccountingPeriodVisitor interface {
	VisitString(string) error
	VisitAccountingPeriod(*AccountingPeriod) error
}

func (t *TransactionAccountingPeriod) Accept(visitor TransactionAccountingPeriodVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return visitor.VisitString(t.String)
	case "accountingPeriod":
		return visitor.VisitAccountingPeriod(t.AccountingPeriod)
	}
}

// The contact to whom the transaction relates to.
type TransactionContact struct {
	typeName string
	String   string
	Contact  *Contact
}

func NewTransactionContactFromString(value string) *TransactionContact {
	return &TransactionContact{typeName: "string", String: value}
}

func NewTransactionContactFromContact(value *Contact) *TransactionContact {
	return &TransactionContact{typeName: "contact", Contact: value}
}

func (t *TransactionContact) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	valueContact := new(Contact)
	if err := json.Unmarshal(data, &valueContact); err == nil {
		t.typeName = "contact"
		t.Contact = valueContact
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TransactionContact) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return json.Marshal(t.String)
	case "contact":
		return json.Marshal(t.Contact)
	}
}

type TransactionContactVisitor interface {
	VisitString(string) error
	VisitContact(*Contact) error
}

func (t *TransactionContact) Accept(visitor TransactionContactVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return visitor.VisitString(t.String)
	case "contact":
		return visitor.VisitContact(t.Contact)
	}
}

// The transaction's currency.
//
// * `XUA` - ADB Unit of Account
// * `AFN` - Afghan Afghani
// * `AFA` - Afghan Afghani (1927–2002)
// * `ALL` - Albanian Lek
// * `ALK` - Albanian Lek (1946–1965)
// * `DZD` - Algerian Dinar
// * `ADP` - Andorran Peseta
// * `AOA` - Angolan Kwanza
// * `AOK` - Angolan Kwanza (1977–1991)
// * `AON` - Angolan New Kwanza (1990–2000)
// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
// * `ARA` - Argentine Austral
// * `ARS` - Argentine Peso
// * `ARM` - Argentine Peso (1881–1970)
// * `ARP` - Argentine Peso (1983–1985)
// * `ARL` - Argentine Peso Ley (1970–1983)
// * `AMD` - Armenian Dram
// * `AWG` - Aruban Florin
// * `AUD` - Australian Dollar
// * `ATS` - Austrian Schilling
// * `AZN` - Azerbaijani Manat
// * `AZM` - Azerbaijani Manat (1993–2006)
// * `BSD` - Bahamian Dollar
// * `BHD` - Bahraini Dinar
// * `BDT` - Bangladeshi Taka
// * `BBD` - Barbadian Dollar
// * `BYN` - Belarusian Ruble
// * `BYB` - Belarusian Ruble (1994–1999)
// * `BYR` - Belarusian Ruble (2000–2016)
// * `BEF` - Belgian Franc
// * `BEC` - Belgian Franc (convertible)
// * `BEL` - Belgian Franc (financial)
// * `BZD` - Belize Dollar
// * `BMD` - Bermudan Dollar
// * `BTN` - Bhutanese Ngultrum
// * `BOB` - Bolivian Boliviano
// * `BOL` - Bolivian Boliviano (1863–1963)
// * `BOV` - Bolivian Mvdol
// * `BOP` - Bolivian Peso
// * `BAM` - Bosnia-Herzegovina Convertible Mark
// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
// * `BWP` - Botswanan Pula
// * `BRC` - Brazilian Cruzado (1986–1989)
// * `BRZ` - Brazilian Cruzeiro (1942–1967)
// * `BRE` - Brazilian Cruzeiro (1990–1993)
// * `BRR` - Brazilian Cruzeiro (1993–1994)
// * `BRN` - Brazilian New Cruzado (1989–1990)
// * `BRB` - Brazilian New Cruzeiro (1967–1986)
// * `BRL` - Brazilian Real
// * `GBP` - British Pound
// * `BND` - Brunei Dollar
// * `BGL` - Bulgarian Hard Lev
// * `BGN` - Bulgarian Lev
// * `BGO` - Bulgarian Lev (1879–1952)
// * `BGM` - Bulgarian Socialist Lev
// * `BUK` - Burmese Kyat
// * `BIF` - Burundian Franc
// * `XPF` - CFP Franc
// * `KHR` - Cambodian Riel
// * `CAD` - Canadian Dollar
// * `CVE` - Cape Verdean Escudo
// * `KYD` - Cayman Islands Dollar
// * `XAF` - Central African CFA Franc
// * `CLE` - Chilean Escudo
// * `CLP` - Chilean Peso
// * `CLF` - Chilean Unit of Account (UF)
// * `CNX` - Chinese People’s Bank Dollar
// * `CNY` - Chinese Yuan
// * `CNH` - Chinese Yuan (offshore)
// * `COP` - Colombian Peso
// * `COU` - Colombian Real Value Unit
// * `KMF` - Comorian Franc
// * `CDF` - Congolese Franc
// * `CRC` - Costa Rican Colón
// * `HRD` - Croatian Dinar
// * `HRK` - Croatian Kuna
// * `CUC` - Cuban Convertible Peso
// * `CUP` - Cuban Peso
// * `CYP` - Cypriot Pound
// * `CZK` - Czech Koruna
// * `CSK` - Czechoslovak Hard Koruna
// * `DKK` - Danish Krone
// * `DJF` - Djiboutian Franc
// * `DOP` - Dominican Peso
// * `NLG` - Dutch Guilder
// * `XCD` - East Caribbean Dollar
// * `DDM` - East German Mark
// * `ECS` - Ecuadorian Sucre
// * `ECV` - Ecuadorian Unit of Constant Value
// * `EGP` - Egyptian Pound
// * `GQE` - Equatorial Guinean Ekwele
// * `ERN` - Eritrean Nakfa
// * `EEK` - Estonian Kroon
// * `ETB` - Ethiopian Birr
// * `EUR` - Euro
// * `XBA` - European Composite Unit
// * `XEU` - European Currency Unit
// * `XBB` - European Monetary Unit
// * `XBC` - European Unit of Account (XBC)
// * `XBD` - European Unit of Account (XBD)
// * `FKP` - Falkland Islands Pound
// * `FJD` - Fijian Dollar
// * `FIM` - Finnish Markka
// * `FRF` - French Franc
// * `XFO` - French Gold Franc
// * `XFU` - French UIC-Franc
// * `GMD` - Gambian Dalasi
// * `GEK` - Georgian Kupon Larit
// * `GEL` - Georgian Lari
// * `DEM` - German Mark
// * `GHS` - Ghanaian Cedi
// * `GHC` - Ghanaian Cedi (1979–2007)
// * `GIP` - Gibraltar Pound
// * `XAU` - Gold
// * `GRD` - Greek Drachma
// * `GTQ` - Guatemalan Quetzal
// * `GWP` - Guinea-Bissau Peso
// * `GNF` - Guinean Franc
// * `GNS` - Guinean Syli
// * `GYD` - Guyanaese Dollar
// * `HTG` - Haitian Gourde
// * `HNL` - Honduran Lempira
// * `HKD` - Hong Kong Dollar
// * `HUF` - Hungarian Forint
// * `IMP` - IMP
// * `ISK` - Icelandic Króna
// * `ISJ` - Icelandic Króna (1918–1981)
// * `INR` - Indian Rupee
// * `IDR` - Indonesian Rupiah
// * `IRR` - Iranian Rial
// * `IQD` - Iraqi Dinar
// * `IEP` - Irish Pound
// * `ILS` - Israeli New Shekel
// * `ILP` - Israeli Pound
// * `ILR` - Israeli Shekel (1980–1985)
// * `ITL` - Italian Lira
// * `JMD` - Jamaican Dollar
// * `JPY` - Japanese Yen
// * `JOD` - Jordanian Dinar
// * `KZT` - Kazakhstani Tenge
// * `KES` - Kenyan Shilling
// * `KWD` - Kuwaiti Dinar
// * `KGS` - Kyrgystani Som
// * `LAK` - Laotian Kip
// * `LVL` - Latvian Lats
// * `LVR` - Latvian Ruble
// * `LBP` - Lebanese Pound
// * `LSL` - Lesotho Loti
// * `LRD` - Liberian Dollar
// * `LYD` - Libyan Dinar
// * `LTL` - Lithuanian Litas
// * `LTT` - Lithuanian Talonas
// * `LUL` - Luxembourg Financial Franc
// * `LUC` - Luxembourgian Convertible Franc
// * `LUF` - Luxembourgian Franc
// * `MOP` - Macanese Pataca
// * `MKD` - Macedonian Denar
// * `MKN` - Macedonian Denar (1992–1993)
// * `MGA` - Malagasy Ariary
// * `MGF` - Malagasy Franc
// * `MWK` - Malawian Kwacha
// * `MYR` - Malaysian Ringgit
// * `MVR` - Maldivian Rufiyaa
// * `MVP` - Maldivian Rupee (1947–1981)
// * `MLF` - Malian Franc
// * `MTL` - Maltese Lira
// * `MTP` - Maltese Pound
// * `MRU` - Mauritanian Ouguiya
// * `MRO` - Mauritanian Ouguiya (1973–2017)
// * `MUR` - Mauritian Rupee
// * `MXV` - Mexican Investment Unit
// * `MXN` - Mexican Peso
// * `MXP` - Mexican Silver Peso (1861–1992)
// * `MDC` - Moldovan Cupon
// * `MDL` - Moldovan Leu
// * `MCF` - Monegasque Franc
// * `MNT` - Mongolian Tugrik
// * `MAD` - Moroccan Dirham
// * `MAF` - Moroccan Franc
// * `MZE` - Mozambican Escudo
// * `MZN` - Mozambican Metical
// * `MZM` - Mozambican Metical (1980–2006)
// * `MMK` - Myanmar Kyat
// * `NAD` - Namibian Dollar
// * `NPR` - Nepalese Rupee
// * `ANG` - Netherlands Antillean Guilder
// * `TWD` - New Taiwan Dollar
// * `NZD` - New Zealand Dollar
// * `NIO` - Nicaraguan Córdoba
// * `NIC` - Nicaraguan Córdoba (1988–1991)
// * `NGN` - Nigerian Naira
// * `KPW` - North Korean Won
// * `NOK` - Norwegian Krone
// * `OMR` - Omani Rial
// * `PKR` - Pakistani Rupee
// * `XPD` - Palladium
// * `PAB` - Panamanian Balboa
// * `PGK` - Papua New Guinean Kina
// * `PYG` - Paraguayan Guarani
// * `PEI` - Peruvian Inti
// * `PEN` - Peruvian Sol
// * `PES` - Peruvian Sol (1863–1965)
// * `PHP` - Philippine Peso
// * `XPT` - Platinum
// * `PLN` - Polish Zloty
// * `PLZ` - Polish Zloty (1950–1995)
// * `PTE` - Portuguese Escudo
// * `GWE` - Portuguese Guinea Escudo
// * `QAR` - Qatari Rial
// * `XRE` - RINET Funds
// * `RHD` - Rhodesian Dollar
// * `RON` - Romanian Leu
// * `ROL` - Romanian Leu (1952–2006)
// * `RUB` - Russian Ruble
// * `RUR` - Russian Ruble (1991–1998)
// * `RWF` - Rwandan Franc
// * `SVC` - Salvadoran Colón
// * `WST` - Samoan Tala
// * `SAR` - Saudi Riyal
// * `RSD` - Serbian Dinar
// * `CSD` - Serbian Dinar (2002–2006)
// * `SCR` - Seychellois Rupee
// * `SLL` - Sierra Leonean Leone
// * `XAG` - Silver
// * `SGD` - Singapore Dollar
// * `SKK` - Slovak Koruna
// * `SIT` - Slovenian Tolar
// * `SBD` - Solomon Islands Dollar
// * `SOS` - Somali Shilling
// * `ZAR` - South African Rand
// * `ZAL` - South African Rand (financial)
// * `KRH` - South Korean Hwan (1953–1962)
// * `KRW` - South Korean Won
// * `KRO` - South Korean Won (1945–1953)
// * `SSP` - South Sudanese Pound
// * `SUR` - Soviet Rouble
// * `ESP` - Spanish Peseta
// * `ESA` - Spanish Peseta (A account)
// * `ESB` - Spanish Peseta (convertible account)
// * `XDR` - Special Drawing Rights
// * `LKR` - Sri Lankan Rupee
// * `SHP` - St. Helena Pound
// * `XSU` - Sucre
// * `SDD` - Sudanese Dinar (1992–2007)
// * `SDG` - Sudanese Pound
// * `SDP` - Sudanese Pound (1957–1998)
// * `SRD` - Surinamese Dollar
// * `SRG` - Surinamese Guilder
// * `SZL` - Swazi Lilangeni
// * `SEK` - Swedish Krona
// * `CHF` - Swiss Franc
// * `SYP` - Syrian Pound
// * `STN` - São Tomé & Príncipe Dobra
// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
// * `TVD` - TVD
// * `TJR` - Tajikistani Ruble
// * `TJS` - Tajikistani Somoni
// * `TZS` - Tanzanian Shilling
// * `XTS` - Testing Currency Code
// * `THB` - Thai Baht
// * `XXX` - The codes assigned for transactions where no currency is involved
// * `TPE` - Timorese Escudo
// * `TOP` - Tongan Paʻanga
// * `TTD` - Trinidad & Tobago Dollar
// * `TND` - Tunisian Dinar
// * `TRY` - Turkish Lira
// * `TRL` - Turkish Lira (1922–2005)
// * `TMT` - Turkmenistani Manat
// * `TMM` - Turkmenistani Manat (1993–2009)
// * `USD` - US Dollar
// * `USN` - US Dollar (Next day)
// * `USS` - US Dollar (Same day)
// * `UGX` - Ugandan Shilling
// * `UGS` - Ugandan Shilling (1966–1987)
// * `UAH` - Ukrainian Hryvnia
// * `UAK` - Ukrainian Karbovanets
// * `AED` - United Arab Emirates Dirham
// * `UYW` - Uruguayan Nominal Wage Index Unit
// * `UYU` - Uruguayan Peso
// * `UYP` - Uruguayan Peso (1975–1993)
// * `UYI` - Uruguayan Peso (Indexed Units)
// * `UZS` - Uzbekistani Som
// * `VUV` - Vanuatu Vatu
// * `VES` - Venezuelan Bolívar
// * `VEB` - Venezuelan Bolívar (1871–2008)
// * `VEF` - Venezuelan Bolívar (2008–2018)
// * `VND` - Vietnamese Dong
// * `VNN` - Vietnamese Dong (1978–1985)
// * `CHE` - WIR Euro
// * `CHW` - WIR Franc
// * `XOF` - West African CFA Franc
// * `YDD` - Yemeni Dinar
// * `YER` - Yemeni Rial
// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
// * `YUM` - Yugoslavian New Dinar (1994–2002)
// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
// * `ZWN` - ZWN
// * `ZRN` - Zairean New Zaire (1993–1998)
// * `ZRZ` - Zairean Zaire (1971–1993)
// * `ZMW` - Zambian Kwacha
// * `ZMK` - Zambian Kwacha (1968–2012)
// * `ZWD` - Zimbabwean Dollar (1980–2008)
// * `ZWR` - Zimbabwean Dollar (2008)
// * `ZWL` - Zimbabwean Dollar (2009)
type TransactionCurrency struct {
	typeName     string
	CurrencyEnum CurrencyEnum
	String       string
}

func NewTransactionCurrencyFromCurrencyEnum(value CurrencyEnum) *TransactionCurrency {
	return &TransactionCurrency{typeName: "currencyEnum", CurrencyEnum: value}
}

func NewTransactionCurrencyFromString(value string) *TransactionCurrency {
	return &TransactionCurrency{typeName: "string", String: value}
}

func (t *TransactionCurrency) UnmarshalJSON(data []byte) error {
	var valueCurrencyEnum CurrencyEnum
	if err := json.Unmarshal(data, &valueCurrencyEnum); err == nil {
		t.typeName = "currencyEnum"
		t.CurrencyEnum = valueCurrencyEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TransactionCurrency) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "currencyEnum":
		return json.Marshal(t.CurrencyEnum)
	case "string":
		return json.Marshal(t.String)
	}
}

type TransactionCurrencyVisitor interface {
	VisitCurrencyEnum(CurrencyEnum) error
	VisitString(string) error
}

func (t *TransactionCurrency) Accept(visitor TransactionCurrencyVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "currencyEnum":
		return visitor.VisitCurrencyEnum(t.CurrencyEnum)
	case "string":
		return visitor.VisitString(t.String)
	}
}

// # The TransactionLineItem Object
// ### Description
// The `TransactionLineItem` object is used to represent a transaction's line items.
//
// ### Usage Example
// Fetch from the `GET TransactionLineItem` endpoint and view the transaction's line items.
type TransactionLineItem struct {
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// An internal note used by the business to clarify purpose of the transaction.
	Memo *string `json:"memo,omitempty"`
	// The line item's unit price.
	UnitPrice *string `json:"unit_price,omitempty"`
	// The line item's quantity.
	Quantity *string                  `json:"quantity,omitempty"`
	Item     *TransactionLineItemItem `json:"item,omitempty"`
	// The line item's account.
	Account *string `json:"account,omitempty"`
	// The line's associated tracking category.
	TrackingCategory *string `json:"tracking_category,omitempty"`
	// The line's associated tracking categories.
	TrackingCategories []string `json:"tracking_categories,omitempty"`
	// The line item's total.
	TotalLineAmount *string `json:"total_line_amount,omitempty"`
	// The line item's tax rate.
	TaxRate *string `json:"tax_rate,omitempty"`
	// The line item's currency.
	//
	// * `XUA` - ADB Unit of Account
	// * `AFN` - Afghan Afghani
	// * `AFA` - Afghan Afghani (1927–2002)
	// * `ALL` - Albanian Lek
	// * `ALK` - Albanian Lek (1946–1965)
	// * `DZD` - Algerian Dinar
	// * `ADP` - Andorran Peseta
	// * `AOA` - Angolan Kwanza
	// * `AOK` - Angolan Kwanza (1977–1991)
	// * `AON` - Angolan New Kwanza (1990–2000)
	// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
	// * `ARA` - Argentine Austral
	// * `ARS` - Argentine Peso
	// * `ARM` - Argentine Peso (1881–1970)
	// * `ARP` - Argentine Peso (1983–1985)
	// * `ARL` - Argentine Peso Ley (1970–1983)
	// * `AMD` - Armenian Dram
	// * `AWG` - Aruban Florin
	// * `AUD` - Australian Dollar
	// * `ATS` - Austrian Schilling
	// * `AZN` - Azerbaijani Manat
	// * `AZM` - Azerbaijani Manat (1993–2006)
	// * `BSD` - Bahamian Dollar
	// * `BHD` - Bahraini Dinar
	// * `BDT` - Bangladeshi Taka
	// * `BBD` - Barbadian Dollar
	// * `BYN` - Belarusian Ruble
	// * `BYB` - Belarusian Ruble (1994–1999)
	// * `BYR` - Belarusian Ruble (2000–2016)
	// * `BEF` - Belgian Franc
	// * `BEC` - Belgian Franc (convertible)
	// * `BEL` - Belgian Franc (financial)
	// * `BZD` - Belize Dollar
	// * `BMD` - Bermudan Dollar
	// * `BTN` - Bhutanese Ngultrum
	// * `BOB` - Bolivian Boliviano
	// * `BOL` - Bolivian Boliviano (1863–1963)
	// * `BOV` - Bolivian Mvdol
	// * `BOP` - Bolivian Peso
	// * `BAM` - Bosnia-Herzegovina Convertible Mark
	// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
	// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
	// * `BWP` - Botswanan Pula
	// * `BRC` - Brazilian Cruzado (1986–1989)
	// * `BRZ` - Brazilian Cruzeiro (1942–1967)
	// * `BRE` - Brazilian Cruzeiro (1990–1993)
	// * `BRR` - Brazilian Cruzeiro (1993–1994)
	// * `BRN` - Brazilian New Cruzado (1989–1990)
	// * `BRB` - Brazilian New Cruzeiro (1967–1986)
	// * `BRL` - Brazilian Real
	// * `GBP` - British Pound
	// * `BND` - Brunei Dollar
	// * `BGL` - Bulgarian Hard Lev
	// * `BGN` - Bulgarian Lev
	// * `BGO` - Bulgarian Lev (1879–1952)
	// * `BGM` - Bulgarian Socialist Lev
	// * `BUK` - Burmese Kyat
	// * `BIF` - Burundian Franc
	// * `XPF` - CFP Franc
	// * `KHR` - Cambodian Riel
	// * `CAD` - Canadian Dollar
	// * `CVE` - Cape Verdean Escudo
	// * `KYD` - Cayman Islands Dollar
	// * `XAF` - Central African CFA Franc
	// * `CLE` - Chilean Escudo
	// * `CLP` - Chilean Peso
	// * `CLF` - Chilean Unit of Account (UF)
	// * `CNX` - Chinese People’s Bank Dollar
	// * `CNY` - Chinese Yuan
	// * `CNH` - Chinese Yuan (offshore)
	// * `COP` - Colombian Peso
	// * `COU` - Colombian Real Value Unit
	// * `KMF` - Comorian Franc
	// * `CDF` - Congolese Franc
	// * `CRC` - Costa Rican Colón
	// * `HRD` - Croatian Dinar
	// * `HRK` - Croatian Kuna
	// * `CUC` - Cuban Convertible Peso
	// * `CUP` - Cuban Peso
	// * `CYP` - Cypriot Pound
	// * `CZK` - Czech Koruna
	// * `CSK` - Czechoslovak Hard Koruna
	// * `DKK` - Danish Krone
	// * `DJF` - Djiboutian Franc
	// * `DOP` - Dominican Peso
	// * `NLG` - Dutch Guilder
	// * `XCD` - East Caribbean Dollar
	// * `DDM` - East German Mark
	// * `ECS` - Ecuadorian Sucre
	// * `ECV` - Ecuadorian Unit of Constant Value
	// * `EGP` - Egyptian Pound
	// * `GQE` - Equatorial Guinean Ekwele
	// * `ERN` - Eritrean Nakfa
	// * `EEK` - Estonian Kroon
	// * `ETB` - Ethiopian Birr
	// * `EUR` - Euro
	// * `XBA` - European Composite Unit
	// * `XEU` - European Currency Unit
	// * `XBB` - European Monetary Unit
	// * `XBC` - European Unit of Account (XBC)
	// * `XBD` - European Unit of Account (XBD)
	// * `FKP` - Falkland Islands Pound
	// * `FJD` - Fijian Dollar
	// * `FIM` - Finnish Markka
	// * `FRF` - French Franc
	// * `XFO` - French Gold Franc
	// * `XFU` - French UIC-Franc
	// * `GMD` - Gambian Dalasi
	// * `GEK` - Georgian Kupon Larit
	// * `GEL` - Georgian Lari
	// * `DEM` - German Mark
	// * `GHS` - Ghanaian Cedi
	// * `GHC` - Ghanaian Cedi (1979–2007)
	// * `GIP` - Gibraltar Pound
	// * `XAU` - Gold
	// * `GRD` - Greek Drachma
	// * `GTQ` - Guatemalan Quetzal
	// * `GWP` - Guinea-Bissau Peso
	// * `GNF` - Guinean Franc
	// * `GNS` - Guinean Syli
	// * `GYD` - Guyanaese Dollar
	// * `HTG` - Haitian Gourde
	// * `HNL` - Honduran Lempira
	// * `HKD` - Hong Kong Dollar
	// * `HUF` - Hungarian Forint
	// * `IMP` - IMP
	// * `ISK` - Icelandic Króna
	// * `ISJ` - Icelandic Króna (1918–1981)
	// * `INR` - Indian Rupee
	// * `IDR` - Indonesian Rupiah
	// * `IRR` - Iranian Rial
	// * `IQD` - Iraqi Dinar
	// * `IEP` - Irish Pound
	// * `ILS` - Israeli New Shekel
	// * `ILP` - Israeli Pound
	// * `ILR` - Israeli Shekel (1980–1985)
	// * `ITL` - Italian Lira
	// * `JMD` - Jamaican Dollar
	// * `JPY` - Japanese Yen
	// * `JOD` - Jordanian Dinar
	// * `KZT` - Kazakhstani Tenge
	// * `KES` - Kenyan Shilling
	// * `KWD` - Kuwaiti Dinar
	// * `KGS` - Kyrgystani Som
	// * `LAK` - Laotian Kip
	// * `LVL` - Latvian Lats
	// * `LVR` - Latvian Ruble
	// * `LBP` - Lebanese Pound
	// * `LSL` - Lesotho Loti
	// * `LRD` - Liberian Dollar
	// * `LYD` - Libyan Dinar
	// * `LTL` - Lithuanian Litas
	// * `LTT` - Lithuanian Talonas
	// * `LUL` - Luxembourg Financial Franc
	// * `LUC` - Luxembourgian Convertible Franc
	// * `LUF` - Luxembourgian Franc
	// * `MOP` - Macanese Pataca
	// * `MKD` - Macedonian Denar
	// * `MKN` - Macedonian Denar (1992–1993)
	// * `MGA` - Malagasy Ariary
	// * `MGF` - Malagasy Franc
	// * `MWK` - Malawian Kwacha
	// * `MYR` - Malaysian Ringgit
	// * `MVR` - Maldivian Rufiyaa
	// * `MVP` - Maldivian Rupee (1947–1981)
	// * `MLF` - Malian Franc
	// * `MTL` - Maltese Lira
	// * `MTP` - Maltese Pound
	// * `MRU` - Mauritanian Ouguiya
	// * `MRO` - Mauritanian Ouguiya (1973–2017)
	// * `MUR` - Mauritian Rupee
	// * `MXV` - Mexican Investment Unit
	// * `MXN` - Mexican Peso
	// * `MXP` - Mexican Silver Peso (1861–1992)
	// * `MDC` - Moldovan Cupon
	// * `MDL` - Moldovan Leu
	// * `MCF` - Monegasque Franc
	// * `MNT` - Mongolian Tugrik
	// * `MAD` - Moroccan Dirham
	// * `MAF` - Moroccan Franc
	// * `MZE` - Mozambican Escudo
	// * `MZN` - Mozambican Metical
	// * `MZM` - Mozambican Metical (1980–2006)
	// * `MMK` - Myanmar Kyat
	// * `NAD` - Namibian Dollar
	// * `NPR` - Nepalese Rupee
	// * `ANG` - Netherlands Antillean Guilder
	// * `TWD` - New Taiwan Dollar
	// * `NZD` - New Zealand Dollar
	// * `NIO` - Nicaraguan Córdoba
	// * `NIC` - Nicaraguan Córdoba (1988–1991)
	// * `NGN` - Nigerian Naira
	// * `KPW` - North Korean Won
	// * `NOK` - Norwegian Krone
	// * `OMR` - Omani Rial
	// * `PKR` - Pakistani Rupee
	// * `XPD` - Palladium
	// * `PAB` - Panamanian Balboa
	// * `PGK` - Papua New Guinean Kina
	// * `PYG` - Paraguayan Guarani
	// * `PEI` - Peruvian Inti
	// * `PEN` - Peruvian Sol
	// * `PES` - Peruvian Sol (1863–1965)
	// * `PHP` - Philippine Peso
	// * `XPT` - Platinum
	// * `PLN` - Polish Zloty
	// * `PLZ` - Polish Zloty (1950–1995)
	// * `PTE` - Portuguese Escudo
	// * `GWE` - Portuguese Guinea Escudo
	// * `QAR` - Qatari Rial
	// * `XRE` - RINET Funds
	// * `RHD` - Rhodesian Dollar
	// * `RON` - Romanian Leu
	// * `ROL` - Romanian Leu (1952–2006)
	// * `RUB` - Russian Ruble
	// * `RUR` - Russian Ruble (1991–1998)
	// * `RWF` - Rwandan Franc
	// * `SVC` - Salvadoran Colón
	// * `WST` - Samoan Tala
	// * `SAR` - Saudi Riyal
	// * `RSD` - Serbian Dinar
	// * `CSD` - Serbian Dinar (2002–2006)
	// * `SCR` - Seychellois Rupee
	// * `SLL` - Sierra Leonean Leone
	// * `XAG` - Silver
	// * `SGD` - Singapore Dollar
	// * `SKK` - Slovak Koruna
	// * `SIT` - Slovenian Tolar
	// * `SBD` - Solomon Islands Dollar
	// * `SOS` - Somali Shilling
	// * `ZAR` - South African Rand
	// * `ZAL` - South African Rand (financial)
	// * `KRH` - South Korean Hwan (1953–1962)
	// * `KRW` - South Korean Won
	// * `KRO` - South Korean Won (1945–1953)
	// * `SSP` - South Sudanese Pound
	// * `SUR` - Soviet Rouble
	// * `ESP` - Spanish Peseta
	// * `ESA` - Spanish Peseta (A account)
	// * `ESB` - Spanish Peseta (convertible account)
	// * `XDR` - Special Drawing Rights
	// * `LKR` - Sri Lankan Rupee
	// * `SHP` - St. Helena Pound
	// * `XSU` - Sucre
	// * `SDD` - Sudanese Dinar (1992–2007)
	// * `SDG` - Sudanese Pound
	// * `SDP` - Sudanese Pound (1957–1998)
	// * `SRD` - Surinamese Dollar
	// * `SRG` - Surinamese Guilder
	// * `SZL` - Swazi Lilangeni
	// * `SEK` - Swedish Krona
	// * `CHF` - Swiss Franc
	// * `SYP` - Syrian Pound
	// * `STN` - São Tomé & Príncipe Dobra
	// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
	// * `TVD` - TVD
	// * `TJR` - Tajikistani Ruble
	// * `TJS` - Tajikistani Somoni
	// * `TZS` - Tanzanian Shilling
	// * `XTS` - Testing Currency Code
	// * `THB` - Thai Baht
	// * `XXX` - The codes assigned for transactions where no currency is involved
	// * `TPE` - Timorese Escudo
	// * `TOP` - Tongan Paʻanga
	// * `TTD` - Trinidad & Tobago Dollar
	// * `TND` - Tunisian Dinar
	// * `TRY` - Turkish Lira
	// * `TRL` - Turkish Lira (1922–2005)
	// * `TMT` - Turkmenistani Manat
	// * `TMM` - Turkmenistani Manat (1993–2009)
	// * `USD` - US Dollar
	// * `USN` - US Dollar (Next day)
	// * `USS` - US Dollar (Same day)
	// * `UGX` - Ugandan Shilling
	// * `UGS` - Ugandan Shilling (1966–1987)
	// * `UAH` - Ukrainian Hryvnia
	// * `UAK` - Ukrainian Karbovanets
	// * `AED` - United Arab Emirates Dirham
	// * `UYW` - Uruguayan Nominal Wage Index Unit
	// * `UYU` - Uruguayan Peso
	// * `UYP` - Uruguayan Peso (1975–1993)
	// * `UYI` - Uruguayan Peso (Indexed Units)
	// * `UZS` - Uzbekistani Som
	// * `VUV` - Vanuatu Vatu
	// * `VES` - Venezuelan Bolívar
	// * `VEB` - Venezuelan Bolívar (1871–2008)
	// * `VEF` - Venezuelan Bolívar (2008–2018)
	// * `VND` - Vietnamese Dong
	// * `VNN` - Vietnamese Dong (1978–1985)
	// * `CHE` - WIR Euro
	// * `CHW` - WIR Franc
	// * `XOF` - West African CFA Franc
	// * `YDD` - Yemeni Dinar
	// * `YER` - Yemeni Rial
	// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
	// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
	// * `YUM` - Yugoslavian New Dinar (1994–2002)
	// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
	// * `ZWN` - ZWN
	// * `ZRN` - Zairean New Zaire (1993–1998)
	// * `ZRZ` - Zairean Zaire (1971–1993)
	// * `ZMW` - Zambian Kwacha
	// * `ZMK` - Zambian Kwacha (1968–2012)
	// * `ZWD` - Zimbabwean Dollar (1980–2008)
	// * `ZWR` - Zimbabwean Dollar (2008)
	// * `ZWL` - Zimbabwean Dollar (2009)
	Currency *TransactionLineItemCurrency `json:"currency,omitempty"`
	// The line item's exchange rate.
	ExchangeRate *string `json:"exchange_rate,omitempty"`
	// The company the line belongs to.
	Company *string `json:"company,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted *bool      `json:"remote_was_deleted,omitempty"`
	Id               *string    `json:"id,omitempty"`
	CreatedAt        *time.Time `json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
}

// The line item's currency.
//
// * `XUA` - ADB Unit of Account
// * `AFN` - Afghan Afghani
// * `AFA` - Afghan Afghani (1927–2002)
// * `ALL` - Albanian Lek
// * `ALK` - Albanian Lek (1946–1965)
// * `DZD` - Algerian Dinar
// * `ADP` - Andorran Peseta
// * `AOA` - Angolan Kwanza
// * `AOK` - Angolan Kwanza (1977–1991)
// * `AON` - Angolan New Kwanza (1990–2000)
// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
// * `ARA` - Argentine Austral
// * `ARS` - Argentine Peso
// * `ARM` - Argentine Peso (1881–1970)
// * `ARP` - Argentine Peso (1983–1985)
// * `ARL` - Argentine Peso Ley (1970–1983)
// * `AMD` - Armenian Dram
// * `AWG` - Aruban Florin
// * `AUD` - Australian Dollar
// * `ATS` - Austrian Schilling
// * `AZN` - Azerbaijani Manat
// * `AZM` - Azerbaijani Manat (1993–2006)
// * `BSD` - Bahamian Dollar
// * `BHD` - Bahraini Dinar
// * `BDT` - Bangladeshi Taka
// * `BBD` - Barbadian Dollar
// * `BYN` - Belarusian Ruble
// * `BYB` - Belarusian Ruble (1994–1999)
// * `BYR` - Belarusian Ruble (2000–2016)
// * `BEF` - Belgian Franc
// * `BEC` - Belgian Franc (convertible)
// * `BEL` - Belgian Franc (financial)
// * `BZD` - Belize Dollar
// * `BMD` - Bermudan Dollar
// * `BTN` - Bhutanese Ngultrum
// * `BOB` - Bolivian Boliviano
// * `BOL` - Bolivian Boliviano (1863–1963)
// * `BOV` - Bolivian Mvdol
// * `BOP` - Bolivian Peso
// * `BAM` - Bosnia-Herzegovina Convertible Mark
// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
// * `BWP` - Botswanan Pula
// * `BRC` - Brazilian Cruzado (1986–1989)
// * `BRZ` - Brazilian Cruzeiro (1942–1967)
// * `BRE` - Brazilian Cruzeiro (1990–1993)
// * `BRR` - Brazilian Cruzeiro (1993–1994)
// * `BRN` - Brazilian New Cruzado (1989–1990)
// * `BRB` - Brazilian New Cruzeiro (1967–1986)
// * `BRL` - Brazilian Real
// * `GBP` - British Pound
// * `BND` - Brunei Dollar
// * `BGL` - Bulgarian Hard Lev
// * `BGN` - Bulgarian Lev
// * `BGO` - Bulgarian Lev (1879–1952)
// * `BGM` - Bulgarian Socialist Lev
// * `BUK` - Burmese Kyat
// * `BIF` - Burundian Franc
// * `XPF` - CFP Franc
// * `KHR` - Cambodian Riel
// * `CAD` - Canadian Dollar
// * `CVE` - Cape Verdean Escudo
// * `KYD` - Cayman Islands Dollar
// * `XAF` - Central African CFA Franc
// * `CLE` - Chilean Escudo
// * `CLP` - Chilean Peso
// * `CLF` - Chilean Unit of Account (UF)
// * `CNX` - Chinese People’s Bank Dollar
// * `CNY` - Chinese Yuan
// * `CNH` - Chinese Yuan (offshore)
// * `COP` - Colombian Peso
// * `COU` - Colombian Real Value Unit
// * `KMF` - Comorian Franc
// * `CDF` - Congolese Franc
// * `CRC` - Costa Rican Colón
// * `HRD` - Croatian Dinar
// * `HRK` - Croatian Kuna
// * `CUC` - Cuban Convertible Peso
// * `CUP` - Cuban Peso
// * `CYP` - Cypriot Pound
// * `CZK` - Czech Koruna
// * `CSK` - Czechoslovak Hard Koruna
// * `DKK` - Danish Krone
// * `DJF` - Djiboutian Franc
// * `DOP` - Dominican Peso
// * `NLG` - Dutch Guilder
// * `XCD` - East Caribbean Dollar
// * `DDM` - East German Mark
// * `ECS` - Ecuadorian Sucre
// * `ECV` - Ecuadorian Unit of Constant Value
// * `EGP` - Egyptian Pound
// * `GQE` - Equatorial Guinean Ekwele
// * `ERN` - Eritrean Nakfa
// * `EEK` - Estonian Kroon
// * `ETB` - Ethiopian Birr
// * `EUR` - Euro
// * `XBA` - European Composite Unit
// * `XEU` - European Currency Unit
// * `XBB` - European Monetary Unit
// * `XBC` - European Unit of Account (XBC)
// * `XBD` - European Unit of Account (XBD)
// * `FKP` - Falkland Islands Pound
// * `FJD` - Fijian Dollar
// * `FIM` - Finnish Markka
// * `FRF` - French Franc
// * `XFO` - French Gold Franc
// * `XFU` - French UIC-Franc
// * `GMD` - Gambian Dalasi
// * `GEK` - Georgian Kupon Larit
// * `GEL` - Georgian Lari
// * `DEM` - German Mark
// * `GHS` - Ghanaian Cedi
// * `GHC` - Ghanaian Cedi (1979–2007)
// * `GIP` - Gibraltar Pound
// * `XAU` - Gold
// * `GRD` - Greek Drachma
// * `GTQ` - Guatemalan Quetzal
// * `GWP` - Guinea-Bissau Peso
// * `GNF` - Guinean Franc
// * `GNS` - Guinean Syli
// * `GYD` - Guyanaese Dollar
// * `HTG` - Haitian Gourde
// * `HNL` - Honduran Lempira
// * `HKD` - Hong Kong Dollar
// * `HUF` - Hungarian Forint
// * `IMP` - IMP
// * `ISK` - Icelandic Króna
// * `ISJ` - Icelandic Króna (1918–1981)
// * `INR` - Indian Rupee
// * `IDR` - Indonesian Rupiah
// * `IRR` - Iranian Rial
// * `IQD` - Iraqi Dinar
// * `IEP` - Irish Pound
// * `ILS` - Israeli New Shekel
// * `ILP` - Israeli Pound
// * `ILR` - Israeli Shekel (1980–1985)
// * `ITL` - Italian Lira
// * `JMD` - Jamaican Dollar
// * `JPY` - Japanese Yen
// * `JOD` - Jordanian Dinar
// * `KZT` - Kazakhstani Tenge
// * `KES` - Kenyan Shilling
// * `KWD` - Kuwaiti Dinar
// * `KGS` - Kyrgystani Som
// * `LAK` - Laotian Kip
// * `LVL` - Latvian Lats
// * `LVR` - Latvian Ruble
// * `LBP` - Lebanese Pound
// * `LSL` - Lesotho Loti
// * `LRD` - Liberian Dollar
// * `LYD` - Libyan Dinar
// * `LTL` - Lithuanian Litas
// * `LTT` - Lithuanian Talonas
// * `LUL` - Luxembourg Financial Franc
// * `LUC` - Luxembourgian Convertible Franc
// * `LUF` - Luxembourgian Franc
// * `MOP` - Macanese Pataca
// * `MKD` - Macedonian Denar
// * `MKN` - Macedonian Denar (1992–1993)
// * `MGA` - Malagasy Ariary
// * `MGF` - Malagasy Franc
// * `MWK` - Malawian Kwacha
// * `MYR` - Malaysian Ringgit
// * `MVR` - Maldivian Rufiyaa
// * `MVP` - Maldivian Rupee (1947–1981)
// * `MLF` - Malian Franc
// * `MTL` - Maltese Lira
// * `MTP` - Maltese Pound
// * `MRU` - Mauritanian Ouguiya
// * `MRO` - Mauritanian Ouguiya (1973–2017)
// * `MUR` - Mauritian Rupee
// * `MXV` - Mexican Investment Unit
// * `MXN` - Mexican Peso
// * `MXP` - Mexican Silver Peso (1861–1992)
// * `MDC` - Moldovan Cupon
// * `MDL` - Moldovan Leu
// * `MCF` - Monegasque Franc
// * `MNT` - Mongolian Tugrik
// * `MAD` - Moroccan Dirham
// * `MAF` - Moroccan Franc
// * `MZE` - Mozambican Escudo
// * `MZN` - Mozambican Metical
// * `MZM` - Mozambican Metical (1980–2006)
// * `MMK` - Myanmar Kyat
// * `NAD` - Namibian Dollar
// * `NPR` - Nepalese Rupee
// * `ANG` - Netherlands Antillean Guilder
// * `TWD` - New Taiwan Dollar
// * `NZD` - New Zealand Dollar
// * `NIO` - Nicaraguan Córdoba
// * `NIC` - Nicaraguan Córdoba (1988–1991)
// * `NGN` - Nigerian Naira
// * `KPW` - North Korean Won
// * `NOK` - Norwegian Krone
// * `OMR` - Omani Rial
// * `PKR` - Pakistani Rupee
// * `XPD` - Palladium
// * `PAB` - Panamanian Balboa
// * `PGK` - Papua New Guinean Kina
// * `PYG` - Paraguayan Guarani
// * `PEI` - Peruvian Inti
// * `PEN` - Peruvian Sol
// * `PES` - Peruvian Sol (1863–1965)
// * `PHP` - Philippine Peso
// * `XPT` - Platinum
// * `PLN` - Polish Zloty
// * `PLZ` - Polish Zloty (1950–1995)
// * `PTE` - Portuguese Escudo
// * `GWE` - Portuguese Guinea Escudo
// * `QAR` - Qatari Rial
// * `XRE` - RINET Funds
// * `RHD` - Rhodesian Dollar
// * `RON` - Romanian Leu
// * `ROL` - Romanian Leu (1952–2006)
// * `RUB` - Russian Ruble
// * `RUR` - Russian Ruble (1991–1998)
// * `RWF` - Rwandan Franc
// * `SVC` - Salvadoran Colón
// * `WST` - Samoan Tala
// * `SAR` - Saudi Riyal
// * `RSD` - Serbian Dinar
// * `CSD` - Serbian Dinar (2002–2006)
// * `SCR` - Seychellois Rupee
// * `SLL` - Sierra Leonean Leone
// * `XAG` - Silver
// * `SGD` - Singapore Dollar
// * `SKK` - Slovak Koruna
// * `SIT` - Slovenian Tolar
// * `SBD` - Solomon Islands Dollar
// * `SOS` - Somali Shilling
// * `ZAR` - South African Rand
// * `ZAL` - South African Rand (financial)
// * `KRH` - South Korean Hwan (1953–1962)
// * `KRW` - South Korean Won
// * `KRO` - South Korean Won (1945–1953)
// * `SSP` - South Sudanese Pound
// * `SUR` - Soviet Rouble
// * `ESP` - Spanish Peseta
// * `ESA` - Spanish Peseta (A account)
// * `ESB` - Spanish Peseta (convertible account)
// * `XDR` - Special Drawing Rights
// * `LKR` - Sri Lankan Rupee
// * `SHP` - St. Helena Pound
// * `XSU` - Sucre
// * `SDD` - Sudanese Dinar (1992–2007)
// * `SDG` - Sudanese Pound
// * `SDP` - Sudanese Pound (1957–1998)
// * `SRD` - Surinamese Dollar
// * `SRG` - Surinamese Guilder
// * `SZL` - Swazi Lilangeni
// * `SEK` - Swedish Krona
// * `CHF` - Swiss Franc
// * `SYP` - Syrian Pound
// * `STN` - São Tomé & Príncipe Dobra
// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
// * `TVD` - TVD
// * `TJR` - Tajikistani Ruble
// * `TJS` - Tajikistani Somoni
// * `TZS` - Tanzanian Shilling
// * `XTS` - Testing Currency Code
// * `THB` - Thai Baht
// * `XXX` - The codes assigned for transactions where no currency is involved
// * `TPE` - Timorese Escudo
// * `TOP` - Tongan Paʻanga
// * `TTD` - Trinidad & Tobago Dollar
// * `TND` - Tunisian Dinar
// * `TRY` - Turkish Lira
// * `TRL` - Turkish Lira (1922–2005)
// * `TMT` - Turkmenistani Manat
// * `TMM` - Turkmenistani Manat (1993–2009)
// * `USD` - US Dollar
// * `USN` - US Dollar (Next day)
// * `USS` - US Dollar (Same day)
// * `UGX` - Ugandan Shilling
// * `UGS` - Ugandan Shilling (1966–1987)
// * `UAH` - Ukrainian Hryvnia
// * `UAK` - Ukrainian Karbovanets
// * `AED` - United Arab Emirates Dirham
// * `UYW` - Uruguayan Nominal Wage Index Unit
// * `UYU` - Uruguayan Peso
// * `UYP` - Uruguayan Peso (1975–1993)
// * `UYI` - Uruguayan Peso (Indexed Units)
// * `UZS` - Uzbekistani Som
// * `VUV` - Vanuatu Vatu
// * `VES` - Venezuelan Bolívar
// * `VEB` - Venezuelan Bolívar (1871–2008)
// * `VEF` - Venezuelan Bolívar (2008–2018)
// * `VND` - Vietnamese Dong
// * `VNN` - Vietnamese Dong (1978–1985)
// * `CHE` - WIR Euro
// * `CHW` - WIR Franc
// * `XOF` - West African CFA Franc
// * `YDD` - Yemeni Dinar
// * `YER` - Yemeni Rial
// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
// * `YUM` - Yugoslavian New Dinar (1994–2002)
// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
// * `ZWN` - ZWN
// * `ZRN` - Zairean New Zaire (1993–1998)
// * `ZRZ` - Zairean Zaire (1971–1993)
// * `ZMW` - Zambian Kwacha
// * `ZMK` - Zambian Kwacha (1968–2012)
// * `ZWD` - Zimbabwean Dollar (1980–2008)
// * `ZWR` - Zimbabwean Dollar (2008)
// * `ZWL` - Zimbabwean Dollar (2009)
type TransactionLineItemCurrency struct {
	typeName     string
	CurrencyEnum CurrencyEnum
	String       string
}

func NewTransactionLineItemCurrencyFromCurrencyEnum(value CurrencyEnum) *TransactionLineItemCurrency {
	return &TransactionLineItemCurrency{typeName: "currencyEnum", CurrencyEnum: value}
}

func NewTransactionLineItemCurrencyFromString(value string) *TransactionLineItemCurrency {
	return &TransactionLineItemCurrency{typeName: "string", String: value}
}

func (t *TransactionLineItemCurrency) UnmarshalJSON(data []byte) error {
	var valueCurrencyEnum CurrencyEnum
	if err := json.Unmarshal(data, &valueCurrencyEnum); err == nil {
		t.typeName = "currencyEnum"
		t.CurrencyEnum = valueCurrencyEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TransactionLineItemCurrency) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "currencyEnum":
		return json.Marshal(t.CurrencyEnum)
	case "string":
		return json.Marshal(t.String)
	}
}

type TransactionLineItemCurrencyVisitor interface {
	VisitCurrencyEnum(CurrencyEnum) error
	VisitString(string) error
}

func (t *TransactionLineItemCurrency) Accept(visitor TransactionLineItemCurrencyVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "currencyEnum":
		return visitor.VisitCurrencyEnum(t.CurrencyEnum)
	case "string":
		return visitor.VisitString(t.String)
	}
}

type TransactionLineItemItem struct {
	typeName string
	String   string
	Item     *Item
}

func NewTransactionLineItemItemFromString(value string) *TransactionLineItemItem {
	return &TransactionLineItemItem{typeName: "string", String: value}
}

func NewTransactionLineItemItemFromItem(value *Item) *TransactionLineItemItem {
	return &TransactionLineItemItem{typeName: "item", Item: value}
}

func (t *TransactionLineItemItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	valueItem := new(Item)
	if err := json.Unmarshal(data, &valueItem); err == nil {
		t.typeName = "item"
		t.Item = valueItem
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TransactionLineItemItem) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return json.Marshal(t.String)
	case "item":
		return json.Marshal(t.Item)
	}
}

type TransactionLineItemItemVisitor interface {
	VisitString(string) error
	VisitItem(*Item) error
}

func (t *TransactionLineItemItem) Accept(visitor TransactionLineItemItemVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return visitor.VisitString(t.String)
	case "item":
		return visitor.VisitItem(t.Item)
	}
}

type TransactionTrackingCategoriesItem struct {
	typeName         string
	String           string
	TrackingCategory *TrackingCategory
}

func NewTransactionTrackingCategoriesItemFromString(value string) *TransactionTrackingCategoriesItem {
	return &TransactionTrackingCategoriesItem{typeName: "string", String: value}
}

func NewTransactionTrackingCategoriesItemFromTrackingCategory(value *TrackingCategory) *TransactionTrackingCategoriesItem {
	return &TransactionTrackingCategoriesItem{typeName: "trackingCategory", TrackingCategory: value}
}

func (t *TransactionTrackingCategoriesItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	valueTrackingCategory := new(TrackingCategory)
	if err := json.Unmarshal(data, &valueTrackingCategory); err == nil {
		t.typeName = "trackingCategory"
		t.TrackingCategory = valueTrackingCategory
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TransactionTrackingCategoriesItem) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return json.Marshal(t.String)
	case "trackingCategory":
		return json.Marshal(t.TrackingCategory)
	}
}

type TransactionTrackingCategoriesItemVisitor interface {
	VisitString(string) error
	VisitTrackingCategory(*TrackingCategory) error
}

func (t *TransactionTrackingCategoriesItem) Accept(visitor TransactionTrackingCategoriesItemVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return visitor.VisitString(t.String)
	case "trackingCategory":
		return visitor.VisitTrackingCategory(t.TrackingCategory)
	}
}

type TransactionsListRequestExpand uint

const (
	TransactionsListRequestExpandAccount TransactionsListRequestExpand = iota + 1
	TransactionsListRequestExpandAccountAccountingPeriod
	TransactionsListRequestExpandAccountingPeriod
	TransactionsListRequestExpandContact
	TransactionsListRequestExpandContactAccount
	TransactionsListRequestExpandContactAccountAccountingPeriod
	TransactionsListRequestExpandContactAccountingPeriod
	TransactionsListRequestExpandLineItems
	TransactionsListRequestExpandLineItemsAccount
	TransactionsListRequestExpandLineItemsAccountAccountingPeriod
	TransactionsListRequestExpandLineItemsAccountingPeriod
	TransactionsListRequestExpandLineItemsContact
	TransactionsListRequestExpandLineItemsContactAccount
	TransactionsListRequestExpandLineItemsContactAccountAccountingPeriod
	TransactionsListRequestExpandLineItemsContactAccountingPeriod
	TransactionsListRequestExpandLineItemsTrackingCategories
	TransactionsListRequestExpandLineItemsTrackingCategoriesAccount
	TransactionsListRequestExpandLineItemsTrackingCategoriesAccountAccountingPeriod
	TransactionsListRequestExpandLineItemsTrackingCategoriesAccountingPeriod
	TransactionsListRequestExpandLineItemsTrackingCategoriesContact
	TransactionsListRequestExpandLineItemsTrackingCategoriesContactAccount
	TransactionsListRequestExpandLineItemsTrackingCategoriesContactAccountAccountingPeriod
	TransactionsListRequestExpandLineItemsTrackingCategoriesContactAccountingPeriod
	TransactionsListRequestExpandTrackingCategories
	TransactionsListRequestExpandTrackingCategoriesAccount
	TransactionsListRequestExpandTrackingCategoriesAccountAccountingPeriod
	TransactionsListRequestExpandTrackingCategoriesAccountingPeriod
	TransactionsListRequestExpandTrackingCategoriesContact
	TransactionsListRequestExpandTrackingCategoriesContactAccount
	TransactionsListRequestExpandTrackingCategoriesContactAccountAccountingPeriod
	TransactionsListRequestExpandTrackingCategoriesContactAccountingPeriod
)

func (t TransactionsListRequestExpand) String() string {
	switch t {
	default:
		return strconv.Itoa(int(t))
	case TransactionsListRequestExpandAccount:
		return "account"
	case TransactionsListRequestExpandAccountAccountingPeriod:
		return "account,accounting_period"
	case TransactionsListRequestExpandAccountingPeriod:
		return "accounting_period"
	case TransactionsListRequestExpandContact:
		return "contact"
	case TransactionsListRequestExpandContactAccount:
		return "contact,account"
	case TransactionsListRequestExpandContactAccountAccountingPeriod:
		return "contact,account,accounting_period"
	case TransactionsListRequestExpandContactAccountingPeriod:
		return "contact,accounting_period"
	case TransactionsListRequestExpandLineItems:
		return "line_items"
	case TransactionsListRequestExpandLineItemsAccount:
		return "line_items,account"
	case TransactionsListRequestExpandLineItemsAccountAccountingPeriod:
		return "line_items,account,accounting_period"
	case TransactionsListRequestExpandLineItemsAccountingPeriod:
		return "line_items,accounting_period"
	case TransactionsListRequestExpandLineItemsContact:
		return "line_items,contact"
	case TransactionsListRequestExpandLineItemsContactAccount:
		return "line_items,contact,account"
	case TransactionsListRequestExpandLineItemsContactAccountAccountingPeriod:
		return "line_items,contact,account,accounting_period"
	case TransactionsListRequestExpandLineItemsContactAccountingPeriod:
		return "line_items,contact,accounting_period"
	case TransactionsListRequestExpandLineItemsTrackingCategories:
		return "line_items,tracking_categories"
	case TransactionsListRequestExpandLineItemsTrackingCategoriesAccount:
		return "line_items,tracking_categories,account"
	case TransactionsListRequestExpandLineItemsTrackingCategoriesAccountAccountingPeriod:
		return "line_items,tracking_categories,account,accounting_period"
	case TransactionsListRequestExpandLineItemsTrackingCategoriesAccountingPeriod:
		return "line_items,tracking_categories,accounting_period"
	case TransactionsListRequestExpandLineItemsTrackingCategoriesContact:
		return "line_items,tracking_categories,contact"
	case TransactionsListRequestExpandLineItemsTrackingCategoriesContactAccount:
		return "line_items,tracking_categories,contact,account"
	case TransactionsListRequestExpandLineItemsTrackingCategoriesContactAccountAccountingPeriod:
		return "line_items,tracking_categories,contact,account,accounting_period"
	case TransactionsListRequestExpandLineItemsTrackingCategoriesContactAccountingPeriod:
		return "line_items,tracking_categories,contact,accounting_period"
	case TransactionsListRequestExpandTrackingCategories:
		return "tracking_categories"
	case TransactionsListRequestExpandTrackingCategoriesAccount:
		return "tracking_categories,account"
	case TransactionsListRequestExpandTrackingCategoriesAccountAccountingPeriod:
		return "tracking_categories,account,accounting_period"
	case TransactionsListRequestExpandTrackingCategoriesAccountingPeriod:
		return "tracking_categories,accounting_period"
	case TransactionsListRequestExpandTrackingCategoriesContact:
		return "tracking_categories,contact"
	case TransactionsListRequestExpandTrackingCategoriesContactAccount:
		return "tracking_categories,contact,account"
	case TransactionsListRequestExpandTrackingCategoriesContactAccountAccountingPeriod:
		return "tracking_categories,contact,account,accounting_period"
	case TransactionsListRequestExpandTrackingCategoriesContactAccountingPeriod:
		return "tracking_categories,contact,accounting_period"
	}
}

func (t TransactionsListRequestExpand) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", t.String())), nil
}

func (t *TransactionsListRequestExpand) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "account":
		value := TransactionsListRequestExpandAccount
		*t = value
	case "account,accounting_period":
		value := TransactionsListRequestExpandAccountAccountingPeriod
		*t = value
	case "accounting_period":
		value := TransactionsListRequestExpandAccountingPeriod
		*t = value
	case "contact":
		value := TransactionsListRequestExpandContact
		*t = value
	case "contact,account":
		value := TransactionsListRequestExpandContactAccount
		*t = value
	case "contact,account,accounting_period":
		value := TransactionsListRequestExpandContactAccountAccountingPeriod
		*t = value
	case "contact,accounting_period":
		value := TransactionsListRequestExpandContactAccountingPeriod
		*t = value
	case "line_items":
		value := TransactionsListRequestExpandLineItems
		*t = value
	case "line_items,account":
		value := TransactionsListRequestExpandLineItemsAccount
		*t = value
	case "line_items,account,accounting_period":
		value := TransactionsListRequestExpandLineItemsAccountAccountingPeriod
		*t = value
	case "line_items,accounting_period":
		value := TransactionsListRequestExpandLineItemsAccountingPeriod
		*t = value
	case "line_items,contact":
		value := TransactionsListRequestExpandLineItemsContact
		*t = value
	case "line_items,contact,account":
		value := TransactionsListRequestExpandLineItemsContactAccount
		*t = value
	case "line_items,contact,account,accounting_period":
		value := TransactionsListRequestExpandLineItemsContactAccountAccountingPeriod
		*t = value
	case "line_items,contact,accounting_period":
		value := TransactionsListRequestExpandLineItemsContactAccountingPeriod
		*t = value
	case "line_items,tracking_categories":
		value := TransactionsListRequestExpandLineItemsTrackingCategories
		*t = value
	case "line_items,tracking_categories,account":
		value := TransactionsListRequestExpandLineItemsTrackingCategoriesAccount
		*t = value
	case "line_items,tracking_categories,account,accounting_period":
		value := TransactionsListRequestExpandLineItemsTrackingCategoriesAccountAccountingPeriod
		*t = value
	case "line_items,tracking_categories,accounting_period":
		value := TransactionsListRequestExpandLineItemsTrackingCategoriesAccountingPeriod
		*t = value
	case "line_items,tracking_categories,contact":
		value := TransactionsListRequestExpandLineItemsTrackingCategoriesContact
		*t = value
	case "line_items,tracking_categories,contact,account":
		value := TransactionsListRequestExpandLineItemsTrackingCategoriesContactAccount
		*t = value
	case "line_items,tracking_categories,contact,account,accounting_period":
		value := TransactionsListRequestExpandLineItemsTrackingCategoriesContactAccountAccountingPeriod
		*t = value
	case "line_items,tracking_categories,contact,accounting_period":
		value := TransactionsListRequestExpandLineItemsTrackingCategoriesContactAccountingPeriod
		*t = value
	case "tracking_categories":
		value := TransactionsListRequestExpandTrackingCategories
		*t = value
	case "tracking_categories,account":
		value := TransactionsListRequestExpandTrackingCategoriesAccount
		*t = value
	case "tracking_categories,account,accounting_period":
		value := TransactionsListRequestExpandTrackingCategoriesAccountAccountingPeriod
		*t = value
	case "tracking_categories,accounting_period":
		value := TransactionsListRequestExpandTrackingCategoriesAccountingPeriod
		*t = value
	case "tracking_categories,contact":
		value := TransactionsListRequestExpandTrackingCategoriesContact
		*t = value
	case "tracking_categories,contact,account":
		value := TransactionsListRequestExpandTrackingCategoriesContactAccount
		*t = value
	case "tracking_categories,contact,account,accounting_period":
		value := TransactionsListRequestExpandTrackingCategoriesContactAccountAccountingPeriod
		*t = value
	case "tracking_categories,contact,accounting_period":
		value := TransactionsListRequestExpandTrackingCategoriesContactAccountingPeriod
		*t = value
	}
	return nil
}

type TransactionsRetrieveRequestExpand uint

const (
	TransactionsRetrieveRequestExpandAccount TransactionsRetrieveRequestExpand = iota + 1
	TransactionsRetrieveRequestExpandAccountAccountingPeriod
	TransactionsRetrieveRequestExpandAccountingPeriod
	TransactionsRetrieveRequestExpandContact
	TransactionsRetrieveRequestExpandContactAccount
	TransactionsRetrieveRequestExpandContactAccountAccountingPeriod
	TransactionsRetrieveRequestExpandContactAccountingPeriod
	TransactionsRetrieveRequestExpandLineItems
	TransactionsRetrieveRequestExpandLineItemsAccount
	TransactionsRetrieveRequestExpandLineItemsAccountAccountingPeriod
	TransactionsRetrieveRequestExpandLineItemsAccountingPeriod
	TransactionsRetrieveRequestExpandLineItemsContact
	TransactionsRetrieveRequestExpandLineItemsContactAccount
	TransactionsRetrieveRequestExpandLineItemsContactAccountAccountingPeriod
	TransactionsRetrieveRequestExpandLineItemsContactAccountingPeriod
	TransactionsRetrieveRequestExpandLineItemsTrackingCategories
	TransactionsRetrieveRequestExpandLineItemsTrackingCategoriesAccount
	TransactionsRetrieveRequestExpandLineItemsTrackingCategoriesAccountAccountingPeriod
	TransactionsRetrieveRequestExpandLineItemsTrackingCategoriesAccountingPeriod
	TransactionsRetrieveRequestExpandLineItemsTrackingCategoriesContact
	TransactionsRetrieveRequestExpandLineItemsTrackingCategoriesContactAccount
	TransactionsRetrieveRequestExpandLineItemsTrackingCategoriesContactAccountAccountingPeriod
	TransactionsRetrieveRequestExpandLineItemsTrackingCategoriesContactAccountingPeriod
	TransactionsRetrieveRequestExpandTrackingCategories
	TransactionsRetrieveRequestExpandTrackingCategoriesAccount
	TransactionsRetrieveRequestExpandTrackingCategoriesAccountAccountingPeriod
	TransactionsRetrieveRequestExpandTrackingCategoriesAccountingPeriod
	TransactionsRetrieveRequestExpandTrackingCategoriesContact
	TransactionsRetrieveRequestExpandTrackingCategoriesContactAccount
	TransactionsRetrieveRequestExpandTrackingCategoriesContactAccountAccountingPeriod
	TransactionsRetrieveRequestExpandTrackingCategoriesContactAccountingPeriod
)

func (t TransactionsRetrieveRequestExpand) String() string {
	switch t {
	default:
		return strconv.Itoa(int(t))
	case TransactionsRetrieveRequestExpandAccount:
		return "account"
	case TransactionsRetrieveRequestExpandAccountAccountingPeriod:
		return "account,accounting_period"
	case TransactionsRetrieveRequestExpandAccountingPeriod:
		return "accounting_period"
	case TransactionsRetrieveRequestExpandContact:
		return "contact"
	case TransactionsRetrieveRequestExpandContactAccount:
		return "contact,account"
	case TransactionsRetrieveRequestExpandContactAccountAccountingPeriod:
		return "contact,account,accounting_period"
	case TransactionsRetrieveRequestExpandContactAccountingPeriod:
		return "contact,accounting_period"
	case TransactionsRetrieveRequestExpandLineItems:
		return "line_items"
	case TransactionsRetrieveRequestExpandLineItemsAccount:
		return "line_items,account"
	case TransactionsRetrieveRequestExpandLineItemsAccountAccountingPeriod:
		return "line_items,account,accounting_period"
	case TransactionsRetrieveRequestExpandLineItemsAccountingPeriod:
		return "line_items,accounting_period"
	case TransactionsRetrieveRequestExpandLineItemsContact:
		return "line_items,contact"
	case TransactionsRetrieveRequestExpandLineItemsContactAccount:
		return "line_items,contact,account"
	case TransactionsRetrieveRequestExpandLineItemsContactAccountAccountingPeriod:
		return "line_items,contact,account,accounting_period"
	case TransactionsRetrieveRequestExpandLineItemsContactAccountingPeriod:
		return "line_items,contact,accounting_period"
	case TransactionsRetrieveRequestExpandLineItemsTrackingCategories:
		return "line_items,tracking_categories"
	case TransactionsRetrieveRequestExpandLineItemsTrackingCategoriesAccount:
		return "line_items,tracking_categories,account"
	case TransactionsRetrieveRequestExpandLineItemsTrackingCategoriesAccountAccountingPeriod:
		return "line_items,tracking_categories,account,accounting_period"
	case TransactionsRetrieveRequestExpandLineItemsTrackingCategoriesAccountingPeriod:
		return "line_items,tracking_categories,accounting_period"
	case TransactionsRetrieveRequestExpandLineItemsTrackingCategoriesContact:
		return "line_items,tracking_categories,contact"
	case TransactionsRetrieveRequestExpandLineItemsTrackingCategoriesContactAccount:
		return "line_items,tracking_categories,contact,account"
	case TransactionsRetrieveRequestExpandLineItemsTrackingCategoriesContactAccountAccountingPeriod:
		return "line_items,tracking_categories,contact,account,accounting_period"
	case TransactionsRetrieveRequestExpandLineItemsTrackingCategoriesContactAccountingPeriod:
		return "line_items,tracking_categories,contact,accounting_period"
	case TransactionsRetrieveRequestExpandTrackingCategories:
		return "tracking_categories"
	case TransactionsRetrieveRequestExpandTrackingCategoriesAccount:
		return "tracking_categories,account"
	case TransactionsRetrieveRequestExpandTrackingCategoriesAccountAccountingPeriod:
		return "tracking_categories,account,accounting_period"
	case TransactionsRetrieveRequestExpandTrackingCategoriesAccountingPeriod:
		return "tracking_categories,accounting_period"
	case TransactionsRetrieveRequestExpandTrackingCategoriesContact:
		return "tracking_categories,contact"
	case TransactionsRetrieveRequestExpandTrackingCategoriesContactAccount:
		return "tracking_categories,contact,account"
	case TransactionsRetrieveRequestExpandTrackingCategoriesContactAccountAccountingPeriod:
		return "tracking_categories,contact,account,accounting_period"
	case TransactionsRetrieveRequestExpandTrackingCategoriesContactAccountingPeriod:
		return "tracking_categories,contact,accounting_period"
	}
}

func (t TransactionsRetrieveRequestExpand) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", t.String())), nil
}

func (t *TransactionsRetrieveRequestExpand) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "account":
		value := TransactionsRetrieveRequestExpandAccount
		*t = value
	case "account,accounting_period":
		value := TransactionsRetrieveRequestExpandAccountAccountingPeriod
		*t = value
	case "accounting_period":
		value := TransactionsRetrieveRequestExpandAccountingPeriod
		*t = value
	case "contact":
		value := TransactionsRetrieveRequestExpandContact
		*t = value
	case "contact,account":
		value := TransactionsRetrieveRequestExpandContactAccount
		*t = value
	case "contact,account,accounting_period":
		value := TransactionsRetrieveRequestExpandContactAccountAccountingPeriod
		*t = value
	case "contact,accounting_period":
		value := TransactionsRetrieveRequestExpandContactAccountingPeriod
		*t = value
	case "line_items":
		value := TransactionsRetrieveRequestExpandLineItems
		*t = value
	case "line_items,account":
		value := TransactionsRetrieveRequestExpandLineItemsAccount
		*t = value
	case "line_items,account,accounting_period":
		value := TransactionsRetrieveRequestExpandLineItemsAccountAccountingPeriod
		*t = value
	case "line_items,accounting_period":
		value := TransactionsRetrieveRequestExpandLineItemsAccountingPeriod
		*t = value
	case "line_items,contact":
		value := TransactionsRetrieveRequestExpandLineItemsContact
		*t = value
	case "line_items,contact,account":
		value := TransactionsRetrieveRequestExpandLineItemsContactAccount
		*t = value
	case "line_items,contact,account,accounting_period":
		value := TransactionsRetrieveRequestExpandLineItemsContactAccountAccountingPeriod
		*t = value
	case "line_items,contact,accounting_period":
		value := TransactionsRetrieveRequestExpandLineItemsContactAccountingPeriod
		*t = value
	case "line_items,tracking_categories":
		value := TransactionsRetrieveRequestExpandLineItemsTrackingCategories
		*t = value
	case "line_items,tracking_categories,account":
		value := TransactionsRetrieveRequestExpandLineItemsTrackingCategoriesAccount
		*t = value
	case "line_items,tracking_categories,account,accounting_period":
		value := TransactionsRetrieveRequestExpandLineItemsTrackingCategoriesAccountAccountingPeriod
		*t = value
	case "line_items,tracking_categories,accounting_period":
		value := TransactionsRetrieveRequestExpandLineItemsTrackingCategoriesAccountingPeriod
		*t = value
	case "line_items,tracking_categories,contact":
		value := TransactionsRetrieveRequestExpandLineItemsTrackingCategoriesContact
		*t = value
	case "line_items,tracking_categories,contact,account":
		value := TransactionsRetrieveRequestExpandLineItemsTrackingCategoriesContactAccount
		*t = value
	case "line_items,tracking_categories,contact,account,accounting_period":
		value := TransactionsRetrieveRequestExpandLineItemsTrackingCategoriesContactAccountAccountingPeriod
		*t = value
	case "line_items,tracking_categories,contact,accounting_period":
		value := TransactionsRetrieveRequestExpandLineItemsTrackingCategoriesContactAccountingPeriod
		*t = value
	case "tracking_categories":
		value := TransactionsRetrieveRequestExpandTrackingCategories
		*t = value
	case "tracking_categories,account":
		value := TransactionsRetrieveRequestExpandTrackingCategoriesAccount
		*t = value
	case "tracking_categories,account,accounting_period":
		value := TransactionsRetrieveRequestExpandTrackingCategoriesAccountAccountingPeriod
		*t = value
	case "tracking_categories,accounting_period":
		value := TransactionsRetrieveRequestExpandTrackingCategoriesAccountingPeriod
		*t = value
	case "tracking_categories,contact":
		value := TransactionsRetrieveRequestExpandTrackingCategoriesContact
		*t = value
	case "tracking_categories,contact,account":
		value := TransactionsRetrieveRequestExpandTrackingCategoriesContactAccount
		*t = value
	case "tracking_categories,contact,account,accounting_period":
		value := TransactionsRetrieveRequestExpandTrackingCategoriesContactAccountAccountingPeriod
		*t = value
	case "tracking_categories,contact,accounting_period":
		value := TransactionsRetrieveRequestExpandTrackingCategoriesContactAccountingPeriod
		*t = value
	}
	return nil
}

type ValidationProblemSource struct {
	Pointer string `json:"pointer"`
}

// # The VendorCredit Object
// ### Description
// A `VendorCredit` is transaction issued by a vendor to the accounting company, indicating a reduction or cancellation of the amount owed to the vendor. It is most generally used as an adjustment note used to rectify errors, returns, or overpayments related to a purchasing transaction. A `VendorCredit` can be applied to *Accounts Payable* Invoices to decrease the overall amount of the Invoice.
//
// ### Usage Example
// Fetch from the `GET VendorCredit` endpoint and view a company's vendor credits.
type VendorCredit struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The vendor credit's number.
	Number *string `json:"number,omitempty"`
	// The vendor credit's transaction date.
	TransactionDate *time.Time `json:"transaction_date,omitempty"`
	// The vendor that owes the gift or refund.
	Vendor *VendorCreditVendor `json:"vendor,omitempty"`
	// The vendor credit's total amount.
	TotalAmount *float64 `json:"total_amount,omitempty"`
	// The vendor credit's currency.
	//
	// * `XUA` - ADB Unit of Account
	// * `AFN` - Afghan Afghani
	// * `AFA` - Afghan Afghani (1927–2002)
	// * `ALL` - Albanian Lek
	// * `ALK` - Albanian Lek (1946–1965)
	// * `DZD` - Algerian Dinar
	// * `ADP` - Andorran Peseta
	// * `AOA` - Angolan Kwanza
	// * `AOK` - Angolan Kwanza (1977–1991)
	// * `AON` - Angolan New Kwanza (1990–2000)
	// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
	// * `ARA` - Argentine Austral
	// * `ARS` - Argentine Peso
	// * `ARM` - Argentine Peso (1881–1970)
	// * `ARP` - Argentine Peso (1983–1985)
	// * `ARL` - Argentine Peso Ley (1970–1983)
	// * `AMD` - Armenian Dram
	// * `AWG` - Aruban Florin
	// * `AUD` - Australian Dollar
	// * `ATS` - Austrian Schilling
	// * `AZN` - Azerbaijani Manat
	// * `AZM` - Azerbaijani Manat (1993–2006)
	// * `BSD` - Bahamian Dollar
	// * `BHD` - Bahraini Dinar
	// * `BDT` - Bangladeshi Taka
	// * `BBD` - Barbadian Dollar
	// * `BYN` - Belarusian Ruble
	// * `BYB` - Belarusian Ruble (1994–1999)
	// * `BYR` - Belarusian Ruble (2000–2016)
	// * `BEF` - Belgian Franc
	// * `BEC` - Belgian Franc (convertible)
	// * `BEL` - Belgian Franc (financial)
	// * `BZD` - Belize Dollar
	// * `BMD` - Bermudan Dollar
	// * `BTN` - Bhutanese Ngultrum
	// * `BOB` - Bolivian Boliviano
	// * `BOL` - Bolivian Boliviano (1863–1963)
	// * `BOV` - Bolivian Mvdol
	// * `BOP` - Bolivian Peso
	// * `BAM` - Bosnia-Herzegovina Convertible Mark
	// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
	// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
	// * `BWP` - Botswanan Pula
	// * `BRC` - Brazilian Cruzado (1986–1989)
	// * `BRZ` - Brazilian Cruzeiro (1942–1967)
	// * `BRE` - Brazilian Cruzeiro (1990–1993)
	// * `BRR` - Brazilian Cruzeiro (1993–1994)
	// * `BRN` - Brazilian New Cruzado (1989–1990)
	// * `BRB` - Brazilian New Cruzeiro (1967–1986)
	// * `BRL` - Brazilian Real
	// * `GBP` - British Pound
	// * `BND` - Brunei Dollar
	// * `BGL` - Bulgarian Hard Lev
	// * `BGN` - Bulgarian Lev
	// * `BGO` - Bulgarian Lev (1879–1952)
	// * `BGM` - Bulgarian Socialist Lev
	// * `BUK` - Burmese Kyat
	// * `BIF` - Burundian Franc
	// * `XPF` - CFP Franc
	// * `KHR` - Cambodian Riel
	// * `CAD` - Canadian Dollar
	// * `CVE` - Cape Verdean Escudo
	// * `KYD` - Cayman Islands Dollar
	// * `XAF` - Central African CFA Franc
	// * `CLE` - Chilean Escudo
	// * `CLP` - Chilean Peso
	// * `CLF` - Chilean Unit of Account (UF)
	// * `CNX` - Chinese People’s Bank Dollar
	// * `CNY` - Chinese Yuan
	// * `CNH` - Chinese Yuan (offshore)
	// * `COP` - Colombian Peso
	// * `COU` - Colombian Real Value Unit
	// * `KMF` - Comorian Franc
	// * `CDF` - Congolese Franc
	// * `CRC` - Costa Rican Colón
	// * `HRD` - Croatian Dinar
	// * `HRK` - Croatian Kuna
	// * `CUC` - Cuban Convertible Peso
	// * `CUP` - Cuban Peso
	// * `CYP` - Cypriot Pound
	// * `CZK` - Czech Koruna
	// * `CSK` - Czechoslovak Hard Koruna
	// * `DKK` - Danish Krone
	// * `DJF` - Djiboutian Franc
	// * `DOP` - Dominican Peso
	// * `NLG` - Dutch Guilder
	// * `XCD` - East Caribbean Dollar
	// * `DDM` - East German Mark
	// * `ECS` - Ecuadorian Sucre
	// * `ECV` - Ecuadorian Unit of Constant Value
	// * `EGP` - Egyptian Pound
	// * `GQE` - Equatorial Guinean Ekwele
	// * `ERN` - Eritrean Nakfa
	// * `EEK` - Estonian Kroon
	// * `ETB` - Ethiopian Birr
	// * `EUR` - Euro
	// * `XBA` - European Composite Unit
	// * `XEU` - European Currency Unit
	// * `XBB` - European Monetary Unit
	// * `XBC` - European Unit of Account (XBC)
	// * `XBD` - European Unit of Account (XBD)
	// * `FKP` - Falkland Islands Pound
	// * `FJD` - Fijian Dollar
	// * `FIM` - Finnish Markka
	// * `FRF` - French Franc
	// * `XFO` - French Gold Franc
	// * `XFU` - French UIC-Franc
	// * `GMD` - Gambian Dalasi
	// * `GEK` - Georgian Kupon Larit
	// * `GEL` - Georgian Lari
	// * `DEM` - German Mark
	// * `GHS` - Ghanaian Cedi
	// * `GHC` - Ghanaian Cedi (1979–2007)
	// * `GIP` - Gibraltar Pound
	// * `XAU` - Gold
	// * `GRD` - Greek Drachma
	// * `GTQ` - Guatemalan Quetzal
	// * `GWP` - Guinea-Bissau Peso
	// * `GNF` - Guinean Franc
	// * `GNS` - Guinean Syli
	// * `GYD` - Guyanaese Dollar
	// * `HTG` - Haitian Gourde
	// * `HNL` - Honduran Lempira
	// * `HKD` - Hong Kong Dollar
	// * `HUF` - Hungarian Forint
	// * `IMP` - IMP
	// * `ISK` - Icelandic Króna
	// * `ISJ` - Icelandic Króna (1918–1981)
	// * `INR` - Indian Rupee
	// * `IDR` - Indonesian Rupiah
	// * `IRR` - Iranian Rial
	// * `IQD` - Iraqi Dinar
	// * `IEP` - Irish Pound
	// * `ILS` - Israeli New Shekel
	// * `ILP` - Israeli Pound
	// * `ILR` - Israeli Shekel (1980–1985)
	// * `ITL` - Italian Lira
	// * `JMD` - Jamaican Dollar
	// * `JPY` - Japanese Yen
	// * `JOD` - Jordanian Dinar
	// * `KZT` - Kazakhstani Tenge
	// * `KES` - Kenyan Shilling
	// * `KWD` - Kuwaiti Dinar
	// * `KGS` - Kyrgystani Som
	// * `LAK` - Laotian Kip
	// * `LVL` - Latvian Lats
	// * `LVR` - Latvian Ruble
	// * `LBP` - Lebanese Pound
	// * `LSL` - Lesotho Loti
	// * `LRD` - Liberian Dollar
	// * `LYD` - Libyan Dinar
	// * `LTL` - Lithuanian Litas
	// * `LTT` - Lithuanian Talonas
	// * `LUL` - Luxembourg Financial Franc
	// * `LUC` - Luxembourgian Convertible Franc
	// * `LUF` - Luxembourgian Franc
	// * `MOP` - Macanese Pataca
	// * `MKD` - Macedonian Denar
	// * `MKN` - Macedonian Denar (1992–1993)
	// * `MGA` - Malagasy Ariary
	// * `MGF` - Malagasy Franc
	// * `MWK` - Malawian Kwacha
	// * `MYR` - Malaysian Ringgit
	// * `MVR` - Maldivian Rufiyaa
	// * `MVP` - Maldivian Rupee (1947–1981)
	// * `MLF` - Malian Franc
	// * `MTL` - Maltese Lira
	// * `MTP` - Maltese Pound
	// * `MRU` - Mauritanian Ouguiya
	// * `MRO` - Mauritanian Ouguiya (1973–2017)
	// * `MUR` - Mauritian Rupee
	// * `MXV` - Mexican Investment Unit
	// * `MXN` - Mexican Peso
	// * `MXP` - Mexican Silver Peso (1861–1992)
	// * `MDC` - Moldovan Cupon
	// * `MDL` - Moldovan Leu
	// * `MCF` - Monegasque Franc
	// * `MNT` - Mongolian Tugrik
	// * `MAD` - Moroccan Dirham
	// * `MAF` - Moroccan Franc
	// * `MZE` - Mozambican Escudo
	// * `MZN` - Mozambican Metical
	// * `MZM` - Mozambican Metical (1980–2006)
	// * `MMK` - Myanmar Kyat
	// * `NAD` - Namibian Dollar
	// * `NPR` - Nepalese Rupee
	// * `ANG` - Netherlands Antillean Guilder
	// * `TWD` - New Taiwan Dollar
	// * `NZD` - New Zealand Dollar
	// * `NIO` - Nicaraguan Córdoba
	// * `NIC` - Nicaraguan Córdoba (1988–1991)
	// * `NGN` - Nigerian Naira
	// * `KPW` - North Korean Won
	// * `NOK` - Norwegian Krone
	// * `OMR` - Omani Rial
	// * `PKR` - Pakistani Rupee
	// * `XPD` - Palladium
	// * `PAB` - Panamanian Balboa
	// * `PGK` - Papua New Guinean Kina
	// * `PYG` - Paraguayan Guarani
	// * `PEI` - Peruvian Inti
	// * `PEN` - Peruvian Sol
	// * `PES` - Peruvian Sol (1863–1965)
	// * `PHP` - Philippine Peso
	// * `XPT` - Platinum
	// * `PLN` - Polish Zloty
	// * `PLZ` - Polish Zloty (1950–1995)
	// * `PTE` - Portuguese Escudo
	// * `GWE` - Portuguese Guinea Escudo
	// * `QAR` - Qatari Rial
	// * `XRE` - RINET Funds
	// * `RHD` - Rhodesian Dollar
	// * `RON` - Romanian Leu
	// * `ROL` - Romanian Leu (1952–2006)
	// * `RUB` - Russian Ruble
	// * `RUR` - Russian Ruble (1991–1998)
	// * `RWF` - Rwandan Franc
	// * `SVC` - Salvadoran Colón
	// * `WST` - Samoan Tala
	// * `SAR` - Saudi Riyal
	// * `RSD` - Serbian Dinar
	// * `CSD` - Serbian Dinar (2002–2006)
	// * `SCR` - Seychellois Rupee
	// * `SLL` - Sierra Leonean Leone
	// * `XAG` - Silver
	// * `SGD` - Singapore Dollar
	// * `SKK` - Slovak Koruna
	// * `SIT` - Slovenian Tolar
	// * `SBD` - Solomon Islands Dollar
	// * `SOS` - Somali Shilling
	// * `ZAR` - South African Rand
	// * `ZAL` - South African Rand (financial)
	// * `KRH` - South Korean Hwan (1953–1962)
	// * `KRW` - South Korean Won
	// * `KRO` - South Korean Won (1945–1953)
	// * `SSP` - South Sudanese Pound
	// * `SUR` - Soviet Rouble
	// * `ESP` - Spanish Peseta
	// * `ESA` - Spanish Peseta (A account)
	// * `ESB` - Spanish Peseta (convertible account)
	// * `XDR` - Special Drawing Rights
	// * `LKR` - Sri Lankan Rupee
	// * `SHP` - St. Helena Pound
	// * `XSU` - Sucre
	// * `SDD` - Sudanese Dinar (1992–2007)
	// * `SDG` - Sudanese Pound
	// * `SDP` - Sudanese Pound (1957–1998)
	// * `SRD` - Surinamese Dollar
	// * `SRG` - Surinamese Guilder
	// * `SZL` - Swazi Lilangeni
	// * `SEK` - Swedish Krona
	// * `CHF` - Swiss Franc
	// * `SYP` - Syrian Pound
	// * `STN` - São Tomé & Príncipe Dobra
	// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
	// * `TVD` - TVD
	// * `TJR` - Tajikistani Ruble
	// * `TJS` - Tajikistani Somoni
	// * `TZS` - Tanzanian Shilling
	// * `XTS` - Testing Currency Code
	// * `THB` - Thai Baht
	// * `XXX` - The codes assigned for transactions where no currency is involved
	// * `TPE` - Timorese Escudo
	// * `TOP` - Tongan Paʻanga
	// * `TTD` - Trinidad & Tobago Dollar
	// * `TND` - Tunisian Dinar
	// * `TRY` - Turkish Lira
	// * `TRL` - Turkish Lira (1922–2005)
	// * `TMT` - Turkmenistani Manat
	// * `TMM` - Turkmenistani Manat (1993–2009)
	// * `USD` - US Dollar
	// * `USN` - US Dollar (Next day)
	// * `USS` - US Dollar (Same day)
	// * `UGX` - Ugandan Shilling
	// * `UGS` - Ugandan Shilling (1966–1987)
	// * `UAH` - Ukrainian Hryvnia
	// * `UAK` - Ukrainian Karbovanets
	// * `AED` - United Arab Emirates Dirham
	// * `UYW` - Uruguayan Nominal Wage Index Unit
	// * `UYU` - Uruguayan Peso
	// * `UYP` - Uruguayan Peso (1975–1993)
	// * `UYI` - Uruguayan Peso (Indexed Units)
	// * `UZS` - Uzbekistani Som
	// * `VUV` - Vanuatu Vatu
	// * `VES` - Venezuelan Bolívar
	// * `VEB` - Venezuelan Bolívar (1871–2008)
	// * `VEF` - Venezuelan Bolívar (2008–2018)
	// * `VND` - Vietnamese Dong
	// * `VNN` - Vietnamese Dong (1978–1985)
	// * `CHE` - WIR Euro
	// * `CHW` - WIR Franc
	// * `XOF` - West African CFA Franc
	// * `YDD` - Yemeni Dinar
	// * `YER` - Yemeni Rial
	// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
	// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
	// * `YUM` - Yugoslavian New Dinar (1994–2002)
	// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
	// * `ZWN` - ZWN
	// * `ZRN` - Zairean New Zaire (1993–1998)
	// * `ZRZ` - Zairean Zaire (1971–1993)
	// * `ZMW` - Zambian Kwacha
	// * `ZMK` - Zambian Kwacha (1968–2012)
	// * `ZWD` - Zimbabwean Dollar (1980–2008)
	// * `ZWR` - Zimbabwean Dollar (2008)
	// * `ZWL` - Zimbabwean Dollar (2009)
	Currency *VendorCreditCurrency `json:"currency,omitempty"`
	// The vendor credit's exchange rate.
	ExchangeRate *string `json:"exchange_rate,omitempty"`
	// The company the vendor credit belongs to.
	Company            *VendorCreditCompany                  `json:"company,omitempty"`
	Lines              []*VendorCreditLine                   `json:"lines,omitempty"`
	TrackingCategories []*VendorCreditTrackingCategoriesItem `json:"tracking_categories,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted *bool `json:"remote_was_deleted,omitempty"`
	// The accounting period that the VendorCredit was generated in.
	AccountingPeriod *VendorCreditAccountingPeriod `json:"accounting_period,omitempty"`
	CreatedAt        *time.Time                    `json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt    *time.Time     `json:"modified_at,omitempty"`
	FieldMappings map[string]any `json:"field_mappings,omitempty"`
	RemoteData    []*RemoteData  `json:"remote_data,omitempty"`
}

// The accounting period that the VendorCredit was generated in.
type VendorCreditAccountingPeriod struct {
	typeName         string
	String           string
	AccountingPeriod *AccountingPeriod
}

func NewVendorCreditAccountingPeriodFromString(value string) *VendorCreditAccountingPeriod {
	return &VendorCreditAccountingPeriod{typeName: "string", String: value}
}

func NewVendorCreditAccountingPeriodFromAccountingPeriod(value *AccountingPeriod) *VendorCreditAccountingPeriod {
	return &VendorCreditAccountingPeriod{typeName: "accountingPeriod", AccountingPeriod: value}
}

func (v *VendorCreditAccountingPeriod) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		v.typeName = "string"
		v.String = valueString
		return nil
	}
	valueAccountingPeriod := new(AccountingPeriod)
	if err := json.Unmarshal(data, &valueAccountingPeriod); err == nil {
		v.typeName = "accountingPeriod"
		v.AccountingPeriod = valueAccountingPeriod
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, v)
}

func (v VendorCreditAccountingPeriod) MarshalJSON() ([]byte, error) {
	switch v.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", v.typeName, v)
	case "string":
		return json.Marshal(v.String)
	case "accountingPeriod":
		return json.Marshal(v.AccountingPeriod)
	}
}

type VendorCreditAccountingPeriodVisitor interface {
	VisitString(string) error
	VisitAccountingPeriod(*AccountingPeriod) error
}

func (v *VendorCreditAccountingPeriod) Accept(visitor VendorCreditAccountingPeriodVisitor) error {
	switch v.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", v.typeName, v)
	case "string":
		return visitor.VisitString(v.String)
	case "accountingPeriod":
		return visitor.VisitAccountingPeriod(v.AccountingPeriod)
	}
}

// The company the vendor credit belongs to.
type VendorCreditCompany struct {
	typeName    string
	String      string
	CompanyInfo *CompanyInfo
}

func NewVendorCreditCompanyFromString(value string) *VendorCreditCompany {
	return &VendorCreditCompany{typeName: "string", String: value}
}

func NewVendorCreditCompanyFromCompanyInfo(value *CompanyInfo) *VendorCreditCompany {
	return &VendorCreditCompany{typeName: "companyInfo", CompanyInfo: value}
}

func (v *VendorCreditCompany) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		v.typeName = "string"
		v.String = valueString
		return nil
	}
	valueCompanyInfo := new(CompanyInfo)
	if err := json.Unmarshal(data, &valueCompanyInfo); err == nil {
		v.typeName = "companyInfo"
		v.CompanyInfo = valueCompanyInfo
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, v)
}

func (v VendorCreditCompany) MarshalJSON() ([]byte, error) {
	switch v.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", v.typeName, v)
	case "string":
		return json.Marshal(v.String)
	case "companyInfo":
		return json.Marshal(v.CompanyInfo)
	}
}

type VendorCreditCompanyVisitor interface {
	VisitString(string) error
	VisitCompanyInfo(*CompanyInfo) error
}

func (v *VendorCreditCompany) Accept(visitor VendorCreditCompanyVisitor) error {
	switch v.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", v.typeName, v)
	case "string":
		return visitor.VisitString(v.String)
	case "companyInfo":
		return visitor.VisitCompanyInfo(v.CompanyInfo)
	}
}

// The vendor credit's currency.
//
// * `XUA` - ADB Unit of Account
// * `AFN` - Afghan Afghani
// * `AFA` - Afghan Afghani (1927–2002)
// * `ALL` - Albanian Lek
// * `ALK` - Albanian Lek (1946–1965)
// * `DZD` - Algerian Dinar
// * `ADP` - Andorran Peseta
// * `AOA` - Angolan Kwanza
// * `AOK` - Angolan Kwanza (1977–1991)
// * `AON` - Angolan New Kwanza (1990–2000)
// * `AOR` - Angolan Readjusted Kwanza (1995–1999)
// * `ARA` - Argentine Austral
// * `ARS` - Argentine Peso
// * `ARM` - Argentine Peso (1881–1970)
// * `ARP` - Argentine Peso (1983–1985)
// * `ARL` - Argentine Peso Ley (1970–1983)
// * `AMD` - Armenian Dram
// * `AWG` - Aruban Florin
// * `AUD` - Australian Dollar
// * `ATS` - Austrian Schilling
// * `AZN` - Azerbaijani Manat
// * `AZM` - Azerbaijani Manat (1993–2006)
// * `BSD` - Bahamian Dollar
// * `BHD` - Bahraini Dinar
// * `BDT` - Bangladeshi Taka
// * `BBD` - Barbadian Dollar
// * `BYN` - Belarusian Ruble
// * `BYB` - Belarusian Ruble (1994–1999)
// * `BYR` - Belarusian Ruble (2000–2016)
// * `BEF` - Belgian Franc
// * `BEC` - Belgian Franc (convertible)
// * `BEL` - Belgian Franc (financial)
// * `BZD` - Belize Dollar
// * `BMD` - Bermudan Dollar
// * `BTN` - Bhutanese Ngultrum
// * `BOB` - Bolivian Boliviano
// * `BOL` - Bolivian Boliviano (1863–1963)
// * `BOV` - Bolivian Mvdol
// * `BOP` - Bolivian Peso
// * `BAM` - Bosnia-Herzegovina Convertible Mark
// * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
// * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
// * `BWP` - Botswanan Pula
// * `BRC` - Brazilian Cruzado (1986–1989)
// * `BRZ` - Brazilian Cruzeiro (1942–1967)
// * `BRE` - Brazilian Cruzeiro (1990–1993)
// * `BRR` - Brazilian Cruzeiro (1993–1994)
// * `BRN` - Brazilian New Cruzado (1989–1990)
// * `BRB` - Brazilian New Cruzeiro (1967–1986)
// * `BRL` - Brazilian Real
// * `GBP` - British Pound
// * `BND` - Brunei Dollar
// * `BGL` - Bulgarian Hard Lev
// * `BGN` - Bulgarian Lev
// * `BGO` - Bulgarian Lev (1879–1952)
// * `BGM` - Bulgarian Socialist Lev
// * `BUK` - Burmese Kyat
// * `BIF` - Burundian Franc
// * `XPF` - CFP Franc
// * `KHR` - Cambodian Riel
// * `CAD` - Canadian Dollar
// * `CVE` - Cape Verdean Escudo
// * `KYD` - Cayman Islands Dollar
// * `XAF` - Central African CFA Franc
// * `CLE` - Chilean Escudo
// * `CLP` - Chilean Peso
// * `CLF` - Chilean Unit of Account (UF)
// * `CNX` - Chinese People’s Bank Dollar
// * `CNY` - Chinese Yuan
// * `CNH` - Chinese Yuan (offshore)
// * `COP` - Colombian Peso
// * `COU` - Colombian Real Value Unit
// * `KMF` - Comorian Franc
// * `CDF` - Congolese Franc
// * `CRC` - Costa Rican Colón
// * `HRD` - Croatian Dinar
// * `HRK` - Croatian Kuna
// * `CUC` - Cuban Convertible Peso
// * `CUP` - Cuban Peso
// * `CYP` - Cypriot Pound
// * `CZK` - Czech Koruna
// * `CSK` - Czechoslovak Hard Koruna
// * `DKK` - Danish Krone
// * `DJF` - Djiboutian Franc
// * `DOP` - Dominican Peso
// * `NLG` - Dutch Guilder
// * `XCD` - East Caribbean Dollar
// * `DDM` - East German Mark
// * `ECS` - Ecuadorian Sucre
// * `ECV` - Ecuadorian Unit of Constant Value
// * `EGP` - Egyptian Pound
// * `GQE` - Equatorial Guinean Ekwele
// * `ERN` - Eritrean Nakfa
// * `EEK` - Estonian Kroon
// * `ETB` - Ethiopian Birr
// * `EUR` - Euro
// * `XBA` - European Composite Unit
// * `XEU` - European Currency Unit
// * `XBB` - European Monetary Unit
// * `XBC` - European Unit of Account (XBC)
// * `XBD` - European Unit of Account (XBD)
// * `FKP` - Falkland Islands Pound
// * `FJD` - Fijian Dollar
// * `FIM` - Finnish Markka
// * `FRF` - French Franc
// * `XFO` - French Gold Franc
// * `XFU` - French UIC-Franc
// * `GMD` - Gambian Dalasi
// * `GEK` - Georgian Kupon Larit
// * `GEL` - Georgian Lari
// * `DEM` - German Mark
// * `GHS` - Ghanaian Cedi
// * `GHC` - Ghanaian Cedi (1979–2007)
// * `GIP` - Gibraltar Pound
// * `XAU` - Gold
// * `GRD` - Greek Drachma
// * `GTQ` - Guatemalan Quetzal
// * `GWP` - Guinea-Bissau Peso
// * `GNF` - Guinean Franc
// * `GNS` - Guinean Syli
// * `GYD` - Guyanaese Dollar
// * `HTG` - Haitian Gourde
// * `HNL` - Honduran Lempira
// * `HKD` - Hong Kong Dollar
// * `HUF` - Hungarian Forint
// * `IMP` - IMP
// * `ISK` - Icelandic Króna
// * `ISJ` - Icelandic Króna (1918–1981)
// * `INR` - Indian Rupee
// * `IDR` - Indonesian Rupiah
// * `IRR` - Iranian Rial
// * `IQD` - Iraqi Dinar
// * `IEP` - Irish Pound
// * `ILS` - Israeli New Shekel
// * `ILP` - Israeli Pound
// * `ILR` - Israeli Shekel (1980–1985)
// * `ITL` - Italian Lira
// * `JMD` - Jamaican Dollar
// * `JPY` - Japanese Yen
// * `JOD` - Jordanian Dinar
// * `KZT` - Kazakhstani Tenge
// * `KES` - Kenyan Shilling
// * `KWD` - Kuwaiti Dinar
// * `KGS` - Kyrgystani Som
// * `LAK` - Laotian Kip
// * `LVL` - Latvian Lats
// * `LVR` - Latvian Ruble
// * `LBP` - Lebanese Pound
// * `LSL` - Lesotho Loti
// * `LRD` - Liberian Dollar
// * `LYD` - Libyan Dinar
// * `LTL` - Lithuanian Litas
// * `LTT` - Lithuanian Talonas
// * `LUL` - Luxembourg Financial Franc
// * `LUC` - Luxembourgian Convertible Franc
// * `LUF` - Luxembourgian Franc
// * `MOP` - Macanese Pataca
// * `MKD` - Macedonian Denar
// * `MKN` - Macedonian Denar (1992–1993)
// * `MGA` - Malagasy Ariary
// * `MGF` - Malagasy Franc
// * `MWK` - Malawian Kwacha
// * `MYR` - Malaysian Ringgit
// * `MVR` - Maldivian Rufiyaa
// * `MVP` - Maldivian Rupee (1947–1981)
// * `MLF` - Malian Franc
// * `MTL` - Maltese Lira
// * `MTP` - Maltese Pound
// * `MRU` - Mauritanian Ouguiya
// * `MRO` - Mauritanian Ouguiya (1973–2017)
// * `MUR` - Mauritian Rupee
// * `MXV` - Mexican Investment Unit
// * `MXN` - Mexican Peso
// * `MXP` - Mexican Silver Peso (1861–1992)
// * `MDC` - Moldovan Cupon
// * `MDL` - Moldovan Leu
// * `MCF` - Monegasque Franc
// * `MNT` - Mongolian Tugrik
// * `MAD` - Moroccan Dirham
// * `MAF` - Moroccan Franc
// * `MZE` - Mozambican Escudo
// * `MZN` - Mozambican Metical
// * `MZM` - Mozambican Metical (1980–2006)
// * `MMK` - Myanmar Kyat
// * `NAD` - Namibian Dollar
// * `NPR` - Nepalese Rupee
// * `ANG` - Netherlands Antillean Guilder
// * `TWD` - New Taiwan Dollar
// * `NZD` - New Zealand Dollar
// * `NIO` - Nicaraguan Córdoba
// * `NIC` - Nicaraguan Córdoba (1988–1991)
// * `NGN` - Nigerian Naira
// * `KPW` - North Korean Won
// * `NOK` - Norwegian Krone
// * `OMR` - Omani Rial
// * `PKR` - Pakistani Rupee
// * `XPD` - Palladium
// * `PAB` - Panamanian Balboa
// * `PGK` - Papua New Guinean Kina
// * `PYG` - Paraguayan Guarani
// * `PEI` - Peruvian Inti
// * `PEN` - Peruvian Sol
// * `PES` - Peruvian Sol (1863–1965)
// * `PHP` - Philippine Peso
// * `XPT` - Platinum
// * `PLN` - Polish Zloty
// * `PLZ` - Polish Zloty (1950–1995)
// * `PTE` - Portuguese Escudo
// * `GWE` - Portuguese Guinea Escudo
// * `QAR` - Qatari Rial
// * `XRE` - RINET Funds
// * `RHD` - Rhodesian Dollar
// * `RON` - Romanian Leu
// * `ROL` - Romanian Leu (1952–2006)
// * `RUB` - Russian Ruble
// * `RUR` - Russian Ruble (1991–1998)
// * `RWF` - Rwandan Franc
// * `SVC` - Salvadoran Colón
// * `WST` - Samoan Tala
// * `SAR` - Saudi Riyal
// * `RSD` - Serbian Dinar
// * `CSD` - Serbian Dinar (2002–2006)
// * `SCR` - Seychellois Rupee
// * `SLL` - Sierra Leonean Leone
// * `XAG` - Silver
// * `SGD` - Singapore Dollar
// * `SKK` - Slovak Koruna
// * `SIT` - Slovenian Tolar
// * `SBD` - Solomon Islands Dollar
// * `SOS` - Somali Shilling
// * `ZAR` - South African Rand
// * `ZAL` - South African Rand (financial)
// * `KRH` - South Korean Hwan (1953–1962)
// * `KRW` - South Korean Won
// * `KRO` - South Korean Won (1945–1953)
// * `SSP` - South Sudanese Pound
// * `SUR` - Soviet Rouble
// * `ESP` - Spanish Peseta
// * `ESA` - Spanish Peseta (A account)
// * `ESB` - Spanish Peseta (convertible account)
// * `XDR` - Special Drawing Rights
// * `LKR` - Sri Lankan Rupee
// * `SHP` - St. Helena Pound
// * `XSU` - Sucre
// * `SDD` - Sudanese Dinar (1992–2007)
// * `SDG` - Sudanese Pound
// * `SDP` - Sudanese Pound (1957–1998)
// * `SRD` - Surinamese Dollar
// * `SRG` - Surinamese Guilder
// * `SZL` - Swazi Lilangeni
// * `SEK` - Swedish Krona
// * `CHF` - Swiss Franc
// * `SYP` - Syrian Pound
// * `STN` - São Tomé & Príncipe Dobra
// * `STD` - São Tomé & Príncipe Dobra (1977–2017)
// * `TVD` - TVD
// * `TJR` - Tajikistani Ruble
// * `TJS` - Tajikistani Somoni
// * `TZS` - Tanzanian Shilling
// * `XTS` - Testing Currency Code
// * `THB` - Thai Baht
// * `XXX` - The codes assigned for transactions where no currency is involved
// * `TPE` - Timorese Escudo
// * `TOP` - Tongan Paʻanga
// * `TTD` - Trinidad & Tobago Dollar
// * `TND` - Tunisian Dinar
// * `TRY` - Turkish Lira
// * `TRL` - Turkish Lira (1922–2005)
// * `TMT` - Turkmenistani Manat
// * `TMM` - Turkmenistani Manat (1993–2009)
// * `USD` - US Dollar
// * `USN` - US Dollar (Next day)
// * `USS` - US Dollar (Same day)
// * `UGX` - Ugandan Shilling
// * `UGS` - Ugandan Shilling (1966–1987)
// * `UAH` - Ukrainian Hryvnia
// * `UAK` - Ukrainian Karbovanets
// * `AED` - United Arab Emirates Dirham
// * `UYW` - Uruguayan Nominal Wage Index Unit
// * `UYU` - Uruguayan Peso
// * `UYP` - Uruguayan Peso (1975–1993)
// * `UYI` - Uruguayan Peso (Indexed Units)
// * `UZS` - Uzbekistani Som
// * `VUV` - Vanuatu Vatu
// * `VES` - Venezuelan Bolívar
// * `VEB` - Venezuelan Bolívar (1871–2008)
// * `VEF` - Venezuelan Bolívar (2008–2018)
// * `VND` - Vietnamese Dong
// * `VNN` - Vietnamese Dong (1978–1985)
// * `CHE` - WIR Euro
// * `CHW` - WIR Franc
// * `XOF` - West African CFA Franc
// * `YDD` - Yemeni Dinar
// * `YER` - Yemeni Rial
// * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
// * `YUD` - Yugoslavian Hard Dinar (1966–1990)
// * `YUM` - Yugoslavian New Dinar (1994–2002)
// * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
// * `ZWN` - ZWN
// * `ZRN` - Zairean New Zaire (1993–1998)
// * `ZRZ` - Zairean Zaire (1971–1993)
// * `ZMW` - Zambian Kwacha
// * `ZMK` - Zambian Kwacha (1968–2012)
// * `ZWD` - Zimbabwean Dollar (1980–2008)
// * `ZWR` - Zimbabwean Dollar (2008)
// * `ZWL` - Zimbabwean Dollar (2009)
type VendorCreditCurrency struct {
	typeName     string
	CurrencyEnum CurrencyEnum
	String       string
}

func NewVendorCreditCurrencyFromCurrencyEnum(value CurrencyEnum) *VendorCreditCurrency {
	return &VendorCreditCurrency{typeName: "currencyEnum", CurrencyEnum: value}
}

func NewVendorCreditCurrencyFromString(value string) *VendorCreditCurrency {
	return &VendorCreditCurrency{typeName: "string", String: value}
}

func (v *VendorCreditCurrency) UnmarshalJSON(data []byte) error {
	var valueCurrencyEnum CurrencyEnum
	if err := json.Unmarshal(data, &valueCurrencyEnum); err == nil {
		v.typeName = "currencyEnum"
		v.CurrencyEnum = valueCurrencyEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		v.typeName = "string"
		v.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, v)
}

func (v VendorCreditCurrency) MarshalJSON() ([]byte, error) {
	switch v.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", v.typeName, v)
	case "currencyEnum":
		return json.Marshal(v.CurrencyEnum)
	case "string":
		return json.Marshal(v.String)
	}
}

type VendorCreditCurrencyVisitor interface {
	VisitCurrencyEnum(CurrencyEnum) error
	VisitString(string) error
}

func (v *VendorCreditCurrency) Accept(visitor VendorCreditCurrencyVisitor) error {
	switch v.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", v.typeName, v)
	case "currencyEnum":
		return visitor.VisitCurrencyEnum(v.CurrencyEnum)
	case "string":
		return visitor.VisitString(v.String)
	}
}

// # The VendorCreditLine Object
// ### Description
// The `VendorCreditLine` object is used to represent a vendor credit's line items.
//
// ### Usage Example
// Fetch from the `GET VendorCredit` endpoint and view the vendor credit's line items.
type VendorCreditLine struct {
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The full value of the credit.
	NetAmount *float64 `json:"net_amount,omitempty"`
	// The line's associated tracking category.
	TrackingCategory *string `json:"tracking_category,omitempty"`
	// The line's associated tracking categories.
	TrackingCategories []string `json:"tracking_categories,omitempty"`
	// The line's description.
	Description *string `json:"description,omitempty"`
	// The line's account.
	Account *VendorCreditLineAccount `json:"account,omitempty"`
	// The company the line belongs to.
	Company *string `json:"company,omitempty"`
	// The vendor credit line item's exchange rate.
	ExchangeRate *string `json:"exchange_rate,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted *bool      `json:"remote_was_deleted,omitempty"`
	Id               *string    `json:"id,omitempty"`
	CreatedAt        *time.Time `json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
}

// The line's account.
type VendorCreditLineAccount struct {
	typeName string
	String   string
	Account  *Account
}

func NewVendorCreditLineAccountFromString(value string) *VendorCreditLineAccount {
	return &VendorCreditLineAccount{typeName: "string", String: value}
}

func NewVendorCreditLineAccountFromAccount(value *Account) *VendorCreditLineAccount {
	return &VendorCreditLineAccount{typeName: "account", Account: value}
}

func (v *VendorCreditLineAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		v.typeName = "string"
		v.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		v.typeName = "account"
		v.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, v)
}

func (v VendorCreditLineAccount) MarshalJSON() ([]byte, error) {
	switch v.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", v.typeName, v)
	case "string":
		return json.Marshal(v.String)
	case "account":
		return json.Marshal(v.Account)
	}
}

type VendorCreditLineAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (v *VendorCreditLineAccount) Accept(visitor VendorCreditLineAccountVisitor) error {
	switch v.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", v.typeName, v)
	case "string":
		return visitor.VisitString(v.String)
	case "account":
		return visitor.VisitAccount(v.Account)
	}
}

type VendorCreditTrackingCategoriesItem struct {
	typeName         string
	String           string
	TrackingCategory *TrackingCategory
}

func NewVendorCreditTrackingCategoriesItemFromString(value string) *VendorCreditTrackingCategoriesItem {
	return &VendorCreditTrackingCategoriesItem{typeName: "string", String: value}
}

func NewVendorCreditTrackingCategoriesItemFromTrackingCategory(value *TrackingCategory) *VendorCreditTrackingCategoriesItem {
	return &VendorCreditTrackingCategoriesItem{typeName: "trackingCategory", TrackingCategory: value}
}

func (v *VendorCreditTrackingCategoriesItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		v.typeName = "string"
		v.String = valueString
		return nil
	}
	valueTrackingCategory := new(TrackingCategory)
	if err := json.Unmarshal(data, &valueTrackingCategory); err == nil {
		v.typeName = "trackingCategory"
		v.TrackingCategory = valueTrackingCategory
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, v)
}

func (v VendorCreditTrackingCategoriesItem) MarshalJSON() ([]byte, error) {
	switch v.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", v.typeName, v)
	case "string":
		return json.Marshal(v.String)
	case "trackingCategory":
		return json.Marshal(v.TrackingCategory)
	}
}

type VendorCreditTrackingCategoriesItemVisitor interface {
	VisitString(string) error
	VisitTrackingCategory(*TrackingCategory) error
}

func (v *VendorCreditTrackingCategoriesItem) Accept(visitor VendorCreditTrackingCategoriesItemVisitor) error {
	switch v.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", v.typeName, v)
	case "string":
		return visitor.VisitString(v.String)
	case "trackingCategory":
		return visitor.VisitTrackingCategory(v.TrackingCategory)
	}
}

// The vendor that owes the gift or refund.
type VendorCreditVendor struct {
	typeName string
	String   string
	Contact  *Contact
}

func NewVendorCreditVendorFromString(value string) *VendorCreditVendor {
	return &VendorCreditVendor{typeName: "string", String: value}
}

func NewVendorCreditVendorFromContact(value *Contact) *VendorCreditVendor {
	return &VendorCreditVendor{typeName: "contact", Contact: value}
}

func (v *VendorCreditVendor) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		v.typeName = "string"
		v.String = valueString
		return nil
	}
	valueContact := new(Contact)
	if err := json.Unmarshal(data, &valueContact); err == nil {
		v.typeName = "contact"
		v.Contact = valueContact
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, v)
}

func (v VendorCreditVendor) MarshalJSON() ([]byte, error) {
	switch v.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", v.typeName, v)
	case "string":
		return json.Marshal(v.String)
	case "contact":
		return json.Marshal(v.Contact)
	}
}

type VendorCreditVendorVisitor interface {
	VisitString(string) error
	VisitContact(*Contact) error
}

func (v *VendorCreditVendor) Accept(visitor VendorCreditVendorVisitor) error {
	switch v.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", v.typeName, v)
	case "string":
		return visitor.VisitString(v.String)
	case "contact":
		return visitor.VisitContact(v.Contact)
	}
}

type VendorCreditsListRequestExpand uint

const (
	VendorCreditsListRequestExpandAccountingPeriod VendorCreditsListRequestExpand = iota + 1
	VendorCreditsListRequestExpandCompany
	VendorCreditsListRequestExpandCompanyAccountingPeriod
	VendorCreditsListRequestExpandLines
	VendorCreditsListRequestExpandLinesAccountingPeriod
	VendorCreditsListRequestExpandLinesCompany
	VendorCreditsListRequestExpandLinesCompanyAccountingPeriod
	VendorCreditsListRequestExpandLinesTrackingCategories
	VendorCreditsListRequestExpandLinesTrackingCategoriesAccountingPeriod
	VendorCreditsListRequestExpandLinesTrackingCategoriesCompany
	VendorCreditsListRequestExpandLinesTrackingCategoriesCompanyAccountingPeriod
	VendorCreditsListRequestExpandLinesTrackingCategoriesVendor
	VendorCreditsListRequestExpandLinesTrackingCategoriesVendorAccountingPeriod
	VendorCreditsListRequestExpandLinesTrackingCategoriesVendorCompany
	VendorCreditsListRequestExpandLinesTrackingCategoriesVendorCompanyAccountingPeriod
	VendorCreditsListRequestExpandLinesVendor
	VendorCreditsListRequestExpandLinesVendorAccountingPeriod
	VendorCreditsListRequestExpandLinesVendorCompany
	VendorCreditsListRequestExpandLinesVendorCompanyAccountingPeriod
	VendorCreditsListRequestExpandTrackingCategories
	VendorCreditsListRequestExpandTrackingCategoriesAccountingPeriod
	VendorCreditsListRequestExpandTrackingCategoriesCompany
	VendorCreditsListRequestExpandTrackingCategoriesCompanyAccountingPeriod
	VendorCreditsListRequestExpandTrackingCategoriesVendor
	VendorCreditsListRequestExpandTrackingCategoriesVendorAccountingPeriod
	VendorCreditsListRequestExpandTrackingCategoriesVendorCompany
	VendorCreditsListRequestExpandTrackingCategoriesVendorCompanyAccountingPeriod
	VendorCreditsListRequestExpandVendor
	VendorCreditsListRequestExpandVendorAccountingPeriod
	VendorCreditsListRequestExpandVendorCompany
	VendorCreditsListRequestExpandVendorCompanyAccountingPeriod
)

func (v VendorCreditsListRequestExpand) String() string {
	switch v {
	default:
		return strconv.Itoa(int(v))
	case VendorCreditsListRequestExpandAccountingPeriod:
		return "accounting_period"
	case VendorCreditsListRequestExpandCompany:
		return "company"
	case VendorCreditsListRequestExpandCompanyAccountingPeriod:
		return "company,accounting_period"
	case VendorCreditsListRequestExpandLines:
		return "lines"
	case VendorCreditsListRequestExpandLinesAccountingPeriod:
		return "lines,accounting_period"
	case VendorCreditsListRequestExpandLinesCompany:
		return "lines,company"
	case VendorCreditsListRequestExpandLinesCompanyAccountingPeriod:
		return "lines,company,accounting_period"
	case VendorCreditsListRequestExpandLinesTrackingCategories:
		return "lines,tracking_categories"
	case VendorCreditsListRequestExpandLinesTrackingCategoriesAccountingPeriod:
		return "lines,tracking_categories,accounting_period"
	case VendorCreditsListRequestExpandLinesTrackingCategoriesCompany:
		return "lines,tracking_categories,company"
	case VendorCreditsListRequestExpandLinesTrackingCategoriesCompanyAccountingPeriod:
		return "lines,tracking_categories,company,accounting_period"
	case VendorCreditsListRequestExpandLinesTrackingCategoriesVendor:
		return "lines,tracking_categories,vendor"
	case VendorCreditsListRequestExpandLinesTrackingCategoriesVendorAccountingPeriod:
		return "lines,tracking_categories,vendor,accounting_period"
	case VendorCreditsListRequestExpandLinesTrackingCategoriesVendorCompany:
		return "lines,tracking_categories,vendor,company"
	case VendorCreditsListRequestExpandLinesTrackingCategoriesVendorCompanyAccountingPeriod:
		return "lines,tracking_categories,vendor,company,accounting_period"
	case VendorCreditsListRequestExpandLinesVendor:
		return "lines,vendor"
	case VendorCreditsListRequestExpandLinesVendorAccountingPeriod:
		return "lines,vendor,accounting_period"
	case VendorCreditsListRequestExpandLinesVendorCompany:
		return "lines,vendor,company"
	case VendorCreditsListRequestExpandLinesVendorCompanyAccountingPeriod:
		return "lines,vendor,company,accounting_period"
	case VendorCreditsListRequestExpandTrackingCategories:
		return "tracking_categories"
	case VendorCreditsListRequestExpandTrackingCategoriesAccountingPeriod:
		return "tracking_categories,accounting_period"
	case VendorCreditsListRequestExpandTrackingCategoriesCompany:
		return "tracking_categories,company"
	case VendorCreditsListRequestExpandTrackingCategoriesCompanyAccountingPeriod:
		return "tracking_categories,company,accounting_period"
	case VendorCreditsListRequestExpandTrackingCategoriesVendor:
		return "tracking_categories,vendor"
	case VendorCreditsListRequestExpandTrackingCategoriesVendorAccountingPeriod:
		return "tracking_categories,vendor,accounting_period"
	case VendorCreditsListRequestExpandTrackingCategoriesVendorCompany:
		return "tracking_categories,vendor,company"
	case VendorCreditsListRequestExpandTrackingCategoriesVendorCompanyAccountingPeriod:
		return "tracking_categories,vendor,company,accounting_period"
	case VendorCreditsListRequestExpandVendor:
		return "vendor"
	case VendorCreditsListRequestExpandVendorAccountingPeriod:
		return "vendor,accounting_period"
	case VendorCreditsListRequestExpandVendorCompany:
		return "vendor,company"
	case VendorCreditsListRequestExpandVendorCompanyAccountingPeriod:
		return "vendor,company,accounting_period"
	}
}

func (v VendorCreditsListRequestExpand) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", v.String())), nil
}

func (v *VendorCreditsListRequestExpand) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "accounting_period":
		value := VendorCreditsListRequestExpandAccountingPeriod
		*v = value
	case "company":
		value := VendorCreditsListRequestExpandCompany
		*v = value
	case "company,accounting_period":
		value := VendorCreditsListRequestExpandCompanyAccountingPeriod
		*v = value
	case "lines":
		value := VendorCreditsListRequestExpandLines
		*v = value
	case "lines,accounting_period":
		value := VendorCreditsListRequestExpandLinesAccountingPeriod
		*v = value
	case "lines,company":
		value := VendorCreditsListRequestExpandLinesCompany
		*v = value
	case "lines,company,accounting_period":
		value := VendorCreditsListRequestExpandLinesCompanyAccountingPeriod
		*v = value
	case "lines,tracking_categories":
		value := VendorCreditsListRequestExpandLinesTrackingCategories
		*v = value
	case "lines,tracking_categories,accounting_period":
		value := VendorCreditsListRequestExpandLinesTrackingCategoriesAccountingPeriod
		*v = value
	case "lines,tracking_categories,company":
		value := VendorCreditsListRequestExpandLinesTrackingCategoriesCompany
		*v = value
	case "lines,tracking_categories,company,accounting_period":
		value := VendorCreditsListRequestExpandLinesTrackingCategoriesCompanyAccountingPeriod
		*v = value
	case "lines,tracking_categories,vendor":
		value := VendorCreditsListRequestExpandLinesTrackingCategoriesVendor
		*v = value
	case "lines,tracking_categories,vendor,accounting_period":
		value := VendorCreditsListRequestExpandLinesTrackingCategoriesVendorAccountingPeriod
		*v = value
	case "lines,tracking_categories,vendor,company":
		value := VendorCreditsListRequestExpandLinesTrackingCategoriesVendorCompany
		*v = value
	case "lines,tracking_categories,vendor,company,accounting_period":
		value := VendorCreditsListRequestExpandLinesTrackingCategoriesVendorCompanyAccountingPeriod
		*v = value
	case "lines,vendor":
		value := VendorCreditsListRequestExpandLinesVendor
		*v = value
	case "lines,vendor,accounting_period":
		value := VendorCreditsListRequestExpandLinesVendorAccountingPeriod
		*v = value
	case "lines,vendor,company":
		value := VendorCreditsListRequestExpandLinesVendorCompany
		*v = value
	case "lines,vendor,company,accounting_period":
		value := VendorCreditsListRequestExpandLinesVendorCompanyAccountingPeriod
		*v = value
	case "tracking_categories":
		value := VendorCreditsListRequestExpandTrackingCategories
		*v = value
	case "tracking_categories,accounting_period":
		value := VendorCreditsListRequestExpandTrackingCategoriesAccountingPeriod
		*v = value
	case "tracking_categories,company":
		value := VendorCreditsListRequestExpandTrackingCategoriesCompany
		*v = value
	case "tracking_categories,company,accounting_period":
		value := VendorCreditsListRequestExpandTrackingCategoriesCompanyAccountingPeriod
		*v = value
	case "tracking_categories,vendor":
		value := VendorCreditsListRequestExpandTrackingCategoriesVendor
		*v = value
	case "tracking_categories,vendor,accounting_period":
		value := VendorCreditsListRequestExpandTrackingCategoriesVendorAccountingPeriod
		*v = value
	case "tracking_categories,vendor,company":
		value := VendorCreditsListRequestExpandTrackingCategoriesVendorCompany
		*v = value
	case "tracking_categories,vendor,company,accounting_period":
		value := VendorCreditsListRequestExpandTrackingCategoriesVendorCompanyAccountingPeriod
		*v = value
	case "vendor":
		value := VendorCreditsListRequestExpandVendor
		*v = value
	case "vendor,accounting_period":
		value := VendorCreditsListRequestExpandVendorAccountingPeriod
		*v = value
	case "vendor,company":
		value := VendorCreditsListRequestExpandVendorCompany
		*v = value
	case "vendor,company,accounting_period":
		value := VendorCreditsListRequestExpandVendorCompanyAccountingPeriod
		*v = value
	}
	return nil
}

type VendorCreditsRetrieveRequestExpand uint

const (
	VendorCreditsRetrieveRequestExpandAccountingPeriod VendorCreditsRetrieveRequestExpand = iota + 1
	VendorCreditsRetrieveRequestExpandCompany
	VendorCreditsRetrieveRequestExpandCompanyAccountingPeriod
	VendorCreditsRetrieveRequestExpandLines
	VendorCreditsRetrieveRequestExpandLinesAccountingPeriod
	VendorCreditsRetrieveRequestExpandLinesCompany
	VendorCreditsRetrieveRequestExpandLinesCompanyAccountingPeriod
	VendorCreditsRetrieveRequestExpandLinesTrackingCategories
	VendorCreditsRetrieveRequestExpandLinesTrackingCategoriesAccountingPeriod
	VendorCreditsRetrieveRequestExpandLinesTrackingCategoriesCompany
	VendorCreditsRetrieveRequestExpandLinesTrackingCategoriesCompanyAccountingPeriod
	VendorCreditsRetrieveRequestExpandLinesTrackingCategoriesVendor
	VendorCreditsRetrieveRequestExpandLinesTrackingCategoriesVendorAccountingPeriod
	VendorCreditsRetrieveRequestExpandLinesTrackingCategoriesVendorCompany
	VendorCreditsRetrieveRequestExpandLinesTrackingCategoriesVendorCompanyAccountingPeriod
	VendorCreditsRetrieveRequestExpandLinesVendor
	VendorCreditsRetrieveRequestExpandLinesVendorAccountingPeriod
	VendorCreditsRetrieveRequestExpandLinesVendorCompany
	VendorCreditsRetrieveRequestExpandLinesVendorCompanyAccountingPeriod
	VendorCreditsRetrieveRequestExpandTrackingCategories
	VendorCreditsRetrieveRequestExpandTrackingCategoriesAccountingPeriod
	VendorCreditsRetrieveRequestExpandTrackingCategoriesCompany
	VendorCreditsRetrieveRequestExpandTrackingCategoriesCompanyAccountingPeriod
	VendorCreditsRetrieveRequestExpandTrackingCategoriesVendor
	VendorCreditsRetrieveRequestExpandTrackingCategoriesVendorAccountingPeriod
	VendorCreditsRetrieveRequestExpandTrackingCategoriesVendorCompany
	VendorCreditsRetrieveRequestExpandTrackingCategoriesVendorCompanyAccountingPeriod
	VendorCreditsRetrieveRequestExpandVendor
	VendorCreditsRetrieveRequestExpandVendorAccountingPeriod
	VendorCreditsRetrieveRequestExpandVendorCompany
	VendorCreditsRetrieveRequestExpandVendorCompanyAccountingPeriod
)

func (v VendorCreditsRetrieveRequestExpand) String() string {
	switch v {
	default:
		return strconv.Itoa(int(v))
	case VendorCreditsRetrieveRequestExpandAccountingPeriod:
		return "accounting_period"
	case VendorCreditsRetrieveRequestExpandCompany:
		return "company"
	case VendorCreditsRetrieveRequestExpandCompanyAccountingPeriod:
		return "company,accounting_period"
	case VendorCreditsRetrieveRequestExpandLines:
		return "lines"
	case VendorCreditsRetrieveRequestExpandLinesAccountingPeriod:
		return "lines,accounting_period"
	case VendorCreditsRetrieveRequestExpandLinesCompany:
		return "lines,company"
	case VendorCreditsRetrieveRequestExpandLinesCompanyAccountingPeriod:
		return "lines,company,accounting_period"
	case VendorCreditsRetrieveRequestExpandLinesTrackingCategories:
		return "lines,tracking_categories"
	case VendorCreditsRetrieveRequestExpandLinesTrackingCategoriesAccountingPeriod:
		return "lines,tracking_categories,accounting_period"
	case VendorCreditsRetrieveRequestExpandLinesTrackingCategoriesCompany:
		return "lines,tracking_categories,company"
	case VendorCreditsRetrieveRequestExpandLinesTrackingCategoriesCompanyAccountingPeriod:
		return "lines,tracking_categories,company,accounting_period"
	case VendorCreditsRetrieveRequestExpandLinesTrackingCategoriesVendor:
		return "lines,tracking_categories,vendor"
	case VendorCreditsRetrieveRequestExpandLinesTrackingCategoriesVendorAccountingPeriod:
		return "lines,tracking_categories,vendor,accounting_period"
	case VendorCreditsRetrieveRequestExpandLinesTrackingCategoriesVendorCompany:
		return "lines,tracking_categories,vendor,company"
	case VendorCreditsRetrieveRequestExpandLinesTrackingCategoriesVendorCompanyAccountingPeriod:
		return "lines,tracking_categories,vendor,company,accounting_period"
	case VendorCreditsRetrieveRequestExpandLinesVendor:
		return "lines,vendor"
	case VendorCreditsRetrieveRequestExpandLinesVendorAccountingPeriod:
		return "lines,vendor,accounting_period"
	case VendorCreditsRetrieveRequestExpandLinesVendorCompany:
		return "lines,vendor,company"
	case VendorCreditsRetrieveRequestExpandLinesVendorCompanyAccountingPeriod:
		return "lines,vendor,company,accounting_period"
	case VendorCreditsRetrieveRequestExpandTrackingCategories:
		return "tracking_categories"
	case VendorCreditsRetrieveRequestExpandTrackingCategoriesAccountingPeriod:
		return "tracking_categories,accounting_period"
	case VendorCreditsRetrieveRequestExpandTrackingCategoriesCompany:
		return "tracking_categories,company"
	case VendorCreditsRetrieveRequestExpandTrackingCategoriesCompanyAccountingPeriod:
		return "tracking_categories,company,accounting_period"
	case VendorCreditsRetrieveRequestExpandTrackingCategoriesVendor:
		return "tracking_categories,vendor"
	case VendorCreditsRetrieveRequestExpandTrackingCategoriesVendorAccountingPeriod:
		return "tracking_categories,vendor,accounting_period"
	case VendorCreditsRetrieveRequestExpandTrackingCategoriesVendorCompany:
		return "tracking_categories,vendor,company"
	case VendorCreditsRetrieveRequestExpandTrackingCategoriesVendorCompanyAccountingPeriod:
		return "tracking_categories,vendor,company,accounting_period"
	case VendorCreditsRetrieveRequestExpandVendor:
		return "vendor"
	case VendorCreditsRetrieveRequestExpandVendorAccountingPeriod:
		return "vendor,accounting_period"
	case VendorCreditsRetrieveRequestExpandVendorCompany:
		return "vendor,company"
	case VendorCreditsRetrieveRequestExpandVendorCompanyAccountingPeriod:
		return "vendor,company,accounting_period"
	}
}

func (v VendorCreditsRetrieveRequestExpand) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", v.String())), nil
}

func (v *VendorCreditsRetrieveRequestExpand) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "accounting_period":
		value := VendorCreditsRetrieveRequestExpandAccountingPeriod
		*v = value
	case "company":
		value := VendorCreditsRetrieveRequestExpandCompany
		*v = value
	case "company,accounting_period":
		value := VendorCreditsRetrieveRequestExpandCompanyAccountingPeriod
		*v = value
	case "lines":
		value := VendorCreditsRetrieveRequestExpandLines
		*v = value
	case "lines,accounting_period":
		value := VendorCreditsRetrieveRequestExpandLinesAccountingPeriod
		*v = value
	case "lines,company":
		value := VendorCreditsRetrieveRequestExpandLinesCompany
		*v = value
	case "lines,company,accounting_period":
		value := VendorCreditsRetrieveRequestExpandLinesCompanyAccountingPeriod
		*v = value
	case "lines,tracking_categories":
		value := VendorCreditsRetrieveRequestExpandLinesTrackingCategories
		*v = value
	case "lines,tracking_categories,accounting_period":
		value := VendorCreditsRetrieveRequestExpandLinesTrackingCategoriesAccountingPeriod
		*v = value
	case "lines,tracking_categories,company":
		value := VendorCreditsRetrieveRequestExpandLinesTrackingCategoriesCompany
		*v = value
	case "lines,tracking_categories,company,accounting_period":
		value := VendorCreditsRetrieveRequestExpandLinesTrackingCategoriesCompanyAccountingPeriod
		*v = value
	case "lines,tracking_categories,vendor":
		value := VendorCreditsRetrieveRequestExpandLinesTrackingCategoriesVendor
		*v = value
	case "lines,tracking_categories,vendor,accounting_period":
		value := VendorCreditsRetrieveRequestExpandLinesTrackingCategoriesVendorAccountingPeriod
		*v = value
	case "lines,tracking_categories,vendor,company":
		value := VendorCreditsRetrieveRequestExpandLinesTrackingCategoriesVendorCompany
		*v = value
	case "lines,tracking_categories,vendor,company,accounting_period":
		value := VendorCreditsRetrieveRequestExpandLinesTrackingCategoriesVendorCompanyAccountingPeriod
		*v = value
	case "lines,vendor":
		value := VendorCreditsRetrieveRequestExpandLinesVendor
		*v = value
	case "lines,vendor,accounting_period":
		value := VendorCreditsRetrieveRequestExpandLinesVendorAccountingPeriod
		*v = value
	case "lines,vendor,company":
		value := VendorCreditsRetrieveRequestExpandLinesVendorCompany
		*v = value
	case "lines,vendor,company,accounting_period":
		value := VendorCreditsRetrieveRequestExpandLinesVendorCompanyAccountingPeriod
		*v = value
	case "tracking_categories":
		value := VendorCreditsRetrieveRequestExpandTrackingCategories
		*v = value
	case "tracking_categories,accounting_period":
		value := VendorCreditsRetrieveRequestExpandTrackingCategoriesAccountingPeriod
		*v = value
	case "tracking_categories,company":
		value := VendorCreditsRetrieveRequestExpandTrackingCategoriesCompany
		*v = value
	case "tracking_categories,company,accounting_period":
		value := VendorCreditsRetrieveRequestExpandTrackingCategoriesCompanyAccountingPeriod
		*v = value
	case "tracking_categories,vendor":
		value := VendorCreditsRetrieveRequestExpandTrackingCategoriesVendor
		*v = value
	case "tracking_categories,vendor,accounting_period":
		value := VendorCreditsRetrieveRequestExpandTrackingCategoriesVendorAccountingPeriod
		*v = value
	case "tracking_categories,vendor,company":
		value := VendorCreditsRetrieveRequestExpandTrackingCategoriesVendorCompany
		*v = value
	case "tracking_categories,vendor,company,accounting_period":
		value := VendorCreditsRetrieveRequestExpandTrackingCategoriesVendorCompanyAccountingPeriod
		*v = value
	case "vendor":
		value := VendorCreditsRetrieveRequestExpandVendor
		*v = value
	case "vendor,accounting_period":
		value := VendorCreditsRetrieveRequestExpandVendorAccountingPeriod
		*v = value
	case "vendor,company":
		value := VendorCreditsRetrieveRequestExpandVendorCompany
		*v = value
	case "vendor,company,accounting_period":
		value := VendorCreditsRetrieveRequestExpandVendorCompanyAccountingPeriod
		*v = value
	}
	return nil
}

type WarningValidationProblem struct {
	Source      *ValidationProblemSource `json:"source,omitempty"`
	Title       string                   `json:"title"`
	Detail      string                   `json:"detail"`
	ProblemType string                   `json:"problem_type"`
}

type WebhookReceiver struct {
	Event    string  `json:"event"`
	IsActive bool    `json:"is_active"`
	Key      *string `json:"key,omitempty"`
}
