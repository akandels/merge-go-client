// This file was auto-generated by Fern from our API Definition.

package employees

import (
	context "context"
	fmt "fmt"
	core "github.com/merge-api/merge-go-client/core"
	hris "github.com/merge-api/merge-go-client/hris"
	http "net/http"
	url "net/url"
	time "time"
)

type Client interface {
	List(ctx context.Context, request *hris.EmployeesListRequest) (*hris.PaginatedEmployeeList, error)
	Create(ctx context.Context, request *hris.EmployeeEndpointRequest) (*hris.EmployeeResponse, error)
	Retrieve(ctx context.Context, id string, request *hris.EmployeesRetrieveRequest) (*hris.Employee, error)
	IgnoreCreate(ctx context.Context, modelId string, request *hris.IgnoreCommonModelRequest) error
	MetaPostRetrieve(ctx context.Context) (*hris.MetaResponse, error)
}

func NewClient(opts ...core.ClientOption) Client {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &client{
		baseURL:    options.BaseURL,
		httpClient: options.HTTPClient,
		header:     options.ToHeader(),
	}
}

type client struct {
	baseURL    string
	httpClient core.HTTPClient
	header     http.Header
}

// Returns a list of `Employee` objects.
func (c *client) List(ctx context.Context, request *hris.EmployeesListRequest) (*hris.PaginatedEmployeeList, error) {
	baseURL := "https://api.merge.dev"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "employees"

	queryParams := make(url.Values)
	if request.CompanyId != nil {
		queryParams.Add("company_id", fmt.Sprintf("%v", *request.CompanyId))
	}
	if request.CreatedAfter != nil {
		queryParams.Add("created_after", fmt.Sprintf("%v", request.CreatedAfter.Format(time.RFC3339)))
	}
	if request.CreatedBefore != nil {
		queryParams.Add("created_before", fmt.Sprintf("%v", request.CreatedBefore.Format(time.RFC3339)))
	}
	if request.Cursor != nil {
		queryParams.Add("cursor", fmt.Sprintf("%v", *request.Cursor))
	}
	if request.DisplayFullName != nil {
		queryParams.Add("display_full_name", fmt.Sprintf("%v", *request.DisplayFullName))
	}
	if request.EmploymentStatus != nil {
		queryParams.Add("employment_status", fmt.Sprintf("%v", *request.EmploymentStatus))
	}
	if request.EmploymentType != nil {
		queryParams.Add("employment_type", fmt.Sprintf("%v", *request.EmploymentType))
	}
	if request.Expand != nil {
		queryParams.Add("expand", fmt.Sprintf("%v", *request.Expand))
	}
	if request.FirstName != nil {
		queryParams.Add("first_name", fmt.Sprintf("%v", *request.FirstName))
	}
	if request.Groups != nil {
		queryParams.Add("groups", fmt.Sprintf("%v", *request.Groups))
	}
	if request.HomeLocationId != nil {
		queryParams.Add("home_location_id", fmt.Sprintf("%v", *request.HomeLocationId))
	}
	if request.IncludeDeletedData != nil {
		queryParams.Add("include_deleted_data", fmt.Sprintf("%v", *request.IncludeDeletedData))
	}
	if request.IncludeRemoteData != nil {
		queryParams.Add("include_remote_data", fmt.Sprintf("%v", *request.IncludeRemoteData))
	}
	if request.IncludeSensitiveFields != nil {
		queryParams.Add("include_sensitive_fields", fmt.Sprintf("%v", *request.IncludeSensitiveFields))
	}
	if request.JobTitle != nil {
		queryParams.Add("job_title", fmt.Sprintf("%v", *request.JobTitle))
	}
	if request.LastName != nil {
		queryParams.Add("last_name", fmt.Sprintf("%v", *request.LastName))
	}
	if request.ManagerId != nil {
		queryParams.Add("manager_id", fmt.Sprintf("%v", *request.ManagerId))
	}
	if request.ModifiedAfter != nil {
		queryParams.Add("modified_after", fmt.Sprintf("%v", request.ModifiedAfter.Format(time.RFC3339)))
	}
	if request.ModifiedBefore != nil {
		queryParams.Add("modified_before", fmt.Sprintf("%v", request.ModifiedBefore.Format(time.RFC3339)))
	}
	if request.PageSize != nil {
		queryParams.Add("page_size", fmt.Sprintf("%v", *request.PageSize))
	}
	if request.PayGroupId != nil {
		queryParams.Add("pay_group_id", fmt.Sprintf("%v", *request.PayGroupId))
	}
	if request.PersonalEmail != nil {
		queryParams.Add("personal_email", fmt.Sprintf("%v", *request.PersonalEmail))
	}
	if request.RemoteFields != nil {
		queryParams.Add("remote_fields", fmt.Sprintf("%v", *request.RemoteFields))
	}
	if request.RemoteId != nil {
		queryParams.Add("remote_id", fmt.Sprintf("%v", *request.RemoteId))
	}
	if request.ShowEnumOrigins != nil {
		queryParams.Add("show_enum_origins", fmt.Sprintf("%v", *request.ShowEnumOrigins))
	}
	if request.StartedAfter != nil {
		queryParams.Add("started_after", fmt.Sprintf("%v", request.StartedAfter.Format(time.RFC3339)))
	}
	if request.StartedBefore != nil {
		queryParams.Add("started_before", fmt.Sprintf("%v", request.StartedBefore.Format(time.RFC3339)))
	}
	if request.TeamId != nil {
		queryParams.Add("team_id", fmt.Sprintf("%v", *request.TeamId))
	}
	if request.TerminatedAfter != nil {
		queryParams.Add("terminated_after", fmt.Sprintf("%v", request.TerminatedAfter.Format(time.RFC3339)))
	}
	if request.TerminatedBefore != nil {
		queryParams.Add("terminated_before", fmt.Sprintf("%v", request.TerminatedBefore.Format(time.RFC3339)))
	}
	if request.WorkEmail != nil {
		queryParams.Add("work_email", fmt.Sprintf("%v", *request.WorkEmail))
	}
	if request.WorkLocationId != nil {
		queryParams.Add("work_location_id", fmt.Sprintf("%v", *request.WorkLocationId))
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	var response *hris.PaginatedEmployeeList
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodGet,
		request,
		&response,
		false,
		c.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Creates an `Employee` object with the given values.
func (c *client) Create(ctx context.Context, request *hris.EmployeeEndpointRequest) (*hris.EmployeeResponse, error) {
	baseURL := "https://api.merge.dev"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "employees"

	queryParams := make(url.Values)
	if request.IsDebugMode != nil {
		queryParams.Add("is_debug_mode", fmt.Sprintf("%v", *request.IsDebugMode))
	}
	if request.RunAsync != nil {
		queryParams.Add("run_async", fmt.Sprintf("%v", *request.RunAsync))
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	var response *hris.EmployeeResponse
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		&response,
		false,
		c.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Returns an `Employee` object with the given `id`.
func (c *client) Retrieve(ctx context.Context, id string, request *hris.EmployeesRetrieveRequest) (*hris.Employee, error) {
	baseURL := "https://api.merge.dev"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"employees/%v", id)

	queryParams := make(url.Values)
	if request.Expand != nil {
		queryParams.Add("expand", fmt.Sprintf("%v", *request.Expand))
	}
	if request.IncludeRemoteData != nil {
		queryParams.Add("include_remote_data", fmt.Sprintf("%v", *request.IncludeRemoteData))
	}
	if request.IncludeSensitiveFields != nil {
		queryParams.Add("include_sensitive_fields", fmt.Sprintf("%v", *request.IncludeSensitiveFields))
	}
	if request.RemoteFields != nil {
		queryParams.Add("remote_fields", fmt.Sprintf("%v", *request.RemoteFields))
	}
	if request.ShowEnumOrigins != nil {
		queryParams.Add("show_enum_origins", fmt.Sprintf("%v", *request.ShowEnumOrigins))
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	var response *hris.Employee
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodGet,
		request,
		&response,
		false,
		c.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Ignores a specific row based on the `model_id` in the url. These records will have their properties set to null, and will not be updated in future syncs. The "reason" and "message" fields in the request body will be stored for audit purposes.
func (c *client) IgnoreCreate(ctx context.Context, modelId string, request *hris.IgnoreCommonModelRequest) error {
	baseURL := "https://api.merge.dev"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"employees/ignore/%v", modelId)

	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		nil,
		false,
		c.header,
		nil,
	); err != nil {
		return err
	}
	return nil
}

// Returns metadata for `Employee` POSTs.
func (c *client) MetaPostRetrieve(ctx context.Context) (*hris.MetaResponse, error) {
	baseURL := "https://api.merge.dev"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "employees/meta/post"

	var response *hris.MetaResponse
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodGet,
		nil,
		&response,
		false,
		c.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}
