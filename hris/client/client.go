// This file was auto-generated by Fern from our API Definition.

package client

import (
	core "github.com/merge-api/merge-go-client/core"
	accountdetails "github.com/merge-api/merge-go-client/hris/accountdetails"
	accounttoken "github.com/merge-api/merge-go-client/hris/accounttoken"
	asyncpassthrough "github.com/merge-api/merge-go-client/hris/asyncpassthrough"
	audittrail "github.com/merge-api/merge-go-client/hris/audittrail"
	availableactions "github.com/merge-api/merge-go-client/hris/availableactions"
	bankinfo "github.com/merge-api/merge-go-client/hris/bankinfo"
	benefits "github.com/merge-api/merge-go-client/hris/benefits"
	companies "github.com/merge-api/merge-go-client/hris/companies"
	deleteaccount "github.com/merge-api/merge-go-client/hris/deleteaccount"
	dependents "github.com/merge-api/merge-go-client/hris/dependents"
	employeepayrollruns "github.com/merge-api/merge-go-client/hris/employeepayrollruns"
	employees "github.com/merge-api/merge-go-client/hris/employees"
	employerbenefits "github.com/merge-api/merge-go-client/hris/employerbenefits"
	employments "github.com/merge-api/merge-go-client/hris/employments"
	forceresync "github.com/merge-api/merge-go-client/hris/forceresync"
	generatekey "github.com/merge-api/merge-go-client/hris/generatekey"
	groups "github.com/merge-api/merge-go-client/hris/groups"
	issues "github.com/merge-api/merge-go-client/hris/issues"
	linkedaccounts "github.com/merge-api/merge-go-client/hris/linkedaccounts"
	linktoken "github.com/merge-api/merge-go-client/hris/linktoken"
	locations "github.com/merge-api/merge-go-client/hris/locations"
	passthrough "github.com/merge-api/merge-go-client/hris/passthrough"
	paygroups "github.com/merge-api/merge-go-client/hris/paygroups"
	payrollruns "github.com/merge-api/merge-go-client/hris/payrollruns"
	regeneratekey "github.com/merge-api/merge-go-client/hris/regeneratekey"
	selectivesync "github.com/merge-api/merge-go-client/hris/selectivesync"
	syncstatus "github.com/merge-api/merge-go-client/hris/syncstatus"
	teams "github.com/merge-api/merge-go-client/hris/teams"
	timeoff "github.com/merge-api/merge-go-client/hris/timeoff"
	timeoffbalances "github.com/merge-api/merge-go-client/hris/timeoffbalances"
	timesheetentries "github.com/merge-api/merge-go-client/hris/timesheetentries"
	webhookreceivers "github.com/merge-api/merge-go-client/hris/webhookreceivers"
	http "net/http"
)

type Client interface {
	AccountDetails() accountdetails.Client
	AccountToken() accounttoken.Client
	AsyncPassthrough() asyncpassthrough.Client
	AuditTrail() audittrail.Client
	AvailableActions() availableactions.Client
	BankInfo() bankinfo.Client
	Benefits() benefits.Client
	Companies() companies.Client
	DeleteAccount() deleteaccount.Client
	Dependents() dependents.Client
	EmployeePayrollRuns() employeepayrollruns.Client
	Employees() employees.Client
	EmployerBenefits() employerbenefits.Client
	Employments() employments.Client
	GenerateKey() generatekey.Client
	Groups() groups.Client
	Issues() issues.Client
	LinkToken() linktoken.Client
	LinkedAccounts() linkedaccounts.Client
	Locations() locations.Client
	Passthrough() passthrough.Client
	PayGroups() paygroups.Client
	PayrollRuns() payrollruns.Client
	RegenerateKey() regeneratekey.Client
	SelectiveSync() selectivesync.Client
	SyncStatus() syncstatus.Client
	ForceResync() forceresync.Client
	Teams() teams.Client
	TimeOff() timeoff.Client
	TimeOffBalances() timeoffbalances.Client
	TimesheetEntries() timesheetentries.Client
	WebhookReceivers() webhookreceivers.Client
}

func NewClient(opts ...core.ClientOption) Client {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &client{
		baseURL:                   options.BaseURL,
		httpClient:                options.HTTPClient,
		header:                    options.ToHeader(),
		accountDetailsClient:      accountdetails.NewClient(opts...),
		accountTokenClient:        accounttoken.NewClient(opts...),
		asyncPassthroughClient:    asyncpassthrough.NewClient(opts...),
		auditTrailClient:          audittrail.NewClient(opts...),
		availableActionsClient:    availableactions.NewClient(opts...),
		bankInfoClient:            bankinfo.NewClient(opts...),
		benefitsClient:            benefits.NewClient(opts...),
		companiesClient:           companies.NewClient(opts...),
		deleteAccountClient:       deleteaccount.NewClient(opts...),
		dependentsClient:          dependents.NewClient(opts...),
		employeePayrollRunsClient: employeepayrollruns.NewClient(opts...),
		employeesClient:           employees.NewClient(opts...),
		employerBenefitsClient:    employerbenefits.NewClient(opts...),
		employmentsClient:         employments.NewClient(opts...),
		generateKeyClient:         generatekey.NewClient(opts...),
		groupsClient:              groups.NewClient(opts...),
		issuesClient:              issues.NewClient(opts...),
		linkTokenClient:           linktoken.NewClient(opts...),
		linkedAccountsClient:      linkedaccounts.NewClient(opts...),
		locationsClient:           locations.NewClient(opts...),
		passthroughClient:         passthrough.NewClient(opts...),
		payGroupsClient:           paygroups.NewClient(opts...),
		payrollRunsClient:         payrollruns.NewClient(opts...),
		regenerateKeyClient:       regeneratekey.NewClient(opts...),
		selectiveSyncClient:       selectivesync.NewClient(opts...),
		syncStatusClient:          syncstatus.NewClient(opts...),
		forceResyncClient:         forceresync.NewClient(opts...),
		teamsClient:               teams.NewClient(opts...),
		timeOffClient:             timeoff.NewClient(opts...),
		timeOffBalancesClient:     timeoffbalances.NewClient(opts...),
		timesheetEntriesClient:    timesheetentries.NewClient(opts...),
		webhookReceiversClient:    webhookreceivers.NewClient(opts...),
	}
}

type client struct {
	baseURL                   string
	httpClient                core.HTTPClient
	header                    http.Header
	accountDetailsClient      accountdetails.Client
	accountTokenClient        accounttoken.Client
	asyncPassthroughClient    asyncpassthrough.Client
	auditTrailClient          audittrail.Client
	availableActionsClient    availableactions.Client
	bankInfoClient            bankinfo.Client
	benefitsClient            benefits.Client
	companiesClient           companies.Client
	deleteAccountClient       deleteaccount.Client
	dependentsClient          dependents.Client
	employeePayrollRunsClient employeepayrollruns.Client
	employeesClient           employees.Client
	employerBenefitsClient    employerbenefits.Client
	employmentsClient         employments.Client
	generateKeyClient         generatekey.Client
	groupsClient              groups.Client
	issuesClient              issues.Client
	linkTokenClient           linktoken.Client
	linkedAccountsClient      linkedaccounts.Client
	locationsClient           locations.Client
	passthroughClient         passthrough.Client
	payGroupsClient           paygroups.Client
	payrollRunsClient         payrollruns.Client
	regenerateKeyClient       regeneratekey.Client
	selectiveSyncClient       selectivesync.Client
	syncStatusClient          syncstatus.Client
	forceResyncClient         forceresync.Client
	teamsClient               teams.Client
	timeOffClient             timeoff.Client
	timeOffBalancesClient     timeoffbalances.Client
	timesheetEntriesClient    timesheetentries.Client
	webhookReceiversClient    webhookreceivers.Client
}

func (c *client) AccountDetails() accountdetails.Client {
	return c.accountDetailsClient
}

func (c *client) AccountToken() accounttoken.Client {
	return c.accountTokenClient
}

func (c *client) AsyncPassthrough() asyncpassthrough.Client {
	return c.asyncPassthroughClient
}

func (c *client) AuditTrail() audittrail.Client {
	return c.auditTrailClient
}

func (c *client) AvailableActions() availableactions.Client {
	return c.availableActionsClient
}

func (c *client) BankInfo() bankinfo.Client {
	return c.bankInfoClient
}

func (c *client) Benefits() benefits.Client {
	return c.benefitsClient
}

func (c *client) Companies() companies.Client {
	return c.companiesClient
}

func (c *client) DeleteAccount() deleteaccount.Client {
	return c.deleteAccountClient
}

func (c *client) Dependents() dependents.Client {
	return c.dependentsClient
}

func (c *client) EmployeePayrollRuns() employeepayrollruns.Client {
	return c.employeePayrollRunsClient
}

func (c *client) Employees() employees.Client {
	return c.employeesClient
}

func (c *client) EmployerBenefits() employerbenefits.Client {
	return c.employerBenefitsClient
}

func (c *client) Employments() employments.Client {
	return c.employmentsClient
}

func (c *client) GenerateKey() generatekey.Client {
	return c.generateKeyClient
}

func (c *client) Groups() groups.Client {
	return c.groupsClient
}

func (c *client) Issues() issues.Client {
	return c.issuesClient
}

func (c *client) LinkToken() linktoken.Client {
	return c.linkTokenClient
}

func (c *client) LinkedAccounts() linkedaccounts.Client {
	return c.linkedAccountsClient
}

func (c *client) Locations() locations.Client {
	return c.locationsClient
}

func (c *client) Passthrough() passthrough.Client {
	return c.passthroughClient
}

func (c *client) PayGroups() paygroups.Client {
	return c.payGroupsClient
}

func (c *client) PayrollRuns() payrollruns.Client {
	return c.payrollRunsClient
}

func (c *client) RegenerateKey() regeneratekey.Client {
	return c.regenerateKeyClient
}

func (c *client) SelectiveSync() selectivesync.Client {
	return c.selectiveSyncClient
}

func (c *client) SyncStatus() syncstatus.Client {
	return c.syncStatusClient
}

func (c *client) ForceResync() forceresync.Client {
	return c.forceResyncClient
}

func (c *client) Teams() teams.Client {
	return c.teamsClient
}

func (c *client) TimeOff() timeoff.Client {
	return c.timeOffClient
}

func (c *client) TimeOffBalances() timeoffbalances.Client {
	return c.timeOffBalancesClient
}

func (c *client) TimesheetEntries() timesheetentries.Client {
	return c.timesheetEntriesClient
}

func (c *client) WebhookReceivers() webhookreceivers.Client {
	return c.webhookReceiversClient
}
