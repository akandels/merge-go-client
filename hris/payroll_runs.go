// This file was auto-generated by Fern from our API Definition.

package hris

import (
	json "encoding/json"
	fmt "fmt"
	strconv "strconv"
	time "time"
)

type PayrollRunsListRequest struct {
	// If provided, will only return objects created after this datetime.
	CreatedAfter *time.Time `json:"-"`
	// If provided, will only return objects created before this datetime.
	CreatedBefore *time.Time `json:"-"`
	// The pagination cursor value.
	Cursor *string `json:"-"`
	// If provided, will only return payroll runs ended after this datetime.
	EndedAfter *time.Time `json:"-"`
	// If provided, will only return payroll runs ended before this datetime.
	EndedBefore *time.Time `json:"-"`
	// Whether to include data that was marked as deleted by third party webhooks.
	IncludeDeletedData *bool `json:"-"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-"`
	// If provided, only objects synced by Merge after this date time will be returned.
	ModifiedAfter *time.Time `json:"-"`
	// If provided, only objects synced by Merge before this date time will be returned.
	ModifiedBefore *time.Time `json:"-"`
	// Number of results to return per page.
	PageSize *int `json:"-"`
	// Deprecated. Use show_enum_origins.
	RemoteFields *PayrollRunsListRequestRemoteFields `json:"-"`
	// The API provider's ID for the given object.
	RemoteId *string `json:"-"`
	// If provided, will only return PayrollRun's with this status. Options: ('REGULAR', 'OFF_CYCLE', 'CORRECTION', 'TERMINATION', 'SIGN_ON_BONUS')
	//
	// - `REGULAR` - REGULAR
	// - `OFF_CYCLE` - OFF_CYCLE
	// - `CORRECTION` - CORRECTION
	// - `TERMINATION` - TERMINATION
	// - `SIGN_ON_BONUS` - SIGN_ON_BONUS
	RunType *PayrollRunsListRequestRunType `json:"-"`
	// Which fields should be returned in non-normalized form.
	ShowEnumOrigins *PayrollRunsListRequestShowEnumOrigins `json:"-"`
	// If provided, will only return payroll runs started after this datetime.
	StartedAfter *time.Time `json:"-"`
	// If provided, will only return payroll runs started before this datetime.
	StartedBefore *time.Time `json:"-"`
}

type PayrollRunsRetrieveRequest struct {
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-"`
	// Deprecated. Use show_enum_origins.
	RemoteFields *PayrollRunsRetrieveRequestRemoteFields `json:"-"`
	// Which fields should be returned in non-normalized form.
	ShowEnumOrigins *PayrollRunsRetrieveRequestShowEnumOrigins `json:"-"`
}

type PayrollRunsListRequestRemoteFields uint

const (
	PayrollRunsListRequestRemoteFieldsRunState PayrollRunsListRequestRemoteFields = iota + 1
	PayrollRunsListRequestRemoteFieldsRunStateRunType
	PayrollRunsListRequestRemoteFieldsRunType
)

func (p PayrollRunsListRequestRemoteFields) String() string {
	switch p {
	default:
		return strconv.Itoa(int(p))
	case PayrollRunsListRequestRemoteFieldsRunState:
		return "run_state"
	case PayrollRunsListRequestRemoteFieldsRunStateRunType:
		return "run_state,run_type"
	case PayrollRunsListRequestRemoteFieldsRunType:
		return "run_type"
	}
}

func (p PayrollRunsListRequestRemoteFields) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", p.String())), nil
}

func (p *PayrollRunsListRequestRemoteFields) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "run_state":
		value := PayrollRunsListRequestRemoteFieldsRunState
		*p = value
	case "run_state,run_type":
		value := PayrollRunsListRequestRemoteFieldsRunStateRunType
		*p = value
	case "run_type":
		value := PayrollRunsListRequestRemoteFieldsRunType
		*p = value
	}
	return nil
}

type PayrollRunsListRequestRunType uint

const (
	PayrollRunsListRequestRunTypeCorrection PayrollRunsListRequestRunType = iota + 1
	PayrollRunsListRequestRunTypeOffCycle
	PayrollRunsListRequestRunTypeRegular
	PayrollRunsListRequestRunTypeSignOnBonus
	PayrollRunsListRequestRunTypeTermination
)

func (p PayrollRunsListRequestRunType) String() string {
	switch p {
	default:
		return strconv.Itoa(int(p))
	case PayrollRunsListRequestRunTypeCorrection:
		return "CORRECTION"
	case PayrollRunsListRequestRunTypeOffCycle:
		return "OFF_CYCLE"
	case PayrollRunsListRequestRunTypeRegular:
		return "REGULAR"
	case PayrollRunsListRequestRunTypeSignOnBonus:
		return "SIGN_ON_BONUS"
	case PayrollRunsListRequestRunTypeTermination:
		return "TERMINATION"
	}
}

func (p PayrollRunsListRequestRunType) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", p.String())), nil
}

func (p *PayrollRunsListRequestRunType) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "CORRECTION":
		value := PayrollRunsListRequestRunTypeCorrection
		*p = value
	case "OFF_CYCLE":
		value := PayrollRunsListRequestRunTypeOffCycle
		*p = value
	case "REGULAR":
		value := PayrollRunsListRequestRunTypeRegular
		*p = value
	case "SIGN_ON_BONUS":
		value := PayrollRunsListRequestRunTypeSignOnBonus
		*p = value
	case "TERMINATION":
		value := PayrollRunsListRequestRunTypeTermination
		*p = value
	}
	return nil
}

type PayrollRunsListRequestShowEnumOrigins uint

const (
	PayrollRunsListRequestShowEnumOriginsRunState PayrollRunsListRequestShowEnumOrigins = iota + 1
	PayrollRunsListRequestShowEnumOriginsRunStateRunType
	PayrollRunsListRequestShowEnumOriginsRunType
)

func (p PayrollRunsListRequestShowEnumOrigins) String() string {
	switch p {
	default:
		return strconv.Itoa(int(p))
	case PayrollRunsListRequestShowEnumOriginsRunState:
		return "run_state"
	case PayrollRunsListRequestShowEnumOriginsRunStateRunType:
		return "run_state,run_type"
	case PayrollRunsListRequestShowEnumOriginsRunType:
		return "run_type"
	}
}

func (p PayrollRunsListRequestShowEnumOrigins) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", p.String())), nil
}

func (p *PayrollRunsListRequestShowEnumOrigins) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "run_state":
		value := PayrollRunsListRequestShowEnumOriginsRunState
		*p = value
	case "run_state,run_type":
		value := PayrollRunsListRequestShowEnumOriginsRunStateRunType
		*p = value
	case "run_type":
		value := PayrollRunsListRequestShowEnumOriginsRunType
		*p = value
	}
	return nil
}

type PayrollRunsRetrieveRequestRemoteFields uint

const (
	PayrollRunsRetrieveRequestRemoteFieldsRunState PayrollRunsRetrieveRequestRemoteFields = iota + 1
	PayrollRunsRetrieveRequestRemoteFieldsRunStateRunType
	PayrollRunsRetrieveRequestRemoteFieldsRunType
)

func (p PayrollRunsRetrieveRequestRemoteFields) String() string {
	switch p {
	default:
		return strconv.Itoa(int(p))
	case PayrollRunsRetrieveRequestRemoteFieldsRunState:
		return "run_state"
	case PayrollRunsRetrieveRequestRemoteFieldsRunStateRunType:
		return "run_state,run_type"
	case PayrollRunsRetrieveRequestRemoteFieldsRunType:
		return "run_type"
	}
}

func (p PayrollRunsRetrieveRequestRemoteFields) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", p.String())), nil
}

func (p *PayrollRunsRetrieveRequestRemoteFields) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "run_state":
		value := PayrollRunsRetrieveRequestRemoteFieldsRunState
		*p = value
	case "run_state,run_type":
		value := PayrollRunsRetrieveRequestRemoteFieldsRunStateRunType
		*p = value
	case "run_type":
		value := PayrollRunsRetrieveRequestRemoteFieldsRunType
		*p = value
	}
	return nil
}

type PayrollRunsRetrieveRequestShowEnumOrigins uint

const (
	PayrollRunsRetrieveRequestShowEnumOriginsRunState PayrollRunsRetrieveRequestShowEnumOrigins = iota + 1
	PayrollRunsRetrieveRequestShowEnumOriginsRunStateRunType
	PayrollRunsRetrieveRequestShowEnumOriginsRunType
)

func (p PayrollRunsRetrieveRequestShowEnumOrigins) String() string {
	switch p {
	default:
		return strconv.Itoa(int(p))
	case PayrollRunsRetrieveRequestShowEnumOriginsRunState:
		return "run_state"
	case PayrollRunsRetrieveRequestShowEnumOriginsRunStateRunType:
		return "run_state,run_type"
	case PayrollRunsRetrieveRequestShowEnumOriginsRunType:
		return "run_type"
	}
}

func (p PayrollRunsRetrieveRequestShowEnumOrigins) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", p.String())), nil
}

func (p *PayrollRunsRetrieveRequestShowEnumOrigins) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "run_state":
		value := PayrollRunsRetrieveRequestShowEnumOriginsRunState
		*p = value
	case "run_state,run_type":
		value := PayrollRunsRetrieveRequestShowEnumOriginsRunStateRunType
		*p = value
	case "run_type":
		value := PayrollRunsRetrieveRequestShowEnumOriginsRunType
		*p = value
	}
	return nil
}
