// This file was auto-generated by Fern from our API Definition.

package ticketing

import (
	json "encoding/json"
	fmt "fmt"
	strconv "strconv"
	time "time"
)

type UsersListRequest struct {
	// If provided, will only return objects created after this datetime.
	CreatedAfter *time.Time `json:"-"`
	// If provided, will only return objects created before this datetime.
	CreatedBefore *time.Time `json:"-"`
	// The pagination cursor value.
	Cursor *string `json:"-"`
	// If provided, will only return users with emails equal to this value (case insensitive).
	EmailAddress *string `json:"-"`
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand *UsersListRequestExpand `json:"-"`
	// Whether to include data that was marked as deleted by third party webhooks.
	IncludeDeletedData *bool `json:"-"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-"`
	// If provided, only objects synced by Merge after this date time will be returned.
	ModifiedAfter *time.Time `json:"-"`
	// If provided, only objects synced by Merge before this date time will be returned.
	ModifiedBefore *time.Time `json:"-"`
	// Number of results to return per page.
	PageSize *int `json:"-"`
	// The API provider's ID for the given object.
	RemoteId *string `json:"-"`
}

type UsersRetrieveRequest struct {
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand *UsersRetrieveRequestExpand `json:"-"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-"`
}

type UsersListRequestExpand uint

const (
	UsersListRequestExpandRoles UsersListRequestExpand = iota + 1
	UsersListRequestExpandTeams
	UsersListRequestExpandTeamsRoles
)

func (u UsersListRequestExpand) String() string {
	switch u {
	default:
		return strconv.Itoa(int(u))
	case UsersListRequestExpandRoles:
		return "roles"
	case UsersListRequestExpandTeams:
		return "teams"
	case UsersListRequestExpandTeamsRoles:
		return "teams,roles"
	}
}

func (u UsersListRequestExpand) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", u.String())), nil
}

func (u *UsersListRequestExpand) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "roles":
		value := UsersListRequestExpandRoles
		*u = value
	case "teams":
		value := UsersListRequestExpandTeams
		*u = value
	case "teams,roles":
		value := UsersListRequestExpandTeamsRoles
		*u = value
	}
	return nil
}

type UsersRetrieveRequestExpand uint

const (
	UsersRetrieveRequestExpandRoles UsersRetrieveRequestExpand = iota + 1
	UsersRetrieveRequestExpandTeams
	UsersRetrieveRequestExpandTeamsRoles
)

func (u UsersRetrieveRequestExpand) String() string {
	switch u {
	default:
		return strconv.Itoa(int(u))
	case UsersRetrieveRequestExpandRoles:
		return "roles"
	case UsersRetrieveRequestExpandTeams:
		return "teams"
	case UsersRetrieveRequestExpandTeamsRoles:
		return "teams,roles"
	}
}

func (u UsersRetrieveRequestExpand) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", u.String())), nil
}

func (u *UsersRetrieveRequestExpand) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "roles":
		value := UsersRetrieveRequestExpandRoles
		*u = value
	case "teams":
		value := UsersRetrieveRequestExpandTeams
		*u = value
	case "teams,roles":
		value := UsersRetrieveRequestExpandTeamsRoles
		*u = value
	}
	return nil
}
