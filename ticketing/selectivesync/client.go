// This file was auto-generated by Fern from our API Definition.

package selectivesync

import (
	context "context"
	fmt "fmt"
	core "github.com/merge-api/merge-go-client/core"
	ticketing "github.com/merge-api/merge-go-client/ticketing"
	http "net/http"
	url "net/url"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header
}

func NewClient(opts ...core.ClientOption) *Client {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &Client{
		baseURL: options.BaseURL,
		caller:  core.NewCaller(options.HTTPClient),
		header:  options.ToHeader(),
	}
}

// Get a linked account's selective syncs.
func (c *Client) ConfigurationsList(ctx context.Context) ([]*ticketing.LinkedAccountSelectiveSyncConfiguration, error) {
	baseURL := "https://api.merge.dev/api"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "ticketing/v1/selective-sync/configurations"

	var response []*ticketing.LinkedAccountSelectiveSyncConfiguration
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:      endpointURL,
			Method:   http.MethodGet,
			Headers:  c.header,
			Response: &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Replace a linked account's selective syncs.
func (c *Client) ConfigurationsUpdate(ctx context.Context, request *ticketing.LinkedAccountSelectiveSyncConfigurationListRequest) ([]*ticketing.LinkedAccountSelectiveSyncConfiguration, error) {
	baseURL := "https://api.merge.dev/api"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "ticketing/v1/selective-sync/configurations"

	var response []*ticketing.LinkedAccountSelectiveSyncConfiguration
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:      endpointURL,
			Method:   http.MethodPut,
			Headers:  c.header,
			Request:  request,
			Response: &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Get metadata for the conditions available to a linked account.
func (c *Client) MetaList(ctx context.Context, request *ticketing.SelectiveSyncMetaListRequest) (*ticketing.PaginatedConditionSchemaList, error) {
	baseURL := "https://api.merge.dev/api"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "ticketing/v1/selective-sync/meta"

	queryParams := make(url.Values)
	if request.CommonModel != nil {
		queryParams.Add("common_model", fmt.Sprintf("%v", *request.CommonModel))
	}
	if request.Cursor != nil {
		queryParams.Add("cursor", fmt.Sprintf("%v", *request.Cursor))
	}
	if request.PageSize != nil {
		queryParams.Add("page_size", fmt.Sprintf("%v", *request.PageSize))
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	var response *ticketing.PaginatedConditionSchemaList
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:      endpointURL,
			Method:   http.MethodGet,
			Headers:  c.header,
			Response: &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
