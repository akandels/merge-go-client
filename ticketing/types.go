// This file was auto-generated by Fern from our API Definition.

package ticketing

import (
	json "encoding/json"
	fmt "fmt"
	strconv "strconv"
	time "time"
)

// * `PRIVATE` - PRIVATE
// * `COMPANY` - COMPANY
// * `PUBLIC` - PUBLIC
type AccessLevelEnum uint

const (
	AccessLevelEnumPrivate AccessLevelEnum = iota + 1
	AccessLevelEnumCompany
	AccessLevelEnumPublic
)

func (a AccessLevelEnum) String() string {
	switch a {
	default:
		return strconv.Itoa(int(a))
	case AccessLevelEnumPrivate:
		return "PRIVATE"
	case AccessLevelEnumCompany:
		return "COMPANY"
	case AccessLevelEnumPublic:
		return "PUBLIC"
	}
}

func (a AccessLevelEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", a.String())), nil
}

func (a *AccessLevelEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "PRIVATE":
		value := AccessLevelEnumPrivate
		*a = value
	case "COMPANY":
		value := AccessLevelEnumCompany
		*a = value
	case "PUBLIC":
		value := AccessLevelEnumPublic
		*a = value
	}
	return nil
}

// # The Account Object
// ### Description
// The `Account` object is used to represent the account that a ticket is associated with.
//
// The account is a company that may be a customer. This does not represent the company that is receiving the ticket.
//
// ### Usage Example
// TODO
type Account struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The account's name.
	Name *string `json:"name,omitempty"`
	// The account's domain names.
	Domains []*string `json:"domains,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted *bool      `json:"remote_was_deleted,omitempty"`
	CreatedAt        *time.Time `json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt    *time.Time     `json:"modified_at,omitempty"`
	FieldMappings map[string]any `json:"field_mappings,omitempty"`
	RemoteData    []*RemoteData  `json:"remote_data,omitempty"`
}

type AccountDetails struct {
	Id                      *string       `json:"id,omitempty"`
	Integration             *string       `json:"integration,omitempty"`
	IntegrationSlug         *string       `json:"integration_slug,omitempty"`
	Category                *CategoryEnum `json:"category,omitempty"`
	EndUserOriginId         *string       `json:"end_user_origin_id,omitempty"`
	EndUserOrganizationName *string       `json:"end_user_organization_name,omitempty"`
	EndUserEmailAddress     *string       `json:"end_user_email_address,omitempty"`
	Status                  *string       `json:"status,omitempty"`
	WebhookListenerUrl      *string       `json:"webhook_listener_url,omitempty"`
	// Whether a Production Linked Account's credentials match another existing Production Linked Account. This field is `null` for Test Linked Accounts, incomplete Production Linked Accounts, and ignored duplicate Production Linked Account sets.
	IsDuplicate *bool   `json:"is_duplicate,omitempty"`
	AccountType *string `json:"account_type,omitempty"`
}

// # The LinkedAccount Object
// ### Description
// The `LinkedAccount` object is used to represent an end user's link with a specific integration.
//
// ### Usage Example
// View a list of your organization's `LinkedAccount` objects.
type AccountDetailsAndActions struct {
	Id                      string                             `json:"id"`
	Category                *CategoryEnum                      `json:"category,omitempty"`
	Status                  AccountDetailsAndActionsStatusEnum `json:"status,omitempty"`
	StatusDetail            *string                            `json:"status_detail,omitempty"`
	EndUserOriginId         *string                            `json:"end_user_origin_id,omitempty"`
	EndUserOrganizationName string                             `json:"end_user_organization_name"`
	EndUserEmailAddress     string                             `json:"end_user_email_address"`
	WebhookListenerUrl      string                             `json:"webhook_listener_url"`
	// Whether a Production Linked Account's credentials match another existing Production Linked Account. This field is `null` for Test Linked Accounts, incomplete Production Linked Accounts, and ignored duplicate Production Linked Account sets.
	IsDuplicate *bool                                `json:"is_duplicate,omitempty"`
	Integration *AccountDetailsAndActionsIntegration `json:"integration,omitempty"`
	AccountType string                               `json:"account_type"`
}

type AccountDetailsAndActionsIntegration struct {
	Name                     string            `json:"name"`
	Categories               []CategoriesEnum  `json:"categories,omitempty"`
	Image                    *string           `json:"image,omitempty"`
	SquareImage              *string           `json:"square_image,omitempty"`
	Color                    string            `json:"color"`
	Slug                     string            `json:"slug"`
	PassthroughAvailable     bool              `json:"passthrough_available"`
	AvailableModelOperations []*ModelOperation `json:"available_model_operations,omitempty"`
}

// * `COMPLETE` - COMPLETE
// * `INCOMPLETE` - INCOMPLETE
// * `RELINK_NEEDED` - RELINK_NEEDED
type AccountDetailsAndActionsStatusEnum uint

const (
	AccountDetailsAndActionsStatusEnumComplete AccountDetailsAndActionsStatusEnum = iota + 1
	AccountDetailsAndActionsStatusEnumIncomplete
	AccountDetailsAndActionsStatusEnumRelinkNeeded
)

func (a AccountDetailsAndActionsStatusEnum) String() string {
	switch a {
	default:
		return strconv.Itoa(int(a))
	case AccountDetailsAndActionsStatusEnumComplete:
		return "COMPLETE"
	case AccountDetailsAndActionsStatusEnumIncomplete:
		return "INCOMPLETE"
	case AccountDetailsAndActionsStatusEnumRelinkNeeded:
		return "RELINK_NEEDED"
	}
}

func (a AccountDetailsAndActionsStatusEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", a.String())), nil
}

func (a *AccountDetailsAndActionsStatusEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "COMPLETE":
		value := AccountDetailsAndActionsStatusEnumComplete
		*a = value
	case "INCOMPLETE":
		value := AccountDetailsAndActionsStatusEnumIncomplete
		*a = value
	case "RELINK_NEEDED":
		value := AccountDetailsAndActionsStatusEnumRelinkNeeded
		*a = value
	}
	return nil
}

type AccountIntegration struct {
	// Company name.
	Name string `json:"name"`
	// Category or categories this integration belongs to. Multiple categories should be comma separated, i.e. [ats, hris].
	Categories []CategoriesEnum `json:"categories,omitempty"`
	// Company logo in rectangular shape. <b>Upload an image with a clear background.</b>
	Image *string `json:"image,omitempty"`
	// Company logo in square shape. <b>Upload an image with a white background.</b>
	SquareImage *string `json:"square_image,omitempty"`
	// The color of this integration used for buttons and text throughout the app and landing pages. <b>Choose a darker, saturated color.</b>
	Color *string `json:"color,omitempty"`
	Slug  *string `json:"slug,omitempty"`
	// If checked, this integration will not appear in the linking flow, and will appear elsewhere with a Beta tag.
	IsInBeta *bool `json:"is_in_beta,omitempty"`
	// Mapping of API endpoints to documentation urls for support. Example: {'GET': [['/common-model-scopes', 'https://docs.merge.dev/accounting/common-model-scopes/#common_model_scopes_retrieve'],['/common-model-actions', 'https://docs.merge.dev/accounting/common-model-actions/#common_model_actions_retrieve']], 'POST': []}
	ApiEndpointsToDocumentationUrls map[string]any `json:"api_endpoints_to_documentation_urls,omitempty"`
	// Setup guide URL for third party webhook creation. Exposed in Merge Docs.
	WebhookSetupGuideUrl *string `json:"webhook_setup_guide_url,omitempty"`
}

type AccountToken struct {
	AccountToken string              `json:"account_token"`
	Integration  *AccountIntegration `json:"integration,omitempty"`
}

type AsyncPassthroughReciept struct {
	AsyncPassthroughReceiptId string `json:"async_passthrough_receipt_id"`
}

// # The Attachment Object
// ### Description
// The `Attachment` object is used to represent an attachment for a ticket.
//
// ### Usage Example
// TODO
type Attachment struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The attachment's name. It is required to include the file extension in the attachment's name.
	FileName *string `json:"file_name,omitempty"`
	// The ticket associated with the attachment.
	Ticket *AttachmentTicket `json:"ticket,omitempty"`
	// The attachment's url. It is required to include the file extension in the file's URL.
	FileUrl *string `json:"file_url,omitempty"`
	// The attachment's file format.
	ContentType *string `json:"content_type,omitempty"`
	// The user who uploaded the attachment.
	UploadedBy *string `json:"uploaded_by,omitempty"`
	// When the third party's attachment was created.
	RemoteCreatedAt  *time.Time `json:"remote_created_at,omitempty"`
	RemoteWasDeleted *bool      `json:"remote_was_deleted,omitempty"`
	CreatedAt        *time.Time `json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt    *time.Time     `json:"modified_at,omitempty"`
	FieldMappings map[string]any `json:"field_mappings,omitempty"`
	RemoteData    []*RemoteData  `json:"remote_data,omitempty"`
}

// # The Attachment Object
// ### Description
// The `Attachment` object is used to represent an attachment for a ticket.
//
// ### Usage Example
// TODO
type AttachmentRequest struct {
	// The attachment's name. It is required to include the file extension in the attachment's name.
	FileName *string `json:"file_name,omitempty"`
	// The ticket associated with the attachment.
	Ticket *AttachmentRequestTicket `json:"ticket,omitempty"`
	// The attachment's url. It is required to include the file extension in the file's URL.
	FileUrl *string `json:"file_url,omitempty"`
	// The attachment's file format.
	ContentType *string `json:"content_type,omitempty"`
	// The user who uploaded the attachment.
	UploadedBy          *string        `json:"uploaded_by,omitempty"`
	IntegrationParams   map[string]any `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]any `json:"linked_account_params,omitempty"`
}

// The ticket associated with the attachment.
type AttachmentRequestTicket struct {
	typeName string
	String   string
	Ticket   *Ticket
}

func NewAttachmentRequestTicketFromString(value string) *AttachmentRequestTicket {
	return &AttachmentRequestTicket{typeName: "string", String: value}
}

func NewAttachmentRequestTicketFromTicket(value *Ticket) *AttachmentRequestTicket {
	return &AttachmentRequestTicket{typeName: "ticket", Ticket: value}
}

func (a *AttachmentRequestTicket) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	valueTicket := new(Ticket)
	if err := json.Unmarshal(data, &valueTicket); err == nil {
		a.typeName = "ticket"
		a.Ticket = valueTicket
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AttachmentRequestTicket) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return json.Marshal(a.String)
	case "ticket":
		return json.Marshal(a.Ticket)
	}
}

type AttachmentRequestTicketVisitor interface {
	VisitString(string) error
	VisitTicket(*Ticket) error
}

func (a *AttachmentRequestTicket) Accept(visitor AttachmentRequestTicketVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return visitor.VisitString(a.String)
	case "ticket":
		return visitor.VisitTicket(a.Ticket)
	}
}

// The ticket associated with the attachment.
type AttachmentTicket struct {
	typeName string
	String   string
	Ticket   *Ticket
}

func NewAttachmentTicketFromString(value string) *AttachmentTicket {
	return &AttachmentTicket{typeName: "string", String: value}
}

func NewAttachmentTicketFromTicket(value *Ticket) *AttachmentTicket {
	return &AttachmentTicket{typeName: "ticket", Ticket: value}
}

func (a *AttachmentTicket) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	valueTicket := new(Ticket)
	if err := json.Unmarshal(data, &valueTicket); err == nil {
		a.typeName = "ticket"
		a.Ticket = valueTicket
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AttachmentTicket) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return json.Marshal(a.String)
	case "ticket":
		return json.Marshal(a.Ticket)
	}
}

type AttachmentTicketVisitor interface {
	VisitString(string) error
	VisitTicket(*Ticket) error
}

func (a *AttachmentTicket) Accept(visitor AttachmentTicketVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return visitor.VisitString(a.String)
	case "ticket":
		return visitor.VisitTicket(a.Ticket)
	}
}

type AuditLogEvent struct {
	Id *string `json:"id,omitempty"`
	// The User's full name at the time of this Event occurring.
	UserName *string `json:"user_name,omitempty"`
	// The User's email at the time of this Event occurring.
	UserEmail *string `json:"user_email,omitempty"`
	// Designates the role of the user (or SYSTEM/API if action not taken by a user) at the time of this Event occurring.
	//
	// * `ADMIN` - ADMIN
	// * `DEVELOPER` - DEVELOPER
	// * `MEMBER` - MEMBER
	// * `API` - API
	// * `SYSTEM` - SYSTEM
	// * `MERGE_TEAM` - MERGE_TEAM
	Role      *AuditLogEventRole `json:"role,omitempty"`
	IpAddress string             `json:"ip_address"`
	// Designates the type of event that occurred.
	//
	// * `CREATED_REMOTE_PRODUCTION_API_KEY` - CREATED_REMOTE_PRODUCTION_API_KEY
	// * `DELETED_REMOTE_PRODUCTION_API_KEY` - DELETED_REMOTE_PRODUCTION_API_KEY
	// * `CREATED_TEST_API_KEY` - CREATED_TEST_API_KEY
	// * `DELETED_TEST_API_KEY` - DELETED_TEST_API_KEY
	// * `REGENERATED_PRODUCTION_API_KEY` - REGENERATED_PRODUCTION_API_KEY
	// * `INVITED_USER` - INVITED_USER
	// * `TWO_FACTOR_AUTH_ENABLED` - TWO_FACTOR_AUTH_ENABLED
	// * `TWO_FACTOR_AUTH_DISABLED` - TWO_FACTOR_AUTH_DISABLED
	// * `DELETED_LINKED_ACCOUNT` - DELETED_LINKED_ACCOUNT
	// * `CREATED_DESTINATION` - CREATED_DESTINATION
	// * `DELETED_DESTINATION` - DELETED_DESTINATION
	// * `CHANGED_SCOPES` - CHANGED_SCOPES
	// * `CHANGED_PERSONAL_INFORMATION` - CHANGED_PERSONAL_INFORMATION
	// * `CHANGED_ORGANIZATION_SETTINGS` - CHANGED_ORGANIZATION_SETTINGS
	// * `ENABLED_INTEGRATION` - ENABLED_INTEGRATION
	// * `DISABLED_INTEGRATION` - DISABLED_INTEGRATION
	// * `ENABLED_CATEGORY` - ENABLED_CATEGORY
	// * `DISABLED_CATEGORY` - DISABLED_CATEGORY
	// * `CHANGED_PASSWORD` - CHANGED_PASSWORD
	// * `RESET_PASSWORD` - RESET_PASSWORD
	// * `ENABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION` - ENABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION
	// * `ENABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT` - ENABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT
	// * `DISABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION` - DISABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION
	// * `DISABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT` - DISABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT
	// * `CREATED_INTEGRATION_WIDE_FIELD_MAPPING` - CREATED_INTEGRATION_WIDE_FIELD_MAPPING
	// * `CREATED_LINKED_ACCOUNT_FIELD_MAPPING` - CREATED_LINKED_ACCOUNT_FIELD_MAPPING
	// * `CHANGED_INTEGRATION_WIDE_FIELD_MAPPING` - CHANGED_INTEGRATION_WIDE_FIELD_MAPPING
	// * `CHANGED_LINKED_ACCOUNT_FIELD_MAPPING` - CHANGED_LINKED_ACCOUNT_FIELD_MAPPING
	// * `DELETED_INTEGRATION_WIDE_FIELD_MAPPING` - DELETED_INTEGRATION_WIDE_FIELD_MAPPING
	// * `DELETED_LINKED_ACCOUNT_FIELD_MAPPING` - DELETED_LINKED_ACCOUNT_FIELD_MAPPING
	EventType        *AuditLogEventEventType `json:"event_type,omitempty"`
	EventDescription string                  `json:"event_description"`
	CreatedAt        *time.Time              `json:"created_at,omitempty"`
}

// Designates the type of event that occurred.
//
// * `CREATED_REMOTE_PRODUCTION_API_KEY` - CREATED_REMOTE_PRODUCTION_API_KEY
// * `DELETED_REMOTE_PRODUCTION_API_KEY` - DELETED_REMOTE_PRODUCTION_API_KEY
// * `CREATED_TEST_API_KEY` - CREATED_TEST_API_KEY
// * `DELETED_TEST_API_KEY` - DELETED_TEST_API_KEY
// * `REGENERATED_PRODUCTION_API_KEY` - REGENERATED_PRODUCTION_API_KEY
// * `INVITED_USER` - INVITED_USER
// * `TWO_FACTOR_AUTH_ENABLED` - TWO_FACTOR_AUTH_ENABLED
// * `TWO_FACTOR_AUTH_DISABLED` - TWO_FACTOR_AUTH_DISABLED
// * `DELETED_LINKED_ACCOUNT` - DELETED_LINKED_ACCOUNT
// * `CREATED_DESTINATION` - CREATED_DESTINATION
// * `DELETED_DESTINATION` - DELETED_DESTINATION
// * `CHANGED_SCOPES` - CHANGED_SCOPES
// * `CHANGED_PERSONAL_INFORMATION` - CHANGED_PERSONAL_INFORMATION
// * `CHANGED_ORGANIZATION_SETTINGS` - CHANGED_ORGANIZATION_SETTINGS
// * `ENABLED_INTEGRATION` - ENABLED_INTEGRATION
// * `DISABLED_INTEGRATION` - DISABLED_INTEGRATION
// * `ENABLED_CATEGORY` - ENABLED_CATEGORY
// * `DISABLED_CATEGORY` - DISABLED_CATEGORY
// * `CHANGED_PASSWORD` - CHANGED_PASSWORD
// * `RESET_PASSWORD` - RESET_PASSWORD
// * `ENABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION` - ENABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION
// * `ENABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT` - ENABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT
// * `DISABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION` - DISABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION
// * `DISABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT` - DISABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT
// * `CREATED_INTEGRATION_WIDE_FIELD_MAPPING` - CREATED_INTEGRATION_WIDE_FIELD_MAPPING
// * `CREATED_LINKED_ACCOUNT_FIELD_MAPPING` - CREATED_LINKED_ACCOUNT_FIELD_MAPPING
// * `CHANGED_INTEGRATION_WIDE_FIELD_MAPPING` - CHANGED_INTEGRATION_WIDE_FIELD_MAPPING
// * `CHANGED_LINKED_ACCOUNT_FIELD_MAPPING` - CHANGED_LINKED_ACCOUNT_FIELD_MAPPING
// * `DELETED_INTEGRATION_WIDE_FIELD_MAPPING` - DELETED_INTEGRATION_WIDE_FIELD_MAPPING
// * `DELETED_LINKED_ACCOUNT_FIELD_MAPPING` - DELETED_LINKED_ACCOUNT_FIELD_MAPPING
type AuditLogEventEventType struct {
	typeName      string
	EventTypeEnum EventTypeEnum
	String        string
}

func NewAuditLogEventEventTypeFromEventTypeEnum(value EventTypeEnum) *AuditLogEventEventType {
	return &AuditLogEventEventType{typeName: "eventTypeEnum", EventTypeEnum: value}
}

func NewAuditLogEventEventTypeFromString(value string) *AuditLogEventEventType {
	return &AuditLogEventEventType{typeName: "string", String: value}
}

func (a *AuditLogEventEventType) UnmarshalJSON(data []byte) error {
	var valueEventTypeEnum EventTypeEnum
	if err := json.Unmarshal(data, &valueEventTypeEnum); err == nil {
		a.typeName = "eventTypeEnum"
		a.EventTypeEnum = valueEventTypeEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AuditLogEventEventType) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "eventTypeEnum":
		return json.Marshal(a.EventTypeEnum)
	case "string":
		return json.Marshal(a.String)
	}
}

type AuditLogEventEventTypeVisitor interface {
	VisitEventTypeEnum(EventTypeEnum) error
	VisitString(string) error
}

func (a *AuditLogEventEventType) Accept(visitor AuditLogEventEventTypeVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "eventTypeEnum":
		return visitor.VisitEventTypeEnum(a.EventTypeEnum)
	case "string":
		return visitor.VisitString(a.String)
	}
}

// Designates the role of the user (or SYSTEM/API if action not taken by a user) at the time of this Event occurring.
//
// * `ADMIN` - ADMIN
// * `DEVELOPER` - DEVELOPER
// * `MEMBER` - MEMBER
// * `API` - API
// * `SYSTEM` - SYSTEM
// * `MERGE_TEAM` - MERGE_TEAM
type AuditLogEventRole struct {
	typeName string
	RoleEnum RoleEnum
	String   string
}

func NewAuditLogEventRoleFromRoleEnum(value RoleEnum) *AuditLogEventRole {
	return &AuditLogEventRole{typeName: "roleEnum", RoleEnum: value}
}

func NewAuditLogEventRoleFromString(value string) *AuditLogEventRole {
	return &AuditLogEventRole{typeName: "string", String: value}
}

func (a *AuditLogEventRole) UnmarshalJSON(data []byte) error {
	var valueRoleEnum RoleEnum
	if err := json.Unmarshal(data, &valueRoleEnum); err == nil {
		a.typeName = "roleEnum"
		a.RoleEnum = valueRoleEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AuditLogEventRole) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "roleEnum":
		return json.Marshal(a.RoleEnum)
	case "string":
		return json.Marshal(a.String)
	}
}

type AuditLogEventRoleVisitor interface {
	VisitRoleEnum(RoleEnum) error
	VisitString(string) error
}

func (a *AuditLogEventRole) Accept(visitor AuditLogEventRoleVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "roleEnum":
		return visitor.VisitRoleEnum(a.RoleEnum)
	case "string":
		return visitor.VisitString(a.String)
	}
}

// # The AvailableActions Object
// ### Description
// The `Activity` object is used to see all available model/operation combinations for an integration.
//
// ### Usage Example
// Fetch all the actions available for the `Zenefits` integration.
type AvailableActions struct {
	Integration              *AccountIntegration `json:"integration,omitempty"`
	PassthroughAvailable     bool                `json:"passthrough_available"`
	AvailableModelOperations []*ModelOperation   `json:"available_model_operations,omitempty"`
}

// * `hris` - hris
// * `ats` - ats
// * `accounting` - accounting
// * `ticketing` - ticketing
// * `crm` - crm
// * `mktg` - mktg
// * `filestorage` - filestorage
type CategoriesEnum uint

const (
	CategoriesEnumHris CategoriesEnum = iota + 1
	CategoriesEnumAts
	CategoriesEnumAccounting
	CategoriesEnumTicketing
	CategoriesEnumCrm
	CategoriesEnumMktg
	CategoriesEnumFilestorage
)

func (c CategoriesEnum) String() string {
	switch c {
	default:
		return strconv.Itoa(int(c))
	case CategoriesEnumHris:
		return "hris"
	case CategoriesEnumAts:
		return "ats"
	case CategoriesEnumAccounting:
		return "accounting"
	case CategoriesEnumTicketing:
		return "ticketing"
	case CategoriesEnumCrm:
		return "crm"
	case CategoriesEnumMktg:
		return "mktg"
	case CategoriesEnumFilestorage:
		return "filestorage"
	}
}

func (c CategoriesEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", c.String())), nil
}

func (c *CategoriesEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "hris":
		value := CategoriesEnumHris
		*c = value
	case "ats":
		value := CategoriesEnumAts
		*c = value
	case "accounting":
		value := CategoriesEnumAccounting
		*c = value
	case "ticketing":
		value := CategoriesEnumTicketing
		*c = value
	case "crm":
		value := CategoriesEnumCrm
		*c = value
	case "mktg":
		value := CategoriesEnumMktg
		*c = value
	case "filestorage":
		value := CategoriesEnumFilestorage
		*c = value
	}
	return nil
}

// * `hris` - hris
// * `ats` - ats
// * `accounting` - accounting
// * `ticketing` - ticketing
// * `crm` - crm
// * `mktg` - mktg
// * `filestorage` - filestorage
type CategoryEnum uint

const (
	CategoryEnumHris CategoryEnum = iota + 1
	CategoryEnumAts
	CategoryEnumAccounting
	CategoryEnumTicketing
	CategoryEnumCrm
	CategoryEnumMktg
	CategoryEnumFilestorage
)

func (c CategoryEnum) String() string {
	switch c {
	default:
		return strconv.Itoa(int(c))
	case CategoryEnumHris:
		return "hris"
	case CategoryEnumAts:
		return "ats"
	case CategoryEnumAccounting:
		return "accounting"
	case CategoryEnumTicketing:
		return "ticketing"
	case CategoryEnumCrm:
		return "crm"
	case CategoryEnumMktg:
		return "mktg"
	case CategoryEnumFilestorage:
		return "filestorage"
	}
}

func (c CategoryEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", c.String())), nil
}

func (c *CategoryEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "hris":
		value := CategoryEnumHris
		*c = value
	case "ats":
		value := CategoryEnumAts
		*c = value
	case "accounting":
		value := CategoryEnumAccounting
		*c = value
	case "ticketing":
		value := CategoryEnumTicketing
		*c = value
	case "crm":
		value := CategoryEnumCrm
		*c = value
	case "mktg":
		value := CategoryEnumMktg
		*c = value
	case "filestorage":
		value := CategoryEnumFilestorage
		*c = value
	}
	return nil
}

// # The Collection Object
// ### Description
// The `Collection` object is used to represent collections of tickets. Collections may include other collections as
// sub collections.
//
// ### Usage Example
// TODO
type Collection struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The collection's name.
	Name *string `json:"name,omitempty"`
	// The collection's description.
	Description *string `json:"description,omitempty"`
	// The collection's type.
	//
	// * `LIST` - LIST
	// * `PROJECT` - PROJECT
	CollectionType *CollectionCollectionType `json:"collection_type,omitempty"`
	// The parent collection for this collection.
	ParentCollection *CollectionParentCollection `json:"parent_collection,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted *bool `json:"remote_was_deleted,omitempty"`
	// The level of access a User has to the Collection and its sub-objects.
	//
	// * `PRIVATE` - PRIVATE
	// * `COMPANY` - COMPANY
	// * `PUBLIC` - PUBLIC
	AccessLevel *CollectionAccessLevel `json:"access_level,omitempty"`
	CreatedAt   *time.Time             `json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt    *time.Time     `json:"modified_at,omitempty"`
	FieldMappings map[string]any `json:"field_mappings,omitempty"`
	RemoteData    []*RemoteData  `json:"remote_data,omitempty"`
}

// The level of access a User has to the Collection and its sub-objects.
//
// * `PRIVATE` - PRIVATE
// * `COMPANY` - COMPANY
// * `PUBLIC` - PUBLIC
type CollectionAccessLevel struct {
	typeName        string
	AccessLevelEnum AccessLevelEnum
	String          string
}

func NewCollectionAccessLevelFromAccessLevelEnum(value AccessLevelEnum) *CollectionAccessLevel {
	return &CollectionAccessLevel{typeName: "accessLevelEnum", AccessLevelEnum: value}
}

func NewCollectionAccessLevelFromString(value string) *CollectionAccessLevel {
	return &CollectionAccessLevel{typeName: "string", String: value}
}

func (c *CollectionAccessLevel) UnmarshalJSON(data []byte) error {
	var valueAccessLevelEnum AccessLevelEnum
	if err := json.Unmarshal(data, &valueAccessLevelEnum); err == nil {
		c.typeName = "accessLevelEnum"
		c.AccessLevelEnum = valueAccessLevelEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CollectionAccessLevel) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "accessLevelEnum":
		return json.Marshal(c.AccessLevelEnum)
	case "string":
		return json.Marshal(c.String)
	}
}

type CollectionAccessLevelVisitor interface {
	VisitAccessLevelEnum(AccessLevelEnum) error
	VisitString(string) error
}

func (c *CollectionAccessLevel) Accept(visitor CollectionAccessLevelVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "accessLevelEnum":
		return visitor.VisitAccessLevelEnum(c.AccessLevelEnum)
	case "string":
		return visitor.VisitString(c.String)
	}
}

// The collection's type.
//
// * `LIST` - LIST
// * `PROJECT` - PROJECT
type CollectionCollectionType struct {
	typeName           string
	CollectionTypeEnum CollectionTypeEnum
	String             string
}

func NewCollectionCollectionTypeFromCollectionTypeEnum(value CollectionTypeEnum) *CollectionCollectionType {
	return &CollectionCollectionType{typeName: "collectionTypeEnum", CollectionTypeEnum: value}
}

func NewCollectionCollectionTypeFromString(value string) *CollectionCollectionType {
	return &CollectionCollectionType{typeName: "string", String: value}
}

func (c *CollectionCollectionType) UnmarshalJSON(data []byte) error {
	var valueCollectionTypeEnum CollectionTypeEnum
	if err := json.Unmarshal(data, &valueCollectionTypeEnum); err == nil {
		c.typeName = "collectionTypeEnum"
		c.CollectionTypeEnum = valueCollectionTypeEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CollectionCollectionType) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "collectionTypeEnum":
		return json.Marshal(c.CollectionTypeEnum)
	case "string":
		return json.Marshal(c.String)
	}
}

type CollectionCollectionTypeVisitor interface {
	VisitCollectionTypeEnum(CollectionTypeEnum) error
	VisitString(string) error
}

func (c *CollectionCollectionType) Accept(visitor CollectionCollectionTypeVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "collectionTypeEnum":
		return visitor.VisitCollectionTypeEnum(c.CollectionTypeEnum)
	case "string":
		return visitor.VisitString(c.String)
	}
}

// The parent collection for this collection.
type CollectionParentCollection struct {
	typeName   string
	String     string
	Collection *Collection
}

func NewCollectionParentCollectionFromString(value string) *CollectionParentCollection {
	return &CollectionParentCollection{typeName: "string", String: value}
}

func NewCollectionParentCollectionFromCollection(value *Collection) *CollectionParentCollection {
	return &CollectionParentCollection{typeName: "collection", Collection: value}
}

func (c *CollectionParentCollection) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	valueCollection := new(Collection)
	if err := json.Unmarshal(data, &valueCollection); err == nil {
		c.typeName = "collection"
		c.Collection = valueCollection
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CollectionParentCollection) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "collection":
		return json.Marshal(c.Collection)
	}
}

type CollectionParentCollectionVisitor interface {
	VisitString(string) error
	VisitCollection(*Collection) error
}

func (c *CollectionParentCollection) Accept(visitor CollectionParentCollectionVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return visitor.VisitString(c.String)
	case "collection":
		return visitor.VisitCollection(c.Collection)
	}
}

// * `LIST` - LIST
// * `PROJECT` - PROJECT
type CollectionTypeEnum uint

const (
	CollectionTypeEnumList CollectionTypeEnum = iota + 1
	CollectionTypeEnumProject
)

func (c CollectionTypeEnum) String() string {
	switch c {
	default:
		return strconv.Itoa(int(c))
	case CollectionTypeEnumList:
		return "LIST"
	case CollectionTypeEnumProject:
		return "PROJECT"
	}
}

func (c CollectionTypeEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", c.String())), nil
}

func (c *CollectionTypeEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "LIST":
		value := CollectionTypeEnumList
		*c = value
	case "PROJECT":
		value := CollectionTypeEnumProject
		*c = value
	}
	return nil
}

type CollectionsListRequestCollectionType uint

const (
	CollectionsListRequestCollectionTypeList CollectionsListRequestCollectionType = iota + 1
	CollectionsListRequestCollectionTypeProject
)

func (c CollectionsListRequestCollectionType) String() string {
	switch c {
	default:
		return strconv.Itoa(int(c))
	case CollectionsListRequestCollectionTypeList:
		return "LIST"
	case CollectionsListRequestCollectionTypeProject:
		return "PROJECT"
	}
}

func (c CollectionsListRequestCollectionType) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", c.String())), nil
}

func (c *CollectionsListRequestCollectionType) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "LIST":
		value := CollectionsListRequestCollectionTypeList
		*c = value
	case "PROJECT":
		value := CollectionsListRequestCollectionTypeProject
		*c = value
	}
	return nil
}

type CollectionsUsersListRequestExpand uint

const (
	CollectionsUsersListRequestExpandRoles CollectionsUsersListRequestExpand = iota + 1
	CollectionsUsersListRequestExpandTeams
	CollectionsUsersListRequestExpandTeamsRoles
)

func (c CollectionsUsersListRequestExpand) String() string {
	switch c {
	default:
		return strconv.Itoa(int(c))
	case CollectionsUsersListRequestExpandRoles:
		return "roles"
	case CollectionsUsersListRequestExpandTeams:
		return "teams"
	case CollectionsUsersListRequestExpandTeamsRoles:
		return "teams,roles"
	}
}

func (c CollectionsUsersListRequestExpand) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", c.String())), nil
}

func (c *CollectionsUsersListRequestExpand) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "roles":
		value := CollectionsUsersListRequestExpandRoles
		*c = value
	case "teams":
		value := CollectionsUsersListRequestExpandTeams
		*c = value
	case "teams,roles":
		value := CollectionsUsersListRequestExpandTeamsRoles
		*c = value
	}
	return nil
}

// # The Comment Object
// ### Description
// The `Comment` object is used to represent a comment on a ticket.
//
// ### Usage Example
// TODO
type Comment struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The author of the Comment, if the author is a User.
	User *CommentUser `json:"user,omitempty"`
	// The author of the Comment, if the author is a Contact.
	Contact *CommentContact `json:"contact,omitempty"`
	// The comment's text body.
	Body *string `json:"body,omitempty"`
	// The comment's text body formatted as html.
	HtmlBody *string `json:"html_body,omitempty"`
	// The ticket associated with the comment.
	Ticket *CommentTicket `json:"ticket,omitempty"`
	// Whether or not the comment is internal.
	IsPrivate *bool `json:"is_private,omitempty"`
	// When the third party's comment was created.
	RemoteCreatedAt  *time.Time `json:"remote_created_at,omitempty"`
	RemoteWasDeleted *bool      `json:"remote_was_deleted,omitempty"`
	CreatedAt        *time.Time `json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt    *time.Time     `json:"modified_at,omitempty"`
	FieldMappings map[string]any `json:"field_mappings,omitempty"`
	RemoteData    []*RemoteData  `json:"remote_data,omitempty"`
}

// The author of the Comment, if the author is a Contact.
type CommentContact struct {
	typeName string
	String   string
	Contact  *Contact
}

func NewCommentContactFromString(value string) *CommentContact {
	return &CommentContact{typeName: "string", String: value}
}

func NewCommentContactFromContact(value *Contact) *CommentContact {
	return &CommentContact{typeName: "contact", Contact: value}
}

func (c *CommentContact) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	valueContact := new(Contact)
	if err := json.Unmarshal(data, &valueContact); err == nil {
		c.typeName = "contact"
		c.Contact = valueContact
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CommentContact) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "contact":
		return json.Marshal(c.Contact)
	}
}

type CommentContactVisitor interface {
	VisitString(string) error
	VisitContact(*Contact) error
}

func (c *CommentContact) Accept(visitor CommentContactVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return visitor.VisitString(c.String)
	case "contact":
		return visitor.VisitContact(c.Contact)
	}
}

// # The Comment Object
// ### Description
// The `Comment` object is used to represent a comment on a ticket.
//
// ### Usage Example
// TODO
type CommentRequest struct {
	// The author of the Comment, if the author is a User.
	User *CommentRequestUser `json:"user,omitempty"`
	// The author of the Comment, if the author is a Contact.
	Contact *CommentRequestContact `json:"contact,omitempty"`
	// The comment's text body.
	Body *string `json:"body,omitempty"`
	// The comment's text body formatted as html.
	HtmlBody *string `json:"html_body,omitempty"`
	// The ticket associated with the comment.
	Ticket *CommentRequestTicket `json:"ticket,omitempty"`
	// Whether or not the comment is internal.
	IsPrivate           *bool          `json:"is_private,omitempty"`
	IntegrationParams   map[string]any `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]any `json:"linked_account_params,omitempty"`
}

// The author of the Comment, if the author is a Contact.
type CommentRequestContact struct {
	typeName string
	String   string
	Contact  *Contact
}

func NewCommentRequestContactFromString(value string) *CommentRequestContact {
	return &CommentRequestContact{typeName: "string", String: value}
}

func NewCommentRequestContactFromContact(value *Contact) *CommentRequestContact {
	return &CommentRequestContact{typeName: "contact", Contact: value}
}

func (c *CommentRequestContact) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	valueContact := new(Contact)
	if err := json.Unmarshal(data, &valueContact); err == nil {
		c.typeName = "contact"
		c.Contact = valueContact
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CommentRequestContact) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "contact":
		return json.Marshal(c.Contact)
	}
}

type CommentRequestContactVisitor interface {
	VisitString(string) error
	VisitContact(*Contact) error
}

func (c *CommentRequestContact) Accept(visitor CommentRequestContactVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return visitor.VisitString(c.String)
	case "contact":
		return visitor.VisitContact(c.Contact)
	}
}

// The ticket associated with the comment.
type CommentRequestTicket struct {
	typeName string
	String   string
	Ticket   *Ticket
}

func NewCommentRequestTicketFromString(value string) *CommentRequestTicket {
	return &CommentRequestTicket{typeName: "string", String: value}
}

func NewCommentRequestTicketFromTicket(value *Ticket) *CommentRequestTicket {
	return &CommentRequestTicket{typeName: "ticket", Ticket: value}
}

func (c *CommentRequestTicket) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	valueTicket := new(Ticket)
	if err := json.Unmarshal(data, &valueTicket); err == nil {
		c.typeName = "ticket"
		c.Ticket = valueTicket
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CommentRequestTicket) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "ticket":
		return json.Marshal(c.Ticket)
	}
}

type CommentRequestTicketVisitor interface {
	VisitString(string) error
	VisitTicket(*Ticket) error
}

func (c *CommentRequestTicket) Accept(visitor CommentRequestTicketVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return visitor.VisitString(c.String)
	case "ticket":
		return visitor.VisitTicket(c.Ticket)
	}
}

// The author of the Comment, if the author is a User.
type CommentRequestUser struct {
	typeName string
	String   string
	User     *User
}

func NewCommentRequestUserFromString(value string) *CommentRequestUser {
	return &CommentRequestUser{typeName: "string", String: value}
}

func NewCommentRequestUserFromUser(value *User) *CommentRequestUser {
	return &CommentRequestUser{typeName: "user", User: value}
}

func (c *CommentRequestUser) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	valueUser := new(User)
	if err := json.Unmarshal(data, &valueUser); err == nil {
		c.typeName = "user"
		c.User = valueUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CommentRequestUser) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "user":
		return json.Marshal(c.User)
	}
}

type CommentRequestUserVisitor interface {
	VisitString(string) error
	VisitUser(*User) error
}

func (c *CommentRequestUser) Accept(visitor CommentRequestUserVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return visitor.VisitString(c.String)
	case "user":
		return visitor.VisitUser(c.User)
	}
}

type CommentResponse struct {
	Model    *Comment                    `json:"model,omitempty"`
	Warnings []*WarningValidationProblem `json:"warnings,omitempty"`
	Errors   []*ErrorValidationProblem   `json:"errors,omitempty"`
	Logs     []*DebugModeLog             `json:"logs,omitempty"`
}

// The ticket associated with the comment.
type CommentTicket struct {
	typeName string
	String   string
	Ticket   *Ticket
}

func NewCommentTicketFromString(value string) *CommentTicket {
	return &CommentTicket{typeName: "string", String: value}
}

func NewCommentTicketFromTicket(value *Ticket) *CommentTicket {
	return &CommentTicket{typeName: "ticket", Ticket: value}
}

func (c *CommentTicket) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	valueTicket := new(Ticket)
	if err := json.Unmarshal(data, &valueTicket); err == nil {
		c.typeName = "ticket"
		c.Ticket = valueTicket
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CommentTicket) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "ticket":
		return json.Marshal(c.Ticket)
	}
}

type CommentTicketVisitor interface {
	VisitString(string) error
	VisitTicket(*Ticket) error
}

func (c *CommentTicket) Accept(visitor CommentTicketVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return visitor.VisitString(c.String)
	case "ticket":
		return visitor.VisitTicket(c.Ticket)
	}
}

// The author of the Comment, if the author is a User.
type CommentUser struct {
	typeName string
	String   string
	User     *User
}

func NewCommentUserFromString(value string) *CommentUser {
	return &CommentUser{typeName: "string", String: value}
}

func NewCommentUserFromUser(value *User) *CommentUser {
	return &CommentUser{typeName: "user", User: value}
}

func (c *CommentUser) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	valueUser := new(User)
	if err := json.Unmarshal(data, &valueUser); err == nil {
		c.typeName = "user"
		c.User = valueUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CommentUser) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "user":
		return json.Marshal(c.User)
	}
}

type CommentUserVisitor interface {
	VisitString(string) error
	VisitUser(*User) error
}

func (c *CommentUser) Accept(visitor CommentUserVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return visitor.VisitString(c.String)
	case "user":
		return visitor.VisitUser(c.User)
	}
}

type CommentsListRequestExpand uint

const (
	CommentsListRequestExpandContact CommentsListRequestExpand = iota + 1
	CommentsListRequestExpandContactTicket
	CommentsListRequestExpandTicket
	CommentsListRequestExpandUser
	CommentsListRequestExpandUserContact
	CommentsListRequestExpandUserContactTicket
	CommentsListRequestExpandUserTicket
)

func (c CommentsListRequestExpand) String() string {
	switch c {
	default:
		return strconv.Itoa(int(c))
	case CommentsListRequestExpandContact:
		return "contact"
	case CommentsListRequestExpandContactTicket:
		return "contact,ticket"
	case CommentsListRequestExpandTicket:
		return "ticket"
	case CommentsListRequestExpandUser:
		return "user"
	case CommentsListRequestExpandUserContact:
		return "user,contact"
	case CommentsListRequestExpandUserContactTicket:
		return "user,contact,ticket"
	case CommentsListRequestExpandUserTicket:
		return "user,ticket"
	}
}

func (c CommentsListRequestExpand) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", c.String())), nil
}

func (c *CommentsListRequestExpand) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "contact":
		value := CommentsListRequestExpandContact
		*c = value
	case "contact,ticket":
		value := CommentsListRequestExpandContactTicket
		*c = value
	case "ticket":
		value := CommentsListRequestExpandTicket
		*c = value
	case "user":
		value := CommentsListRequestExpandUser
		*c = value
	case "user,contact":
		value := CommentsListRequestExpandUserContact
		*c = value
	case "user,contact,ticket":
		value := CommentsListRequestExpandUserContactTicket
		*c = value
	case "user,ticket":
		value := CommentsListRequestExpandUserTicket
		*c = value
	}
	return nil
}

type CommentsRetrieveRequestExpand uint

const (
	CommentsRetrieveRequestExpandContact CommentsRetrieveRequestExpand = iota + 1
	CommentsRetrieveRequestExpandContactTicket
	CommentsRetrieveRequestExpandTicket
	CommentsRetrieveRequestExpandUser
	CommentsRetrieveRequestExpandUserContact
	CommentsRetrieveRequestExpandUserContactTicket
	CommentsRetrieveRequestExpandUserTicket
)

func (c CommentsRetrieveRequestExpand) String() string {
	switch c {
	default:
		return strconv.Itoa(int(c))
	case CommentsRetrieveRequestExpandContact:
		return "contact"
	case CommentsRetrieveRequestExpandContactTicket:
		return "contact,ticket"
	case CommentsRetrieveRequestExpandTicket:
		return "ticket"
	case CommentsRetrieveRequestExpandUser:
		return "user"
	case CommentsRetrieveRequestExpandUserContact:
		return "user,contact"
	case CommentsRetrieveRequestExpandUserContactTicket:
		return "user,contact,ticket"
	case CommentsRetrieveRequestExpandUserTicket:
		return "user,ticket"
	}
}

func (c CommentsRetrieveRequestExpand) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", c.String())), nil
}

func (c *CommentsRetrieveRequestExpand) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "contact":
		value := CommentsRetrieveRequestExpandContact
		*c = value
	case "contact,ticket":
		value := CommentsRetrieveRequestExpandContactTicket
		*c = value
	case "ticket":
		value := CommentsRetrieveRequestExpandTicket
		*c = value
	case "user":
		value := CommentsRetrieveRequestExpandUser
		*c = value
	case "user,contact":
		value := CommentsRetrieveRequestExpandUserContact
		*c = value
	case "user,contact,ticket":
		value := CommentsRetrieveRequestExpandUserContactTicket
		*c = value
	case "user,ticket":
		value := CommentsRetrieveRequestExpandUserTicket
		*c = value
	}
	return nil
}

type CommonModelScopesBodyRequest struct {
	ModelId        string               `json:"model_id"`
	EnabledActions []EnabledActionsEnum `json:"enabled_actions,omitempty"`
	DisabledFields []string             `json:"disabled_fields,omitempty"`
}

type ConditionSchema struct {
	// The ID of the condition schema. This ID is used when updating selective syncs for a linked account.
	Id string `json:"id"`
	// The common model for which a condition schema is defined.
	CommonModel *string `json:"common_model,omitempty"`
	// User-facing *native condition* name. e.g. "Skip Manager".
	NativeName *string `json:"native_name,omitempty"`
	// The name of the field on the common model that this condition corresponds to, if they conceptually match. e.g. "location_type".
	FieldName *string `json:"field_name,omitempty"`
	// Whether this condition can only be applied once. If false, the condition can be AND'd together multiple times.
	IsUnique *bool `json:"is_unique,omitempty"`
	// The type of value(s) that can be set for this condition.
	//
	// * `BOOLEAN` - BOOLEAN
	// * `DATE` - DATE
	// * `DATE_TIME` - DATE_TIME
	// * `INTEGER` - INTEGER
	// * `FLOAT` - FLOAT
	// * `STRING` - STRING
	// * `LIST_OF_STRINGS` - LIST_OF_STRINGS
	ConditionType *ConditionSchemaConditionType `json:"condition_type,omitempty"`
	// The schemas for the operators that can be used on a condition.
	Operators []*OperatorSchema `json:"operators,omitempty"`
}

// The type of value(s) that can be set for this condition.
//
// * `BOOLEAN` - BOOLEAN
// * `DATE` - DATE
// * `DATE_TIME` - DATE_TIME
// * `INTEGER` - INTEGER
// * `FLOAT` - FLOAT
// * `STRING` - STRING
// * `LIST_OF_STRINGS` - LIST_OF_STRINGS
type ConditionSchemaConditionType struct {
	typeName          string
	ConditionTypeEnum ConditionTypeEnum
	String            string
}

func NewConditionSchemaConditionTypeFromConditionTypeEnum(value ConditionTypeEnum) *ConditionSchemaConditionType {
	return &ConditionSchemaConditionType{typeName: "conditionTypeEnum", ConditionTypeEnum: value}
}

func NewConditionSchemaConditionTypeFromString(value string) *ConditionSchemaConditionType {
	return &ConditionSchemaConditionType{typeName: "string", String: value}
}

func (c *ConditionSchemaConditionType) UnmarshalJSON(data []byte) error {
	var valueConditionTypeEnum ConditionTypeEnum
	if err := json.Unmarshal(data, &valueConditionTypeEnum); err == nil {
		c.typeName = "conditionTypeEnum"
		c.ConditionTypeEnum = valueConditionTypeEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c ConditionSchemaConditionType) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "conditionTypeEnum":
		return json.Marshal(c.ConditionTypeEnum)
	case "string":
		return json.Marshal(c.String)
	}
}

type ConditionSchemaConditionTypeVisitor interface {
	VisitConditionTypeEnum(ConditionTypeEnum) error
	VisitString(string) error
}

func (c *ConditionSchemaConditionType) Accept(visitor ConditionSchemaConditionTypeVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "conditionTypeEnum":
		return visitor.VisitConditionTypeEnum(c.ConditionTypeEnum)
	case "string":
		return visitor.VisitString(c.String)
	}
}

// * `BOOLEAN` - BOOLEAN
// * `DATE` - DATE
// * `DATE_TIME` - DATE_TIME
// * `INTEGER` - INTEGER
// * `FLOAT` - FLOAT
// * `STRING` - STRING
// * `LIST_OF_STRINGS` - LIST_OF_STRINGS
type ConditionTypeEnum uint

const (
	ConditionTypeEnumBoolean ConditionTypeEnum = iota + 1
	ConditionTypeEnumDate
	ConditionTypeEnumDateTime
	ConditionTypeEnumInteger
	ConditionTypeEnumFloat
	ConditionTypeEnumString
	ConditionTypeEnumListOfStrings
)

func (c ConditionTypeEnum) String() string {
	switch c {
	default:
		return strconv.Itoa(int(c))
	case ConditionTypeEnumBoolean:
		return "BOOLEAN"
	case ConditionTypeEnumDate:
		return "DATE"
	case ConditionTypeEnumDateTime:
		return "DATE_TIME"
	case ConditionTypeEnumInteger:
		return "INTEGER"
	case ConditionTypeEnumFloat:
		return "FLOAT"
	case ConditionTypeEnumString:
		return "STRING"
	case ConditionTypeEnumListOfStrings:
		return "LIST_OF_STRINGS"
	}
}

func (c ConditionTypeEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", c.String())), nil
}

func (c *ConditionTypeEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "BOOLEAN":
		value := ConditionTypeEnumBoolean
		*c = value
	case "DATE":
		value := ConditionTypeEnumDate
		*c = value
	case "DATE_TIME":
		value := ConditionTypeEnumDateTime
		*c = value
	case "INTEGER":
		value := ConditionTypeEnumInteger
		*c = value
	case "FLOAT":
		value := ConditionTypeEnumFloat
		*c = value
	case "STRING":
		value := ConditionTypeEnumString
		*c = value
	case "LIST_OF_STRINGS":
		value := ConditionTypeEnumListOfStrings
		*c = value
	}
	return nil
}

// # The Contact Object
// ### Description
// The `Contact` object is used to represent the customer, lead, or external user that a ticket is associated with.
//
// ### Usage Example
// TODO
type Contact struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The contact's name.
	Name *string `json:"name,omitempty"`
	// The contact's email address.
	EmailAddress *string `json:"email_address,omitempty"`
	// The contact's phone number.
	PhoneNumber *string `json:"phone_number,omitempty"`
	// The contact's details.
	Details *string `json:"details,omitempty"`
	// The contact's account.
	Account *ContactAccount `json:"account,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted *bool      `json:"remote_was_deleted,omitempty"`
	CreatedAt        *time.Time `json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt    *time.Time     `json:"modified_at,omitempty"`
	FieldMappings map[string]any `json:"field_mappings,omitempty"`
	RemoteData    []*RemoteData  `json:"remote_data,omitempty"`
}

// The contact's account.
type ContactAccount struct {
	typeName string
	String   string
	Account  *Account
}

func NewContactAccountFromString(value string) *ContactAccount {
	return &ContactAccount{typeName: "string", String: value}
}

func NewContactAccountFromAccount(value *Account) *ContactAccount {
	return &ContactAccount{typeName: "account", Account: value}
}

func (c *ContactAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		c.typeName = "account"
		c.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c ContactAccount) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "account":
		return json.Marshal(c.Account)
	}
}

type ContactAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (c *ContactAccount) Accept(visitor ContactAccountVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return visitor.VisitString(c.String)
	case "account":
		return visitor.VisitAccount(c.Account)
	}
}

// # The DataPassthrough Object
// ### Description
// The `DataPassthrough` object is used to send information to an otherwise-unsupported third-party endpoint.
//
// ### Usage Example
// Create a `DataPassthrough` to get team hierarchies from your Rippling integration.
type DataPassthroughRequest struct {
	Method          MethodEnum `json:"method,omitempty"`
	Path            string     `json:"path"`
	BaseUrlOverride *string    `json:"base_url_override,omitempty"`
	Data            *string    `json:"data,omitempty"`
	// Pass an array of `MultipartFormField` objects in here instead of using the `data` param if `request_format` is set to `MULTIPART`.
	MultipartFormData []*MultipartFormFieldRequest `json:"multipart_form_data,omitempty"`
	// The headers to use for the request (Merge will handle the account's authorization headers). `Content-Type` header is required for passthrough. Choose content type corresponding to expected format of receiving server.
	Headers       map[string]any     `json:"headers,omitempty"`
	RequestFormat *RequestFormatEnum `json:"request_format,omitempty"`
	// Optional. If true, the response will always be an object of the form `{"type": T, "value": ...}` where `T` will be one of `string, boolean, number, null, array, object`.
	NormalizeResponse *bool `json:"normalize_response,omitempty"`
}

type DebugModeLog struct {
	LogId         string                `json:"log_id"`
	DashboardView string                `json:"dashboard_view"`
	LogSummary    *DebugModelLogSummary `json:"log_summary,omitempty"`
}

type DebugModelLogSummary struct {
	Url        string `json:"url"`
	Method     string `json:"method"`
	StatusCode int    `json:"status_code"`
}

// * `READ` - READ
// * `WRITE` - WRITE
type EnabledActionsEnum uint

const (
	EnabledActionsEnumRead EnabledActionsEnum = iota + 1
	EnabledActionsEnumWrite
)

func (e EnabledActionsEnum) String() string {
	switch e {
	default:
		return strconv.Itoa(int(e))
	case EnabledActionsEnumRead:
		return "READ"
	case EnabledActionsEnumWrite:
		return "WRITE"
	}
}

func (e EnabledActionsEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", e.String())), nil
}

func (e *EnabledActionsEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "READ":
		value := EnabledActionsEnumRead
		*e = value
	case "WRITE":
		value := EnabledActionsEnumWrite
		*e = value
	}
	return nil
}

// * `RAW` - RAW
// * `BASE64` - BASE64
// * `GZIP_BASE64` - GZIP_BASE64
type EncodingEnum uint

const (
	EncodingEnumRaw EncodingEnum = iota + 1
	EncodingEnumBase64
	EncodingEnumGzipBase64
)

func (e EncodingEnum) String() string {
	switch e {
	default:
		return strconv.Itoa(int(e))
	case EncodingEnumRaw:
		return "RAW"
	case EncodingEnumBase64:
		return "BASE64"
	case EncodingEnumGzipBase64:
		return "GZIP_BASE64"
	}
}

func (e EncodingEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", e.String())), nil
}

func (e *EncodingEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "RAW":
		value := EncodingEnumRaw
		*e = value
	case "BASE64":
		value := EncodingEnumBase64
		*e = value
	case "GZIP_BASE64":
		value := EncodingEnumGzipBase64
		*e = value
	}
	return nil
}

type ErrorValidationProblem struct {
	Source      *ValidationProblemSource `json:"source,omitempty"`
	Title       string                   `json:"title"`
	Detail      string                   `json:"detail"`
	ProblemType string                   `json:"problem_type"`
}

// * `CREATED_REMOTE_PRODUCTION_API_KEY` - CREATED_REMOTE_PRODUCTION_API_KEY
// * `DELETED_REMOTE_PRODUCTION_API_KEY` - DELETED_REMOTE_PRODUCTION_API_KEY
// * `CREATED_TEST_API_KEY` - CREATED_TEST_API_KEY
// * `DELETED_TEST_API_KEY` - DELETED_TEST_API_KEY
// * `REGENERATED_PRODUCTION_API_KEY` - REGENERATED_PRODUCTION_API_KEY
// * `INVITED_USER` - INVITED_USER
// * `TWO_FACTOR_AUTH_ENABLED` - TWO_FACTOR_AUTH_ENABLED
// * `TWO_FACTOR_AUTH_DISABLED` - TWO_FACTOR_AUTH_DISABLED
// * `DELETED_LINKED_ACCOUNT` - DELETED_LINKED_ACCOUNT
// * `CREATED_DESTINATION` - CREATED_DESTINATION
// * `DELETED_DESTINATION` - DELETED_DESTINATION
// * `CHANGED_SCOPES` - CHANGED_SCOPES
// * `CHANGED_PERSONAL_INFORMATION` - CHANGED_PERSONAL_INFORMATION
// * `CHANGED_ORGANIZATION_SETTINGS` - CHANGED_ORGANIZATION_SETTINGS
// * `ENABLED_INTEGRATION` - ENABLED_INTEGRATION
// * `DISABLED_INTEGRATION` - DISABLED_INTEGRATION
// * `ENABLED_CATEGORY` - ENABLED_CATEGORY
// * `DISABLED_CATEGORY` - DISABLED_CATEGORY
// * `CHANGED_PASSWORD` - CHANGED_PASSWORD
// * `RESET_PASSWORD` - RESET_PASSWORD
// * `ENABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION` - ENABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION
// * `ENABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT` - ENABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT
// * `DISABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION` - DISABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION
// * `DISABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT` - DISABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT
// * `CREATED_INTEGRATION_WIDE_FIELD_MAPPING` - CREATED_INTEGRATION_WIDE_FIELD_MAPPING
// * `CREATED_LINKED_ACCOUNT_FIELD_MAPPING` - CREATED_LINKED_ACCOUNT_FIELD_MAPPING
// * `CHANGED_INTEGRATION_WIDE_FIELD_MAPPING` - CHANGED_INTEGRATION_WIDE_FIELD_MAPPING
// * `CHANGED_LINKED_ACCOUNT_FIELD_MAPPING` - CHANGED_LINKED_ACCOUNT_FIELD_MAPPING
// * `DELETED_INTEGRATION_WIDE_FIELD_MAPPING` - DELETED_INTEGRATION_WIDE_FIELD_MAPPING
// * `DELETED_LINKED_ACCOUNT_FIELD_MAPPING` - DELETED_LINKED_ACCOUNT_FIELD_MAPPING
type EventTypeEnum uint

const (
	EventTypeEnumCreatedRemoteProductionApiKey EventTypeEnum = iota + 1
	EventTypeEnumDeletedRemoteProductionApiKey
	EventTypeEnumCreatedTestApiKey
	EventTypeEnumDeletedTestApiKey
	EventTypeEnumRegeneratedProductionApiKey
	EventTypeEnumInvitedUser
	EventTypeEnumTwoFactorAuthEnabled
	EventTypeEnumTwoFactorAuthDisabled
	EventTypeEnumDeletedLinkedAccount
	EventTypeEnumCreatedDestination
	EventTypeEnumDeletedDestination
	EventTypeEnumChangedScopes
	EventTypeEnumChangedPersonalInformation
	EventTypeEnumChangedOrganizationSettings
	EventTypeEnumEnabledIntegration
	EventTypeEnumDisabledIntegration
	EventTypeEnumEnabledCategory
	EventTypeEnumDisabledCategory
	EventTypeEnumChangedPassword
	EventTypeEnumResetPassword
	EventTypeEnumEnabledRedactUnmappedDataForOrganization
	EventTypeEnumEnabledRedactUnmappedDataForLinkedAccount
	EventTypeEnumDisabledRedactUnmappedDataForOrganization
	EventTypeEnumDisabledRedactUnmappedDataForLinkedAccount
	EventTypeEnumCreatedIntegrationWideFieldMapping
	EventTypeEnumCreatedLinkedAccountFieldMapping
	EventTypeEnumChangedIntegrationWideFieldMapping
	EventTypeEnumChangedLinkedAccountFieldMapping
	EventTypeEnumDeletedIntegrationWideFieldMapping
	EventTypeEnumDeletedLinkedAccountFieldMapping
)

func (e EventTypeEnum) String() string {
	switch e {
	default:
		return strconv.Itoa(int(e))
	case EventTypeEnumCreatedRemoteProductionApiKey:
		return "CREATED_REMOTE_PRODUCTION_API_KEY"
	case EventTypeEnumDeletedRemoteProductionApiKey:
		return "DELETED_REMOTE_PRODUCTION_API_KEY"
	case EventTypeEnumCreatedTestApiKey:
		return "CREATED_TEST_API_KEY"
	case EventTypeEnumDeletedTestApiKey:
		return "DELETED_TEST_API_KEY"
	case EventTypeEnumRegeneratedProductionApiKey:
		return "REGENERATED_PRODUCTION_API_KEY"
	case EventTypeEnumInvitedUser:
		return "INVITED_USER"
	case EventTypeEnumTwoFactorAuthEnabled:
		return "TWO_FACTOR_AUTH_ENABLED"
	case EventTypeEnumTwoFactorAuthDisabled:
		return "TWO_FACTOR_AUTH_DISABLED"
	case EventTypeEnumDeletedLinkedAccount:
		return "DELETED_LINKED_ACCOUNT"
	case EventTypeEnumCreatedDestination:
		return "CREATED_DESTINATION"
	case EventTypeEnumDeletedDestination:
		return "DELETED_DESTINATION"
	case EventTypeEnumChangedScopes:
		return "CHANGED_SCOPES"
	case EventTypeEnumChangedPersonalInformation:
		return "CHANGED_PERSONAL_INFORMATION"
	case EventTypeEnumChangedOrganizationSettings:
		return "CHANGED_ORGANIZATION_SETTINGS"
	case EventTypeEnumEnabledIntegration:
		return "ENABLED_INTEGRATION"
	case EventTypeEnumDisabledIntegration:
		return "DISABLED_INTEGRATION"
	case EventTypeEnumEnabledCategory:
		return "ENABLED_CATEGORY"
	case EventTypeEnumDisabledCategory:
		return "DISABLED_CATEGORY"
	case EventTypeEnumChangedPassword:
		return "CHANGED_PASSWORD"
	case EventTypeEnumResetPassword:
		return "RESET_PASSWORD"
	case EventTypeEnumEnabledRedactUnmappedDataForOrganization:
		return "ENABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION"
	case EventTypeEnumEnabledRedactUnmappedDataForLinkedAccount:
		return "ENABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT"
	case EventTypeEnumDisabledRedactUnmappedDataForOrganization:
		return "DISABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION"
	case EventTypeEnumDisabledRedactUnmappedDataForLinkedAccount:
		return "DISABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT"
	case EventTypeEnumCreatedIntegrationWideFieldMapping:
		return "CREATED_INTEGRATION_WIDE_FIELD_MAPPING"
	case EventTypeEnumCreatedLinkedAccountFieldMapping:
		return "CREATED_LINKED_ACCOUNT_FIELD_MAPPING"
	case EventTypeEnumChangedIntegrationWideFieldMapping:
		return "CHANGED_INTEGRATION_WIDE_FIELD_MAPPING"
	case EventTypeEnumChangedLinkedAccountFieldMapping:
		return "CHANGED_LINKED_ACCOUNT_FIELD_MAPPING"
	case EventTypeEnumDeletedIntegrationWideFieldMapping:
		return "DELETED_INTEGRATION_WIDE_FIELD_MAPPING"
	case EventTypeEnumDeletedLinkedAccountFieldMapping:
		return "DELETED_LINKED_ACCOUNT_FIELD_MAPPING"
	}
}

func (e EventTypeEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", e.String())), nil
}

func (e *EventTypeEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "CREATED_REMOTE_PRODUCTION_API_KEY":
		value := EventTypeEnumCreatedRemoteProductionApiKey
		*e = value
	case "DELETED_REMOTE_PRODUCTION_API_KEY":
		value := EventTypeEnumDeletedRemoteProductionApiKey
		*e = value
	case "CREATED_TEST_API_KEY":
		value := EventTypeEnumCreatedTestApiKey
		*e = value
	case "DELETED_TEST_API_KEY":
		value := EventTypeEnumDeletedTestApiKey
		*e = value
	case "REGENERATED_PRODUCTION_API_KEY":
		value := EventTypeEnumRegeneratedProductionApiKey
		*e = value
	case "INVITED_USER":
		value := EventTypeEnumInvitedUser
		*e = value
	case "TWO_FACTOR_AUTH_ENABLED":
		value := EventTypeEnumTwoFactorAuthEnabled
		*e = value
	case "TWO_FACTOR_AUTH_DISABLED":
		value := EventTypeEnumTwoFactorAuthDisabled
		*e = value
	case "DELETED_LINKED_ACCOUNT":
		value := EventTypeEnumDeletedLinkedAccount
		*e = value
	case "CREATED_DESTINATION":
		value := EventTypeEnumCreatedDestination
		*e = value
	case "DELETED_DESTINATION":
		value := EventTypeEnumDeletedDestination
		*e = value
	case "CHANGED_SCOPES":
		value := EventTypeEnumChangedScopes
		*e = value
	case "CHANGED_PERSONAL_INFORMATION":
		value := EventTypeEnumChangedPersonalInformation
		*e = value
	case "CHANGED_ORGANIZATION_SETTINGS":
		value := EventTypeEnumChangedOrganizationSettings
		*e = value
	case "ENABLED_INTEGRATION":
		value := EventTypeEnumEnabledIntegration
		*e = value
	case "DISABLED_INTEGRATION":
		value := EventTypeEnumDisabledIntegration
		*e = value
	case "ENABLED_CATEGORY":
		value := EventTypeEnumEnabledCategory
		*e = value
	case "DISABLED_CATEGORY":
		value := EventTypeEnumDisabledCategory
		*e = value
	case "CHANGED_PASSWORD":
		value := EventTypeEnumChangedPassword
		*e = value
	case "RESET_PASSWORD":
		value := EventTypeEnumResetPassword
		*e = value
	case "ENABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION":
		value := EventTypeEnumEnabledRedactUnmappedDataForOrganization
		*e = value
	case "ENABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT":
		value := EventTypeEnumEnabledRedactUnmappedDataForLinkedAccount
		*e = value
	case "DISABLED_REDACT_UNMAPPED_DATA_FOR_ORGANIZATION":
		value := EventTypeEnumDisabledRedactUnmappedDataForOrganization
		*e = value
	case "DISABLED_REDACT_UNMAPPED_DATA_FOR_LINKED_ACCOUNT":
		value := EventTypeEnumDisabledRedactUnmappedDataForLinkedAccount
		*e = value
	case "CREATED_INTEGRATION_WIDE_FIELD_MAPPING":
		value := EventTypeEnumCreatedIntegrationWideFieldMapping
		*e = value
	case "CREATED_LINKED_ACCOUNT_FIELD_MAPPING":
		value := EventTypeEnumCreatedLinkedAccountFieldMapping
		*e = value
	case "CHANGED_INTEGRATION_WIDE_FIELD_MAPPING":
		value := EventTypeEnumChangedIntegrationWideFieldMapping
		*e = value
	case "CHANGED_LINKED_ACCOUNT_FIELD_MAPPING":
		value := EventTypeEnumChangedLinkedAccountFieldMapping
		*e = value
	case "DELETED_INTEGRATION_WIDE_FIELD_MAPPING":
		value := EventTypeEnumDeletedIntegrationWideFieldMapping
		*e = value
	case "DELETED_LINKED_ACCOUNT_FIELD_MAPPING":
		value := EventTypeEnumDeletedLinkedAccountFieldMapping
		*e = value
	}
	return nil
}

// * `string` - string
// * `number` - number
// * `date` - date
// * `datetime` - datetime
// * `bool` - bool
// * `list` - list
type FieldFormatEnum uint

const (
	FieldFormatEnumString FieldFormatEnum = iota + 1
	FieldFormatEnumNumber
	FieldFormatEnumDate
	FieldFormatEnumDatetime
	FieldFormatEnumBool
	FieldFormatEnumList
)

func (f FieldFormatEnum) String() string {
	switch f {
	default:
		return strconv.Itoa(int(f))
	case FieldFormatEnumString:
		return "string"
	case FieldFormatEnumNumber:
		return "number"
	case FieldFormatEnumDate:
		return "date"
	case FieldFormatEnumDatetime:
		return "datetime"
	case FieldFormatEnumBool:
		return "bool"
	case FieldFormatEnumList:
		return "list"
	}
}

func (f FieldFormatEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", f.String())), nil
}

func (f *FieldFormatEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "string":
		value := FieldFormatEnumString
		*f = value
	case "number":
		value := FieldFormatEnumNumber
		*f = value
	case "date":
		value := FieldFormatEnumDate
		*f = value
	case "datetime":
		value := FieldFormatEnumDatetime
		*f = value
	case "bool":
		value := FieldFormatEnumBool
		*f = value
	case "list":
		value := FieldFormatEnumList
		*f = value
	}
	return nil
}

// * `string` - string
// * `number` - number
// * `date` - date
// * `datetime` - datetime
// * `bool` - bool
// * `list` - list
type FieldTypeEnum uint

const (
	FieldTypeEnumString FieldTypeEnum = iota + 1
	FieldTypeEnumNumber
	FieldTypeEnumDate
	FieldTypeEnumDatetime
	FieldTypeEnumBool
	FieldTypeEnumList
)

func (f FieldTypeEnum) String() string {
	switch f {
	default:
		return strconv.Itoa(int(f))
	case FieldTypeEnumString:
		return "string"
	case FieldTypeEnumNumber:
		return "number"
	case FieldTypeEnumDate:
		return "date"
	case FieldTypeEnumDatetime:
		return "datetime"
	case FieldTypeEnumBool:
		return "bool"
	case FieldTypeEnumList:
		return "list"
	}
}

func (f FieldTypeEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", f.String())), nil
}

func (f *FieldTypeEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "string":
		value := FieldTypeEnumString
		*f = value
	case "number":
		value := FieldTypeEnumNumber
		*f = value
	case "date":
		value := FieldTypeEnumDate
		*f = value
	case "datetime":
		value := FieldTypeEnumDatetime
		*f = value
	case "bool":
		value := FieldTypeEnumBool
		*f = value
	case "list":
		value := FieldTypeEnumList
		*f = value
	}
	return nil
}

type Issue struct {
	Id *string `json:"id,omitempty"`
	// Status of the issue. Options: ('ONGOING', 'RESOLVED')
	//
	// * `ONGOING` - ONGOING
	// * `RESOLVED` - RESOLVED
	Status            *IssueStatus   `json:"status,omitempty"`
	ErrorDescription  string         `json:"error_description"`
	EndUser           map[string]any `json:"end_user,omitempty"`
	FirstIncidentTime *time.Time     `json:"first_incident_time,omitempty"`
	LastIncidentTime  *time.Time     `json:"last_incident_time,omitempty"`
	IsMuted           *bool          `json:"is_muted,omitempty"`
	ErrorDetails      []string       `json:"error_details,omitempty"`
}

// Status of the issue. Options: ('ONGOING', 'RESOLVED')
//
// * `ONGOING` - ONGOING
// * `RESOLVED` - RESOLVED
type IssueStatus struct {
	typeName        string
	IssueStatusEnum IssueStatusEnum
	String          string
}

func NewIssueStatusFromIssueStatusEnum(value IssueStatusEnum) *IssueStatus {
	return &IssueStatus{typeName: "issueStatusEnum", IssueStatusEnum: value}
}

func NewIssueStatusFromString(value string) *IssueStatus {
	return &IssueStatus{typeName: "string", String: value}
}

func (i *IssueStatus) UnmarshalJSON(data []byte) error {
	var valueIssueStatusEnum IssueStatusEnum
	if err := json.Unmarshal(data, &valueIssueStatusEnum); err == nil {
		i.typeName = "issueStatusEnum"
		i.IssueStatusEnum = valueIssueStatusEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		i.typeName = "string"
		i.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i IssueStatus) MarshalJSON() ([]byte, error) {
	switch i.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "issueStatusEnum":
		return json.Marshal(i.IssueStatusEnum)
	case "string":
		return json.Marshal(i.String)
	}
}

type IssueStatusVisitor interface {
	VisitIssueStatusEnum(IssueStatusEnum) error
	VisitString(string) error
}

func (i *IssueStatus) Accept(visitor IssueStatusVisitor) error {
	switch i.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "issueStatusEnum":
		return visitor.VisitIssueStatusEnum(i.IssueStatusEnum)
	case "string":
		return visitor.VisitString(i.String)
	}
}

// * `ONGOING` - ONGOING
// * `RESOLVED` - RESOLVED
type IssueStatusEnum uint

const (
	IssueStatusEnumOngoing IssueStatusEnum = iota + 1
	IssueStatusEnumResolved
)

func (i IssueStatusEnum) String() string {
	switch i {
	default:
		return strconv.Itoa(int(i))
	case IssueStatusEnumOngoing:
		return "ONGOING"
	case IssueStatusEnumResolved:
		return "RESOLVED"
	}
}

func (i IssueStatusEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", i.String())), nil
}

func (i *IssueStatusEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "ONGOING":
		value := IssueStatusEnumOngoing
		*i = value
	case "RESOLVED":
		value := IssueStatusEnumResolved
		*i = value
	}
	return nil
}

type IssuesListRequestStatus uint

const (
	IssuesListRequestStatusOngoing IssuesListRequestStatus = iota + 1
	IssuesListRequestStatusResolved
)

func (i IssuesListRequestStatus) String() string {
	switch i {
	default:
		return strconv.Itoa(int(i))
	case IssuesListRequestStatusOngoing:
		return "ONGOING"
	case IssuesListRequestStatusResolved:
		return "RESOLVED"
	}
}

func (i IssuesListRequestStatus) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", i.String())), nil
}

func (i *IssuesListRequestStatus) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "ONGOING":
		value := IssuesListRequestStatusOngoing
		*i = value
	case "RESOLVED":
		value := IssuesListRequestStatusResolved
		*i = value
	}
	return nil
}

// * `string` - uuid
// * `number` - url
// * `date` - email
// * `datetime` - phone
// * `bool` - currency
// * `list` - decimal
type ItemFormatEnum uint

const (
	ItemFormatEnumString ItemFormatEnum = iota + 1
	ItemFormatEnumNumber
	ItemFormatEnumDate
	ItemFormatEnumDatetime
	ItemFormatEnumBool
	ItemFormatEnumList
)

func (i ItemFormatEnum) String() string {
	switch i {
	default:
		return strconv.Itoa(int(i))
	case ItemFormatEnumString:
		return "string"
	case ItemFormatEnumNumber:
		return "number"
	case ItemFormatEnumDate:
		return "date"
	case ItemFormatEnumDatetime:
		return "datetime"
	case ItemFormatEnumBool:
		return "bool"
	case ItemFormatEnumList:
		return "list"
	}
}

func (i ItemFormatEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", i.String())), nil
}

func (i *ItemFormatEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "string":
		value := ItemFormatEnumString
		*i = value
	case "number":
		value := ItemFormatEnumNumber
		*i = value
	case "date":
		value := ItemFormatEnumDate
		*i = value
	case "datetime":
		value := ItemFormatEnumDatetime
		*i = value
	case "bool":
		value := ItemFormatEnumBool
		*i = value
	case "list":
		value := ItemFormatEnumList
		*i = value
	}
	return nil
}

type ItemSchema struct {
	ItemType    *ItemTypeEnum   `json:"item_type,omitempty"`
	ItemFormat  *ItemFormatEnum `json:"item_format,omitempty"`
	ItemChoices []string        `json:"item_choices,omitempty"`
}

// * `string` - string
// * `number` - number
// * `date` - date
// * `datetime` - datetime
// * `bool` - bool
// * `list` - list
type ItemTypeEnum uint

const (
	ItemTypeEnumString ItemTypeEnum = iota + 1
	ItemTypeEnumNumber
	ItemTypeEnumDate
	ItemTypeEnumDatetime
	ItemTypeEnumBool
	ItemTypeEnumList
)

func (i ItemTypeEnum) String() string {
	switch i {
	default:
		return strconv.Itoa(int(i))
	case ItemTypeEnumString:
		return "string"
	case ItemTypeEnumNumber:
		return "number"
	case ItemTypeEnumDate:
		return "date"
	case ItemTypeEnumDatetime:
		return "datetime"
	case ItemTypeEnumBool:
		return "bool"
	case ItemTypeEnumList:
		return "list"
	}
}

func (i ItemTypeEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", i.String())), nil
}

func (i *ItemTypeEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "string":
		value := ItemTypeEnumString
		*i = value
	case "number":
		value := ItemTypeEnumNumber
		*i = value
	case "date":
		value := ItemTypeEnumDate
		*i = value
	case "datetime":
		value := ItemTypeEnumDatetime
		*i = value
	case "bool":
		value := ItemTypeEnumBool
		*i = value
	case "list":
		value := ItemTypeEnumList
		*i = value
	}
	return nil
}

type LinkToken struct {
	LinkToken       string  `json:"link_token"`
	IntegrationName *string `json:"integration_name,omitempty"`
	MagicLinkUrl    *string `json:"magic_link_url,omitempty"`
}

type LinkedAccountCondition struct {
	// The ID indicating which condition schema to use for a specific condition.
	ConditionSchemaId string `json:"condition_schema_id"`
	// The common model for a specific condition.
	CommonModel *string `json:"common_model,omitempty"`
	// User-facing *native condition* name. e.g. "Skip Manager".
	NativeName *string `json:"native_name,omitempty"`
	// The operator for a specific condition.
	Operator string `json:"operator"`
	Value    *any   `json:"value,omitempty"`
	// The name of the field on the common model that this condition corresponds to, if they conceptually match. e.g. "location_type".
	FieldName *string `json:"field_name,omitempty"`
}

type LinkedAccountConditionRequest struct {
	// The ID indicating which condition schema to use for a specific condition.
	ConditionSchemaId string `json:"condition_schema_id"`
	// The operator for a specific condition.
	Operator string `json:"operator"`
	Value    any    `json:"value,omitempty"`
}

type LinkedAccountSelectiveSyncConfiguration struct {
	// The conditions belonging to a selective sync.
	LinkedAccountConditions []*LinkedAccountCondition `json:"linked_account_conditions,omitempty"`
}

type LinkedAccountSelectiveSyncConfigurationRequest struct {
	// The conditions belonging to a selective sync.
	LinkedAccountConditions []*LinkedAccountConditionRequest `json:"linked_account_conditions,omitempty"`
}

type LinkedAccountStatus struct {
	LinkedAccountStatus string `json:"linked_account_status"`
	CanMakeRequest      bool   `json:"can_make_request"`
}

type LinkedAccountsListRequestCategory uint

const (
	LinkedAccountsListRequestCategoryAccounting LinkedAccountsListRequestCategory = iota + 1
	LinkedAccountsListRequestCategoryAts
	LinkedAccountsListRequestCategoryCrm
	LinkedAccountsListRequestCategoryFilestorage
	LinkedAccountsListRequestCategoryHris
	LinkedAccountsListRequestCategoryMktg
	LinkedAccountsListRequestCategoryTicketing
)

func (l LinkedAccountsListRequestCategory) String() string {
	switch l {
	default:
		return strconv.Itoa(int(l))
	case LinkedAccountsListRequestCategoryAccounting:
		return "accounting"
	case LinkedAccountsListRequestCategoryAts:
		return "ats"
	case LinkedAccountsListRequestCategoryCrm:
		return "crm"
	case LinkedAccountsListRequestCategoryFilestorage:
		return "filestorage"
	case LinkedAccountsListRequestCategoryHris:
		return "hris"
	case LinkedAccountsListRequestCategoryMktg:
		return "mktg"
	case LinkedAccountsListRequestCategoryTicketing:
		return "ticketing"
	}
}

func (l LinkedAccountsListRequestCategory) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", l.String())), nil
}

func (l *LinkedAccountsListRequestCategory) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "accounting":
		value := LinkedAccountsListRequestCategoryAccounting
		*l = value
	case "ats":
		value := LinkedAccountsListRequestCategoryAts
		*l = value
	case "crm":
		value := LinkedAccountsListRequestCategoryCrm
		*l = value
	case "filestorage":
		value := LinkedAccountsListRequestCategoryFilestorage
		*l = value
	case "hris":
		value := LinkedAccountsListRequestCategoryHris
		*l = value
	case "mktg":
		value := LinkedAccountsListRequestCategoryMktg
		*l = value
	case "ticketing":
		value := LinkedAccountsListRequestCategoryTicketing
		*l = value
	}
	return nil
}

type MetaResponse struct {
	RequestSchema                  map[string]any       `json:"request_schema,omitempty"`
	RemoteFieldClasses             map[string]any       `json:"remote_field_classes,omitempty"`
	Status                         *LinkedAccountStatus `json:"status,omitempty"`
	HasConditionalParams           bool                 `json:"has_conditional_params"`
	HasRequiredLinkedAccountParams bool                 `json:"has_required_linked_account_params"`
}

// * `GET` - GET
// * `OPTIONS` - OPTIONS
// * `HEAD` - HEAD
// * `POST` - POST
// * `PUT` - PUT
// * `PATCH` - PATCH
// * `DELETE` - DELETE
type MethodEnum uint

const (
	MethodEnumGet MethodEnum = iota + 1
	MethodEnumOptions
	MethodEnumHead
	MethodEnumPost
	MethodEnumPut
	MethodEnumPatch
	MethodEnumDelete
)

func (m MethodEnum) String() string {
	switch m {
	default:
		return strconv.Itoa(int(m))
	case MethodEnumGet:
		return "GET"
	case MethodEnumOptions:
		return "OPTIONS"
	case MethodEnumHead:
		return "HEAD"
	case MethodEnumPost:
		return "POST"
	case MethodEnumPut:
		return "PUT"
	case MethodEnumPatch:
		return "PATCH"
	case MethodEnumDelete:
		return "DELETE"
	}
}

func (m MethodEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", m.String())), nil
}

func (m *MethodEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "GET":
		value := MethodEnumGet
		*m = value
	case "OPTIONS":
		value := MethodEnumOptions
		*m = value
	case "HEAD":
		value := MethodEnumHead
		*m = value
	case "POST":
		value := MethodEnumPost
		*m = value
	case "PUT":
		value := MethodEnumPut
		*m = value
	case "PATCH":
		value := MethodEnumPatch
		*m = value
	case "DELETE":
		value := MethodEnumDelete
		*m = value
	}
	return nil
}

// # The ModelOperation Object
// ### Description
// The `ModelOperation` object is used to represent the operations that are currently supported for a given model.
//
// ### Usage Example
// View what operations are supported for the `Candidate` endpoint.
type ModelOperation struct {
	ModelName              string   `json:"model_name"`
	AvailableOperations    []string `json:"available_operations,omitempty"`
	RequiredPostParameters []string `json:"required_post_parameters,omitempty"`
	SupportedFields        []string `json:"supported_fields,omitempty"`
}

// # The MultipartFormField Object
// ### Description
// The `MultipartFormField` object is used to represent fields in an HTTP request using `multipart/form-data`.
//
// ### Usage Example
// Create a `MultipartFormField` to define a multipart form entry.
type MultipartFormFieldRequest struct {
	// The name of the form field
	Name string `json:"name"`
	// The data for the form field.
	Data string `json:"data"`
	// The encoding of the value of `data`. Defaults to `RAW` if not defined.
	//
	// * `RAW` - RAW
	// * `BASE64` - BASE64
	// * `GZIP_BASE64` - GZIP_BASE64
	Encoding *MultipartFormFieldRequestEncoding `json:"encoding,omitempty"`
	// The file name of the form field, if the field is for a file.
	FileName *string `json:"file_name,omitempty"`
	// The MIME type of the file, if the field is for a file.
	ContentType *string `json:"content_type,omitempty"`
}

// The encoding of the value of `data`. Defaults to `RAW` if not defined.
//
// * `RAW` - RAW
// * `BASE64` - BASE64
// * `GZIP_BASE64` - GZIP_BASE64
type MultipartFormFieldRequestEncoding struct {
	typeName     string
	EncodingEnum EncodingEnum
	String       string
}

func NewMultipartFormFieldRequestEncodingFromEncodingEnum(value EncodingEnum) *MultipartFormFieldRequestEncoding {
	return &MultipartFormFieldRequestEncoding{typeName: "encodingEnum", EncodingEnum: value}
}

func NewMultipartFormFieldRequestEncodingFromString(value string) *MultipartFormFieldRequestEncoding {
	return &MultipartFormFieldRequestEncoding{typeName: "string", String: value}
}

func (m *MultipartFormFieldRequestEncoding) UnmarshalJSON(data []byte) error {
	var valueEncodingEnum EncodingEnum
	if err := json.Unmarshal(data, &valueEncodingEnum); err == nil {
		m.typeName = "encodingEnum"
		m.EncodingEnum = valueEncodingEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		m.typeName = "string"
		m.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, m)
}

func (m MultipartFormFieldRequestEncoding) MarshalJSON() ([]byte, error) {
	switch m.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", m.typeName, m)
	case "encodingEnum":
		return json.Marshal(m.EncodingEnum)
	case "string":
		return json.Marshal(m.String)
	}
}

type MultipartFormFieldRequestEncodingVisitor interface {
	VisitEncodingEnum(EncodingEnum) error
	VisitString(string) error
}

func (m *MultipartFormFieldRequestEncoding) Accept(visitor MultipartFormFieldRequestEncodingVisitor) error {
	switch m.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", m.typeName, m)
	case "encodingEnum":
		return visitor.VisitEncodingEnum(m.EncodingEnum)
	case "string":
		return visitor.VisitString(m.String)
	}
}

type OperatorSchema struct {
	// The operator for which an operator schema is defined.
	Operator *string `json:"operator,omitempty"`
	// Whether the operator can be repeated multiple times.
	IsUnique *bool `json:"is_unique,omitempty"`
}

type PaginatedAccountDetailsAndActionsList struct {
	Next     *string                     `json:"next,omitempty"`
	Previous *string                     `json:"previous,omitempty"`
	Results  []*AccountDetailsAndActions `json:"results,omitempty"`
}

type PaginatedAccountList struct {
	Next     *string    `json:"next,omitempty"`
	Previous *string    `json:"previous,omitempty"`
	Results  []*Account `json:"results,omitempty"`
}

type PaginatedAttachmentList struct {
	Next     *string       `json:"next,omitempty"`
	Previous *string       `json:"previous,omitempty"`
	Results  []*Attachment `json:"results,omitempty"`
}

type PaginatedAuditLogEventList struct {
	Next     *string          `json:"next,omitempty"`
	Previous *string          `json:"previous,omitempty"`
	Results  []*AuditLogEvent `json:"results,omitempty"`
}

type PaginatedCollectionList struct {
	Next     *string       `json:"next,omitempty"`
	Previous *string       `json:"previous,omitempty"`
	Results  []*Collection `json:"results,omitempty"`
}

type PaginatedCommentList struct {
	Next     *string    `json:"next,omitempty"`
	Previous *string    `json:"previous,omitempty"`
	Results  []*Comment `json:"results,omitempty"`
}

type PaginatedConditionSchemaList struct {
	Next     *string            `json:"next,omitempty"`
	Previous *string            `json:"previous,omitempty"`
	Results  []*ConditionSchema `json:"results,omitempty"`
}

type PaginatedContactList struct {
	Next     *string    `json:"next,omitempty"`
	Previous *string    `json:"previous,omitempty"`
	Results  []*Contact `json:"results,omitempty"`
}

type PaginatedIssueList struct {
	Next     *string  `json:"next,omitempty"`
	Previous *string  `json:"previous,omitempty"`
	Results  []*Issue `json:"results,omitempty"`
}

type PaginatedProjectList struct {
	Next     *string    `json:"next,omitempty"`
	Previous *string    `json:"previous,omitempty"`
	Results  []*Project `json:"results,omitempty"`
}

type PaginatedRemoteFieldClassList struct {
	Next     *string             `json:"next,omitempty"`
	Previous *string             `json:"previous,omitempty"`
	Results  []*RemoteFieldClass `json:"results,omitempty"`
}

type PaginatedRoleList struct {
	Next     *string `json:"next,omitempty"`
	Previous *string `json:"previous,omitempty"`
	Results  []*Role `json:"results,omitempty"`
}

type PaginatedSyncStatusList struct {
	Next     *string       `json:"next,omitempty"`
	Previous *string       `json:"previous,omitempty"`
	Results  []*SyncStatus `json:"results,omitempty"`
}

type PaginatedTagList struct {
	Next     *string `json:"next,omitempty"`
	Previous *string `json:"previous,omitempty"`
	Results  []*Tag  `json:"results,omitempty"`
}

type PaginatedTeamList struct {
	Next     *string `json:"next,omitempty"`
	Previous *string `json:"previous,omitempty"`
	Results  []*Team `json:"results,omitempty"`
}

type PaginatedTicketList struct {
	Next     *string   `json:"next,omitempty"`
	Previous *string   `json:"previous,omitempty"`
	Results  []*Ticket `json:"results,omitempty"`
}

type PaginatedUserList struct {
	Next     *string `json:"next,omitempty"`
	Previous *string `json:"previous,omitempty"`
	Results  []*User `json:"results,omitempty"`
}

// # The Ticket Object
// ### Description
// The `Ticket` object is used to represent a ticket or a task within a system.
//
// ### Usage Example
// TODO
type PatchedTicketRequest struct {
	// The ticket's name.
	Name      *string   `json:"name,omitempty"`
	Assignees []*string `json:"assignees,omitempty"`
	// The user who created this ticket.
	Creator *string `json:"creator,omitempty"`
	// The ticket's due date.
	DueDate *time.Time `json:"due_date,omitempty"`
	// The current status of the ticket.
	//
	// * `OPEN` - OPEN
	// * `CLOSED` - CLOSED
	// * `IN_PROGRESS` - IN_PROGRESS
	// * `ON_HOLD` - ON_HOLD
	Status *PatchedTicketRequestStatus `json:"status,omitempty"`
	// The ticket’s description. HTML version of description is mapped if supported by the third-party platform.
	Description *string   `json:"description,omitempty"`
	Collections []*string `json:"collections,omitempty"`
	// The ticket's type.
	TicketType *string `json:"ticket_type,omitempty"`
	// The account associated with the ticket.
	Account *string `json:"account,omitempty"`
	// The contact associated with the ticket.
	Contact *string `json:"contact,omitempty"`
	// The ticket's parent ticket.
	ParentTicket *string   `json:"parent_ticket,omitempty"`
	Tags         []*string `json:"tags,omitempty"`
	// When the ticket was completed.
	CompletedAt *time.Time `json:"completed_at,omitempty"`
	// The 3rd party url of the Ticket.
	TicketUrl *string `json:"ticket_url,omitempty"`
	// The priority or urgency of the Ticket.
	//
	// * `URGENT` - URGENT
	// * `HIGH` - HIGH
	// * `NORMAL` - NORMAL
	// * `LOW` - LOW
	Priority            *PatchedTicketRequestPriority `json:"priority,omitempty"`
	IntegrationParams   map[string]any                `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]any                `json:"linked_account_params,omitempty"`
	RemoteFields        []*RemoteFieldRequest         `json:"remote_fields,omitempty"`
}

// The priority or urgency of the Ticket.
//
// * `URGENT` - URGENT
// * `HIGH` - HIGH
// * `NORMAL` - NORMAL
// * `LOW` - LOW
type PatchedTicketRequestPriority struct {
	typeName     string
	PriorityEnum PriorityEnum
	String       string
}

func NewPatchedTicketRequestPriorityFromPriorityEnum(value PriorityEnum) *PatchedTicketRequestPriority {
	return &PatchedTicketRequestPriority{typeName: "priorityEnum", PriorityEnum: value}
}

func NewPatchedTicketRequestPriorityFromString(value string) *PatchedTicketRequestPriority {
	return &PatchedTicketRequestPriority{typeName: "string", String: value}
}

func (p *PatchedTicketRequestPriority) UnmarshalJSON(data []byte) error {
	var valuePriorityEnum PriorityEnum
	if err := json.Unmarshal(data, &valuePriorityEnum); err == nil {
		p.typeName = "priorityEnum"
		p.PriorityEnum = valuePriorityEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typeName = "string"
		p.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PatchedTicketRequestPriority) MarshalJSON() ([]byte, error) {
	switch p.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "priorityEnum":
		return json.Marshal(p.PriorityEnum)
	case "string":
		return json.Marshal(p.String)
	}
}

type PatchedTicketRequestPriorityVisitor interface {
	VisitPriorityEnum(PriorityEnum) error
	VisitString(string) error
}

func (p *PatchedTicketRequestPriority) Accept(visitor PatchedTicketRequestPriorityVisitor) error {
	switch p.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "priorityEnum":
		return visitor.VisitPriorityEnum(p.PriorityEnum)
	case "string":
		return visitor.VisitString(p.String)
	}
}

// The current status of the ticket.
//
// * `OPEN` - OPEN
// * `CLOSED` - CLOSED
// * `IN_PROGRESS` - IN_PROGRESS
// * `ON_HOLD` - ON_HOLD
type PatchedTicketRequestStatus struct {
	typeName         string
	TicketStatusEnum TicketStatusEnum
	String           string
}

func NewPatchedTicketRequestStatusFromTicketStatusEnum(value TicketStatusEnum) *PatchedTicketRequestStatus {
	return &PatchedTicketRequestStatus{typeName: "ticketStatusEnum", TicketStatusEnum: value}
}

func NewPatchedTicketRequestStatusFromString(value string) *PatchedTicketRequestStatus {
	return &PatchedTicketRequestStatus{typeName: "string", String: value}
}

func (p *PatchedTicketRequestStatus) UnmarshalJSON(data []byte) error {
	var valueTicketStatusEnum TicketStatusEnum
	if err := json.Unmarshal(data, &valueTicketStatusEnum); err == nil {
		p.typeName = "ticketStatusEnum"
		p.TicketStatusEnum = valueTicketStatusEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typeName = "string"
		p.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PatchedTicketRequestStatus) MarshalJSON() ([]byte, error) {
	switch p.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "ticketStatusEnum":
		return json.Marshal(p.TicketStatusEnum)
	case "string":
		return json.Marshal(p.String)
	}
}

type PatchedTicketRequestStatusVisitor interface {
	VisitTicketStatusEnum(TicketStatusEnum) error
	VisitString(string) error
}

func (p *PatchedTicketRequestStatus) Accept(visitor PatchedTicketRequestStatusVisitor) error {
	switch p.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "ticketStatusEnum":
		return visitor.VisitTicketStatusEnum(p.TicketStatusEnum)
	case "string":
		return visitor.VisitString(p.String)
	}
}

// * `URGENT` - URGENT
// * `HIGH` - HIGH
// * `NORMAL` - NORMAL
// * `LOW` - LOW
type PriorityEnum uint

const (
	PriorityEnumUrgent PriorityEnum = iota + 1
	PriorityEnumHigh
	PriorityEnumNormal
	PriorityEnumLow
)

func (p PriorityEnum) String() string {
	switch p {
	default:
		return strconv.Itoa(int(p))
	case PriorityEnumUrgent:
		return "URGENT"
	case PriorityEnumHigh:
		return "HIGH"
	case PriorityEnumNormal:
		return "NORMAL"
	case PriorityEnumLow:
		return "LOW"
	}
}

func (p PriorityEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", p.String())), nil
}

func (p *PriorityEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "URGENT":
		value := PriorityEnumUrgent
		*p = value
	case "HIGH":
		value := PriorityEnumHigh
		*p = value
	case "NORMAL":
		value := PriorityEnumNormal
		*p = value
	case "LOW":
		value := PriorityEnumLow
		*p = value
	}
	return nil
}

// # The Project Object
// ### Description
// Please use the `Collection` model. This model will be fully deprecated on 3/30/2024.
//
// ### Usage Example
// TODO
type Project struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The project's name.
	Name *string `json:"name,omitempty"`
	// The project's description.
	Description *string `json:"description,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted *bool      `json:"remote_was_deleted,omitempty"`
	CreatedAt        *time.Time `json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt    *time.Time     `json:"modified_at,omitempty"`
	FieldMappings map[string]any `json:"field_mappings,omitempty"`
	RemoteData    []*RemoteData  `json:"remote_data,omitempty"`
}

type ProjectsUsersListRequestExpand uint

const (
	ProjectsUsersListRequestExpandRoles ProjectsUsersListRequestExpand = iota + 1
	ProjectsUsersListRequestExpandTeams
	ProjectsUsersListRequestExpandTeamsRoles
)

func (p ProjectsUsersListRequestExpand) String() string {
	switch p {
	default:
		return strconv.Itoa(int(p))
	case ProjectsUsersListRequestExpandRoles:
		return "roles"
	case ProjectsUsersListRequestExpandTeams:
		return "teams"
	case ProjectsUsersListRequestExpandTeamsRoles:
		return "teams,roles"
	}
}

func (p ProjectsUsersListRequestExpand) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", p.String())), nil
}

func (p *ProjectsUsersListRequestExpand) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "roles":
		value := ProjectsUsersListRequestExpandRoles
		*p = value
	case "teams":
		value := ProjectsUsersListRequestExpandTeams
		*p = value
	case "teams,roles":
		value := ProjectsUsersListRequestExpandTeamsRoles
		*p = value
	}
	return nil
}

type RemoteData struct {
	Path string         `json:"path"`
	Data map[string]any `json:"data,omitempty"`
}

type RemoteField struct {
	RemoteFieldClass *RemoteFieldRemoteFieldClass `json:"remote_field_class,omitempty"`
	Value            *any                         `json:"value,omitempty"`
}

type RemoteFieldClass struct {
	Id            *string                             `json:"id,omitempty"`
	DisplayName   *string                             `json:"display_name,omitempty"`
	RemoteKeyName *string                             `json:"remote_key_name,omitempty"`
	Description   *string                             `json:"description,omitempty"`
	IsCustom      *bool                               `json:"is_custom,omitempty"`
	IsRequired    *bool                               `json:"is_required,omitempty"`
	FieldType     *RemoteFieldClassFieldType          `json:"field_type,omitempty"`
	FieldFormat   *RemoteFieldClassFieldFormat        `json:"field_format,omitempty"`
	FieldChoices  []*RemoteFieldClassFieldChoicesItem `json:"field_choices,omitempty"`
	ItemSchema    *ItemSchema                         `json:"item_schema,omitempty"`
}

type RemoteFieldClassFieldChoicesItem struct {
	Value       *any    `json:"value,omitempty"`
	DisplayName *string `json:"display_name,omitempty"`
}

type RemoteFieldClassFieldFormat struct {
	typeName        string
	String          string
	FieldFormatEnum FieldFormatEnum
}

func NewRemoteFieldClassFieldFormatFromString(value string) *RemoteFieldClassFieldFormat {
	return &RemoteFieldClassFieldFormat{typeName: "string", String: value}
}

func NewRemoteFieldClassFieldFormatFromFieldFormatEnum(value FieldFormatEnum) *RemoteFieldClassFieldFormat {
	return &RemoteFieldClassFieldFormat{typeName: "fieldFormatEnum", FieldFormatEnum: value}
}

func (r *RemoteFieldClassFieldFormat) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		r.typeName = "string"
		r.String = valueString
		return nil
	}
	var valueFieldFormatEnum FieldFormatEnum
	if err := json.Unmarshal(data, &valueFieldFormatEnum); err == nil {
		r.typeName = "fieldFormatEnum"
		r.FieldFormatEnum = valueFieldFormatEnum
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RemoteFieldClassFieldFormat) MarshalJSON() ([]byte, error) {
	switch r.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "string":
		return json.Marshal(r.String)
	case "fieldFormatEnum":
		return json.Marshal(r.FieldFormatEnum)
	}
}

type RemoteFieldClassFieldFormatVisitor interface {
	VisitString(string) error
	VisitFieldFormatEnum(FieldFormatEnum) error
}

func (r *RemoteFieldClassFieldFormat) Accept(visitor RemoteFieldClassFieldFormatVisitor) error {
	switch r.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "string":
		return visitor.VisitString(r.String)
	case "fieldFormatEnum":
		return visitor.VisitFieldFormatEnum(r.FieldFormatEnum)
	}
}

type RemoteFieldClassFieldType struct {
	typeName      string
	String        string
	FieldTypeEnum FieldTypeEnum
}

func NewRemoteFieldClassFieldTypeFromString(value string) *RemoteFieldClassFieldType {
	return &RemoteFieldClassFieldType{typeName: "string", String: value}
}

func NewRemoteFieldClassFieldTypeFromFieldTypeEnum(value FieldTypeEnum) *RemoteFieldClassFieldType {
	return &RemoteFieldClassFieldType{typeName: "fieldTypeEnum", FieldTypeEnum: value}
}

func (r *RemoteFieldClassFieldType) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		r.typeName = "string"
		r.String = valueString
		return nil
	}
	var valueFieldTypeEnum FieldTypeEnum
	if err := json.Unmarshal(data, &valueFieldTypeEnum); err == nil {
		r.typeName = "fieldTypeEnum"
		r.FieldTypeEnum = valueFieldTypeEnum
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RemoteFieldClassFieldType) MarshalJSON() ([]byte, error) {
	switch r.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "string":
		return json.Marshal(r.String)
	case "fieldTypeEnum":
		return json.Marshal(r.FieldTypeEnum)
	}
}

type RemoteFieldClassFieldTypeVisitor interface {
	VisitString(string) error
	VisitFieldTypeEnum(FieldTypeEnum) error
}

func (r *RemoteFieldClassFieldType) Accept(visitor RemoteFieldClassFieldTypeVisitor) error {
	switch r.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "string":
		return visitor.VisitString(r.String)
	case "fieldTypeEnum":
		return visitor.VisitFieldTypeEnum(r.FieldTypeEnum)
	}
}

type RemoteFieldRemoteFieldClass struct {
	typeName         string
	String           string
	RemoteFieldClass *RemoteFieldClass
}

func NewRemoteFieldRemoteFieldClassFromString(value string) *RemoteFieldRemoteFieldClass {
	return &RemoteFieldRemoteFieldClass{typeName: "string", String: value}
}

func NewRemoteFieldRemoteFieldClassFromRemoteFieldClass(value *RemoteFieldClass) *RemoteFieldRemoteFieldClass {
	return &RemoteFieldRemoteFieldClass{typeName: "remoteFieldClass", RemoteFieldClass: value}
}

func (r *RemoteFieldRemoteFieldClass) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		r.typeName = "string"
		r.String = valueString
		return nil
	}
	valueRemoteFieldClass := new(RemoteFieldClass)
	if err := json.Unmarshal(data, &valueRemoteFieldClass); err == nil {
		r.typeName = "remoteFieldClass"
		r.RemoteFieldClass = valueRemoteFieldClass
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RemoteFieldRemoteFieldClass) MarshalJSON() ([]byte, error) {
	switch r.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "string":
		return json.Marshal(r.String)
	case "remoteFieldClass":
		return json.Marshal(r.RemoteFieldClass)
	}
}

type RemoteFieldRemoteFieldClassVisitor interface {
	VisitString(string) error
	VisitRemoteFieldClass(*RemoteFieldClass) error
}

func (r *RemoteFieldRemoteFieldClass) Accept(visitor RemoteFieldRemoteFieldClassVisitor) error {
	switch r.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "string":
		return visitor.VisitString(r.String)
	case "remoteFieldClass":
		return visitor.VisitRemoteFieldClass(r.RemoteFieldClass)
	}
}

type RemoteFieldRequest struct {
	RemoteFieldClass *RemoteFieldRequestRemoteFieldClass `json:"remote_field_class,omitempty"`
	Value            *string                             `json:"value,omitempty"`
}

type RemoteFieldRequestRemoteFieldClass struct {
	typeName         string
	String           string
	RemoteFieldClass *RemoteFieldClass
}

func NewRemoteFieldRequestRemoteFieldClassFromString(value string) *RemoteFieldRequestRemoteFieldClass {
	return &RemoteFieldRequestRemoteFieldClass{typeName: "string", String: value}
}

func NewRemoteFieldRequestRemoteFieldClassFromRemoteFieldClass(value *RemoteFieldClass) *RemoteFieldRequestRemoteFieldClass {
	return &RemoteFieldRequestRemoteFieldClass{typeName: "remoteFieldClass", RemoteFieldClass: value}
}

func (r *RemoteFieldRequestRemoteFieldClass) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		r.typeName = "string"
		r.String = valueString
		return nil
	}
	valueRemoteFieldClass := new(RemoteFieldClass)
	if err := json.Unmarshal(data, &valueRemoteFieldClass); err == nil {
		r.typeName = "remoteFieldClass"
		r.RemoteFieldClass = valueRemoteFieldClass
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RemoteFieldRequestRemoteFieldClass) MarshalJSON() ([]byte, error) {
	switch r.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "string":
		return json.Marshal(r.String)
	case "remoteFieldClass":
		return json.Marshal(r.RemoteFieldClass)
	}
}

type RemoteFieldRequestRemoteFieldClassVisitor interface {
	VisitString(string) error
	VisitRemoteFieldClass(*RemoteFieldClass) error
}

func (r *RemoteFieldRequestRemoteFieldClass) Accept(visitor RemoteFieldRequestRemoteFieldClassVisitor) error {
	switch r.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "string":
		return visitor.VisitString(r.String)
	case "remoteFieldClass":
		return visitor.VisitRemoteFieldClass(r.RemoteFieldClass)
	}
}

// # The RemoteKey Object
// ### Description
// The `RemoteKey` object is used to represent a request for a new remote key.
//
// ### Usage Example
// Post a `GenerateRemoteKey` to receive a new `RemoteKey`.
type RemoteKey struct {
	Name string `json:"name"`
	Key  string `json:"key"`
}

// # The RemoteResponse Object
// ### Description
// The `RemoteResponse` object is used to represent information returned from a third-party endpoint.
//
// ### Usage Example
// View the `RemoteResponse` returned from your `DataPassthrough`.
type RemoteResponse struct {
	Method          string            `json:"method"`
	Path            string            `json:"path"`
	Status          int               `json:"status"`
	Response        any               `json:"response,omitempty"`
	ResponseHeaders map[string]any    `json:"response_headers,omitempty"`
	ResponseType    *ResponseTypeEnum `json:"response_type,omitempty"`
	Headers         map[string]any    `json:"headers,omitempty"`
}

// * `JSON` - JSON
// * `XML` - XML
// * `MULTIPART` - MULTIPART
type RequestFormatEnum uint

const (
	RequestFormatEnumJson RequestFormatEnum = iota + 1
	RequestFormatEnumXml
	RequestFormatEnumMultipart
)

func (r RequestFormatEnum) String() string {
	switch r {
	default:
		return strconv.Itoa(int(r))
	case RequestFormatEnumJson:
		return "JSON"
	case RequestFormatEnumXml:
		return "XML"
	case RequestFormatEnumMultipart:
		return "MULTIPART"
	}
}

func (r RequestFormatEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", r.String())), nil
}

func (r *RequestFormatEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "JSON":
		value := RequestFormatEnumJson
		*r = value
	case "XML":
		value := RequestFormatEnumXml
		*r = value
	case "MULTIPART":
		value := RequestFormatEnumMultipart
		*r = value
	}
	return nil
}

// * `JSON` - JSON
// * `BASE64_GZIP` - BASE64_GZIP
type ResponseTypeEnum uint

const (
	ResponseTypeEnumJson ResponseTypeEnum = iota + 1
	ResponseTypeEnumBase64Gzip
)

func (r ResponseTypeEnum) String() string {
	switch r {
	default:
		return strconv.Itoa(int(r))
	case ResponseTypeEnumJson:
		return "JSON"
	case ResponseTypeEnumBase64Gzip:
		return "BASE64_GZIP"
	}
}

func (r ResponseTypeEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", r.String())), nil
}

func (r *ResponseTypeEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "JSON":
		value := ResponseTypeEnumJson
		*r = value
	case "BASE64_GZIP":
		value := ResponseTypeEnumBase64Gzip
		*r = value
	}
	return nil
}

// # The Role Object
// ### Description
// The `Role` object is used to represent the set of actions & access that a user with this role is allowed to perform.
//
// ### Usage Example
// TODO
type Role struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The name of the Role.
	Name *string `json:"name,omitempty"`
	// The set of actions that a User with this Role can perform. Possible enum values include: `VIEW`, `CREATE`, `EDIT`, `DELETE`, `CLOSE`, and `ASSIGN`.
	TicketActions []*RoleTicketActionsItem `json:"ticket_actions,omitempty"`
	// The level of Ticket access that a User with this Role can perform.
	//
	// * `ALL` - ALL
	// * `ASSIGNED_ONLY` - ASSIGNED_ONLY
	// * `TEAM_ONLY` - TEAM_ONLY
	TicketAccess *RoleTicketAccess `json:"ticket_access,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted *bool      `json:"remote_was_deleted,omitempty"`
	CreatedAt        *time.Time `json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt    *time.Time     `json:"modified_at,omitempty"`
	FieldMappings map[string]any `json:"field_mappings,omitempty"`
	RemoteData    []*RemoteData  `json:"remote_data,omitempty"`
}

// * `ADMIN` - ADMIN
// * `DEVELOPER` - DEVELOPER
// * `MEMBER` - MEMBER
// * `API` - API
// * `SYSTEM` - SYSTEM
// * `MERGE_TEAM` - MERGE_TEAM
type RoleEnum uint

const (
	RoleEnumAdmin RoleEnum = iota + 1
	RoleEnumDeveloper
	RoleEnumMember
	RoleEnumApi
	RoleEnumSystem
	RoleEnumMergeTeam
)

func (r RoleEnum) String() string {
	switch r {
	default:
		return strconv.Itoa(int(r))
	case RoleEnumAdmin:
		return "ADMIN"
	case RoleEnumDeveloper:
		return "DEVELOPER"
	case RoleEnumMember:
		return "MEMBER"
	case RoleEnumApi:
		return "API"
	case RoleEnumSystem:
		return "SYSTEM"
	case RoleEnumMergeTeam:
		return "MERGE_TEAM"
	}
}

func (r RoleEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", r.String())), nil
}

func (r *RoleEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "ADMIN":
		value := RoleEnumAdmin
		*r = value
	case "DEVELOPER":
		value := RoleEnumDeveloper
		*r = value
	case "MEMBER":
		value := RoleEnumMember
		*r = value
	case "API":
		value := RoleEnumApi
		*r = value
	case "SYSTEM":
		value := RoleEnumSystem
		*r = value
	case "MERGE_TEAM":
		value := RoleEnumMergeTeam
		*r = value
	}
	return nil
}

// The level of Ticket access that a User with this Role can perform.
//
// * `ALL` - ALL
// * `ASSIGNED_ONLY` - ASSIGNED_ONLY
// * `TEAM_ONLY` - TEAM_ONLY
type RoleTicketAccess struct {
	typeName         string
	String           string
	TicketAccessEnum TicketAccessEnum
}

func NewRoleTicketAccessFromString(value string) *RoleTicketAccess {
	return &RoleTicketAccess{typeName: "string", String: value}
}

func NewRoleTicketAccessFromTicketAccessEnum(value TicketAccessEnum) *RoleTicketAccess {
	return &RoleTicketAccess{typeName: "ticketAccessEnum", TicketAccessEnum: value}
}

func (r *RoleTicketAccess) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		r.typeName = "string"
		r.String = valueString
		return nil
	}
	var valueTicketAccessEnum TicketAccessEnum
	if err := json.Unmarshal(data, &valueTicketAccessEnum); err == nil {
		r.typeName = "ticketAccessEnum"
		r.TicketAccessEnum = valueTicketAccessEnum
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RoleTicketAccess) MarshalJSON() ([]byte, error) {
	switch r.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "string":
		return json.Marshal(r.String)
	case "ticketAccessEnum":
		return json.Marshal(r.TicketAccessEnum)
	}
}

type RoleTicketAccessVisitor interface {
	VisitString(string) error
	VisitTicketAccessEnum(TicketAccessEnum) error
}

func (r *RoleTicketAccess) Accept(visitor RoleTicketAccessVisitor) error {
	switch r.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "string":
		return visitor.VisitString(r.String)
	case "ticketAccessEnum":
		return visitor.VisitTicketAccessEnum(r.TicketAccessEnum)
	}
}

type RoleTicketActionsItem struct {
	typeName          string
	String            string
	TicketActionsEnum TicketActionsEnum
}

func NewRoleTicketActionsItemFromString(value string) *RoleTicketActionsItem {
	return &RoleTicketActionsItem{typeName: "string", String: value}
}

func NewRoleTicketActionsItemFromTicketActionsEnum(value TicketActionsEnum) *RoleTicketActionsItem {
	return &RoleTicketActionsItem{typeName: "ticketActionsEnum", TicketActionsEnum: value}
}

func (r *RoleTicketActionsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		r.typeName = "string"
		r.String = valueString
		return nil
	}
	var valueTicketActionsEnum TicketActionsEnum
	if err := json.Unmarshal(data, &valueTicketActionsEnum); err == nil {
		r.typeName = "ticketActionsEnum"
		r.TicketActionsEnum = valueTicketActionsEnum
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RoleTicketActionsItem) MarshalJSON() ([]byte, error) {
	switch r.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "string":
		return json.Marshal(r.String)
	case "ticketActionsEnum":
		return json.Marshal(r.TicketActionsEnum)
	}
}

type RoleTicketActionsItemVisitor interface {
	VisitString(string) error
	VisitTicketActionsEnum(TicketActionsEnum) error
}

func (r *RoleTicketActionsItem) Accept(visitor RoleTicketActionsItemVisitor) error {
	switch r.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "string":
		return visitor.VisitString(r.String)
	case "ticketActionsEnum":
		return visitor.VisitTicketActionsEnum(r.TicketActionsEnum)
	}
}

// * `IN_NEXT_SYNC` - IN_NEXT_SYNC
// * `IN_LAST_SYNC` - IN_LAST_SYNC
type SelectiveSyncConfigurationsUsageEnum uint

const (
	SelectiveSyncConfigurationsUsageEnumInNextSync SelectiveSyncConfigurationsUsageEnum = iota + 1
	SelectiveSyncConfigurationsUsageEnumInLastSync
)

func (s SelectiveSyncConfigurationsUsageEnum) String() string {
	switch s {
	default:
		return strconv.Itoa(int(s))
	case SelectiveSyncConfigurationsUsageEnumInNextSync:
		return "IN_NEXT_SYNC"
	case SelectiveSyncConfigurationsUsageEnumInLastSync:
		return "IN_LAST_SYNC"
	}
}

func (s SelectiveSyncConfigurationsUsageEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", s.String())), nil
}

func (s *SelectiveSyncConfigurationsUsageEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "IN_NEXT_SYNC":
		value := SelectiveSyncConfigurationsUsageEnumInNextSync
		*s = value
	case "IN_LAST_SYNC":
		value := SelectiveSyncConfigurationsUsageEnumInLastSync
		*s = value
	}
	return nil
}

// # The SyncStatus Object
// ### Description
// The `SyncStatus` object is used to represent the syncing state of an account
//
// ### Usage Example
// View the `SyncStatus` for an account to see how recently its models were synced.
type SyncStatus struct {
	ModelName                        string                                `json:"model_name"`
	ModelId                          string                                `json:"model_id"`
	LastSyncStart                    *time.Time                            `json:"last_sync_start,omitempty"`
	NextSyncStart                    *time.Time                            `json:"next_sync_start,omitempty"`
	Status                           SyncStatusStatusEnum                  `json:"status,omitempty"`
	IsInitialSync                    bool                                  `json:"is_initial_sync"`
	SelectiveSyncConfigurationsUsage *SelectiveSyncConfigurationsUsageEnum `json:"selective_sync_configurations_usage,omitempty"`
}

// * `SYNCING` - SYNCING
// * `DONE` - DONE
// * `FAILED` - FAILED
// * `DISABLED` - DISABLED
// * `PAUSED` - PAUSED
// * `PARTIALLY_SYNCED` - PARTIALLY_SYNCED
type SyncStatusStatusEnum uint

const (
	SyncStatusStatusEnumSyncing SyncStatusStatusEnum = iota + 1
	SyncStatusStatusEnumDone
	SyncStatusStatusEnumFailed
	SyncStatusStatusEnumDisabled
	SyncStatusStatusEnumPaused
	SyncStatusStatusEnumPartiallySynced
)

func (s SyncStatusStatusEnum) String() string {
	switch s {
	default:
		return strconv.Itoa(int(s))
	case SyncStatusStatusEnumSyncing:
		return "SYNCING"
	case SyncStatusStatusEnumDone:
		return "DONE"
	case SyncStatusStatusEnumFailed:
		return "FAILED"
	case SyncStatusStatusEnumDisabled:
		return "DISABLED"
	case SyncStatusStatusEnumPaused:
		return "PAUSED"
	case SyncStatusStatusEnumPartiallySynced:
		return "PARTIALLY_SYNCED"
	}
}

func (s SyncStatusStatusEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", s.String())), nil
}

func (s *SyncStatusStatusEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "SYNCING":
		value := SyncStatusStatusEnumSyncing
		*s = value
	case "DONE":
		value := SyncStatusStatusEnumDone
		*s = value
	case "FAILED":
		value := SyncStatusStatusEnumFailed
		*s = value
	case "DISABLED":
		value := SyncStatusStatusEnumDisabled
		*s = value
	case "PAUSED":
		value := SyncStatusStatusEnumPaused
		*s = value
	case "PARTIALLY_SYNCED":
		value := SyncStatusStatusEnumPartiallySynced
		*s = value
	}
	return nil
}

// # The Tag Object
// ### Description
// The `Tag` object is used to represent a tag or label for a ticket.
//
// ### Usage Example
// TODO
type Tag struct {
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The tag's name.
	Name *string `json:"name,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted *bool      `json:"remote_was_deleted,omitempty"`
	CreatedAt        *time.Time `json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt    *time.Time     `json:"modified_at,omitempty"`
	FieldMappings map[string]any `json:"field_mappings,omitempty"`
	RemoteData    []*RemoteData  `json:"remote_data,omitempty"`
}

// # The Team Object
// ### Description
// The `Team` object is used to represent a team within the company receiving the ticket.
//
// ### Usage Example
// TODO
type Team struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The team's name.
	Name *string `json:"name,omitempty"`
	// The team's description.
	Description *string `json:"description,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted *bool      `json:"remote_was_deleted,omitempty"`
	CreatedAt        *time.Time `json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt    *time.Time     `json:"modified_at,omitempty"`
	FieldMappings map[string]any `json:"field_mappings,omitempty"`
	RemoteData    []*RemoteData  `json:"remote_data,omitempty"`
}

// # The Ticket Object
// ### Description
// The `Ticket` object is used to represent a ticket or a task within a system.
//
// ### Usage Example
// TODO
type Ticket struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The ticket's name.
	Name      *string                `json:"name,omitempty"`
	Assignees []*TicketAssigneesItem `json:"assignees,omitempty"`
	// The user who created this ticket.
	Creator *TicketCreator `json:"creator,omitempty"`
	// The ticket's due date.
	DueDate *time.Time `json:"due_date,omitempty"`
	// The current status of the ticket.
	//
	// * `OPEN` - OPEN
	// * `CLOSED` - CLOSED
	// * `IN_PROGRESS` - IN_PROGRESS
	// * `ON_HOLD` - ON_HOLD
	Status *TicketStatus `json:"status,omitempty"`
	// The ticket’s description. HTML version of description is mapped if supported by the third-party platform.
	Description *string                  `json:"description,omitempty"`
	Collections []*TicketCollectionsItem `json:"collections,omitempty"`
	// The ticket's type.
	TicketType *string `json:"ticket_type,omitempty"`
	// The account associated with the ticket.
	Account *TicketAccount `json:"account,omitempty"`
	// The contact associated with the ticket.
	Contact *TicketContact `json:"contact,omitempty"`
	// The ticket's parent ticket.
	ParentTicket *TicketParentTicket      `json:"parent_ticket,omitempty"`
	Attachments  []*TicketAttachmentsItem `json:"attachments,omitempty"`
	Tags         []*string                `json:"tags,omitempty"`
	// When the third party's ticket was created.
	RemoteCreatedAt *time.Time `json:"remote_created_at,omitempty"`
	// When the third party's ticket was updated.
	RemoteUpdatedAt *time.Time `json:"remote_updated_at,omitempty"`
	// When the ticket was completed.
	CompletedAt      *time.Time `json:"completed_at,omitempty"`
	RemoteWasDeleted *bool      `json:"remote_was_deleted,omitempty"`
	// The 3rd party url of the Ticket.
	TicketUrl *string `json:"ticket_url,omitempty"`
	// The priority or urgency of the Ticket.
	//
	// * `URGENT` - URGENT
	// * `HIGH` - HIGH
	// * `NORMAL` - NORMAL
	// * `LOW` - LOW
	Priority  *TicketPriority `json:"priority,omitempty"`
	CreatedAt *time.Time      `json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt    *time.Time     `json:"modified_at,omitempty"`
	FieldMappings map[string]any `json:"field_mappings,omitempty"`
	RemoteData    []*RemoteData  `json:"remote_data,omitempty"`
	RemoteFields  []*RemoteField `json:"remote_fields,omitempty"`
}

// * `ALL` - ALL
// * `ASSIGNED_ONLY` - ASSIGNED_ONLY
// * `TEAM_ONLY` - TEAM_ONLY
type TicketAccessEnum uint

const (
	TicketAccessEnumAll TicketAccessEnum = iota + 1
	TicketAccessEnumAssignedOnly
	TicketAccessEnumTeamOnly
)

func (t TicketAccessEnum) String() string {
	switch t {
	default:
		return strconv.Itoa(int(t))
	case TicketAccessEnumAll:
		return "ALL"
	case TicketAccessEnumAssignedOnly:
		return "ASSIGNED_ONLY"
	case TicketAccessEnumTeamOnly:
		return "TEAM_ONLY"
	}
}

func (t TicketAccessEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", t.String())), nil
}

func (t *TicketAccessEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "ALL":
		value := TicketAccessEnumAll
		*t = value
	case "ASSIGNED_ONLY":
		value := TicketAccessEnumAssignedOnly
		*t = value
	case "TEAM_ONLY":
		value := TicketAccessEnumTeamOnly
		*t = value
	}
	return nil
}

// The account associated with the ticket.
type TicketAccount struct {
	typeName string
	String   string
	Account  *Account
}

func NewTicketAccountFromString(value string) *TicketAccount {
	return &TicketAccount{typeName: "string", String: value}
}

func NewTicketAccountFromAccount(value *Account) *TicketAccount {
	return &TicketAccount{typeName: "account", Account: value}
}

func (t *TicketAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		t.typeName = "account"
		t.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketAccount) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return json.Marshal(t.String)
	case "account":
		return json.Marshal(t.Account)
	}
}

type TicketAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (t *TicketAccount) Accept(visitor TicketAccountVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return visitor.VisitString(t.String)
	case "account":
		return visitor.VisitAccount(t.Account)
	}
}

// * `VIEW` - VIEW
// * `CREATE` - CREATE
// * `EDIT` - EDIT
// * `DELETE` - DELETE
// * `CLOSE` - CLOSE
// * `ASSIGN` - ASSIGN
type TicketActionsEnum uint

const (
	TicketActionsEnumView TicketActionsEnum = iota + 1
	TicketActionsEnumCreate
	TicketActionsEnumEdit
	TicketActionsEnumDelete
	TicketActionsEnumClose
	TicketActionsEnumAssign
)

func (t TicketActionsEnum) String() string {
	switch t {
	default:
		return strconv.Itoa(int(t))
	case TicketActionsEnumView:
		return "VIEW"
	case TicketActionsEnumCreate:
		return "CREATE"
	case TicketActionsEnumEdit:
		return "EDIT"
	case TicketActionsEnumDelete:
		return "DELETE"
	case TicketActionsEnumClose:
		return "CLOSE"
	case TicketActionsEnumAssign:
		return "ASSIGN"
	}
}

func (t TicketActionsEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", t.String())), nil
}

func (t *TicketActionsEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "VIEW":
		value := TicketActionsEnumView
		*t = value
	case "CREATE":
		value := TicketActionsEnumCreate
		*t = value
	case "EDIT":
		value := TicketActionsEnumEdit
		*t = value
	case "DELETE":
		value := TicketActionsEnumDelete
		*t = value
	case "CLOSE":
		value := TicketActionsEnumClose
		*t = value
	case "ASSIGN":
		value := TicketActionsEnumAssign
		*t = value
	}
	return nil
}

type TicketAssigneesItem struct {
	typeName string
	String   string
	User     *User
}

func NewTicketAssigneesItemFromString(value string) *TicketAssigneesItem {
	return &TicketAssigneesItem{typeName: "string", String: value}
}

func NewTicketAssigneesItemFromUser(value *User) *TicketAssigneesItem {
	return &TicketAssigneesItem{typeName: "user", User: value}
}

func (t *TicketAssigneesItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	valueUser := new(User)
	if err := json.Unmarshal(data, &valueUser); err == nil {
		t.typeName = "user"
		t.User = valueUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketAssigneesItem) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return json.Marshal(t.String)
	case "user":
		return json.Marshal(t.User)
	}
}

type TicketAssigneesItemVisitor interface {
	VisitString(string) error
	VisitUser(*User) error
}

func (t *TicketAssigneesItem) Accept(visitor TicketAssigneesItemVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return visitor.VisitString(t.String)
	case "user":
		return visitor.VisitUser(t.User)
	}
}

type TicketAttachmentsItem struct {
	typeName   string
	String     string
	Attachment *Attachment
}

func NewTicketAttachmentsItemFromString(value string) *TicketAttachmentsItem {
	return &TicketAttachmentsItem{typeName: "string", String: value}
}

func NewTicketAttachmentsItemFromAttachment(value *Attachment) *TicketAttachmentsItem {
	return &TicketAttachmentsItem{typeName: "attachment", Attachment: value}
}

func (t *TicketAttachmentsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	valueAttachment := new(Attachment)
	if err := json.Unmarshal(data, &valueAttachment); err == nil {
		t.typeName = "attachment"
		t.Attachment = valueAttachment
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketAttachmentsItem) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return json.Marshal(t.String)
	case "attachment":
		return json.Marshal(t.Attachment)
	}
}

type TicketAttachmentsItemVisitor interface {
	VisitString(string) error
	VisitAttachment(*Attachment) error
}

func (t *TicketAttachmentsItem) Accept(visitor TicketAttachmentsItemVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return visitor.VisitString(t.String)
	case "attachment":
		return visitor.VisitAttachment(t.Attachment)
	}
}

type TicketCollectionsItem struct {
	typeName   string
	String     string
	Collection *Collection
}

func NewTicketCollectionsItemFromString(value string) *TicketCollectionsItem {
	return &TicketCollectionsItem{typeName: "string", String: value}
}

func NewTicketCollectionsItemFromCollection(value *Collection) *TicketCollectionsItem {
	return &TicketCollectionsItem{typeName: "collection", Collection: value}
}

func (t *TicketCollectionsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	valueCollection := new(Collection)
	if err := json.Unmarshal(data, &valueCollection); err == nil {
		t.typeName = "collection"
		t.Collection = valueCollection
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketCollectionsItem) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return json.Marshal(t.String)
	case "collection":
		return json.Marshal(t.Collection)
	}
}

type TicketCollectionsItemVisitor interface {
	VisitString(string) error
	VisitCollection(*Collection) error
}

func (t *TicketCollectionsItem) Accept(visitor TicketCollectionsItemVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return visitor.VisitString(t.String)
	case "collection":
		return visitor.VisitCollection(t.Collection)
	}
}

// The contact associated with the ticket.
type TicketContact struct {
	typeName string
	String   string
	Contact  *Contact
}

func NewTicketContactFromString(value string) *TicketContact {
	return &TicketContact{typeName: "string", String: value}
}

func NewTicketContactFromContact(value *Contact) *TicketContact {
	return &TicketContact{typeName: "contact", Contact: value}
}

func (t *TicketContact) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	valueContact := new(Contact)
	if err := json.Unmarshal(data, &valueContact); err == nil {
		t.typeName = "contact"
		t.Contact = valueContact
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketContact) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return json.Marshal(t.String)
	case "contact":
		return json.Marshal(t.Contact)
	}
}

type TicketContactVisitor interface {
	VisitString(string) error
	VisitContact(*Contact) error
}

func (t *TicketContact) Accept(visitor TicketContactVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return visitor.VisitString(t.String)
	case "contact":
		return visitor.VisitContact(t.Contact)
	}
}

// The user who created this ticket.
type TicketCreator struct {
	typeName string
	String   string
	User     *User
}

func NewTicketCreatorFromString(value string) *TicketCreator {
	return &TicketCreator{typeName: "string", String: value}
}

func NewTicketCreatorFromUser(value *User) *TicketCreator {
	return &TicketCreator{typeName: "user", User: value}
}

func (t *TicketCreator) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	valueUser := new(User)
	if err := json.Unmarshal(data, &valueUser); err == nil {
		t.typeName = "user"
		t.User = valueUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketCreator) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return json.Marshal(t.String)
	case "user":
		return json.Marshal(t.User)
	}
}

type TicketCreatorVisitor interface {
	VisitString(string) error
	VisitUser(*User) error
}

func (t *TicketCreator) Accept(visitor TicketCreatorVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return visitor.VisitString(t.String)
	case "user":
		return visitor.VisitUser(t.User)
	}
}

// The ticket's parent ticket.
type TicketParentTicket struct {
	typeName string
	String   string
	Ticket   *Ticket
}

func NewTicketParentTicketFromString(value string) *TicketParentTicket {
	return &TicketParentTicket{typeName: "string", String: value}
}

func NewTicketParentTicketFromTicket(value *Ticket) *TicketParentTicket {
	return &TicketParentTicket{typeName: "ticket", Ticket: value}
}

func (t *TicketParentTicket) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	valueTicket := new(Ticket)
	if err := json.Unmarshal(data, &valueTicket); err == nil {
		t.typeName = "ticket"
		t.Ticket = valueTicket
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketParentTicket) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return json.Marshal(t.String)
	case "ticket":
		return json.Marshal(t.Ticket)
	}
}

type TicketParentTicketVisitor interface {
	VisitString(string) error
	VisitTicket(*Ticket) error
}

func (t *TicketParentTicket) Accept(visitor TicketParentTicketVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return visitor.VisitString(t.String)
	case "ticket":
		return visitor.VisitTicket(t.Ticket)
	}
}

// The priority or urgency of the Ticket.
//
// * `URGENT` - URGENT
// * `HIGH` - HIGH
// * `NORMAL` - NORMAL
// * `LOW` - LOW
type TicketPriority struct {
	typeName     string
	PriorityEnum PriorityEnum
	String       string
}

func NewTicketPriorityFromPriorityEnum(value PriorityEnum) *TicketPriority {
	return &TicketPriority{typeName: "priorityEnum", PriorityEnum: value}
}

func NewTicketPriorityFromString(value string) *TicketPriority {
	return &TicketPriority{typeName: "string", String: value}
}

func (t *TicketPriority) UnmarshalJSON(data []byte) error {
	var valuePriorityEnum PriorityEnum
	if err := json.Unmarshal(data, &valuePriorityEnum); err == nil {
		t.typeName = "priorityEnum"
		t.PriorityEnum = valuePriorityEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketPriority) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "priorityEnum":
		return json.Marshal(t.PriorityEnum)
	case "string":
		return json.Marshal(t.String)
	}
}

type TicketPriorityVisitor interface {
	VisitPriorityEnum(PriorityEnum) error
	VisitString(string) error
}

func (t *TicketPriority) Accept(visitor TicketPriorityVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "priorityEnum":
		return visitor.VisitPriorityEnum(t.PriorityEnum)
	case "string":
		return visitor.VisitString(t.String)
	}
}

// # The Ticket Object
// ### Description
// The `Ticket` object is used to represent a ticket or a task within a system.
//
// ### Usage Example
// TODO
type TicketRequest struct {
	// The ticket's name.
	Name      *string                       `json:"name,omitempty"`
	Assignees []*TicketRequestAssigneesItem `json:"assignees,omitempty"`
	// The user who created this ticket.
	Creator *TicketRequestCreator `json:"creator,omitempty"`
	// The ticket's due date.
	DueDate *time.Time `json:"due_date,omitempty"`
	// The current status of the ticket.
	//
	// * `OPEN` - OPEN
	// * `CLOSED` - CLOSED
	// * `IN_PROGRESS` - IN_PROGRESS
	// * `ON_HOLD` - ON_HOLD
	Status *TicketRequestStatus `json:"status,omitempty"`
	// The ticket’s description. HTML version of description is mapped if supported by the third-party platform.
	Description *string                         `json:"description,omitempty"`
	Collections []*TicketRequestCollectionsItem `json:"collections,omitempty"`
	// The ticket's type.
	TicketType *string `json:"ticket_type,omitempty"`
	// The account associated with the ticket.
	Account *TicketRequestAccount `json:"account,omitempty"`
	// The contact associated with the ticket.
	Contact *TicketRequestContact `json:"contact,omitempty"`
	// The ticket's parent ticket.
	ParentTicket *TicketRequestParentTicket      `json:"parent_ticket,omitempty"`
	Attachments  []*TicketRequestAttachmentsItem `json:"attachments,omitempty"`
	Tags         []*string                       `json:"tags,omitempty"`
	// When the ticket was completed.
	CompletedAt *time.Time `json:"completed_at,omitempty"`
	// The 3rd party url of the Ticket.
	TicketUrl *string `json:"ticket_url,omitempty"`
	// The priority or urgency of the Ticket.
	//
	// * `URGENT` - URGENT
	// * `HIGH` - HIGH
	// * `NORMAL` - NORMAL
	// * `LOW` - LOW
	Priority            *TicketRequestPriority `json:"priority,omitempty"`
	IntegrationParams   map[string]any         `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]any         `json:"linked_account_params,omitempty"`
	RemoteFields        []*RemoteFieldRequest  `json:"remote_fields,omitempty"`
}

// The account associated with the ticket.
type TicketRequestAccount struct {
	typeName string
	String   string
	Account  *Account
}

func NewTicketRequestAccountFromString(value string) *TicketRequestAccount {
	return &TicketRequestAccount{typeName: "string", String: value}
}

func NewTicketRequestAccountFromAccount(value *Account) *TicketRequestAccount {
	return &TicketRequestAccount{typeName: "account", Account: value}
}

func (t *TicketRequestAccount) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		t.typeName = "account"
		t.Account = valueAccount
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketRequestAccount) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return json.Marshal(t.String)
	case "account":
		return json.Marshal(t.Account)
	}
}

type TicketRequestAccountVisitor interface {
	VisitString(string) error
	VisitAccount(*Account) error
}

func (t *TicketRequestAccount) Accept(visitor TicketRequestAccountVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return visitor.VisitString(t.String)
	case "account":
		return visitor.VisitAccount(t.Account)
	}
}

type TicketRequestAssigneesItem struct {
	typeName string
	String   string
	User     *User
}

func NewTicketRequestAssigneesItemFromString(value string) *TicketRequestAssigneesItem {
	return &TicketRequestAssigneesItem{typeName: "string", String: value}
}

func NewTicketRequestAssigneesItemFromUser(value *User) *TicketRequestAssigneesItem {
	return &TicketRequestAssigneesItem{typeName: "user", User: value}
}

func (t *TicketRequestAssigneesItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	valueUser := new(User)
	if err := json.Unmarshal(data, &valueUser); err == nil {
		t.typeName = "user"
		t.User = valueUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketRequestAssigneesItem) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return json.Marshal(t.String)
	case "user":
		return json.Marshal(t.User)
	}
}

type TicketRequestAssigneesItemVisitor interface {
	VisitString(string) error
	VisitUser(*User) error
}

func (t *TicketRequestAssigneesItem) Accept(visitor TicketRequestAssigneesItemVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return visitor.VisitString(t.String)
	case "user":
		return visitor.VisitUser(t.User)
	}
}

type TicketRequestAttachmentsItem struct {
	typeName   string
	String     string
	Attachment *Attachment
}

func NewTicketRequestAttachmentsItemFromString(value string) *TicketRequestAttachmentsItem {
	return &TicketRequestAttachmentsItem{typeName: "string", String: value}
}

func NewTicketRequestAttachmentsItemFromAttachment(value *Attachment) *TicketRequestAttachmentsItem {
	return &TicketRequestAttachmentsItem{typeName: "attachment", Attachment: value}
}

func (t *TicketRequestAttachmentsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	valueAttachment := new(Attachment)
	if err := json.Unmarshal(data, &valueAttachment); err == nil {
		t.typeName = "attachment"
		t.Attachment = valueAttachment
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketRequestAttachmentsItem) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return json.Marshal(t.String)
	case "attachment":
		return json.Marshal(t.Attachment)
	}
}

type TicketRequestAttachmentsItemVisitor interface {
	VisitString(string) error
	VisitAttachment(*Attachment) error
}

func (t *TicketRequestAttachmentsItem) Accept(visitor TicketRequestAttachmentsItemVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return visitor.VisitString(t.String)
	case "attachment":
		return visitor.VisitAttachment(t.Attachment)
	}
}

type TicketRequestCollectionsItem struct {
	typeName   string
	String     string
	Collection *Collection
}

func NewTicketRequestCollectionsItemFromString(value string) *TicketRequestCollectionsItem {
	return &TicketRequestCollectionsItem{typeName: "string", String: value}
}

func NewTicketRequestCollectionsItemFromCollection(value *Collection) *TicketRequestCollectionsItem {
	return &TicketRequestCollectionsItem{typeName: "collection", Collection: value}
}

func (t *TicketRequestCollectionsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	valueCollection := new(Collection)
	if err := json.Unmarshal(data, &valueCollection); err == nil {
		t.typeName = "collection"
		t.Collection = valueCollection
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketRequestCollectionsItem) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return json.Marshal(t.String)
	case "collection":
		return json.Marshal(t.Collection)
	}
}

type TicketRequestCollectionsItemVisitor interface {
	VisitString(string) error
	VisitCollection(*Collection) error
}

func (t *TicketRequestCollectionsItem) Accept(visitor TicketRequestCollectionsItemVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return visitor.VisitString(t.String)
	case "collection":
		return visitor.VisitCollection(t.Collection)
	}
}

// The contact associated with the ticket.
type TicketRequestContact struct {
	typeName string
	String   string
	Contact  *Contact
}

func NewTicketRequestContactFromString(value string) *TicketRequestContact {
	return &TicketRequestContact{typeName: "string", String: value}
}

func NewTicketRequestContactFromContact(value *Contact) *TicketRequestContact {
	return &TicketRequestContact{typeName: "contact", Contact: value}
}

func (t *TicketRequestContact) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	valueContact := new(Contact)
	if err := json.Unmarshal(data, &valueContact); err == nil {
		t.typeName = "contact"
		t.Contact = valueContact
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketRequestContact) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return json.Marshal(t.String)
	case "contact":
		return json.Marshal(t.Contact)
	}
}

type TicketRequestContactVisitor interface {
	VisitString(string) error
	VisitContact(*Contact) error
}

func (t *TicketRequestContact) Accept(visitor TicketRequestContactVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return visitor.VisitString(t.String)
	case "contact":
		return visitor.VisitContact(t.Contact)
	}
}

// The user who created this ticket.
type TicketRequestCreator struct {
	typeName string
	String   string
	User     *User
}

func NewTicketRequestCreatorFromString(value string) *TicketRequestCreator {
	return &TicketRequestCreator{typeName: "string", String: value}
}

func NewTicketRequestCreatorFromUser(value *User) *TicketRequestCreator {
	return &TicketRequestCreator{typeName: "user", User: value}
}

func (t *TicketRequestCreator) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	valueUser := new(User)
	if err := json.Unmarshal(data, &valueUser); err == nil {
		t.typeName = "user"
		t.User = valueUser
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketRequestCreator) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return json.Marshal(t.String)
	case "user":
		return json.Marshal(t.User)
	}
}

type TicketRequestCreatorVisitor interface {
	VisitString(string) error
	VisitUser(*User) error
}

func (t *TicketRequestCreator) Accept(visitor TicketRequestCreatorVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return visitor.VisitString(t.String)
	case "user":
		return visitor.VisitUser(t.User)
	}
}

// The ticket's parent ticket.
type TicketRequestParentTicket struct {
	typeName string
	String   string
	Ticket   *Ticket
}

func NewTicketRequestParentTicketFromString(value string) *TicketRequestParentTicket {
	return &TicketRequestParentTicket{typeName: "string", String: value}
}

func NewTicketRequestParentTicketFromTicket(value *Ticket) *TicketRequestParentTicket {
	return &TicketRequestParentTicket{typeName: "ticket", Ticket: value}
}

func (t *TicketRequestParentTicket) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	valueTicket := new(Ticket)
	if err := json.Unmarshal(data, &valueTicket); err == nil {
		t.typeName = "ticket"
		t.Ticket = valueTicket
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketRequestParentTicket) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return json.Marshal(t.String)
	case "ticket":
		return json.Marshal(t.Ticket)
	}
}

type TicketRequestParentTicketVisitor interface {
	VisitString(string) error
	VisitTicket(*Ticket) error
}

func (t *TicketRequestParentTicket) Accept(visitor TicketRequestParentTicketVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return visitor.VisitString(t.String)
	case "ticket":
		return visitor.VisitTicket(t.Ticket)
	}
}

// The priority or urgency of the Ticket.
//
// * `URGENT` - URGENT
// * `HIGH` - HIGH
// * `NORMAL` - NORMAL
// * `LOW` - LOW
type TicketRequestPriority struct {
	typeName     string
	PriorityEnum PriorityEnum
	String       string
}

func NewTicketRequestPriorityFromPriorityEnum(value PriorityEnum) *TicketRequestPriority {
	return &TicketRequestPriority{typeName: "priorityEnum", PriorityEnum: value}
}

func NewTicketRequestPriorityFromString(value string) *TicketRequestPriority {
	return &TicketRequestPriority{typeName: "string", String: value}
}

func (t *TicketRequestPriority) UnmarshalJSON(data []byte) error {
	var valuePriorityEnum PriorityEnum
	if err := json.Unmarshal(data, &valuePriorityEnum); err == nil {
		t.typeName = "priorityEnum"
		t.PriorityEnum = valuePriorityEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketRequestPriority) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "priorityEnum":
		return json.Marshal(t.PriorityEnum)
	case "string":
		return json.Marshal(t.String)
	}
}

type TicketRequestPriorityVisitor interface {
	VisitPriorityEnum(PriorityEnum) error
	VisitString(string) error
}

func (t *TicketRequestPriority) Accept(visitor TicketRequestPriorityVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "priorityEnum":
		return visitor.VisitPriorityEnum(t.PriorityEnum)
	case "string":
		return visitor.VisitString(t.String)
	}
}

// The current status of the ticket.
//
// * `OPEN` - OPEN
// * `CLOSED` - CLOSED
// * `IN_PROGRESS` - IN_PROGRESS
// * `ON_HOLD` - ON_HOLD
type TicketRequestStatus struct {
	typeName         string
	TicketStatusEnum TicketStatusEnum
	String           string
}

func NewTicketRequestStatusFromTicketStatusEnum(value TicketStatusEnum) *TicketRequestStatus {
	return &TicketRequestStatus{typeName: "ticketStatusEnum", TicketStatusEnum: value}
}

func NewTicketRequestStatusFromString(value string) *TicketRequestStatus {
	return &TicketRequestStatus{typeName: "string", String: value}
}

func (t *TicketRequestStatus) UnmarshalJSON(data []byte) error {
	var valueTicketStatusEnum TicketStatusEnum
	if err := json.Unmarshal(data, &valueTicketStatusEnum); err == nil {
		t.typeName = "ticketStatusEnum"
		t.TicketStatusEnum = valueTicketStatusEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketRequestStatus) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "ticketStatusEnum":
		return json.Marshal(t.TicketStatusEnum)
	case "string":
		return json.Marshal(t.String)
	}
}

type TicketRequestStatusVisitor interface {
	VisitTicketStatusEnum(TicketStatusEnum) error
	VisitString(string) error
}

func (t *TicketRequestStatus) Accept(visitor TicketRequestStatusVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "ticketStatusEnum":
		return visitor.VisitTicketStatusEnum(t.TicketStatusEnum)
	case "string":
		return visitor.VisitString(t.String)
	}
}

type TicketResponse struct {
	Model    *Ticket                     `json:"model,omitempty"`
	Warnings []*WarningValidationProblem `json:"warnings,omitempty"`
	Errors   []*ErrorValidationProblem   `json:"errors,omitempty"`
	Logs     []*DebugModeLog             `json:"logs,omitempty"`
}

// The current status of the ticket.
//
// * `OPEN` - OPEN
// * `CLOSED` - CLOSED
// * `IN_PROGRESS` - IN_PROGRESS
// * `ON_HOLD` - ON_HOLD
type TicketStatus struct {
	typeName         string
	TicketStatusEnum TicketStatusEnum
	String           string
}

func NewTicketStatusFromTicketStatusEnum(value TicketStatusEnum) *TicketStatus {
	return &TicketStatus{typeName: "ticketStatusEnum", TicketStatusEnum: value}
}

func NewTicketStatusFromString(value string) *TicketStatus {
	return &TicketStatus{typeName: "string", String: value}
}

func (t *TicketStatus) UnmarshalJSON(data []byte) error {
	var valueTicketStatusEnum TicketStatusEnum
	if err := json.Unmarshal(data, &valueTicketStatusEnum); err == nil {
		t.typeName = "ticketStatusEnum"
		t.TicketStatusEnum = valueTicketStatusEnum
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TicketStatus) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "ticketStatusEnum":
		return json.Marshal(t.TicketStatusEnum)
	case "string":
		return json.Marshal(t.String)
	}
}

type TicketStatusVisitor interface {
	VisitTicketStatusEnum(TicketStatusEnum) error
	VisitString(string) error
}

func (t *TicketStatus) Accept(visitor TicketStatusVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "ticketStatusEnum":
		return visitor.VisitTicketStatusEnum(t.TicketStatusEnum)
	case "string":
		return visitor.VisitString(t.String)
	}
}

// * `OPEN` - OPEN
// * `CLOSED` - CLOSED
// * `IN_PROGRESS` - IN_PROGRESS
// * `ON_HOLD` - ON_HOLD
type TicketStatusEnum uint

const (
	TicketStatusEnumOpen TicketStatusEnum = iota + 1
	TicketStatusEnumClosed
	TicketStatusEnumInProgress
	TicketStatusEnumOnHold
)

func (t TicketStatusEnum) String() string {
	switch t {
	default:
		return strconv.Itoa(int(t))
	case TicketStatusEnumOpen:
		return "OPEN"
	case TicketStatusEnumClosed:
		return "CLOSED"
	case TicketStatusEnumInProgress:
		return "IN_PROGRESS"
	case TicketStatusEnumOnHold:
		return "ON_HOLD"
	}
}

func (t TicketStatusEnum) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", t.String())), nil
}

func (t *TicketStatusEnum) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "OPEN":
		value := TicketStatusEnumOpen
		*t = value
	case "CLOSED":
		value := TicketStatusEnumClosed
		*t = value
	case "IN_PROGRESS":
		value := TicketStatusEnumInProgress
		*t = value
	case "ON_HOLD":
		value := TicketStatusEnumOnHold
		*t = value
	}
	return nil
}

type TicketingAttachmentResponse struct {
	Model    *Attachment                 `json:"model,omitempty"`
	Warnings []*WarningValidationProblem `json:"warnings,omitempty"`
	Errors   []*ErrorValidationProblem   `json:"errors,omitempty"`
	Logs     []*DebugModeLog             `json:"logs,omitempty"`
}

type TicketsCollaboratorsListRequestExpand uint

const (
	TicketsCollaboratorsListRequestExpandRoles TicketsCollaboratorsListRequestExpand = iota + 1
	TicketsCollaboratorsListRequestExpandTeams
	TicketsCollaboratorsListRequestExpandTeamsRoles
)

func (t TicketsCollaboratorsListRequestExpand) String() string {
	switch t {
	default:
		return strconv.Itoa(int(t))
	case TicketsCollaboratorsListRequestExpandRoles:
		return "roles"
	case TicketsCollaboratorsListRequestExpandTeams:
		return "teams"
	case TicketsCollaboratorsListRequestExpandTeamsRoles:
		return "teams,roles"
	}
}

func (t TicketsCollaboratorsListRequestExpand) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", t.String())), nil
}

func (t *TicketsCollaboratorsListRequestExpand) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "roles":
		value := TicketsCollaboratorsListRequestExpandRoles
		*t = value
	case "teams":
		value := TicketsCollaboratorsListRequestExpandTeams
		*t = value
	case "teams,roles":
		value := TicketsCollaboratorsListRequestExpandTeamsRoles
		*t = value
	}
	return nil
}

type TicketsListRequestExpand uint

const (
	TicketsListRequestExpandAccount TicketsListRequestExpand = iota + 1
	TicketsListRequestExpandAccountContact
	TicketsListRequestExpandAccountContactCreator
	TicketsListRequestExpandAccountContactCreatorParentTicket
	TicketsListRequestExpandAccountContactParentTicket
	TicketsListRequestExpandAccountCreator
	TicketsListRequestExpandAccountCreatorParentTicket
	TicketsListRequestExpandAccountParentTicket
	TicketsListRequestExpandAssignees
	TicketsListRequestExpandAssigneesAccount
	TicketsListRequestExpandAssigneesAccountContact
	TicketsListRequestExpandAssigneesAccountContactCreator
	TicketsListRequestExpandAssigneesAccountContactCreatorParentTicket
	TicketsListRequestExpandAssigneesAccountContactParentTicket
	TicketsListRequestExpandAssigneesAccountCreator
	TicketsListRequestExpandAssigneesAccountCreatorParentTicket
	TicketsListRequestExpandAssigneesAccountParentTicket
	TicketsListRequestExpandAssigneesCollections
	TicketsListRequestExpandAssigneesCollectionsAccount
	TicketsListRequestExpandAssigneesCollectionsAccountContact
	TicketsListRequestExpandAssigneesCollectionsAccountContactCreator
	TicketsListRequestExpandAssigneesCollectionsAccountContactCreatorParentTicket
	TicketsListRequestExpandAssigneesCollectionsAccountContactParentTicket
	TicketsListRequestExpandAssigneesCollectionsAccountCreator
	TicketsListRequestExpandAssigneesCollectionsAccountCreatorParentTicket
	TicketsListRequestExpandAssigneesCollectionsAccountParentTicket
	TicketsListRequestExpandAssigneesCollectionsContact
	TicketsListRequestExpandAssigneesCollectionsContactCreator
	TicketsListRequestExpandAssigneesCollectionsContactCreatorParentTicket
	TicketsListRequestExpandAssigneesCollectionsContactParentTicket
	TicketsListRequestExpandAssigneesCollectionsCreator
	TicketsListRequestExpandAssigneesCollectionsCreatorParentTicket
	TicketsListRequestExpandAssigneesCollectionsParentTicket
	TicketsListRequestExpandAssigneesContact
	TicketsListRequestExpandAssigneesContactCreator
	TicketsListRequestExpandAssigneesContactCreatorParentTicket
	TicketsListRequestExpandAssigneesContactParentTicket
	TicketsListRequestExpandAssigneesCreator
	TicketsListRequestExpandAssigneesCreatorParentTicket
	TicketsListRequestExpandAssigneesParentTicket
	TicketsListRequestExpandAttachments
	TicketsListRequestExpandAttachmentsAccount
	TicketsListRequestExpandAttachmentsAccountContact
	TicketsListRequestExpandAttachmentsAccountContactCreator
	TicketsListRequestExpandAttachmentsAccountContactCreatorParentTicket
	TicketsListRequestExpandAttachmentsAccountContactParentTicket
	TicketsListRequestExpandAttachmentsAccountCreator
	TicketsListRequestExpandAttachmentsAccountCreatorParentTicket
	TicketsListRequestExpandAttachmentsAccountParentTicket
	TicketsListRequestExpandAttachmentsAssignees
	TicketsListRequestExpandAttachmentsAssigneesAccount
	TicketsListRequestExpandAttachmentsAssigneesAccountContact
	TicketsListRequestExpandAttachmentsAssigneesAccountContactCreator
	TicketsListRequestExpandAttachmentsAssigneesAccountContactCreatorParentTicket
	TicketsListRequestExpandAttachmentsAssigneesAccountContactParentTicket
	TicketsListRequestExpandAttachmentsAssigneesAccountCreator
	TicketsListRequestExpandAttachmentsAssigneesAccountCreatorParentTicket
	TicketsListRequestExpandAttachmentsAssigneesAccountParentTicket
	TicketsListRequestExpandAttachmentsAssigneesCollections
	TicketsListRequestExpandAttachmentsAssigneesCollectionsAccount
	TicketsListRequestExpandAttachmentsAssigneesCollectionsAccountContact
	TicketsListRequestExpandAttachmentsAssigneesCollectionsAccountContactCreator
	TicketsListRequestExpandAttachmentsAssigneesCollectionsAccountContactCreatorParentTicket
	TicketsListRequestExpandAttachmentsAssigneesCollectionsAccountContactParentTicket
	TicketsListRequestExpandAttachmentsAssigneesCollectionsAccountCreator
	TicketsListRequestExpandAttachmentsAssigneesCollectionsAccountCreatorParentTicket
	TicketsListRequestExpandAttachmentsAssigneesCollectionsAccountParentTicket
	TicketsListRequestExpandAttachmentsAssigneesCollectionsContact
	TicketsListRequestExpandAttachmentsAssigneesCollectionsContactCreator
	TicketsListRequestExpandAttachmentsAssigneesCollectionsContactCreatorParentTicket
	TicketsListRequestExpandAttachmentsAssigneesCollectionsContactParentTicket
	TicketsListRequestExpandAttachmentsAssigneesCollectionsCreator
	TicketsListRequestExpandAttachmentsAssigneesCollectionsCreatorParentTicket
	TicketsListRequestExpandAttachmentsAssigneesCollectionsParentTicket
	TicketsListRequestExpandAttachmentsAssigneesContact
	TicketsListRequestExpandAttachmentsAssigneesContactCreator
	TicketsListRequestExpandAttachmentsAssigneesContactCreatorParentTicket
	TicketsListRequestExpandAttachmentsAssigneesContactParentTicket
	TicketsListRequestExpandAttachmentsAssigneesCreator
	TicketsListRequestExpandAttachmentsAssigneesCreatorParentTicket
	TicketsListRequestExpandAttachmentsAssigneesParentTicket
	TicketsListRequestExpandAttachmentsCollections
	TicketsListRequestExpandAttachmentsCollectionsAccount
	TicketsListRequestExpandAttachmentsCollectionsAccountContact
	TicketsListRequestExpandAttachmentsCollectionsAccountContactCreator
	TicketsListRequestExpandAttachmentsCollectionsAccountContactCreatorParentTicket
	TicketsListRequestExpandAttachmentsCollectionsAccountContactParentTicket
	TicketsListRequestExpandAttachmentsCollectionsAccountCreator
	TicketsListRequestExpandAttachmentsCollectionsAccountCreatorParentTicket
	TicketsListRequestExpandAttachmentsCollectionsAccountParentTicket
	TicketsListRequestExpandAttachmentsCollectionsContact
	TicketsListRequestExpandAttachmentsCollectionsContactCreator
	TicketsListRequestExpandAttachmentsCollectionsContactCreatorParentTicket
	TicketsListRequestExpandAttachmentsCollectionsContactParentTicket
	TicketsListRequestExpandAttachmentsCollectionsCreator
	TicketsListRequestExpandAttachmentsCollectionsCreatorParentTicket
	TicketsListRequestExpandAttachmentsCollectionsParentTicket
	TicketsListRequestExpandAttachmentsContact
	TicketsListRequestExpandAttachmentsContactCreator
	TicketsListRequestExpandAttachmentsContactCreatorParentTicket
	TicketsListRequestExpandAttachmentsContactParentTicket
	TicketsListRequestExpandAttachmentsCreator
	TicketsListRequestExpandAttachmentsCreatorParentTicket
	TicketsListRequestExpandAttachmentsParentTicket
	TicketsListRequestExpandCollections
	TicketsListRequestExpandCollectionsAccount
	TicketsListRequestExpandCollectionsAccountContact
	TicketsListRequestExpandCollectionsAccountContactCreator
	TicketsListRequestExpandCollectionsAccountContactCreatorParentTicket
	TicketsListRequestExpandCollectionsAccountContactParentTicket
	TicketsListRequestExpandCollectionsAccountCreator
	TicketsListRequestExpandCollectionsAccountCreatorParentTicket
	TicketsListRequestExpandCollectionsAccountParentTicket
	TicketsListRequestExpandCollectionsContact
	TicketsListRequestExpandCollectionsContactCreator
	TicketsListRequestExpandCollectionsContactCreatorParentTicket
	TicketsListRequestExpandCollectionsContactParentTicket
	TicketsListRequestExpandCollectionsCreator
	TicketsListRequestExpandCollectionsCreatorParentTicket
	TicketsListRequestExpandCollectionsParentTicket
	TicketsListRequestExpandContact
	TicketsListRequestExpandContactCreator
	TicketsListRequestExpandContactCreatorParentTicket
	TicketsListRequestExpandContactParentTicket
	TicketsListRequestExpandCreator
	TicketsListRequestExpandCreatorParentTicket
	TicketsListRequestExpandParentTicket
)

func (t TicketsListRequestExpand) String() string {
	switch t {
	default:
		return strconv.Itoa(int(t))
	case TicketsListRequestExpandAccount:
		return "account"
	case TicketsListRequestExpandAccountContact:
		return "account,contact"
	case TicketsListRequestExpandAccountContactCreator:
		return "account,contact,creator"
	case TicketsListRequestExpandAccountContactCreatorParentTicket:
		return "account,contact,creator,parent_ticket"
	case TicketsListRequestExpandAccountContactParentTicket:
		return "account,contact,parent_ticket"
	case TicketsListRequestExpandAccountCreator:
		return "account,creator"
	case TicketsListRequestExpandAccountCreatorParentTicket:
		return "account,creator,parent_ticket"
	case TicketsListRequestExpandAccountParentTicket:
		return "account,parent_ticket"
	case TicketsListRequestExpandAssignees:
		return "assignees"
	case TicketsListRequestExpandAssigneesAccount:
		return "assignees,account"
	case TicketsListRequestExpandAssigneesAccountContact:
		return "assignees,account,contact"
	case TicketsListRequestExpandAssigneesAccountContactCreator:
		return "assignees,account,contact,creator"
	case TicketsListRequestExpandAssigneesAccountContactCreatorParentTicket:
		return "assignees,account,contact,creator,parent_ticket"
	case TicketsListRequestExpandAssigneesAccountContactParentTicket:
		return "assignees,account,contact,parent_ticket"
	case TicketsListRequestExpandAssigneesAccountCreator:
		return "assignees,account,creator"
	case TicketsListRequestExpandAssigneesAccountCreatorParentTicket:
		return "assignees,account,creator,parent_ticket"
	case TicketsListRequestExpandAssigneesAccountParentTicket:
		return "assignees,account,parent_ticket"
	case TicketsListRequestExpandAssigneesCollections:
		return "assignees,collections"
	case TicketsListRequestExpandAssigneesCollectionsAccount:
		return "assignees,collections,account"
	case TicketsListRequestExpandAssigneesCollectionsAccountContact:
		return "assignees,collections,account,contact"
	case TicketsListRequestExpandAssigneesCollectionsAccountContactCreator:
		return "assignees,collections,account,contact,creator"
	case TicketsListRequestExpandAssigneesCollectionsAccountContactCreatorParentTicket:
		return "assignees,collections,account,contact,creator,parent_ticket"
	case TicketsListRequestExpandAssigneesCollectionsAccountContactParentTicket:
		return "assignees,collections,account,contact,parent_ticket"
	case TicketsListRequestExpandAssigneesCollectionsAccountCreator:
		return "assignees,collections,account,creator"
	case TicketsListRequestExpandAssigneesCollectionsAccountCreatorParentTicket:
		return "assignees,collections,account,creator,parent_ticket"
	case TicketsListRequestExpandAssigneesCollectionsAccountParentTicket:
		return "assignees,collections,account,parent_ticket"
	case TicketsListRequestExpandAssigneesCollectionsContact:
		return "assignees,collections,contact"
	case TicketsListRequestExpandAssigneesCollectionsContactCreator:
		return "assignees,collections,contact,creator"
	case TicketsListRequestExpandAssigneesCollectionsContactCreatorParentTicket:
		return "assignees,collections,contact,creator,parent_ticket"
	case TicketsListRequestExpandAssigneesCollectionsContactParentTicket:
		return "assignees,collections,contact,parent_ticket"
	case TicketsListRequestExpandAssigneesCollectionsCreator:
		return "assignees,collections,creator"
	case TicketsListRequestExpandAssigneesCollectionsCreatorParentTicket:
		return "assignees,collections,creator,parent_ticket"
	case TicketsListRequestExpandAssigneesCollectionsParentTicket:
		return "assignees,collections,parent_ticket"
	case TicketsListRequestExpandAssigneesContact:
		return "assignees,contact"
	case TicketsListRequestExpandAssigneesContactCreator:
		return "assignees,contact,creator"
	case TicketsListRequestExpandAssigneesContactCreatorParentTicket:
		return "assignees,contact,creator,parent_ticket"
	case TicketsListRequestExpandAssigneesContactParentTicket:
		return "assignees,contact,parent_ticket"
	case TicketsListRequestExpandAssigneesCreator:
		return "assignees,creator"
	case TicketsListRequestExpandAssigneesCreatorParentTicket:
		return "assignees,creator,parent_ticket"
	case TicketsListRequestExpandAssigneesParentTicket:
		return "assignees,parent_ticket"
	case TicketsListRequestExpandAttachments:
		return "attachments"
	case TicketsListRequestExpandAttachmentsAccount:
		return "attachments,account"
	case TicketsListRequestExpandAttachmentsAccountContact:
		return "attachments,account,contact"
	case TicketsListRequestExpandAttachmentsAccountContactCreator:
		return "attachments,account,contact,creator"
	case TicketsListRequestExpandAttachmentsAccountContactCreatorParentTicket:
		return "attachments,account,contact,creator,parent_ticket"
	case TicketsListRequestExpandAttachmentsAccountContactParentTicket:
		return "attachments,account,contact,parent_ticket"
	case TicketsListRequestExpandAttachmentsAccountCreator:
		return "attachments,account,creator"
	case TicketsListRequestExpandAttachmentsAccountCreatorParentTicket:
		return "attachments,account,creator,parent_ticket"
	case TicketsListRequestExpandAttachmentsAccountParentTicket:
		return "attachments,account,parent_ticket"
	case TicketsListRequestExpandAttachmentsAssignees:
		return "attachments,assignees"
	case TicketsListRequestExpandAttachmentsAssigneesAccount:
		return "attachments,assignees,account"
	case TicketsListRequestExpandAttachmentsAssigneesAccountContact:
		return "attachments,assignees,account,contact"
	case TicketsListRequestExpandAttachmentsAssigneesAccountContactCreator:
		return "attachments,assignees,account,contact,creator"
	case TicketsListRequestExpandAttachmentsAssigneesAccountContactCreatorParentTicket:
		return "attachments,assignees,account,contact,creator,parent_ticket"
	case TicketsListRequestExpandAttachmentsAssigneesAccountContactParentTicket:
		return "attachments,assignees,account,contact,parent_ticket"
	case TicketsListRequestExpandAttachmentsAssigneesAccountCreator:
		return "attachments,assignees,account,creator"
	case TicketsListRequestExpandAttachmentsAssigneesAccountCreatorParentTicket:
		return "attachments,assignees,account,creator,parent_ticket"
	case TicketsListRequestExpandAttachmentsAssigneesAccountParentTicket:
		return "attachments,assignees,account,parent_ticket"
	case TicketsListRequestExpandAttachmentsAssigneesCollections:
		return "attachments,assignees,collections"
	case TicketsListRequestExpandAttachmentsAssigneesCollectionsAccount:
		return "attachments,assignees,collections,account"
	case TicketsListRequestExpandAttachmentsAssigneesCollectionsAccountContact:
		return "attachments,assignees,collections,account,contact"
	case TicketsListRequestExpandAttachmentsAssigneesCollectionsAccountContactCreator:
		return "attachments,assignees,collections,account,contact,creator"
	case TicketsListRequestExpandAttachmentsAssigneesCollectionsAccountContactCreatorParentTicket:
		return "attachments,assignees,collections,account,contact,creator,parent_ticket"
	case TicketsListRequestExpandAttachmentsAssigneesCollectionsAccountContactParentTicket:
		return "attachments,assignees,collections,account,contact,parent_ticket"
	case TicketsListRequestExpandAttachmentsAssigneesCollectionsAccountCreator:
		return "attachments,assignees,collections,account,creator"
	case TicketsListRequestExpandAttachmentsAssigneesCollectionsAccountCreatorParentTicket:
		return "attachments,assignees,collections,account,creator,parent_ticket"
	case TicketsListRequestExpandAttachmentsAssigneesCollectionsAccountParentTicket:
		return "attachments,assignees,collections,account,parent_ticket"
	case TicketsListRequestExpandAttachmentsAssigneesCollectionsContact:
		return "attachments,assignees,collections,contact"
	case TicketsListRequestExpandAttachmentsAssigneesCollectionsContactCreator:
		return "attachments,assignees,collections,contact,creator"
	case TicketsListRequestExpandAttachmentsAssigneesCollectionsContactCreatorParentTicket:
		return "attachments,assignees,collections,contact,creator,parent_ticket"
	case TicketsListRequestExpandAttachmentsAssigneesCollectionsContactParentTicket:
		return "attachments,assignees,collections,contact,parent_ticket"
	case TicketsListRequestExpandAttachmentsAssigneesCollectionsCreator:
		return "attachments,assignees,collections,creator"
	case TicketsListRequestExpandAttachmentsAssigneesCollectionsCreatorParentTicket:
		return "attachments,assignees,collections,creator,parent_ticket"
	case TicketsListRequestExpandAttachmentsAssigneesCollectionsParentTicket:
		return "attachments,assignees,collections,parent_ticket"
	case TicketsListRequestExpandAttachmentsAssigneesContact:
		return "attachments,assignees,contact"
	case TicketsListRequestExpandAttachmentsAssigneesContactCreator:
		return "attachments,assignees,contact,creator"
	case TicketsListRequestExpandAttachmentsAssigneesContactCreatorParentTicket:
		return "attachments,assignees,contact,creator,parent_ticket"
	case TicketsListRequestExpandAttachmentsAssigneesContactParentTicket:
		return "attachments,assignees,contact,parent_ticket"
	case TicketsListRequestExpandAttachmentsAssigneesCreator:
		return "attachments,assignees,creator"
	case TicketsListRequestExpandAttachmentsAssigneesCreatorParentTicket:
		return "attachments,assignees,creator,parent_ticket"
	case TicketsListRequestExpandAttachmentsAssigneesParentTicket:
		return "attachments,assignees,parent_ticket"
	case TicketsListRequestExpandAttachmentsCollections:
		return "attachments,collections"
	case TicketsListRequestExpandAttachmentsCollectionsAccount:
		return "attachments,collections,account"
	case TicketsListRequestExpandAttachmentsCollectionsAccountContact:
		return "attachments,collections,account,contact"
	case TicketsListRequestExpandAttachmentsCollectionsAccountContactCreator:
		return "attachments,collections,account,contact,creator"
	case TicketsListRequestExpandAttachmentsCollectionsAccountContactCreatorParentTicket:
		return "attachments,collections,account,contact,creator,parent_ticket"
	case TicketsListRequestExpandAttachmentsCollectionsAccountContactParentTicket:
		return "attachments,collections,account,contact,parent_ticket"
	case TicketsListRequestExpandAttachmentsCollectionsAccountCreator:
		return "attachments,collections,account,creator"
	case TicketsListRequestExpandAttachmentsCollectionsAccountCreatorParentTicket:
		return "attachments,collections,account,creator,parent_ticket"
	case TicketsListRequestExpandAttachmentsCollectionsAccountParentTicket:
		return "attachments,collections,account,parent_ticket"
	case TicketsListRequestExpandAttachmentsCollectionsContact:
		return "attachments,collections,contact"
	case TicketsListRequestExpandAttachmentsCollectionsContactCreator:
		return "attachments,collections,contact,creator"
	case TicketsListRequestExpandAttachmentsCollectionsContactCreatorParentTicket:
		return "attachments,collections,contact,creator,parent_ticket"
	case TicketsListRequestExpandAttachmentsCollectionsContactParentTicket:
		return "attachments,collections,contact,parent_ticket"
	case TicketsListRequestExpandAttachmentsCollectionsCreator:
		return "attachments,collections,creator"
	case TicketsListRequestExpandAttachmentsCollectionsCreatorParentTicket:
		return "attachments,collections,creator,parent_ticket"
	case TicketsListRequestExpandAttachmentsCollectionsParentTicket:
		return "attachments,collections,parent_ticket"
	case TicketsListRequestExpandAttachmentsContact:
		return "attachments,contact"
	case TicketsListRequestExpandAttachmentsContactCreator:
		return "attachments,contact,creator"
	case TicketsListRequestExpandAttachmentsContactCreatorParentTicket:
		return "attachments,contact,creator,parent_ticket"
	case TicketsListRequestExpandAttachmentsContactParentTicket:
		return "attachments,contact,parent_ticket"
	case TicketsListRequestExpandAttachmentsCreator:
		return "attachments,creator"
	case TicketsListRequestExpandAttachmentsCreatorParentTicket:
		return "attachments,creator,parent_ticket"
	case TicketsListRequestExpandAttachmentsParentTicket:
		return "attachments,parent_ticket"
	case TicketsListRequestExpandCollections:
		return "collections"
	case TicketsListRequestExpandCollectionsAccount:
		return "collections,account"
	case TicketsListRequestExpandCollectionsAccountContact:
		return "collections,account,contact"
	case TicketsListRequestExpandCollectionsAccountContactCreator:
		return "collections,account,contact,creator"
	case TicketsListRequestExpandCollectionsAccountContactCreatorParentTicket:
		return "collections,account,contact,creator,parent_ticket"
	case TicketsListRequestExpandCollectionsAccountContactParentTicket:
		return "collections,account,contact,parent_ticket"
	case TicketsListRequestExpandCollectionsAccountCreator:
		return "collections,account,creator"
	case TicketsListRequestExpandCollectionsAccountCreatorParentTicket:
		return "collections,account,creator,parent_ticket"
	case TicketsListRequestExpandCollectionsAccountParentTicket:
		return "collections,account,parent_ticket"
	case TicketsListRequestExpandCollectionsContact:
		return "collections,contact"
	case TicketsListRequestExpandCollectionsContactCreator:
		return "collections,contact,creator"
	case TicketsListRequestExpandCollectionsContactCreatorParentTicket:
		return "collections,contact,creator,parent_ticket"
	case TicketsListRequestExpandCollectionsContactParentTicket:
		return "collections,contact,parent_ticket"
	case TicketsListRequestExpandCollectionsCreator:
		return "collections,creator"
	case TicketsListRequestExpandCollectionsCreatorParentTicket:
		return "collections,creator,parent_ticket"
	case TicketsListRequestExpandCollectionsParentTicket:
		return "collections,parent_ticket"
	case TicketsListRequestExpandContact:
		return "contact"
	case TicketsListRequestExpandContactCreator:
		return "contact,creator"
	case TicketsListRequestExpandContactCreatorParentTicket:
		return "contact,creator,parent_ticket"
	case TicketsListRequestExpandContactParentTicket:
		return "contact,parent_ticket"
	case TicketsListRequestExpandCreator:
		return "creator"
	case TicketsListRequestExpandCreatorParentTicket:
		return "creator,parent_ticket"
	case TicketsListRequestExpandParentTicket:
		return "parent_ticket"
	}
}

func (t TicketsListRequestExpand) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", t.String())), nil
}

func (t *TicketsListRequestExpand) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "account":
		value := TicketsListRequestExpandAccount
		*t = value
	case "account,contact":
		value := TicketsListRequestExpandAccountContact
		*t = value
	case "account,contact,creator":
		value := TicketsListRequestExpandAccountContactCreator
		*t = value
	case "account,contact,creator,parent_ticket":
		value := TicketsListRequestExpandAccountContactCreatorParentTicket
		*t = value
	case "account,contact,parent_ticket":
		value := TicketsListRequestExpandAccountContactParentTicket
		*t = value
	case "account,creator":
		value := TicketsListRequestExpandAccountCreator
		*t = value
	case "account,creator,parent_ticket":
		value := TicketsListRequestExpandAccountCreatorParentTicket
		*t = value
	case "account,parent_ticket":
		value := TicketsListRequestExpandAccountParentTicket
		*t = value
	case "assignees":
		value := TicketsListRequestExpandAssignees
		*t = value
	case "assignees,account":
		value := TicketsListRequestExpandAssigneesAccount
		*t = value
	case "assignees,account,contact":
		value := TicketsListRequestExpandAssigneesAccountContact
		*t = value
	case "assignees,account,contact,creator":
		value := TicketsListRequestExpandAssigneesAccountContactCreator
		*t = value
	case "assignees,account,contact,creator,parent_ticket":
		value := TicketsListRequestExpandAssigneesAccountContactCreatorParentTicket
		*t = value
	case "assignees,account,contact,parent_ticket":
		value := TicketsListRequestExpandAssigneesAccountContactParentTicket
		*t = value
	case "assignees,account,creator":
		value := TicketsListRequestExpandAssigneesAccountCreator
		*t = value
	case "assignees,account,creator,parent_ticket":
		value := TicketsListRequestExpandAssigneesAccountCreatorParentTicket
		*t = value
	case "assignees,account,parent_ticket":
		value := TicketsListRequestExpandAssigneesAccountParentTicket
		*t = value
	case "assignees,collections":
		value := TicketsListRequestExpandAssigneesCollections
		*t = value
	case "assignees,collections,account":
		value := TicketsListRequestExpandAssigneesCollectionsAccount
		*t = value
	case "assignees,collections,account,contact":
		value := TicketsListRequestExpandAssigneesCollectionsAccountContact
		*t = value
	case "assignees,collections,account,contact,creator":
		value := TicketsListRequestExpandAssigneesCollectionsAccountContactCreator
		*t = value
	case "assignees,collections,account,contact,creator,parent_ticket":
		value := TicketsListRequestExpandAssigneesCollectionsAccountContactCreatorParentTicket
		*t = value
	case "assignees,collections,account,contact,parent_ticket":
		value := TicketsListRequestExpandAssigneesCollectionsAccountContactParentTicket
		*t = value
	case "assignees,collections,account,creator":
		value := TicketsListRequestExpandAssigneesCollectionsAccountCreator
		*t = value
	case "assignees,collections,account,creator,parent_ticket":
		value := TicketsListRequestExpandAssigneesCollectionsAccountCreatorParentTicket
		*t = value
	case "assignees,collections,account,parent_ticket":
		value := TicketsListRequestExpandAssigneesCollectionsAccountParentTicket
		*t = value
	case "assignees,collections,contact":
		value := TicketsListRequestExpandAssigneesCollectionsContact
		*t = value
	case "assignees,collections,contact,creator":
		value := TicketsListRequestExpandAssigneesCollectionsContactCreator
		*t = value
	case "assignees,collections,contact,creator,parent_ticket":
		value := TicketsListRequestExpandAssigneesCollectionsContactCreatorParentTicket
		*t = value
	case "assignees,collections,contact,parent_ticket":
		value := TicketsListRequestExpandAssigneesCollectionsContactParentTicket
		*t = value
	case "assignees,collections,creator":
		value := TicketsListRequestExpandAssigneesCollectionsCreator
		*t = value
	case "assignees,collections,creator,parent_ticket":
		value := TicketsListRequestExpandAssigneesCollectionsCreatorParentTicket
		*t = value
	case "assignees,collections,parent_ticket":
		value := TicketsListRequestExpandAssigneesCollectionsParentTicket
		*t = value
	case "assignees,contact":
		value := TicketsListRequestExpandAssigneesContact
		*t = value
	case "assignees,contact,creator":
		value := TicketsListRequestExpandAssigneesContactCreator
		*t = value
	case "assignees,contact,creator,parent_ticket":
		value := TicketsListRequestExpandAssigneesContactCreatorParentTicket
		*t = value
	case "assignees,contact,parent_ticket":
		value := TicketsListRequestExpandAssigneesContactParentTicket
		*t = value
	case "assignees,creator":
		value := TicketsListRequestExpandAssigneesCreator
		*t = value
	case "assignees,creator,parent_ticket":
		value := TicketsListRequestExpandAssigneesCreatorParentTicket
		*t = value
	case "assignees,parent_ticket":
		value := TicketsListRequestExpandAssigneesParentTicket
		*t = value
	case "attachments":
		value := TicketsListRequestExpandAttachments
		*t = value
	case "attachments,account":
		value := TicketsListRequestExpandAttachmentsAccount
		*t = value
	case "attachments,account,contact":
		value := TicketsListRequestExpandAttachmentsAccountContact
		*t = value
	case "attachments,account,contact,creator":
		value := TicketsListRequestExpandAttachmentsAccountContactCreator
		*t = value
	case "attachments,account,contact,creator,parent_ticket":
		value := TicketsListRequestExpandAttachmentsAccountContactCreatorParentTicket
		*t = value
	case "attachments,account,contact,parent_ticket":
		value := TicketsListRequestExpandAttachmentsAccountContactParentTicket
		*t = value
	case "attachments,account,creator":
		value := TicketsListRequestExpandAttachmentsAccountCreator
		*t = value
	case "attachments,account,creator,parent_ticket":
		value := TicketsListRequestExpandAttachmentsAccountCreatorParentTicket
		*t = value
	case "attachments,account,parent_ticket":
		value := TicketsListRequestExpandAttachmentsAccountParentTicket
		*t = value
	case "attachments,assignees":
		value := TicketsListRequestExpandAttachmentsAssignees
		*t = value
	case "attachments,assignees,account":
		value := TicketsListRequestExpandAttachmentsAssigneesAccount
		*t = value
	case "attachments,assignees,account,contact":
		value := TicketsListRequestExpandAttachmentsAssigneesAccountContact
		*t = value
	case "attachments,assignees,account,contact,creator":
		value := TicketsListRequestExpandAttachmentsAssigneesAccountContactCreator
		*t = value
	case "attachments,assignees,account,contact,creator,parent_ticket":
		value := TicketsListRequestExpandAttachmentsAssigneesAccountContactCreatorParentTicket
		*t = value
	case "attachments,assignees,account,contact,parent_ticket":
		value := TicketsListRequestExpandAttachmentsAssigneesAccountContactParentTicket
		*t = value
	case "attachments,assignees,account,creator":
		value := TicketsListRequestExpandAttachmentsAssigneesAccountCreator
		*t = value
	case "attachments,assignees,account,creator,parent_ticket":
		value := TicketsListRequestExpandAttachmentsAssigneesAccountCreatorParentTicket
		*t = value
	case "attachments,assignees,account,parent_ticket":
		value := TicketsListRequestExpandAttachmentsAssigneesAccountParentTicket
		*t = value
	case "attachments,assignees,collections":
		value := TicketsListRequestExpandAttachmentsAssigneesCollections
		*t = value
	case "attachments,assignees,collections,account":
		value := TicketsListRequestExpandAttachmentsAssigneesCollectionsAccount
		*t = value
	case "attachments,assignees,collections,account,contact":
		value := TicketsListRequestExpandAttachmentsAssigneesCollectionsAccountContact
		*t = value
	case "attachments,assignees,collections,account,contact,creator":
		value := TicketsListRequestExpandAttachmentsAssigneesCollectionsAccountContactCreator
		*t = value
	case "attachments,assignees,collections,account,contact,creator,parent_ticket":
		value := TicketsListRequestExpandAttachmentsAssigneesCollectionsAccountContactCreatorParentTicket
		*t = value
	case "attachments,assignees,collections,account,contact,parent_ticket":
		value := TicketsListRequestExpandAttachmentsAssigneesCollectionsAccountContactParentTicket
		*t = value
	case "attachments,assignees,collections,account,creator":
		value := TicketsListRequestExpandAttachmentsAssigneesCollectionsAccountCreator
		*t = value
	case "attachments,assignees,collections,account,creator,parent_ticket":
		value := TicketsListRequestExpandAttachmentsAssigneesCollectionsAccountCreatorParentTicket
		*t = value
	case "attachments,assignees,collections,account,parent_ticket":
		value := TicketsListRequestExpandAttachmentsAssigneesCollectionsAccountParentTicket
		*t = value
	case "attachments,assignees,collections,contact":
		value := TicketsListRequestExpandAttachmentsAssigneesCollectionsContact
		*t = value
	case "attachments,assignees,collections,contact,creator":
		value := TicketsListRequestExpandAttachmentsAssigneesCollectionsContactCreator
		*t = value
	case "attachments,assignees,collections,contact,creator,parent_ticket":
		value := TicketsListRequestExpandAttachmentsAssigneesCollectionsContactCreatorParentTicket
		*t = value
	case "attachments,assignees,collections,contact,parent_ticket":
		value := TicketsListRequestExpandAttachmentsAssigneesCollectionsContactParentTicket
		*t = value
	case "attachments,assignees,collections,creator":
		value := TicketsListRequestExpandAttachmentsAssigneesCollectionsCreator
		*t = value
	case "attachments,assignees,collections,creator,parent_ticket":
		value := TicketsListRequestExpandAttachmentsAssigneesCollectionsCreatorParentTicket
		*t = value
	case "attachments,assignees,collections,parent_ticket":
		value := TicketsListRequestExpandAttachmentsAssigneesCollectionsParentTicket
		*t = value
	case "attachments,assignees,contact":
		value := TicketsListRequestExpandAttachmentsAssigneesContact
		*t = value
	case "attachments,assignees,contact,creator":
		value := TicketsListRequestExpandAttachmentsAssigneesContactCreator
		*t = value
	case "attachments,assignees,contact,creator,parent_ticket":
		value := TicketsListRequestExpandAttachmentsAssigneesContactCreatorParentTicket
		*t = value
	case "attachments,assignees,contact,parent_ticket":
		value := TicketsListRequestExpandAttachmentsAssigneesContactParentTicket
		*t = value
	case "attachments,assignees,creator":
		value := TicketsListRequestExpandAttachmentsAssigneesCreator
		*t = value
	case "attachments,assignees,creator,parent_ticket":
		value := TicketsListRequestExpandAttachmentsAssigneesCreatorParentTicket
		*t = value
	case "attachments,assignees,parent_ticket":
		value := TicketsListRequestExpandAttachmentsAssigneesParentTicket
		*t = value
	case "attachments,collections":
		value := TicketsListRequestExpandAttachmentsCollections
		*t = value
	case "attachments,collections,account":
		value := TicketsListRequestExpandAttachmentsCollectionsAccount
		*t = value
	case "attachments,collections,account,contact":
		value := TicketsListRequestExpandAttachmentsCollectionsAccountContact
		*t = value
	case "attachments,collections,account,contact,creator":
		value := TicketsListRequestExpandAttachmentsCollectionsAccountContactCreator
		*t = value
	case "attachments,collections,account,contact,creator,parent_ticket":
		value := TicketsListRequestExpandAttachmentsCollectionsAccountContactCreatorParentTicket
		*t = value
	case "attachments,collections,account,contact,parent_ticket":
		value := TicketsListRequestExpandAttachmentsCollectionsAccountContactParentTicket
		*t = value
	case "attachments,collections,account,creator":
		value := TicketsListRequestExpandAttachmentsCollectionsAccountCreator
		*t = value
	case "attachments,collections,account,creator,parent_ticket":
		value := TicketsListRequestExpandAttachmentsCollectionsAccountCreatorParentTicket
		*t = value
	case "attachments,collections,account,parent_ticket":
		value := TicketsListRequestExpandAttachmentsCollectionsAccountParentTicket
		*t = value
	case "attachments,collections,contact":
		value := TicketsListRequestExpandAttachmentsCollectionsContact
		*t = value
	case "attachments,collections,contact,creator":
		value := TicketsListRequestExpandAttachmentsCollectionsContactCreator
		*t = value
	case "attachments,collections,contact,creator,parent_ticket":
		value := TicketsListRequestExpandAttachmentsCollectionsContactCreatorParentTicket
		*t = value
	case "attachments,collections,contact,parent_ticket":
		value := TicketsListRequestExpandAttachmentsCollectionsContactParentTicket
		*t = value
	case "attachments,collections,creator":
		value := TicketsListRequestExpandAttachmentsCollectionsCreator
		*t = value
	case "attachments,collections,creator,parent_ticket":
		value := TicketsListRequestExpandAttachmentsCollectionsCreatorParentTicket
		*t = value
	case "attachments,collections,parent_ticket":
		value := TicketsListRequestExpandAttachmentsCollectionsParentTicket
		*t = value
	case "attachments,contact":
		value := TicketsListRequestExpandAttachmentsContact
		*t = value
	case "attachments,contact,creator":
		value := TicketsListRequestExpandAttachmentsContactCreator
		*t = value
	case "attachments,contact,creator,parent_ticket":
		value := TicketsListRequestExpandAttachmentsContactCreatorParentTicket
		*t = value
	case "attachments,contact,parent_ticket":
		value := TicketsListRequestExpandAttachmentsContactParentTicket
		*t = value
	case "attachments,creator":
		value := TicketsListRequestExpandAttachmentsCreator
		*t = value
	case "attachments,creator,parent_ticket":
		value := TicketsListRequestExpandAttachmentsCreatorParentTicket
		*t = value
	case "attachments,parent_ticket":
		value := TicketsListRequestExpandAttachmentsParentTicket
		*t = value
	case "collections":
		value := TicketsListRequestExpandCollections
		*t = value
	case "collections,account":
		value := TicketsListRequestExpandCollectionsAccount
		*t = value
	case "collections,account,contact":
		value := TicketsListRequestExpandCollectionsAccountContact
		*t = value
	case "collections,account,contact,creator":
		value := TicketsListRequestExpandCollectionsAccountContactCreator
		*t = value
	case "collections,account,contact,creator,parent_ticket":
		value := TicketsListRequestExpandCollectionsAccountContactCreatorParentTicket
		*t = value
	case "collections,account,contact,parent_ticket":
		value := TicketsListRequestExpandCollectionsAccountContactParentTicket
		*t = value
	case "collections,account,creator":
		value := TicketsListRequestExpandCollectionsAccountCreator
		*t = value
	case "collections,account,creator,parent_ticket":
		value := TicketsListRequestExpandCollectionsAccountCreatorParentTicket
		*t = value
	case "collections,account,parent_ticket":
		value := TicketsListRequestExpandCollectionsAccountParentTicket
		*t = value
	case "collections,contact":
		value := TicketsListRequestExpandCollectionsContact
		*t = value
	case "collections,contact,creator":
		value := TicketsListRequestExpandCollectionsContactCreator
		*t = value
	case "collections,contact,creator,parent_ticket":
		value := TicketsListRequestExpandCollectionsContactCreatorParentTicket
		*t = value
	case "collections,contact,parent_ticket":
		value := TicketsListRequestExpandCollectionsContactParentTicket
		*t = value
	case "collections,creator":
		value := TicketsListRequestExpandCollectionsCreator
		*t = value
	case "collections,creator,parent_ticket":
		value := TicketsListRequestExpandCollectionsCreatorParentTicket
		*t = value
	case "collections,parent_ticket":
		value := TicketsListRequestExpandCollectionsParentTicket
		*t = value
	case "contact":
		value := TicketsListRequestExpandContact
		*t = value
	case "contact,creator":
		value := TicketsListRequestExpandContactCreator
		*t = value
	case "contact,creator,parent_ticket":
		value := TicketsListRequestExpandContactCreatorParentTicket
		*t = value
	case "contact,parent_ticket":
		value := TicketsListRequestExpandContactParentTicket
		*t = value
	case "creator":
		value := TicketsListRequestExpandCreator
		*t = value
	case "creator,parent_ticket":
		value := TicketsListRequestExpandCreatorParentTicket
		*t = value
	case "parent_ticket":
		value := TicketsListRequestExpandParentTicket
		*t = value
	}
	return nil
}

type TicketsListRequestPriority uint

const (
	TicketsListRequestPriorityHigh TicketsListRequestPriority = iota + 1
	TicketsListRequestPriorityLow
	TicketsListRequestPriorityNormal
	TicketsListRequestPriorityUrgent
)

func (t TicketsListRequestPriority) String() string {
	switch t {
	default:
		return strconv.Itoa(int(t))
	case TicketsListRequestPriorityHigh:
		return "HIGH"
	case TicketsListRequestPriorityLow:
		return "LOW"
	case TicketsListRequestPriorityNormal:
		return "NORMAL"
	case TicketsListRequestPriorityUrgent:
		return "URGENT"
	}
}

func (t TicketsListRequestPriority) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", t.String())), nil
}

func (t *TicketsListRequestPriority) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "HIGH":
		value := TicketsListRequestPriorityHigh
		*t = value
	case "LOW":
		value := TicketsListRequestPriorityLow
		*t = value
	case "NORMAL":
		value := TicketsListRequestPriorityNormal
		*t = value
	case "URGENT":
		value := TicketsListRequestPriorityUrgent
		*t = value
	}
	return nil
}

type TicketsListRequestRemoteFields uint

const (
	TicketsListRequestRemoteFieldsPriority TicketsListRequestRemoteFields = iota + 1
	TicketsListRequestRemoteFieldsPriorityStatus
	TicketsListRequestRemoteFieldsPriorityStatusTicketType
	TicketsListRequestRemoteFieldsPriorityTicketType
	TicketsListRequestRemoteFieldsStatus
	TicketsListRequestRemoteFieldsStatusTicketType
	TicketsListRequestRemoteFieldsTicketType
)

func (t TicketsListRequestRemoteFields) String() string {
	switch t {
	default:
		return strconv.Itoa(int(t))
	case TicketsListRequestRemoteFieldsPriority:
		return "priority"
	case TicketsListRequestRemoteFieldsPriorityStatus:
		return "priority,status"
	case TicketsListRequestRemoteFieldsPriorityStatusTicketType:
		return "priority,status,ticket_type"
	case TicketsListRequestRemoteFieldsPriorityTicketType:
		return "priority,ticket_type"
	case TicketsListRequestRemoteFieldsStatus:
		return "status"
	case TicketsListRequestRemoteFieldsStatusTicketType:
		return "status,ticket_type"
	case TicketsListRequestRemoteFieldsTicketType:
		return "ticket_type"
	}
}

func (t TicketsListRequestRemoteFields) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", t.String())), nil
}

func (t *TicketsListRequestRemoteFields) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "priority":
		value := TicketsListRequestRemoteFieldsPriority
		*t = value
	case "priority,status":
		value := TicketsListRequestRemoteFieldsPriorityStatus
		*t = value
	case "priority,status,ticket_type":
		value := TicketsListRequestRemoteFieldsPriorityStatusTicketType
		*t = value
	case "priority,ticket_type":
		value := TicketsListRequestRemoteFieldsPriorityTicketType
		*t = value
	case "status":
		value := TicketsListRequestRemoteFieldsStatus
		*t = value
	case "status,ticket_type":
		value := TicketsListRequestRemoteFieldsStatusTicketType
		*t = value
	case "ticket_type":
		value := TicketsListRequestRemoteFieldsTicketType
		*t = value
	}
	return nil
}

type TicketsListRequestShowEnumOrigins uint

const (
	TicketsListRequestShowEnumOriginsPriority TicketsListRequestShowEnumOrigins = iota + 1
	TicketsListRequestShowEnumOriginsPriorityStatus
	TicketsListRequestShowEnumOriginsPriorityStatusTicketType
	TicketsListRequestShowEnumOriginsPriorityTicketType
	TicketsListRequestShowEnumOriginsStatus
	TicketsListRequestShowEnumOriginsStatusTicketType
	TicketsListRequestShowEnumOriginsTicketType
)

func (t TicketsListRequestShowEnumOrigins) String() string {
	switch t {
	default:
		return strconv.Itoa(int(t))
	case TicketsListRequestShowEnumOriginsPriority:
		return "priority"
	case TicketsListRequestShowEnumOriginsPriorityStatus:
		return "priority,status"
	case TicketsListRequestShowEnumOriginsPriorityStatusTicketType:
		return "priority,status,ticket_type"
	case TicketsListRequestShowEnumOriginsPriorityTicketType:
		return "priority,ticket_type"
	case TicketsListRequestShowEnumOriginsStatus:
		return "status"
	case TicketsListRequestShowEnumOriginsStatusTicketType:
		return "status,ticket_type"
	case TicketsListRequestShowEnumOriginsTicketType:
		return "ticket_type"
	}
}

func (t TicketsListRequestShowEnumOrigins) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", t.String())), nil
}

func (t *TicketsListRequestShowEnumOrigins) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "priority":
		value := TicketsListRequestShowEnumOriginsPriority
		*t = value
	case "priority,status":
		value := TicketsListRequestShowEnumOriginsPriorityStatus
		*t = value
	case "priority,status,ticket_type":
		value := TicketsListRequestShowEnumOriginsPriorityStatusTicketType
		*t = value
	case "priority,ticket_type":
		value := TicketsListRequestShowEnumOriginsPriorityTicketType
		*t = value
	case "status":
		value := TicketsListRequestShowEnumOriginsStatus
		*t = value
	case "status,ticket_type":
		value := TicketsListRequestShowEnumOriginsStatusTicketType
		*t = value
	case "ticket_type":
		value := TicketsListRequestShowEnumOriginsTicketType
		*t = value
	}
	return nil
}

type TicketsListRequestStatus uint

const (
	TicketsListRequestStatusClosed TicketsListRequestStatus = iota + 1
	TicketsListRequestStatusInProgress
	TicketsListRequestStatusOnHold
	TicketsListRequestStatusOpen
)

func (t TicketsListRequestStatus) String() string {
	switch t {
	default:
		return strconv.Itoa(int(t))
	case TicketsListRequestStatusClosed:
		return "CLOSED"
	case TicketsListRequestStatusInProgress:
		return "IN_PROGRESS"
	case TicketsListRequestStatusOnHold:
		return "ON_HOLD"
	case TicketsListRequestStatusOpen:
		return "OPEN"
	}
}

func (t TicketsListRequestStatus) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", t.String())), nil
}

func (t *TicketsListRequestStatus) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "CLOSED":
		value := TicketsListRequestStatusClosed
		*t = value
	case "IN_PROGRESS":
		value := TicketsListRequestStatusInProgress
		*t = value
	case "ON_HOLD":
		value := TicketsListRequestStatusOnHold
		*t = value
	case "OPEN":
		value := TicketsListRequestStatusOpen
		*t = value
	}
	return nil
}

type TicketsRetrieveRequestExpand uint

const (
	TicketsRetrieveRequestExpandAccount TicketsRetrieveRequestExpand = iota + 1
	TicketsRetrieveRequestExpandAccountContact
	TicketsRetrieveRequestExpandAccountContactCreator
	TicketsRetrieveRequestExpandAccountContactCreatorParentTicket
	TicketsRetrieveRequestExpandAccountContactParentTicket
	TicketsRetrieveRequestExpandAccountCreator
	TicketsRetrieveRequestExpandAccountCreatorParentTicket
	TicketsRetrieveRequestExpandAccountParentTicket
	TicketsRetrieveRequestExpandAssignees
	TicketsRetrieveRequestExpandAssigneesAccount
	TicketsRetrieveRequestExpandAssigneesAccountContact
	TicketsRetrieveRequestExpandAssigneesAccountContactCreator
	TicketsRetrieveRequestExpandAssigneesAccountContactCreatorParentTicket
	TicketsRetrieveRequestExpandAssigneesAccountContactParentTicket
	TicketsRetrieveRequestExpandAssigneesAccountCreator
	TicketsRetrieveRequestExpandAssigneesAccountCreatorParentTicket
	TicketsRetrieveRequestExpandAssigneesAccountParentTicket
	TicketsRetrieveRequestExpandAssigneesCollections
	TicketsRetrieveRequestExpandAssigneesCollectionsAccount
	TicketsRetrieveRequestExpandAssigneesCollectionsAccountContact
	TicketsRetrieveRequestExpandAssigneesCollectionsAccountContactCreator
	TicketsRetrieveRequestExpandAssigneesCollectionsAccountContactCreatorParentTicket
	TicketsRetrieveRequestExpandAssigneesCollectionsAccountContactParentTicket
	TicketsRetrieveRequestExpandAssigneesCollectionsAccountCreator
	TicketsRetrieveRequestExpandAssigneesCollectionsAccountCreatorParentTicket
	TicketsRetrieveRequestExpandAssigneesCollectionsAccountParentTicket
	TicketsRetrieveRequestExpandAssigneesCollectionsContact
	TicketsRetrieveRequestExpandAssigneesCollectionsContactCreator
	TicketsRetrieveRequestExpandAssigneesCollectionsContactCreatorParentTicket
	TicketsRetrieveRequestExpandAssigneesCollectionsContactParentTicket
	TicketsRetrieveRequestExpandAssigneesCollectionsCreator
	TicketsRetrieveRequestExpandAssigneesCollectionsCreatorParentTicket
	TicketsRetrieveRequestExpandAssigneesCollectionsParentTicket
	TicketsRetrieveRequestExpandAssigneesContact
	TicketsRetrieveRequestExpandAssigneesContactCreator
	TicketsRetrieveRequestExpandAssigneesContactCreatorParentTicket
	TicketsRetrieveRequestExpandAssigneesContactParentTicket
	TicketsRetrieveRequestExpandAssigneesCreator
	TicketsRetrieveRequestExpandAssigneesCreatorParentTicket
	TicketsRetrieveRequestExpandAssigneesParentTicket
	TicketsRetrieveRequestExpandAttachments
	TicketsRetrieveRequestExpandAttachmentsAccount
	TicketsRetrieveRequestExpandAttachmentsAccountContact
	TicketsRetrieveRequestExpandAttachmentsAccountContactCreator
	TicketsRetrieveRequestExpandAttachmentsAccountContactCreatorParentTicket
	TicketsRetrieveRequestExpandAttachmentsAccountContactParentTicket
	TicketsRetrieveRequestExpandAttachmentsAccountCreator
	TicketsRetrieveRequestExpandAttachmentsAccountCreatorParentTicket
	TicketsRetrieveRequestExpandAttachmentsAccountParentTicket
	TicketsRetrieveRequestExpandAttachmentsAssignees
	TicketsRetrieveRequestExpandAttachmentsAssigneesAccount
	TicketsRetrieveRequestExpandAttachmentsAssigneesAccountContact
	TicketsRetrieveRequestExpandAttachmentsAssigneesAccountContactCreator
	TicketsRetrieveRequestExpandAttachmentsAssigneesAccountContactCreatorParentTicket
	TicketsRetrieveRequestExpandAttachmentsAssigneesAccountContactParentTicket
	TicketsRetrieveRequestExpandAttachmentsAssigneesAccountCreator
	TicketsRetrieveRequestExpandAttachmentsAssigneesAccountCreatorParentTicket
	TicketsRetrieveRequestExpandAttachmentsAssigneesAccountParentTicket
	TicketsRetrieveRequestExpandAttachmentsAssigneesCollections
	TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsAccount
	TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsAccountContact
	TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsAccountContactCreator
	TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsAccountContactCreatorParentTicket
	TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsAccountContactParentTicket
	TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsAccountCreator
	TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsAccountCreatorParentTicket
	TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsAccountParentTicket
	TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsContact
	TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsContactCreator
	TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsContactCreatorParentTicket
	TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsContactParentTicket
	TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsCreator
	TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsCreatorParentTicket
	TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsParentTicket
	TicketsRetrieveRequestExpandAttachmentsAssigneesContact
	TicketsRetrieveRequestExpandAttachmentsAssigneesContactCreator
	TicketsRetrieveRequestExpandAttachmentsAssigneesContactCreatorParentTicket
	TicketsRetrieveRequestExpandAttachmentsAssigneesContactParentTicket
	TicketsRetrieveRequestExpandAttachmentsAssigneesCreator
	TicketsRetrieveRequestExpandAttachmentsAssigneesCreatorParentTicket
	TicketsRetrieveRequestExpandAttachmentsAssigneesParentTicket
	TicketsRetrieveRequestExpandAttachmentsCollections
	TicketsRetrieveRequestExpandAttachmentsCollectionsAccount
	TicketsRetrieveRequestExpandAttachmentsCollectionsAccountContact
	TicketsRetrieveRequestExpandAttachmentsCollectionsAccountContactCreator
	TicketsRetrieveRequestExpandAttachmentsCollectionsAccountContactCreatorParentTicket
	TicketsRetrieveRequestExpandAttachmentsCollectionsAccountContactParentTicket
	TicketsRetrieveRequestExpandAttachmentsCollectionsAccountCreator
	TicketsRetrieveRequestExpandAttachmentsCollectionsAccountCreatorParentTicket
	TicketsRetrieveRequestExpandAttachmentsCollectionsAccountParentTicket
	TicketsRetrieveRequestExpandAttachmentsCollectionsContact
	TicketsRetrieveRequestExpandAttachmentsCollectionsContactCreator
	TicketsRetrieveRequestExpandAttachmentsCollectionsContactCreatorParentTicket
	TicketsRetrieveRequestExpandAttachmentsCollectionsContactParentTicket
	TicketsRetrieveRequestExpandAttachmentsCollectionsCreator
	TicketsRetrieveRequestExpandAttachmentsCollectionsCreatorParentTicket
	TicketsRetrieveRequestExpandAttachmentsCollectionsParentTicket
	TicketsRetrieveRequestExpandAttachmentsContact
	TicketsRetrieveRequestExpandAttachmentsContactCreator
	TicketsRetrieveRequestExpandAttachmentsContactCreatorParentTicket
	TicketsRetrieveRequestExpandAttachmentsContactParentTicket
	TicketsRetrieveRequestExpandAttachmentsCreator
	TicketsRetrieveRequestExpandAttachmentsCreatorParentTicket
	TicketsRetrieveRequestExpandAttachmentsParentTicket
	TicketsRetrieveRequestExpandCollections
	TicketsRetrieveRequestExpandCollectionsAccount
	TicketsRetrieveRequestExpandCollectionsAccountContact
	TicketsRetrieveRequestExpandCollectionsAccountContactCreator
	TicketsRetrieveRequestExpandCollectionsAccountContactCreatorParentTicket
	TicketsRetrieveRequestExpandCollectionsAccountContactParentTicket
	TicketsRetrieveRequestExpandCollectionsAccountCreator
	TicketsRetrieveRequestExpandCollectionsAccountCreatorParentTicket
	TicketsRetrieveRequestExpandCollectionsAccountParentTicket
	TicketsRetrieveRequestExpandCollectionsContact
	TicketsRetrieveRequestExpandCollectionsContactCreator
	TicketsRetrieveRequestExpandCollectionsContactCreatorParentTicket
	TicketsRetrieveRequestExpandCollectionsContactParentTicket
	TicketsRetrieveRequestExpandCollectionsCreator
	TicketsRetrieveRequestExpandCollectionsCreatorParentTicket
	TicketsRetrieveRequestExpandCollectionsParentTicket
	TicketsRetrieveRequestExpandContact
	TicketsRetrieveRequestExpandContactCreator
	TicketsRetrieveRequestExpandContactCreatorParentTicket
	TicketsRetrieveRequestExpandContactParentTicket
	TicketsRetrieveRequestExpandCreator
	TicketsRetrieveRequestExpandCreatorParentTicket
	TicketsRetrieveRequestExpandParentTicket
)

func (t TicketsRetrieveRequestExpand) String() string {
	switch t {
	default:
		return strconv.Itoa(int(t))
	case TicketsRetrieveRequestExpandAccount:
		return "account"
	case TicketsRetrieveRequestExpandAccountContact:
		return "account,contact"
	case TicketsRetrieveRequestExpandAccountContactCreator:
		return "account,contact,creator"
	case TicketsRetrieveRequestExpandAccountContactCreatorParentTicket:
		return "account,contact,creator,parent_ticket"
	case TicketsRetrieveRequestExpandAccountContactParentTicket:
		return "account,contact,parent_ticket"
	case TicketsRetrieveRequestExpandAccountCreator:
		return "account,creator"
	case TicketsRetrieveRequestExpandAccountCreatorParentTicket:
		return "account,creator,parent_ticket"
	case TicketsRetrieveRequestExpandAccountParentTicket:
		return "account,parent_ticket"
	case TicketsRetrieveRequestExpandAssignees:
		return "assignees"
	case TicketsRetrieveRequestExpandAssigneesAccount:
		return "assignees,account"
	case TicketsRetrieveRequestExpandAssigneesAccountContact:
		return "assignees,account,contact"
	case TicketsRetrieveRequestExpandAssigneesAccountContactCreator:
		return "assignees,account,contact,creator"
	case TicketsRetrieveRequestExpandAssigneesAccountContactCreatorParentTicket:
		return "assignees,account,contact,creator,parent_ticket"
	case TicketsRetrieveRequestExpandAssigneesAccountContactParentTicket:
		return "assignees,account,contact,parent_ticket"
	case TicketsRetrieveRequestExpandAssigneesAccountCreator:
		return "assignees,account,creator"
	case TicketsRetrieveRequestExpandAssigneesAccountCreatorParentTicket:
		return "assignees,account,creator,parent_ticket"
	case TicketsRetrieveRequestExpandAssigneesAccountParentTicket:
		return "assignees,account,parent_ticket"
	case TicketsRetrieveRequestExpandAssigneesCollections:
		return "assignees,collections"
	case TicketsRetrieveRequestExpandAssigneesCollectionsAccount:
		return "assignees,collections,account"
	case TicketsRetrieveRequestExpandAssigneesCollectionsAccountContact:
		return "assignees,collections,account,contact"
	case TicketsRetrieveRequestExpandAssigneesCollectionsAccountContactCreator:
		return "assignees,collections,account,contact,creator"
	case TicketsRetrieveRequestExpandAssigneesCollectionsAccountContactCreatorParentTicket:
		return "assignees,collections,account,contact,creator,parent_ticket"
	case TicketsRetrieveRequestExpandAssigneesCollectionsAccountContactParentTicket:
		return "assignees,collections,account,contact,parent_ticket"
	case TicketsRetrieveRequestExpandAssigneesCollectionsAccountCreator:
		return "assignees,collections,account,creator"
	case TicketsRetrieveRequestExpandAssigneesCollectionsAccountCreatorParentTicket:
		return "assignees,collections,account,creator,parent_ticket"
	case TicketsRetrieveRequestExpandAssigneesCollectionsAccountParentTicket:
		return "assignees,collections,account,parent_ticket"
	case TicketsRetrieveRequestExpandAssigneesCollectionsContact:
		return "assignees,collections,contact"
	case TicketsRetrieveRequestExpandAssigneesCollectionsContactCreator:
		return "assignees,collections,contact,creator"
	case TicketsRetrieveRequestExpandAssigneesCollectionsContactCreatorParentTicket:
		return "assignees,collections,contact,creator,parent_ticket"
	case TicketsRetrieveRequestExpandAssigneesCollectionsContactParentTicket:
		return "assignees,collections,contact,parent_ticket"
	case TicketsRetrieveRequestExpandAssigneesCollectionsCreator:
		return "assignees,collections,creator"
	case TicketsRetrieveRequestExpandAssigneesCollectionsCreatorParentTicket:
		return "assignees,collections,creator,parent_ticket"
	case TicketsRetrieveRequestExpandAssigneesCollectionsParentTicket:
		return "assignees,collections,parent_ticket"
	case TicketsRetrieveRequestExpandAssigneesContact:
		return "assignees,contact"
	case TicketsRetrieveRequestExpandAssigneesContactCreator:
		return "assignees,contact,creator"
	case TicketsRetrieveRequestExpandAssigneesContactCreatorParentTicket:
		return "assignees,contact,creator,parent_ticket"
	case TicketsRetrieveRequestExpandAssigneesContactParentTicket:
		return "assignees,contact,parent_ticket"
	case TicketsRetrieveRequestExpandAssigneesCreator:
		return "assignees,creator"
	case TicketsRetrieveRequestExpandAssigneesCreatorParentTicket:
		return "assignees,creator,parent_ticket"
	case TicketsRetrieveRequestExpandAssigneesParentTicket:
		return "assignees,parent_ticket"
	case TicketsRetrieveRequestExpandAttachments:
		return "attachments"
	case TicketsRetrieveRequestExpandAttachmentsAccount:
		return "attachments,account"
	case TicketsRetrieveRequestExpandAttachmentsAccountContact:
		return "attachments,account,contact"
	case TicketsRetrieveRequestExpandAttachmentsAccountContactCreator:
		return "attachments,account,contact,creator"
	case TicketsRetrieveRequestExpandAttachmentsAccountContactCreatorParentTicket:
		return "attachments,account,contact,creator,parent_ticket"
	case TicketsRetrieveRequestExpandAttachmentsAccountContactParentTicket:
		return "attachments,account,contact,parent_ticket"
	case TicketsRetrieveRequestExpandAttachmentsAccountCreator:
		return "attachments,account,creator"
	case TicketsRetrieveRequestExpandAttachmentsAccountCreatorParentTicket:
		return "attachments,account,creator,parent_ticket"
	case TicketsRetrieveRequestExpandAttachmentsAccountParentTicket:
		return "attachments,account,parent_ticket"
	case TicketsRetrieveRequestExpandAttachmentsAssignees:
		return "attachments,assignees"
	case TicketsRetrieveRequestExpandAttachmentsAssigneesAccount:
		return "attachments,assignees,account"
	case TicketsRetrieveRequestExpandAttachmentsAssigneesAccountContact:
		return "attachments,assignees,account,contact"
	case TicketsRetrieveRequestExpandAttachmentsAssigneesAccountContactCreator:
		return "attachments,assignees,account,contact,creator"
	case TicketsRetrieveRequestExpandAttachmentsAssigneesAccountContactCreatorParentTicket:
		return "attachments,assignees,account,contact,creator,parent_ticket"
	case TicketsRetrieveRequestExpandAttachmentsAssigneesAccountContactParentTicket:
		return "attachments,assignees,account,contact,parent_ticket"
	case TicketsRetrieveRequestExpandAttachmentsAssigneesAccountCreator:
		return "attachments,assignees,account,creator"
	case TicketsRetrieveRequestExpandAttachmentsAssigneesAccountCreatorParentTicket:
		return "attachments,assignees,account,creator,parent_ticket"
	case TicketsRetrieveRequestExpandAttachmentsAssigneesAccountParentTicket:
		return "attachments,assignees,account,parent_ticket"
	case TicketsRetrieveRequestExpandAttachmentsAssigneesCollections:
		return "attachments,assignees,collections"
	case TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsAccount:
		return "attachments,assignees,collections,account"
	case TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsAccountContact:
		return "attachments,assignees,collections,account,contact"
	case TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsAccountContactCreator:
		return "attachments,assignees,collections,account,contact,creator"
	case TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsAccountContactCreatorParentTicket:
		return "attachments,assignees,collections,account,contact,creator,parent_ticket"
	case TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsAccountContactParentTicket:
		return "attachments,assignees,collections,account,contact,parent_ticket"
	case TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsAccountCreator:
		return "attachments,assignees,collections,account,creator"
	case TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsAccountCreatorParentTicket:
		return "attachments,assignees,collections,account,creator,parent_ticket"
	case TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsAccountParentTicket:
		return "attachments,assignees,collections,account,parent_ticket"
	case TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsContact:
		return "attachments,assignees,collections,contact"
	case TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsContactCreator:
		return "attachments,assignees,collections,contact,creator"
	case TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsContactCreatorParentTicket:
		return "attachments,assignees,collections,contact,creator,parent_ticket"
	case TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsContactParentTicket:
		return "attachments,assignees,collections,contact,parent_ticket"
	case TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsCreator:
		return "attachments,assignees,collections,creator"
	case TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsCreatorParentTicket:
		return "attachments,assignees,collections,creator,parent_ticket"
	case TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsParentTicket:
		return "attachments,assignees,collections,parent_ticket"
	case TicketsRetrieveRequestExpandAttachmentsAssigneesContact:
		return "attachments,assignees,contact"
	case TicketsRetrieveRequestExpandAttachmentsAssigneesContactCreator:
		return "attachments,assignees,contact,creator"
	case TicketsRetrieveRequestExpandAttachmentsAssigneesContactCreatorParentTicket:
		return "attachments,assignees,contact,creator,parent_ticket"
	case TicketsRetrieveRequestExpandAttachmentsAssigneesContactParentTicket:
		return "attachments,assignees,contact,parent_ticket"
	case TicketsRetrieveRequestExpandAttachmentsAssigneesCreator:
		return "attachments,assignees,creator"
	case TicketsRetrieveRequestExpandAttachmentsAssigneesCreatorParentTicket:
		return "attachments,assignees,creator,parent_ticket"
	case TicketsRetrieveRequestExpandAttachmentsAssigneesParentTicket:
		return "attachments,assignees,parent_ticket"
	case TicketsRetrieveRequestExpandAttachmentsCollections:
		return "attachments,collections"
	case TicketsRetrieveRequestExpandAttachmentsCollectionsAccount:
		return "attachments,collections,account"
	case TicketsRetrieveRequestExpandAttachmentsCollectionsAccountContact:
		return "attachments,collections,account,contact"
	case TicketsRetrieveRequestExpandAttachmentsCollectionsAccountContactCreator:
		return "attachments,collections,account,contact,creator"
	case TicketsRetrieveRequestExpandAttachmentsCollectionsAccountContactCreatorParentTicket:
		return "attachments,collections,account,contact,creator,parent_ticket"
	case TicketsRetrieveRequestExpandAttachmentsCollectionsAccountContactParentTicket:
		return "attachments,collections,account,contact,parent_ticket"
	case TicketsRetrieveRequestExpandAttachmentsCollectionsAccountCreator:
		return "attachments,collections,account,creator"
	case TicketsRetrieveRequestExpandAttachmentsCollectionsAccountCreatorParentTicket:
		return "attachments,collections,account,creator,parent_ticket"
	case TicketsRetrieveRequestExpandAttachmentsCollectionsAccountParentTicket:
		return "attachments,collections,account,parent_ticket"
	case TicketsRetrieveRequestExpandAttachmentsCollectionsContact:
		return "attachments,collections,contact"
	case TicketsRetrieveRequestExpandAttachmentsCollectionsContactCreator:
		return "attachments,collections,contact,creator"
	case TicketsRetrieveRequestExpandAttachmentsCollectionsContactCreatorParentTicket:
		return "attachments,collections,contact,creator,parent_ticket"
	case TicketsRetrieveRequestExpandAttachmentsCollectionsContactParentTicket:
		return "attachments,collections,contact,parent_ticket"
	case TicketsRetrieveRequestExpandAttachmentsCollectionsCreator:
		return "attachments,collections,creator"
	case TicketsRetrieveRequestExpandAttachmentsCollectionsCreatorParentTicket:
		return "attachments,collections,creator,parent_ticket"
	case TicketsRetrieveRequestExpandAttachmentsCollectionsParentTicket:
		return "attachments,collections,parent_ticket"
	case TicketsRetrieveRequestExpandAttachmentsContact:
		return "attachments,contact"
	case TicketsRetrieveRequestExpandAttachmentsContactCreator:
		return "attachments,contact,creator"
	case TicketsRetrieveRequestExpandAttachmentsContactCreatorParentTicket:
		return "attachments,contact,creator,parent_ticket"
	case TicketsRetrieveRequestExpandAttachmentsContactParentTicket:
		return "attachments,contact,parent_ticket"
	case TicketsRetrieveRequestExpandAttachmentsCreator:
		return "attachments,creator"
	case TicketsRetrieveRequestExpandAttachmentsCreatorParentTicket:
		return "attachments,creator,parent_ticket"
	case TicketsRetrieveRequestExpandAttachmentsParentTicket:
		return "attachments,parent_ticket"
	case TicketsRetrieveRequestExpandCollections:
		return "collections"
	case TicketsRetrieveRequestExpandCollectionsAccount:
		return "collections,account"
	case TicketsRetrieveRequestExpandCollectionsAccountContact:
		return "collections,account,contact"
	case TicketsRetrieveRequestExpandCollectionsAccountContactCreator:
		return "collections,account,contact,creator"
	case TicketsRetrieveRequestExpandCollectionsAccountContactCreatorParentTicket:
		return "collections,account,contact,creator,parent_ticket"
	case TicketsRetrieveRequestExpandCollectionsAccountContactParentTicket:
		return "collections,account,contact,parent_ticket"
	case TicketsRetrieveRequestExpandCollectionsAccountCreator:
		return "collections,account,creator"
	case TicketsRetrieveRequestExpandCollectionsAccountCreatorParentTicket:
		return "collections,account,creator,parent_ticket"
	case TicketsRetrieveRequestExpandCollectionsAccountParentTicket:
		return "collections,account,parent_ticket"
	case TicketsRetrieveRequestExpandCollectionsContact:
		return "collections,contact"
	case TicketsRetrieveRequestExpandCollectionsContactCreator:
		return "collections,contact,creator"
	case TicketsRetrieveRequestExpandCollectionsContactCreatorParentTicket:
		return "collections,contact,creator,parent_ticket"
	case TicketsRetrieveRequestExpandCollectionsContactParentTicket:
		return "collections,contact,parent_ticket"
	case TicketsRetrieveRequestExpandCollectionsCreator:
		return "collections,creator"
	case TicketsRetrieveRequestExpandCollectionsCreatorParentTicket:
		return "collections,creator,parent_ticket"
	case TicketsRetrieveRequestExpandCollectionsParentTicket:
		return "collections,parent_ticket"
	case TicketsRetrieveRequestExpandContact:
		return "contact"
	case TicketsRetrieveRequestExpandContactCreator:
		return "contact,creator"
	case TicketsRetrieveRequestExpandContactCreatorParentTicket:
		return "contact,creator,parent_ticket"
	case TicketsRetrieveRequestExpandContactParentTicket:
		return "contact,parent_ticket"
	case TicketsRetrieveRequestExpandCreator:
		return "creator"
	case TicketsRetrieveRequestExpandCreatorParentTicket:
		return "creator,parent_ticket"
	case TicketsRetrieveRequestExpandParentTicket:
		return "parent_ticket"
	}
}

func (t TicketsRetrieveRequestExpand) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", t.String())), nil
}

func (t *TicketsRetrieveRequestExpand) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "account":
		value := TicketsRetrieveRequestExpandAccount
		*t = value
	case "account,contact":
		value := TicketsRetrieveRequestExpandAccountContact
		*t = value
	case "account,contact,creator":
		value := TicketsRetrieveRequestExpandAccountContactCreator
		*t = value
	case "account,contact,creator,parent_ticket":
		value := TicketsRetrieveRequestExpandAccountContactCreatorParentTicket
		*t = value
	case "account,contact,parent_ticket":
		value := TicketsRetrieveRequestExpandAccountContactParentTicket
		*t = value
	case "account,creator":
		value := TicketsRetrieveRequestExpandAccountCreator
		*t = value
	case "account,creator,parent_ticket":
		value := TicketsRetrieveRequestExpandAccountCreatorParentTicket
		*t = value
	case "account,parent_ticket":
		value := TicketsRetrieveRequestExpandAccountParentTicket
		*t = value
	case "assignees":
		value := TicketsRetrieveRequestExpandAssignees
		*t = value
	case "assignees,account":
		value := TicketsRetrieveRequestExpandAssigneesAccount
		*t = value
	case "assignees,account,contact":
		value := TicketsRetrieveRequestExpandAssigneesAccountContact
		*t = value
	case "assignees,account,contact,creator":
		value := TicketsRetrieveRequestExpandAssigneesAccountContactCreator
		*t = value
	case "assignees,account,contact,creator,parent_ticket":
		value := TicketsRetrieveRequestExpandAssigneesAccountContactCreatorParentTicket
		*t = value
	case "assignees,account,contact,parent_ticket":
		value := TicketsRetrieveRequestExpandAssigneesAccountContactParentTicket
		*t = value
	case "assignees,account,creator":
		value := TicketsRetrieveRequestExpandAssigneesAccountCreator
		*t = value
	case "assignees,account,creator,parent_ticket":
		value := TicketsRetrieveRequestExpandAssigneesAccountCreatorParentTicket
		*t = value
	case "assignees,account,parent_ticket":
		value := TicketsRetrieveRequestExpandAssigneesAccountParentTicket
		*t = value
	case "assignees,collections":
		value := TicketsRetrieveRequestExpandAssigneesCollections
		*t = value
	case "assignees,collections,account":
		value := TicketsRetrieveRequestExpandAssigneesCollectionsAccount
		*t = value
	case "assignees,collections,account,contact":
		value := TicketsRetrieveRequestExpandAssigneesCollectionsAccountContact
		*t = value
	case "assignees,collections,account,contact,creator":
		value := TicketsRetrieveRequestExpandAssigneesCollectionsAccountContactCreator
		*t = value
	case "assignees,collections,account,contact,creator,parent_ticket":
		value := TicketsRetrieveRequestExpandAssigneesCollectionsAccountContactCreatorParentTicket
		*t = value
	case "assignees,collections,account,contact,parent_ticket":
		value := TicketsRetrieveRequestExpandAssigneesCollectionsAccountContactParentTicket
		*t = value
	case "assignees,collections,account,creator":
		value := TicketsRetrieveRequestExpandAssigneesCollectionsAccountCreator
		*t = value
	case "assignees,collections,account,creator,parent_ticket":
		value := TicketsRetrieveRequestExpandAssigneesCollectionsAccountCreatorParentTicket
		*t = value
	case "assignees,collections,account,parent_ticket":
		value := TicketsRetrieveRequestExpandAssigneesCollectionsAccountParentTicket
		*t = value
	case "assignees,collections,contact":
		value := TicketsRetrieveRequestExpandAssigneesCollectionsContact
		*t = value
	case "assignees,collections,contact,creator":
		value := TicketsRetrieveRequestExpandAssigneesCollectionsContactCreator
		*t = value
	case "assignees,collections,contact,creator,parent_ticket":
		value := TicketsRetrieveRequestExpandAssigneesCollectionsContactCreatorParentTicket
		*t = value
	case "assignees,collections,contact,parent_ticket":
		value := TicketsRetrieveRequestExpandAssigneesCollectionsContactParentTicket
		*t = value
	case "assignees,collections,creator":
		value := TicketsRetrieveRequestExpandAssigneesCollectionsCreator
		*t = value
	case "assignees,collections,creator,parent_ticket":
		value := TicketsRetrieveRequestExpandAssigneesCollectionsCreatorParentTicket
		*t = value
	case "assignees,collections,parent_ticket":
		value := TicketsRetrieveRequestExpandAssigneesCollectionsParentTicket
		*t = value
	case "assignees,contact":
		value := TicketsRetrieveRequestExpandAssigneesContact
		*t = value
	case "assignees,contact,creator":
		value := TicketsRetrieveRequestExpandAssigneesContactCreator
		*t = value
	case "assignees,contact,creator,parent_ticket":
		value := TicketsRetrieveRequestExpandAssigneesContactCreatorParentTicket
		*t = value
	case "assignees,contact,parent_ticket":
		value := TicketsRetrieveRequestExpandAssigneesContactParentTicket
		*t = value
	case "assignees,creator":
		value := TicketsRetrieveRequestExpandAssigneesCreator
		*t = value
	case "assignees,creator,parent_ticket":
		value := TicketsRetrieveRequestExpandAssigneesCreatorParentTicket
		*t = value
	case "assignees,parent_ticket":
		value := TicketsRetrieveRequestExpandAssigneesParentTicket
		*t = value
	case "attachments":
		value := TicketsRetrieveRequestExpandAttachments
		*t = value
	case "attachments,account":
		value := TicketsRetrieveRequestExpandAttachmentsAccount
		*t = value
	case "attachments,account,contact":
		value := TicketsRetrieveRequestExpandAttachmentsAccountContact
		*t = value
	case "attachments,account,contact,creator":
		value := TicketsRetrieveRequestExpandAttachmentsAccountContactCreator
		*t = value
	case "attachments,account,contact,creator,parent_ticket":
		value := TicketsRetrieveRequestExpandAttachmentsAccountContactCreatorParentTicket
		*t = value
	case "attachments,account,contact,parent_ticket":
		value := TicketsRetrieveRequestExpandAttachmentsAccountContactParentTicket
		*t = value
	case "attachments,account,creator":
		value := TicketsRetrieveRequestExpandAttachmentsAccountCreator
		*t = value
	case "attachments,account,creator,parent_ticket":
		value := TicketsRetrieveRequestExpandAttachmentsAccountCreatorParentTicket
		*t = value
	case "attachments,account,parent_ticket":
		value := TicketsRetrieveRequestExpandAttachmentsAccountParentTicket
		*t = value
	case "attachments,assignees":
		value := TicketsRetrieveRequestExpandAttachmentsAssignees
		*t = value
	case "attachments,assignees,account":
		value := TicketsRetrieveRequestExpandAttachmentsAssigneesAccount
		*t = value
	case "attachments,assignees,account,contact":
		value := TicketsRetrieveRequestExpandAttachmentsAssigneesAccountContact
		*t = value
	case "attachments,assignees,account,contact,creator":
		value := TicketsRetrieveRequestExpandAttachmentsAssigneesAccountContactCreator
		*t = value
	case "attachments,assignees,account,contact,creator,parent_ticket":
		value := TicketsRetrieveRequestExpandAttachmentsAssigneesAccountContactCreatorParentTicket
		*t = value
	case "attachments,assignees,account,contact,parent_ticket":
		value := TicketsRetrieveRequestExpandAttachmentsAssigneesAccountContactParentTicket
		*t = value
	case "attachments,assignees,account,creator":
		value := TicketsRetrieveRequestExpandAttachmentsAssigneesAccountCreator
		*t = value
	case "attachments,assignees,account,creator,parent_ticket":
		value := TicketsRetrieveRequestExpandAttachmentsAssigneesAccountCreatorParentTicket
		*t = value
	case "attachments,assignees,account,parent_ticket":
		value := TicketsRetrieveRequestExpandAttachmentsAssigneesAccountParentTicket
		*t = value
	case "attachments,assignees,collections":
		value := TicketsRetrieveRequestExpandAttachmentsAssigneesCollections
		*t = value
	case "attachments,assignees,collections,account":
		value := TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsAccount
		*t = value
	case "attachments,assignees,collections,account,contact":
		value := TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsAccountContact
		*t = value
	case "attachments,assignees,collections,account,contact,creator":
		value := TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsAccountContactCreator
		*t = value
	case "attachments,assignees,collections,account,contact,creator,parent_ticket":
		value := TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsAccountContactCreatorParentTicket
		*t = value
	case "attachments,assignees,collections,account,contact,parent_ticket":
		value := TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsAccountContactParentTicket
		*t = value
	case "attachments,assignees,collections,account,creator":
		value := TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsAccountCreator
		*t = value
	case "attachments,assignees,collections,account,creator,parent_ticket":
		value := TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsAccountCreatorParentTicket
		*t = value
	case "attachments,assignees,collections,account,parent_ticket":
		value := TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsAccountParentTicket
		*t = value
	case "attachments,assignees,collections,contact":
		value := TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsContact
		*t = value
	case "attachments,assignees,collections,contact,creator":
		value := TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsContactCreator
		*t = value
	case "attachments,assignees,collections,contact,creator,parent_ticket":
		value := TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsContactCreatorParentTicket
		*t = value
	case "attachments,assignees,collections,contact,parent_ticket":
		value := TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsContactParentTicket
		*t = value
	case "attachments,assignees,collections,creator":
		value := TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsCreator
		*t = value
	case "attachments,assignees,collections,creator,parent_ticket":
		value := TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsCreatorParentTicket
		*t = value
	case "attachments,assignees,collections,parent_ticket":
		value := TicketsRetrieveRequestExpandAttachmentsAssigneesCollectionsParentTicket
		*t = value
	case "attachments,assignees,contact":
		value := TicketsRetrieveRequestExpandAttachmentsAssigneesContact
		*t = value
	case "attachments,assignees,contact,creator":
		value := TicketsRetrieveRequestExpandAttachmentsAssigneesContactCreator
		*t = value
	case "attachments,assignees,contact,creator,parent_ticket":
		value := TicketsRetrieveRequestExpandAttachmentsAssigneesContactCreatorParentTicket
		*t = value
	case "attachments,assignees,contact,parent_ticket":
		value := TicketsRetrieveRequestExpandAttachmentsAssigneesContactParentTicket
		*t = value
	case "attachments,assignees,creator":
		value := TicketsRetrieveRequestExpandAttachmentsAssigneesCreator
		*t = value
	case "attachments,assignees,creator,parent_ticket":
		value := TicketsRetrieveRequestExpandAttachmentsAssigneesCreatorParentTicket
		*t = value
	case "attachments,assignees,parent_ticket":
		value := TicketsRetrieveRequestExpandAttachmentsAssigneesParentTicket
		*t = value
	case "attachments,collections":
		value := TicketsRetrieveRequestExpandAttachmentsCollections
		*t = value
	case "attachments,collections,account":
		value := TicketsRetrieveRequestExpandAttachmentsCollectionsAccount
		*t = value
	case "attachments,collections,account,contact":
		value := TicketsRetrieveRequestExpandAttachmentsCollectionsAccountContact
		*t = value
	case "attachments,collections,account,contact,creator":
		value := TicketsRetrieveRequestExpandAttachmentsCollectionsAccountContactCreator
		*t = value
	case "attachments,collections,account,contact,creator,parent_ticket":
		value := TicketsRetrieveRequestExpandAttachmentsCollectionsAccountContactCreatorParentTicket
		*t = value
	case "attachments,collections,account,contact,parent_ticket":
		value := TicketsRetrieveRequestExpandAttachmentsCollectionsAccountContactParentTicket
		*t = value
	case "attachments,collections,account,creator":
		value := TicketsRetrieveRequestExpandAttachmentsCollectionsAccountCreator
		*t = value
	case "attachments,collections,account,creator,parent_ticket":
		value := TicketsRetrieveRequestExpandAttachmentsCollectionsAccountCreatorParentTicket
		*t = value
	case "attachments,collections,account,parent_ticket":
		value := TicketsRetrieveRequestExpandAttachmentsCollectionsAccountParentTicket
		*t = value
	case "attachments,collections,contact":
		value := TicketsRetrieveRequestExpandAttachmentsCollectionsContact
		*t = value
	case "attachments,collections,contact,creator":
		value := TicketsRetrieveRequestExpandAttachmentsCollectionsContactCreator
		*t = value
	case "attachments,collections,contact,creator,parent_ticket":
		value := TicketsRetrieveRequestExpandAttachmentsCollectionsContactCreatorParentTicket
		*t = value
	case "attachments,collections,contact,parent_ticket":
		value := TicketsRetrieveRequestExpandAttachmentsCollectionsContactParentTicket
		*t = value
	case "attachments,collections,creator":
		value := TicketsRetrieveRequestExpandAttachmentsCollectionsCreator
		*t = value
	case "attachments,collections,creator,parent_ticket":
		value := TicketsRetrieveRequestExpandAttachmentsCollectionsCreatorParentTicket
		*t = value
	case "attachments,collections,parent_ticket":
		value := TicketsRetrieveRequestExpandAttachmentsCollectionsParentTicket
		*t = value
	case "attachments,contact":
		value := TicketsRetrieveRequestExpandAttachmentsContact
		*t = value
	case "attachments,contact,creator":
		value := TicketsRetrieveRequestExpandAttachmentsContactCreator
		*t = value
	case "attachments,contact,creator,parent_ticket":
		value := TicketsRetrieveRequestExpandAttachmentsContactCreatorParentTicket
		*t = value
	case "attachments,contact,parent_ticket":
		value := TicketsRetrieveRequestExpandAttachmentsContactParentTicket
		*t = value
	case "attachments,creator":
		value := TicketsRetrieveRequestExpandAttachmentsCreator
		*t = value
	case "attachments,creator,parent_ticket":
		value := TicketsRetrieveRequestExpandAttachmentsCreatorParentTicket
		*t = value
	case "attachments,parent_ticket":
		value := TicketsRetrieveRequestExpandAttachmentsParentTicket
		*t = value
	case "collections":
		value := TicketsRetrieveRequestExpandCollections
		*t = value
	case "collections,account":
		value := TicketsRetrieveRequestExpandCollectionsAccount
		*t = value
	case "collections,account,contact":
		value := TicketsRetrieveRequestExpandCollectionsAccountContact
		*t = value
	case "collections,account,contact,creator":
		value := TicketsRetrieveRequestExpandCollectionsAccountContactCreator
		*t = value
	case "collections,account,contact,creator,parent_ticket":
		value := TicketsRetrieveRequestExpandCollectionsAccountContactCreatorParentTicket
		*t = value
	case "collections,account,contact,parent_ticket":
		value := TicketsRetrieveRequestExpandCollectionsAccountContactParentTicket
		*t = value
	case "collections,account,creator":
		value := TicketsRetrieveRequestExpandCollectionsAccountCreator
		*t = value
	case "collections,account,creator,parent_ticket":
		value := TicketsRetrieveRequestExpandCollectionsAccountCreatorParentTicket
		*t = value
	case "collections,account,parent_ticket":
		value := TicketsRetrieveRequestExpandCollectionsAccountParentTicket
		*t = value
	case "collections,contact":
		value := TicketsRetrieveRequestExpandCollectionsContact
		*t = value
	case "collections,contact,creator":
		value := TicketsRetrieveRequestExpandCollectionsContactCreator
		*t = value
	case "collections,contact,creator,parent_ticket":
		value := TicketsRetrieveRequestExpandCollectionsContactCreatorParentTicket
		*t = value
	case "collections,contact,parent_ticket":
		value := TicketsRetrieveRequestExpandCollectionsContactParentTicket
		*t = value
	case "collections,creator":
		value := TicketsRetrieveRequestExpandCollectionsCreator
		*t = value
	case "collections,creator,parent_ticket":
		value := TicketsRetrieveRequestExpandCollectionsCreatorParentTicket
		*t = value
	case "collections,parent_ticket":
		value := TicketsRetrieveRequestExpandCollectionsParentTicket
		*t = value
	case "contact":
		value := TicketsRetrieveRequestExpandContact
		*t = value
	case "contact,creator":
		value := TicketsRetrieveRequestExpandContactCreator
		*t = value
	case "contact,creator,parent_ticket":
		value := TicketsRetrieveRequestExpandContactCreatorParentTicket
		*t = value
	case "contact,parent_ticket":
		value := TicketsRetrieveRequestExpandContactParentTicket
		*t = value
	case "creator":
		value := TicketsRetrieveRequestExpandCreator
		*t = value
	case "creator,parent_ticket":
		value := TicketsRetrieveRequestExpandCreatorParentTicket
		*t = value
	case "parent_ticket":
		value := TicketsRetrieveRequestExpandParentTicket
		*t = value
	}
	return nil
}

type TicketsRetrieveRequestRemoteFields uint

const (
	TicketsRetrieveRequestRemoteFieldsPriority TicketsRetrieveRequestRemoteFields = iota + 1
	TicketsRetrieveRequestRemoteFieldsPriorityStatus
	TicketsRetrieveRequestRemoteFieldsPriorityStatusTicketType
	TicketsRetrieveRequestRemoteFieldsPriorityTicketType
	TicketsRetrieveRequestRemoteFieldsStatus
	TicketsRetrieveRequestRemoteFieldsStatusTicketType
	TicketsRetrieveRequestRemoteFieldsTicketType
)

func (t TicketsRetrieveRequestRemoteFields) String() string {
	switch t {
	default:
		return strconv.Itoa(int(t))
	case TicketsRetrieveRequestRemoteFieldsPriority:
		return "priority"
	case TicketsRetrieveRequestRemoteFieldsPriorityStatus:
		return "priority,status"
	case TicketsRetrieveRequestRemoteFieldsPriorityStatusTicketType:
		return "priority,status,ticket_type"
	case TicketsRetrieveRequestRemoteFieldsPriorityTicketType:
		return "priority,ticket_type"
	case TicketsRetrieveRequestRemoteFieldsStatus:
		return "status"
	case TicketsRetrieveRequestRemoteFieldsStatusTicketType:
		return "status,ticket_type"
	case TicketsRetrieveRequestRemoteFieldsTicketType:
		return "ticket_type"
	}
}

func (t TicketsRetrieveRequestRemoteFields) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", t.String())), nil
}

func (t *TicketsRetrieveRequestRemoteFields) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "priority":
		value := TicketsRetrieveRequestRemoteFieldsPriority
		*t = value
	case "priority,status":
		value := TicketsRetrieveRequestRemoteFieldsPriorityStatus
		*t = value
	case "priority,status,ticket_type":
		value := TicketsRetrieveRequestRemoteFieldsPriorityStatusTicketType
		*t = value
	case "priority,ticket_type":
		value := TicketsRetrieveRequestRemoteFieldsPriorityTicketType
		*t = value
	case "status":
		value := TicketsRetrieveRequestRemoteFieldsStatus
		*t = value
	case "status,ticket_type":
		value := TicketsRetrieveRequestRemoteFieldsStatusTicketType
		*t = value
	case "ticket_type":
		value := TicketsRetrieveRequestRemoteFieldsTicketType
		*t = value
	}
	return nil
}

type TicketsRetrieveRequestShowEnumOrigins uint

const (
	TicketsRetrieveRequestShowEnumOriginsPriority TicketsRetrieveRequestShowEnumOrigins = iota + 1
	TicketsRetrieveRequestShowEnumOriginsPriorityStatus
	TicketsRetrieveRequestShowEnumOriginsPriorityStatusTicketType
	TicketsRetrieveRequestShowEnumOriginsPriorityTicketType
	TicketsRetrieveRequestShowEnumOriginsStatus
	TicketsRetrieveRequestShowEnumOriginsStatusTicketType
	TicketsRetrieveRequestShowEnumOriginsTicketType
)

func (t TicketsRetrieveRequestShowEnumOrigins) String() string {
	switch t {
	default:
		return strconv.Itoa(int(t))
	case TicketsRetrieveRequestShowEnumOriginsPriority:
		return "priority"
	case TicketsRetrieveRequestShowEnumOriginsPriorityStatus:
		return "priority,status"
	case TicketsRetrieveRequestShowEnumOriginsPriorityStatusTicketType:
		return "priority,status,ticket_type"
	case TicketsRetrieveRequestShowEnumOriginsPriorityTicketType:
		return "priority,ticket_type"
	case TicketsRetrieveRequestShowEnumOriginsStatus:
		return "status"
	case TicketsRetrieveRequestShowEnumOriginsStatusTicketType:
		return "status,ticket_type"
	case TicketsRetrieveRequestShowEnumOriginsTicketType:
		return "ticket_type"
	}
}

func (t TicketsRetrieveRequestShowEnumOrigins) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", t.String())), nil
}

func (t *TicketsRetrieveRequestShowEnumOrigins) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "priority":
		value := TicketsRetrieveRequestShowEnumOriginsPriority
		*t = value
	case "priority,status":
		value := TicketsRetrieveRequestShowEnumOriginsPriorityStatus
		*t = value
	case "priority,status,ticket_type":
		value := TicketsRetrieveRequestShowEnumOriginsPriorityStatusTicketType
		*t = value
	case "priority,ticket_type":
		value := TicketsRetrieveRequestShowEnumOriginsPriorityTicketType
		*t = value
	case "status":
		value := TicketsRetrieveRequestShowEnumOriginsStatus
		*t = value
	case "status,ticket_type":
		value := TicketsRetrieveRequestShowEnumOriginsStatusTicketType
		*t = value
	case "ticket_type":
		value := TicketsRetrieveRequestShowEnumOriginsTicketType
		*t = value
	}
	return nil
}

// # The User Object
// ### Description
// The `User` object is used to represent an employee within a company.
//
// ### Usage Example
// TODO
type User struct {
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId *string `json:"remote_id,omitempty"`
	// The user's name.
	Name *string `json:"name,omitempty"`
	// The user's email address.
	EmailAddress *string `json:"email_address,omitempty"`
	// Whether or not the user is active.
	IsActive *bool            `json:"is_active,omitempty"`
	Teams    []*UserTeamsItem `json:"teams,omitempty"`
	Roles    []*UserRolesItem `json:"roles,omitempty"`
	// The user's avatar picture.
	Avatar *string `json:"avatar,omitempty"`
	// Indicates whether or not this object has been deleted in the third party platform.
	RemoteWasDeleted *bool      `json:"remote_was_deleted,omitempty"`
	CreatedAt        *time.Time `json:"created_at,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt    *time.Time     `json:"modified_at,omitempty"`
	FieldMappings map[string]any `json:"field_mappings,omitempty"`
	RemoteData    []*RemoteData  `json:"remote_data,omitempty"`
}

type UserRolesItem struct {
	typeName string
	String   string
	Role     *Role
}

func NewUserRolesItemFromString(value string) *UserRolesItem {
	return &UserRolesItem{typeName: "string", String: value}
}

func NewUserRolesItemFromRole(value *Role) *UserRolesItem {
	return &UserRolesItem{typeName: "role", Role: value}
}

func (u *UserRolesItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		u.typeName = "string"
		u.String = valueString
		return nil
	}
	valueRole := new(Role)
	if err := json.Unmarshal(data, &valueRole); err == nil {
		u.typeName = "role"
		u.Role = valueRole
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, u)
}

func (u UserRolesItem) MarshalJSON() ([]byte, error) {
	switch u.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", u.typeName, u)
	case "string":
		return json.Marshal(u.String)
	case "role":
		return json.Marshal(u.Role)
	}
}

type UserRolesItemVisitor interface {
	VisitString(string) error
	VisitRole(*Role) error
}

func (u *UserRolesItem) Accept(visitor UserRolesItemVisitor) error {
	switch u.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", u.typeName, u)
	case "string":
		return visitor.VisitString(u.String)
	case "role":
		return visitor.VisitRole(u.Role)
	}
}

type UserTeamsItem struct {
	typeName string
	String   string
	Team     *Team
}

func NewUserTeamsItemFromString(value string) *UserTeamsItem {
	return &UserTeamsItem{typeName: "string", String: value}
}

func NewUserTeamsItemFromTeam(value *Team) *UserTeamsItem {
	return &UserTeamsItem{typeName: "team", Team: value}
}

func (u *UserTeamsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		u.typeName = "string"
		u.String = valueString
		return nil
	}
	valueTeam := new(Team)
	if err := json.Unmarshal(data, &valueTeam); err == nil {
		u.typeName = "team"
		u.Team = valueTeam
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, u)
}

func (u UserTeamsItem) MarshalJSON() ([]byte, error) {
	switch u.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", u.typeName, u)
	case "string":
		return json.Marshal(u.String)
	case "team":
		return json.Marshal(u.Team)
	}
}

type UserTeamsItemVisitor interface {
	VisitString(string) error
	VisitTeam(*Team) error
}

func (u *UserTeamsItem) Accept(visitor UserTeamsItemVisitor) error {
	switch u.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", u.typeName, u)
	case "string":
		return visitor.VisitString(u.String)
	case "team":
		return visitor.VisitTeam(u.Team)
	}
}

type UsersListRequestExpand uint

const (
	UsersListRequestExpandRoles UsersListRequestExpand = iota + 1
	UsersListRequestExpandTeams
	UsersListRequestExpandTeamsRoles
)

func (u UsersListRequestExpand) String() string {
	switch u {
	default:
		return strconv.Itoa(int(u))
	case UsersListRequestExpandRoles:
		return "roles"
	case UsersListRequestExpandTeams:
		return "teams"
	case UsersListRequestExpandTeamsRoles:
		return "teams,roles"
	}
}

func (u UsersListRequestExpand) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", u.String())), nil
}

func (u *UsersListRequestExpand) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "roles":
		value := UsersListRequestExpandRoles
		*u = value
	case "teams":
		value := UsersListRequestExpandTeams
		*u = value
	case "teams,roles":
		value := UsersListRequestExpandTeamsRoles
		*u = value
	}
	return nil
}

type UsersRetrieveRequestExpand uint

const (
	UsersRetrieveRequestExpandRoles UsersRetrieveRequestExpand = iota + 1
	UsersRetrieveRequestExpandTeams
	UsersRetrieveRequestExpandTeamsRoles
)

func (u UsersRetrieveRequestExpand) String() string {
	switch u {
	default:
		return strconv.Itoa(int(u))
	case UsersRetrieveRequestExpandRoles:
		return "roles"
	case UsersRetrieveRequestExpandTeams:
		return "teams"
	case UsersRetrieveRequestExpandTeamsRoles:
		return "teams,roles"
	}
}

func (u UsersRetrieveRequestExpand) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", u.String())), nil
}

func (u *UsersRetrieveRequestExpand) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "roles":
		value := UsersRetrieveRequestExpandRoles
		*u = value
	case "teams":
		value := UsersRetrieveRequestExpandTeams
		*u = value
	case "teams,roles":
		value := UsersRetrieveRequestExpandTeamsRoles
		*u = value
	}
	return nil
}

type ValidationProblemSource struct {
	Pointer string `json:"pointer"`
}

type WarningValidationProblem struct {
	Source      *ValidationProblemSource `json:"source,omitempty"`
	Title       string                   `json:"title"`
	Detail      string                   `json:"detail"`
	ProblemType string                   `json:"problem_type"`
}

type WebhookReceiver struct {
	Event    string  `json:"event"`
	IsActive bool    `json:"is_active"`
	Key      *string `json:"key,omitempty"`
}
