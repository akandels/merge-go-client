// This file was auto-generated by Fern from our API Definition.

package ats

import (
	json "encoding/json"
	fmt "fmt"
	strconv "strconv"
	time "time"
)

type JobsListRequest struct {
	// If provided, will only return jobs with this code.
	Code *string `json:"-"`
	// If provided, will only return objects created after this datetime.
	CreatedAfter *time.Time `json:"-"`
	// If provided, will only return objects created before this datetime.
	CreatedBefore *time.Time `json:"-"`
	// The pagination cursor value.
	Cursor *string `json:"-"`
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand *JobsListRequestExpand `json:"-"`
	// Whether to include data that was marked as deleted by third party webhooks.
	IncludeDeletedData *bool `json:"-"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-"`
	// If provided, only objects synced by Merge after this date time will be returned.
	ModifiedAfter *time.Time `json:"-"`
	// If provided, only objects synced by Merge before this date time will be returned.
	ModifiedBefore *time.Time `json:"-"`
	// If provided, will only return jobs for this office; multiple offices can be separated by commas.
	Offices *string `json:"-"`
	// Number of results to return per page.
	PageSize *int `json:"-"`
	// Deprecated. Use show_enum_origins.
	RemoteFields *string `json:"-"`
	// The API provider's ID for the given object.
	RemoteId *string `json:"-"`
	// Which fields should be returned in non-normalized form.
	ShowEnumOrigins *string `json:"-"`
	// If provided, will only return jobs with this status. Options: ('OPEN', 'CLOSED', 'DRAFT', 'ARCHIVED', 'PENDING')
	//
	// - `OPEN` - OPEN
	// - `CLOSED` - CLOSED
	// - `DRAFT` - DRAFT
	// - `ARCHIVED` - ARCHIVED
	// - `PENDING` - PENDING
	Status *JobsListRequestStatus `json:"-"`
}

type JobsRetrieveRequest struct {
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand *JobsRetrieveRequestExpand `json:"-"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-"`
	// Deprecated. Use show_enum_origins.
	RemoteFields *string `json:"-"`
	// Which fields should be returned in non-normalized form.
	ShowEnumOrigins *string `json:"-"`
}

type JobsScreeningQuestionsListRequest struct {
	// The pagination cursor value.
	Cursor *string `json:"-"`
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand *JobsScreeningQuestionsListRequestExpand `json:"-"`
	// Whether to include data that was marked as deleted by third party webhooks.
	IncludeDeletedData *bool `json:"-"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-"`
	// Number of results to return per page.
	PageSize *int `json:"-"`
}

type JobsListRequestExpand uint

const (
	JobsListRequestExpandDepartments JobsListRequestExpand = iota + 1
	JobsListRequestExpandDepartmentsHiringManagers
	JobsListRequestExpandDepartmentsHiringManagersRecruiters
	JobsListRequestExpandDepartmentsOffices
	JobsListRequestExpandDepartmentsOfficesHiringManagers
	JobsListRequestExpandDepartmentsOfficesHiringManagersRecruiters
	JobsListRequestExpandDepartmentsOfficesRecruiters
	JobsListRequestExpandDepartmentsRecruiters
	JobsListRequestExpandHiringManagers
	JobsListRequestExpandHiringManagersRecruiters
	JobsListRequestExpandOffices
	JobsListRequestExpandOfficesHiringManagers
	JobsListRequestExpandOfficesHiringManagersRecruiters
	JobsListRequestExpandOfficesRecruiters
	JobsListRequestExpandRecruiters
)

func (j JobsListRequestExpand) String() string {
	switch j {
	default:
		return strconv.Itoa(int(j))
	case JobsListRequestExpandDepartments:
		return "departments"
	case JobsListRequestExpandDepartmentsHiringManagers:
		return "departments,hiring_managers"
	case JobsListRequestExpandDepartmentsHiringManagersRecruiters:
		return "departments,hiring_managers,recruiters"
	case JobsListRequestExpandDepartmentsOffices:
		return "departments,offices"
	case JobsListRequestExpandDepartmentsOfficesHiringManagers:
		return "departments,offices,hiring_managers"
	case JobsListRequestExpandDepartmentsOfficesHiringManagersRecruiters:
		return "departments,offices,hiring_managers,recruiters"
	case JobsListRequestExpandDepartmentsOfficesRecruiters:
		return "departments,offices,recruiters"
	case JobsListRequestExpandDepartmentsRecruiters:
		return "departments,recruiters"
	case JobsListRequestExpandHiringManagers:
		return "hiring_managers"
	case JobsListRequestExpandHiringManagersRecruiters:
		return "hiring_managers,recruiters"
	case JobsListRequestExpandOffices:
		return "offices"
	case JobsListRequestExpandOfficesHiringManagers:
		return "offices,hiring_managers"
	case JobsListRequestExpandOfficesHiringManagersRecruiters:
		return "offices,hiring_managers,recruiters"
	case JobsListRequestExpandOfficesRecruiters:
		return "offices,recruiters"
	case JobsListRequestExpandRecruiters:
		return "recruiters"
	}
}

func (j JobsListRequestExpand) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", j.String())), nil
}

func (j *JobsListRequestExpand) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "departments":
		value := JobsListRequestExpandDepartments
		*j = value
	case "departments,hiring_managers":
		value := JobsListRequestExpandDepartmentsHiringManagers
		*j = value
	case "departments,hiring_managers,recruiters":
		value := JobsListRequestExpandDepartmentsHiringManagersRecruiters
		*j = value
	case "departments,offices":
		value := JobsListRequestExpandDepartmentsOffices
		*j = value
	case "departments,offices,hiring_managers":
		value := JobsListRequestExpandDepartmentsOfficesHiringManagers
		*j = value
	case "departments,offices,hiring_managers,recruiters":
		value := JobsListRequestExpandDepartmentsOfficesHiringManagersRecruiters
		*j = value
	case "departments,offices,recruiters":
		value := JobsListRequestExpandDepartmentsOfficesRecruiters
		*j = value
	case "departments,recruiters":
		value := JobsListRequestExpandDepartmentsRecruiters
		*j = value
	case "hiring_managers":
		value := JobsListRequestExpandHiringManagers
		*j = value
	case "hiring_managers,recruiters":
		value := JobsListRequestExpandHiringManagersRecruiters
		*j = value
	case "offices":
		value := JobsListRequestExpandOffices
		*j = value
	case "offices,hiring_managers":
		value := JobsListRequestExpandOfficesHiringManagers
		*j = value
	case "offices,hiring_managers,recruiters":
		value := JobsListRequestExpandOfficesHiringManagersRecruiters
		*j = value
	case "offices,recruiters":
		value := JobsListRequestExpandOfficesRecruiters
		*j = value
	case "recruiters":
		value := JobsListRequestExpandRecruiters
		*j = value
	}
	return nil
}

type JobsListRequestStatus uint

const (
	JobsListRequestStatusArchived JobsListRequestStatus = iota + 1
	JobsListRequestStatusClosed
	JobsListRequestStatusDraft
	JobsListRequestStatusOpen
	JobsListRequestStatusPending
)

func (j JobsListRequestStatus) String() string {
	switch j {
	default:
		return strconv.Itoa(int(j))
	case JobsListRequestStatusArchived:
		return "ARCHIVED"
	case JobsListRequestStatusClosed:
		return "CLOSED"
	case JobsListRequestStatusDraft:
		return "DRAFT"
	case JobsListRequestStatusOpen:
		return "OPEN"
	case JobsListRequestStatusPending:
		return "PENDING"
	}
}

func (j JobsListRequestStatus) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", j.String())), nil
}

func (j *JobsListRequestStatus) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "ARCHIVED":
		value := JobsListRequestStatusArchived
		*j = value
	case "CLOSED":
		value := JobsListRequestStatusClosed
		*j = value
	case "DRAFT":
		value := JobsListRequestStatusDraft
		*j = value
	case "OPEN":
		value := JobsListRequestStatusOpen
		*j = value
	case "PENDING":
		value := JobsListRequestStatusPending
		*j = value
	}
	return nil
}

type JobsRetrieveRequestExpand uint

const (
	JobsRetrieveRequestExpandDepartments JobsRetrieveRequestExpand = iota + 1
	JobsRetrieveRequestExpandDepartmentsHiringManagers
	JobsRetrieveRequestExpandDepartmentsHiringManagersRecruiters
	JobsRetrieveRequestExpandDepartmentsOffices
	JobsRetrieveRequestExpandDepartmentsOfficesHiringManagers
	JobsRetrieveRequestExpandDepartmentsOfficesHiringManagersRecruiters
	JobsRetrieveRequestExpandDepartmentsOfficesRecruiters
	JobsRetrieveRequestExpandDepartmentsRecruiters
	JobsRetrieveRequestExpandHiringManagers
	JobsRetrieveRequestExpandHiringManagersRecruiters
	JobsRetrieveRequestExpandOffices
	JobsRetrieveRequestExpandOfficesHiringManagers
	JobsRetrieveRequestExpandOfficesHiringManagersRecruiters
	JobsRetrieveRequestExpandOfficesRecruiters
	JobsRetrieveRequestExpandRecruiters
)

func (j JobsRetrieveRequestExpand) String() string {
	switch j {
	default:
		return strconv.Itoa(int(j))
	case JobsRetrieveRequestExpandDepartments:
		return "departments"
	case JobsRetrieveRequestExpandDepartmentsHiringManagers:
		return "departments,hiring_managers"
	case JobsRetrieveRequestExpandDepartmentsHiringManagersRecruiters:
		return "departments,hiring_managers,recruiters"
	case JobsRetrieveRequestExpandDepartmentsOffices:
		return "departments,offices"
	case JobsRetrieveRequestExpandDepartmentsOfficesHiringManagers:
		return "departments,offices,hiring_managers"
	case JobsRetrieveRequestExpandDepartmentsOfficesHiringManagersRecruiters:
		return "departments,offices,hiring_managers,recruiters"
	case JobsRetrieveRequestExpandDepartmentsOfficesRecruiters:
		return "departments,offices,recruiters"
	case JobsRetrieveRequestExpandDepartmentsRecruiters:
		return "departments,recruiters"
	case JobsRetrieveRequestExpandHiringManagers:
		return "hiring_managers"
	case JobsRetrieveRequestExpandHiringManagersRecruiters:
		return "hiring_managers,recruiters"
	case JobsRetrieveRequestExpandOffices:
		return "offices"
	case JobsRetrieveRequestExpandOfficesHiringManagers:
		return "offices,hiring_managers"
	case JobsRetrieveRequestExpandOfficesHiringManagersRecruiters:
		return "offices,hiring_managers,recruiters"
	case JobsRetrieveRequestExpandOfficesRecruiters:
		return "offices,recruiters"
	case JobsRetrieveRequestExpandRecruiters:
		return "recruiters"
	}
}

func (j JobsRetrieveRequestExpand) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", j.String())), nil
}

func (j *JobsRetrieveRequestExpand) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "departments":
		value := JobsRetrieveRequestExpandDepartments
		*j = value
	case "departments,hiring_managers":
		value := JobsRetrieveRequestExpandDepartmentsHiringManagers
		*j = value
	case "departments,hiring_managers,recruiters":
		value := JobsRetrieveRequestExpandDepartmentsHiringManagersRecruiters
		*j = value
	case "departments,offices":
		value := JobsRetrieveRequestExpandDepartmentsOffices
		*j = value
	case "departments,offices,hiring_managers":
		value := JobsRetrieveRequestExpandDepartmentsOfficesHiringManagers
		*j = value
	case "departments,offices,hiring_managers,recruiters":
		value := JobsRetrieveRequestExpandDepartmentsOfficesHiringManagersRecruiters
		*j = value
	case "departments,offices,recruiters":
		value := JobsRetrieveRequestExpandDepartmentsOfficesRecruiters
		*j = value
	case "departments,recruiters":
		value := JobsRetrieveRequestExpandDepartmentsRecruiters
		*j = value
	case "hiring_managers":
		value := JobsRetrieveRequestExpandHiringManagers
		*j = value
	case "hiring_managers,recruiters":
		value := JobsRetrieveRequestExpandHiringManagersRecruiters
		*j = value
	case "offices":
		value := JobsRetrieveRequestExpandOffices
		*j = value
	case "offices,hiring_managers":
		value := JobsRetrieveRequestExpandOfficesHiringManagers
		*j = value
	case "offices,hiring_managers,recruiters":
		value := JobsRetrieveRequestExpandOfficesHiringManagersRecruiters
		*j = value
	case "offices,recruiters":
		value := JobsRetrieveRequestExpandOfficesRecruiters
		*j = value
	case "recruiters":
		value := JobsRetrieveRequestExpandRecruiters
		*j = value
	}
	return nil
}

type JobsScreeningQuestionsListRequestExpand uint

const (
	JobsScreeningQuestionsListRequestExpandJob JobsScreeningQuestionsListRequestExpand = iota + 1
	JobsScreeningQuestionsListRequestExpandOptions
	JobsScreeningQuestionsListRequestExpandOptionsJob
)

func (j JobsScreeningQuestionsListRequestExpand) String() string {
	switch j {
	default:
		return strconv.Itoa(int(j))
	case JobsScreeningQuestionsListRequestExpandJob:
		return "job"
	case JobsScreeningQuestionsListRequestExpandOptions:
		return "options"
	case JobsScreeningQuestionsListRequestExpandOptionsJob:
		return "options,job"
	}
}

func (j JobsScreeningQuestionsListRequestExpand) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", j.String())), nil
}

func (j *JobsScreeningQuestionsListRequestExpand) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "job":
		value := JobsScreeningQuestionsListRequestExpandJob
		*j = value
	case "options":
		value := JobsScreeningQuestionsListRequestExpandOptions
		*j = value
	case "options,job":
		value := JobsScreeningQuestionsListRequestExpandOptionsJob
		*j = value
	}
	return nil
}
