// This file was auto-generated by Fern from our API Definition.

package ats

import (
	json "encoding/json"
	fmt "fmt"
	strconv "strconv"
	time "time"
)

type ScorecardsListRequest struct {
	// If provided, will only return scorecards for this application.
	ApplicationId *string `json:"-"`
	// If provided, will only return objects created after this datetime.
	CreatedAfter *time.Time `json:"-"`
	// If provided, will only return objects created before this datetime.
	CreatedBefore *time.Time `json:"-"`
	// The pagination cursor value.
	Cursor *string `json:"-"`
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand *ScorecardsListRequestExpand `json:"-"`
	// Whether to include data that was marked as deleted by third party webhooks.
	IncludeDeletedData *bool `json:"-"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-"`
	// If provided, will only return scorecards for this interview.
	InterviewId *string `json:"-"`
	// If provided, will only return scorecards for this interviewer.
	InterviewerId *string `json:"-"`
	// If provided, only objects synced by Merge after this date time will be returned.
	ModifiedAfter *time.Time `json:"-"`
	// If provided, only objects synced by Merge before this date time will be returned.
	ModifiedBefore *time.Time `json:"-"`
	// Number of results to return per page.
	PageSize *int `json:"-"`
	// Deprecated. Use show_enum_origins.
	RemoteFields *string `json:"-"`
	// The API provider's ID for the given object.
	RemoteId *string `json:"-"`
	// Which fields should be returned in non-normalized form.
	ShowEnumOrigins *string `json:"-"`
}

type ScorecardsRetrieveRequest struct {
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand *ScorecardsRetrieveRequestExpand `json:"-"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-"`
	// Deprecated. Use show_enum_origins.
	RemoteFields *string `json:"-"`
	// Which fields should be returned in non-normalized form.
	ShowEnumOrigins *string `json:"-"`
}

type ScorecardsListRequestExpand uint

const (
	ScorecardsListRequestExpandApplication ScorecardsListRequestExpand = iota + 1
	ScorecardsListRequestExpandApplicationInterview
	ScorecardsListRequestExpandApplicationInterviewInterviewer
	ScorecardsListRequestExpandApplicationInterviewer
	ScorecardsListRequestExpandInterview
	ScorecardsListRequestExpandInterviewInterviewer
	ScorecardsListRequestExpandInterviewer
)

func (s ScorecardsListRequestExpand) String() string {
	switch s {
	default:
		return strconv.Itoa(int(s))
	case ScorecardsListRequestExpandApplication:
		return "application"
	case ScorecardsListRequestExpandApplicationInterview:
		return "application,interview"
	case ScorecardsListRequestExpandApplicationInterviewInterviewer:
		return "application,interview,interviewer"
	case ScorecardsListRequestExpandApplicationInterviewer:
		return "application,interviewer"
	case ScorecardsListRequestExpandInterview:
		return "interview"
	case ScorecardsListRequestExpandInterviewInterviewer:
		return "interview,interviewer"
	case ScorecardsListRequestExpandInterviewer:
		return "interviewer"
	}
}

func (s ScorecardsListRequestExpand) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", s.String())), nil
}

func (s *ScorecardsListRequestExpand) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "application":
		value := ScorecardsListRequestExpandApplication
		*s = value
	case "application,interview":
		value := ScorecardsListRequestExpandApplicationInterview
		*s = value
	case "application,interview,interviewer":
		value := ScorecardsListRequestExpandApplicationInterviewInterviewer
		*s = value
	case "application,interviewer":
		value := ScorecardsListRequestExpandApplicationInterviewer
		*s = value
	case "interview":
		value := ScorecardsListRequestExpandInterview
		*s = value
	case "interview,interviewer":
		value := ScorecardsListRequestExpandInterviewInterviewer
		*s = value
	case "interviewer":
		value := ScorecardsListRequestExpandInterviewer
		*s = value
	}
	return nil
}

type ScorecardsRetrieveRequestExpand uint

const (
	ScorecardsRetrieveRequestExpandApplication ScorecardsRetrieveRequestExpand = iota + 1
	ScorecardsRetrieveRequestExpandApplicationInterview
	ScorecardsRetrieveRequestExpandApplicationInterviewInterviewer
	ScorecardsRetrieveRequestExpandApplicationInterviewer
	ScorecardsRetrieveRequestExpandInterview
	ScorecardsRetrieveRequestExpandInterviewInterviewer
	ScorecardsRetrieveRequestExpandInterviewer
)

func (s ScorecardsRetrieveRequestExpand) String() string {
	switch s {
	default:
		return strconv.Itoa(int(s))
	case ScorecardsRetrieveRequestExpandApplication:
		return "application"
	case ScorecardsRetrieveRequestExpandApplicationInterview:
		return "application,interview"
	case ScorecardsRetrieveRequestExpandApplicationInterviewInterviewer:
		return "application,interview,interviewer"
	case ScorecardsRetrieveRequestExpandApplicationInterviewer:
		return "application,interviewer"
	case ScorecardsRetrieveRequestExpandInterview:
		return "interview"
	case ScorecardsRetrieveRequestExpandInterviewInterviewer:
		return "interview,interviewer"
	case ScorecardsRetrieveRequestExpandInterviewer:
		return "interviewer"
	}
}

func (s ScorecardsRetrieveRequestExpand) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", s.String())), nil
}

func (s *ScorecardsRetrieveRequestExpand) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "application":
		value := ScorecardsRetrieveRequestExpandApplication
		*s = value
	case "application,interview":
		value := ScorecardsRetrieveRequestExpandApplicationInterview
		*s = value
	case "application,interview,interviewer":
		value := ScorecardsRetrieveRequestExpandApplicationInterviewInterviewer
		*s = value
	case "application,interviewer":
		value := ScorecardsRetrieveRequestExpandApplicationInterviewer
		*s = value
	case "interview":
		value := ScorecardsRetrieveRequestExpandInterview
		*s = value
	case "interview,interviewer":
		value := ScorecardsRetrieveRequestExpandInterviewInterviewer
		*s = value
	case "interviewer":
		value := ScorecardsRetrieveRequestExpandInterviewer
		*s = value
	}
	return nil
}
