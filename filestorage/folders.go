// This file was auto-generated by Fern from our API Definition.

package filestorage

import (
	json "encoding/json"
	fmt "fmt"
	strconv "strconv"
	time "time"
)

type FileStorageFolderEndpointRequest struct {
	// Whether to include debug fields (such as log file links) in the response.
	IsDebugMode *bool `json:"-"`
	// Whether or not third-party updates should be run asynchronously.
	RunAsync *bool          `json:"-"`
	Model    *FolderRequest `json:"model,omitempty"`
}

type FoldersListRequest struct {
	// If provided, will only return objects created after this datetime.
	CreatedAfter *time.Time `json:"-"`
	// If provided, will only return objects created before this datetime.
	CreatedBefore *time.Time `json:"-"`
	// The pagination cursor value.
	Cursor *string `json:"-"`
	// If provided, will only return folders in this drive.
	DriveId *string `json:"-"`
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand *FoldersListRequestExpand `json:"-"`
	// Whether to include data that was marked as deleted by third party webhooks.
	IncludeDeletedData *bool `json:"-"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-"`
	// If provided, only objects synced by Merge after this date time will be returned.
	ModifiedAfter *time.Time `json:"-"`
	// If provided, only objects synced by Merge before this date time will be returned.
	ModifiedBefore *time.Time `json:"-"`
	// If provided, will only return folders with this name. This performs an exact match.
	Name *string `json:"-"`
	// Number of results to return per page.
	PageSize *int `json:"-"`
	// If provided, will only return folders in this parent folder. If null, will return folders in root directory.
	ParentFolderId *string `json:"-"`
	// The API provider's ID for the given object.
	RemoteId *string `json:"-"`
}

type FoldersRetrieveRequest struct {
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand *FoldersRetrieveRequestExpand `json:"-"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `json:"-"`
}

type FoldersListRequestExpand uint

const (
	FoldersListRequestExpandDrive FoldersListRequestExpand = iota + 1
	FoldersListRequestExpandParentFolder
	FoldersListRequestExpandParentFolderDrive
	FoldersListRequestExpandPermissions
	FoldersListRequestExpandPermissionsDrive
	FoldersListRequestExpandPermissionsParentFolder
	FoldersListRequestExpandPermissionsParentFolderDrive
)

func (f FoldersListRequestExpand) String() string {
	switch f {
	default:
		return strconv.Itoa(int(f))
	case FoldersListRequestExpandDrive:
		return "drive"
	case FoldersListRequestExpandParentFolder:
		return "parent_folder"
	case FoldersListRequestExpandParentFolderDrive:
		return "parent_folder,drive"
	case FoldersListRequestExpandPermissions:
		return "permissions"
	case FoldersListRequestExpandPermissionsDrive:
		return "permissions,drive"
	case FoldersListRequestExpandPermissionsParentFolder:
		return "permissions,parent_folder"
	case FoldersListRequestExpandPermissionsParentFolderDrive:
		return "permissions,parent_folder,drive"
	}
}

func (f FoldersListRequestExpand) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", f.String())), nil
}

func (f *FoldersListRequestExpand) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "drive":
		value := FoldersListRequestExpandDrive
		*f = value
	case "parent_folder":
		value := FoldersListRequestExpandParentFolder
		*f = value
	case "parent_folder,drive":
		value := FoldersListRequestExpandParentFolderDrive
		*f = value
	case "permissions":
		value := FoldersListRequestExpandPermissions
		*f = value
	case "permissions,drive":
		value := FoldersListRequestExpandPermissionsDrive
		*f = value
	case "permissions,parent_folder":
		value := FoldersListRequestExpandPermissionsParentFolder
		*f = value
	case "permissions,parent_folder,drive":
		value := FoldersListRequestExpandPermissionsParentFolderDrive
		*f = value
	}
	return nil
}

type FoldersRetrieveRequestExpand uint

const (
	FoldersRetrieveRequestExpandDrive FoldersRetrieveRequestExpand = iota + 1
	FoldersRetrieveRequestExpandParentFolder
	FoldersRetrieveRequestExpandParentFolderDrive
	FoldersRetrieveRequestExpandPermissions
	FoldersRetrieveRequestExpandPermissionsDrive
	FoldersRetrieveRequestExpandPermissionsParentFolder
	FoldersRetrieveRequestExpandPermissionsParentFolderDrive
)

func (f FoldersRetrieveRequestExpand) String() string {
	switch f {
	default:
		return strconv.Itoa(int(f))
	case FoldersRetrieveRequestExpandDrive:
		return "drive"
	case FoldersRetrieveRequestExpandParentFolder:
		return "parent_folder"
	case FoldersRetrieveRequestExpandParentFolderDrive:
		return "parent_folder,drive"
	case FoldersRetrieveRequestExpandPermissions:
		return "permissions"
	case FoldersRetrieveRequestExpandPermissionsDrive:
		return "permissions,drive"
	case FoldersRetrieveRequestExpandPermissionsParentFolder:
		return "permissions,parent_folder"
	case FoldersRetrieveRequestExpandPermissionsParentFolderDrive:
		return "permissions,parent_folder,drive"
	}
}

func (f FoldersRetrieveRequestExpand) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", f.String())), nil
}

func (f *FoldersRetrieveRequestExpand) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "drive":
		value := FoldersRetrieveRequestExpandDrive
		*f = value
	case "parent_folder":
		value := FoldersRetrieveRequestExpandParentFolder
		*f = value
	case "parent_folder,drive":
		value := FoldersRetrieveRequestExpandParentFolderDrive
		*f = value
	case "permissions":
		value := FoldersRetrieveRequestExpandPermissions
		*f = value
	case "permissions,drive":
		value := FoldersRetrieveRequestExpandPermissionsDrive
		*f = value
	case "permissions,parent_folder":
		value := FoldersRetrieveRequestExpandPermissionsParentFolder
		*f = value
	case "permissions,parent_folder,drive":
		value := FoldersRetrieveRequestExpandPermissionsParentFolderDrive
		*f = value
	}
	return nil
}
