// This file was auto-generated by Fern from our API Definition.

package associations

import (
	context "context"
	fmt "fmt"
	core "github.com/merge-api/merge-go-client/core"
	crm "github.com/merge-api/merge-go-client/crm"
	http "net/http"
	url "net/url"
	time "time"
)

type Client interface {
	CustomObjectClassesCustomObjectsAssociationsList(ctx context.Context, customObjectClassId string, objectId string, request *crm.CustomObjectClassesCustomObjectsAssociationsListRequest) (*crm.PaginatedAssociationList, error)
	CustomObjectClassesCustomObjectsAssociationsUpdate(ctx context.Context, associationTypeId string, sourceClassId string, sourceObjectId string, targetClassId string, targetObjectId string, request *crm.CustomObjectClassesCustomObjectsAssociationsUpdateRequest) (*crm.Association, error)
}

func NewClient(opts ...core.ClientOption) Client {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &client{
		baseURL:    options.BaseURL,
		httpClient: options.HTTPClient,
		header:     options.ToHeader(),
	}
}

type client struct {
	baseURL    string
	httpClient core.HTTPClient
	header     http.Header
}

// Returns a list of `Association` objects.
func (c *client) CustomObjectClassesCustomObjectsAssociationsList(ctx context.Context, customObjectClassId string, objectId string, request *crm.CustomObjectClassesCustomObjectsAssociationsListRequest) (*crm.PaginatedAssociationList, error) {
	baseURL := "https://api.merge.dev"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"api/crm/v1/custom-object-classes/%v/custom-objects/%v/associations", customObjectClassId, objectId)

	queryParams := make(url.Values)
	if request.AssociationTypeId != nil {
		queryParams.Add("association_type_id", fmt.Sprintf("%v", *request.AssociationTypeId))
	}
	if request.CreatedAfter != nil {
		queryParams.Add("created_after", fmt.Sprintf("%v", request.CreatedAfter.Format(time.RFC3339)))
	}
	if request.CreatedBefore != nil {
		queryParams.Add("created_before", fmt.Sprintf("%v", request.CreatedBefore.Format(time.RFC3339)))
	}
	if request.Cursor != nil {
		queryParams.Add("cursor", fmt.Sprintf("%v", *request.Cursor))
	}
	if request.Expand != nil {
		queryParams.Add("expand", fmt.Sprintf("%v", *request.Expand))
	}
	if request.IncludeDeletedData != nil {
		queryParams.Add("include_deleted_data", fmt.Sprintf("%v", *request.IncludeDeletedData))
	}
	if request.IncludeRemoteData != nil {
		queryParams.Add("include_remote_data", fmt.Sprintf("%v", *request.IncludeRemoteData))
	}
	if request.ModifiedAfter != nil {
		queryParams.Add("modified_after", fmt.Sprintf("%v", request.ModifiedAfter.Format(time.RFC3339)))
	}
	if request.ModifiedBefore != nil {
		queryParams.Add("modified_before", fmt.Sprintf("%v", request.ModifiedBefore.Format(time.RFC3339)))
	}
	if request.PageSize != nil {
		queryParams.Add("page_size", fmt.Sprintf("%v", *request.PageSize))
	}
	if request.RemoteId != nil {
		queryParams.Add("remote_id", fmt.Sprintf("%v", *request.RemoteId))
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	var response *crm.PaginatedAssociationList
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodGet,
		request,
		&response,
		false,
		c.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Creates an Association between `source_object_id` and `target_object_id` of type `association_type_id`.
func (c *client) CustomObjectClassesCustomObjectsAssociationsUpdate(ctx context.Context, associationTypeId string, sourceClassId string, sourceObjectId string, targetClassId string, targetObjectId string, request *crm.CustomObjectClassesCustomObjectsAssociationsUpdateRequest) (*crm.Association, error) {
	baseURL := "https://api.merge.dev"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"api/crm/v1/custom-object-classes/%v/custom-objects/%v/associations/%v/%v/%v", associationTypeId, sourceClassId, sourceObjectId, targetClassId, targetObjectId)

	queryParams := make(url.Values)
	if request.IsDebugMode != nil {
		queryParams.Add("is_debug_mode", fmt.Sprintf("%v", *request.IsDebugMode))
	}
	if request.RunAsync != nil {
		queryParams.Add("run_async", fmt.Sprintf("%v", *request.RunAsync))
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	var response *crm.Association
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodPut,
		request,
		&response,
		false,
		c.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}
